[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 42 length 143
last 72 length 265
last 128 length 497
CNF 42 vars 143 clauses
last 67 length 250
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 72 vars 265 clauses
last 92 length 338
CNF 67 vars 250 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 393, clauses: 1370
CNF 92 vars 338 clauses
last 393 length 1370
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 589, clauses: 2047
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 438, clauses: 1595
CNF 393 vars 1370 clauses
last 297 length 1216
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 796, clauses: 2956
last 231 length 958
last 161 length 658
last 210 length 848
last 589 length 2047
last 1172 length 4842
last 1244 length 5286
last 1172 length 4842
last 1244 length 5286
last 438 length 1595
last 796 length 2956
CNF 297 vars 1216 clauses
CNF 231 vars 958 clauses
CNF 161 vars 658 clauses
CNF 210 vars 848 clauses
CNF 589 vars 2047 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 393, clauses: 1370, status: Unsatisfied, time: 0.179490098s
CNF 1172 vars 4842 clauses
CNF 1244 vars 5286 clauses
CNF 1172 vars 4842 clauses
CNF 1244 vars 5286 clauses
CNF 438 vars 1595 clauses
CNF 796 vars 2956 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 589, clauses: 2047, status: Unsatisfied, time: 0.279135151s
last 1244 length 5286
last 1172 length 4842
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 934, clauses: 3391
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6847, clauses: 28069
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 438, clauses: 1595, status: Unsatisfied, time: 0.451902041s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 796, clauses: 2956, status: Unsatisfied, time: 0.465385709s
CNF 1244 vars 5286 clauses
**************************************************CNF 1172 vars 4842 clauses
last 934 length 3391

last 6847 length 28069
summary
**************************************************
SRS with 2 strict rules and 1 weak rules on 3 letters       split
2 sub-proofs
  1 SRS with CNF 934 vars 3391 clauses
1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 18 weak rules on 9 letters       weights
  SRS with 0 strict rules and 11 weak rules on 8 letters       no strict rules

  2 SRS with 1 strict rules and 1 weak rules on 3 letters       split
  2 sub-proofs
    1 SRS with 1 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 9 strict rules and 9 weak rules on 9 letters       weights
    SRS with 2 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 strict rules and 9 weak rules on 7 letters       weights
    SRS with 0 strict rules and 3 weak rules on 5 letters       no strict rules

    2 SRS with 0 strict rules and 1 weak rules on 2 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b, a] {- Input 0 -}
  [a, a] -> [a, b, a] {- Input 1 -}
  [b] ->= [b, c] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, b] ->= [b, a, b, a] {- Input 0 -}
  [a, a] -> [a, b, a] {- Input 1 -}
  [b] ->= [b, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, b], [b, a]] ->= [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, c]] ->= [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, a]] ->= [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, c]] ->= [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, b]] ->= [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, c]] ->= [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, c]] -> [ [a, a] , [a, b] , [b, a] , [a, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, a]] -> [ [c, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, a], [a, a], [a, c]] -> [ [c, a] , [a, b] , [b, a] , [a, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a], [a, a], [a, b]] -> [ [c, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, a], [a, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, c]] -> [ [b, a] , [a, b] , [b, a] , [a, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a]] ->= [ [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, b]] ->= [ [b, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 2/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, a], [a, c], [c, b], [b, c]] ->= [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, c]] ->= [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, b], [b, a]] ->= [ [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, b]] ->= [ [b, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b, a] {- Input 0 -}
  [b] ->= [b, c] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b, a] {- Input 0 -}
  [b] ->= [b, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, b], [b, a]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, c]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, b]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, a]] -> [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, c]] -> [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, b]] -> [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, a]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, c]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, b]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a]] ->= [ [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, b]] ->= [ [b, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 2/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, a], [a, c], [c, b], [b, c]] -> [ [c, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, c]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, b], [b, a]] ->= [ [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, b]] ->= [ [b, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, a]] ->= [ [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, b]] ->= [ [b, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, b], 0/1)
  ([b, a], 1/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, c]] ->= [ [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b] ->= [b, c] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: (2/1,3)\Split[(1/2,3)\TileAllAll{2}(9/18,9)\Weight(0/11,8)[],(1/1,3)\Split[(1/1,3)\TileAllAll{2}(9/9,9)\Weight(2/9,8)\Matrix{\Natural}{2}(0/9,7)\Weight(0/3,5)[],(0/1,2)[]]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_PoolCNF 6847 vars 28069 clauses
 (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.637378131000
  min duration 0.368281603000
  total durat. 1.005659734000
**************************************************
F                      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F                      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F                      = 1 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size
F                      = 2 , total_length = 4} , self = 103 , parent = Nothing , duration = 0.368281603000
F                      , status = Fail , start = 2025-09-04 07:31:44.492890261 UTC , finish =
F                      2025-09-04 07:31:44.861171864 UTC , thread_cap_info = ("ThreadId 105",
F                      0, False)}
F                      
| F                    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F                    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F                    = 1 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size
| F                    = 3 , total_length = 5} , self = 115 , parent = Nothing , duration = 0.637378131000
| F                    , status = Fail , start = 2025-09-04 07:31:44.505505867 UTC , finish =
| F                    2025-09-04 07:31:45.142883998 UTC , thread_cap_info = ("ThreadId 137",
| F                    0, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | F                  = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | F                  = 15} , self = 100 , parent = Nothing , duration = 0.247151320000 , status
| | F                  = Fail , start = 2025-09-04 07:31:44.513480138 UTC , finish = 2025-09-04
| | F                  07:31:44.760631458 UTC , thread_cap_info = ("ThreadId 141", 3, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F                = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F                = 15} , self = 97 , parent = Nothing , duration = 0.246888470000 , status
| | | F                = Fail , start = 2025-09-04 07:31:44.513482133 UTC , finish = 2025-09-04
| | | F                07:31:44.760370603 UTC , thread_cap_info = ("ThreadId 142", 3, False)}
| | | F                
| | | | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 2 ,
| | | | F              num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F              = 15} , self = 98 , parent = Nothing , duration = 0.239378490000 , status
| | | | F              = Fail , start = 2025-09-04 07:31:44.521022038 UTC , finish = 2025-09-04
| | | | F              07:31:44.760400528 UTC , thread_cap_info = ("ThreadId 126", 1, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | | F            = 1 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F            = 10} , self = 101 , parent = Nothing , duration = 0.216101691000 , status
| | | | | F            = Fail , start = 2025-09-04 07:31:44.550189174 UTC , finish = 2025-09-04
| | | | | F            07:31:44.766290865 UTC , thread_cap_info = ("ThreadId 167", 3, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | | | F          = 1 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | F          = 10} , self = 102 , parent = Nothing , duration = 0.294743415000 , status
| | | | | | F          = Fail , start = 2025-09-04 07:31:44.550812114 UTC , finish = 2025-09-04
| | | | | | F          07:31:44.845555529 UTC , thread_cap_info = ("ThreadId 168", 3, False)}
| | | | | | F          
| | | | | | | S        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | S        = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | S        = 63} , self = 110 , parent = Nothing , duration = 0.511211894000 , status
| | | | | | | S        = Success , start = 2025-09-04 07:31:44.556290359 UTC , finish = 2025-09-04
| | | | | | | S        07:31:45.067502253 UTC , thread_cap_info = ("ThreadId 175", 2, False)}
| | | | | | | S        
| | | | | | | | S      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | S      = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | S      = 63} , self = 107 , parent = Nothing , duration = 0.484165782000 , status
| | | | | | | | S      = Success , start = 2025-09-04 07:31:44.556294755 UTC , finish = 2025-09-04
| | | | | | | | S      07:31:45.040460537 UTC , thread_cap_info = ("ThreadId 177", 2, False)}
| | | | | | | | S      
| | | | | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | S    = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | S    = 63} , self = 105 , parent = Nothing , duration = 0.466748206000 , status
| | | | | | | | | S    = Success , start = 2025-09-04 07:31:44.563182379 UTC , finish = 2025-09-04
| | | | | | | | | S    07:31:45.029930585 UTC , thread_cap_info = ("ThreadId 182", 3, False)}
| | | | | | | | | S    
| | | | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | | E  = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | E  = 63} , self = 112 , parent = Nothing , duration = 0.519436125000 , status
| | | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-04 07:31:44.563185728 UTC ,
| | | | | | | | | | E  finish = 2025-09-04 07:31:45.082621853 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | E  184", 3, False)}
| | | | | | | | | | E  
| | | F | | | | | | |  
| | |   F | | | | | |  
| | F     | | | | | |  
| |       F | | | | |  
| | S       | | | | |  Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | S       | | | | |  , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | S       | | | | |  , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | S       | | | | |  = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | S       | | | | |  , cpf = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | S       | | | | |  = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | S       | | | | |  = 63} , self = 104 , parent = Nothing , duration = 0.183961695000 , status
| | S       | | | | |  = Success , start = 2025-09-04 07:31:44.819037232 UTC , finish = 2025-09-04
| | S       | | | | |  07:31:45.002998927 UTC , thread_cap_info = ("ThreadId 208", 2, False)}
| | S       | | | | |  
| | |       F | | | |  
F | |         | | | |  
  | S         | | | |  
  |           | | S |  
  |           | S   |  
  |           S     |  
  |                 E  
  F                    
