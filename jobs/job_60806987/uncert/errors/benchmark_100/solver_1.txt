**************************************************
summary
**************************************************
SRS with 51 strict rules and 9 weak rules on 6 letters       strictify
SRS with 60 rules on 6 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 1 and with 641 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 1, 2] -> [0, 1, 3, 4, 2, 2, 4, 2, 2, 2] {- Input 0 -}
  [4, 0, 1, 4] -> [4, 2, 3, 1, 1, 3, 3, 3, 2, 4] {- Input 1 -}
  [3, 5, 0, 4, 5] -> [0, 3, 3, 3, 1, 3, 1, 1, 3, 4] {- Input 2 -}
  [0, 2, 0, 4, 0, 3] -> [0, 2, 2, 3, 4, 2, 2, 3, 1, 1] {- Input 3 -}
  [0, 4, 0, 1, 1, 2] -> [0, 0, 4, 2, 4, 2, 4, 2, 3, 2] {- Input 4 -}
  [0, 4, 3, 2, 3, 5] -> [5, 5, 0, 5, 2, 1, 2, 2, 4, 5] {- Input 5 -}
  [0, 4, 4, 4, 0, 4] -> [0, 5, 4, 5, 3, 4, 1, 4, 2, 4] {- Input 6 -}
  [1, 1, 5, 0, 1, 2] -> [2, 2, 2, 2, 5, 0, 5, 4, 5, 2] {- Input 7 -}
  [1, 2, 3, 2, 0, 3] -> [2, 4, 3, 1, 3, 3, 3, 1, 3, 1] {- Input 8 -}
  [2, 0, 3, 0, 2, 3] -> [2, 4, 1, 0, 0, 0, 5, 0, 2, 3] {- Input 9 -}
  [2, 1, 4, 4, 3, 2] -> [2, 2, 3, 3, 4, 1, 4, 2, 3, 2] {- Input 10 -}
  [3, 3, 0, 3, 5, 4] -> [3, 3, 4, 2, 2, 2, 4, 1, 5, 4] {- Input 11 -}
  [3, 3, 5, 4, 3, 1] -> [3, 2, 4, 2, 1, 5, 1, 3, 1, 3] {- Input 12 -}
  [3, 5, 1, 5, 1, 2] -> [3, 4, 2, 2, 1, 1, 4, 3, 2, 2] {- Input 13 -}
  [3, 5, 3, 1, 1, 0] -> [4, 1, 4, 2, 1, 2, 3, 1, 3, 0] {- Input 14 -}
  [4, 1, 0, 4, 4, 2] -> [4, 2, 3, 2, 3, 3, 1, 4, 2, 2] {- Input 15 -}
  [4, 3, 2, 0, 3, 3] -> [1, 5, 3, 4, 1, 3, 1, 1, 3, 1] {- Input 16 -}
  [4, 5, 3, 2, 0, 2] -> [4, 2, 1, 2, 1, 2, 5, 1, 3, 1] {- Input 17 -}
  [0, 1, 1, 2, 0, 3, 2] -> [0, 2, 2, 0, 5, 2, 4, 1, 3, 2] {- Input 18 -}
  [0, 3, 0, 2, 5, 1, 3] -> [5, 5, 0, 5, 4, 1, 1, 3, 2, 3] {- Input 19 -}
  [0, 3, 0, 3, 0, 5, 4] -> [0, 2, 0, 0, 5, 3, 3, 3, 3, 4] {- Input 20 -}
  [0, 3, 5, 1, 1, 3, 0] -> [5, 5, 0, 5, 5, 1, 4, 1, 1, 0] {- Input 21 -}
  [0, 4, 0, 1, 2, 5, 3] -> [0, 5, 2, 1, 3, 3, 3, 3, 4, 1] {- Input 22 -}
  [0, 5, 0, 4, 3, 4, 5] -> [0, 5, 2, 0, 5, 4, 2, 2, 3, 5] {- Input 23 -}
  [1, 2, 0, 3, 2, 5, 4] -> [1, 1, 5, 5, 0, 0, 2, 1, 2, 4] {- Input 24 -}
  [1, 3, 0, 0, 1, 1, 5] -> [1, 1, 4, 2, 2, 5, 5, 2, 5, 5] {- Input 25 -}
  [1, 3, 4, 0, 4, 0, 2] -> [3, 4, 4, 1, 4, 2, 5, 2, 2, 2] {- Input 26 -}
  [1, 5, 1, 5, 2, 3, 2] -> [5, 2, 0, 2, 3, 3, 1, 1, 1, 2] {- Input 27 -}
  [1, 5, 2, 3, 0, 5, 0] -> [1, 5, 2, 4, 2, 4, 2, 1, 3, 0] {- Input 28 -}
  [1, 5, 3, 2, 5, 3, 5] -> [2, 4, 4, 3, 5, 2, 2, 0, 0, 5] {- Input 29 -}
  [1, 5, 4, 4, 5, 3, 2] -> [1, 2, 0, 5, 2, 2, 2, 0, 5, 2] {- Input 30 -}
  [2, 0, 3, 0, 5, 4, 4] -> [2, 5, 2, 2, 1, 1, 0, 3, 3, 1] {- Input 31 -}
  [2, 0, 3, 4, 4, 4, 4] -> [5, 2, 2, 2, 3, 1, 3, 4, 3, 4] {- Input 32 -}
  [2, 3, 0, 2, 0, 3, 4] -> [2, 3, 5, 0, 0, 0, 1, 4, 2, 1] {- Input 33 -}
  [2, 3, 5, 1, 0, 0, 5] -> [1, 2, 0, 0, 0, 5, 0, 5, 2, 2] {- Input 34 -}
  [3, 0, 2, 3, 0, 5, 4] -> [2, 2, 3, 0, 0, 0, 5, 2, 2, 4] {- Input 35 -}
  [3, 0, 3, 2, 0, 1, 2] -> [1, 3, 5, 2, 4, 3, 4, 2, 1, 2] {- Input 36 -}
  [3, 0, 4, 4, 4, 0, 2] -> [3, 1, 3, 3, 1, 1, 2, 2, 2, 2] {- Input 37 -}
  [3, 2, 0, 1, 3, 3, 0] -> [2, 2, 5, 0, 2, 4, 2, 1, 2, 0] {- Input 38 -}
  [3, 4, 3, 0, 4, 4, 0] -> [3, 4, 2, 2, 1, 2, 0, 3, 4, 0] {- Input 39 -}
  [3, 4, 4, 4, 4, 3, 5] -> [3, 3, 4, 5, 1, 4, 2, 1, 1, 5] {- Input 40 -}
  [3, 5, 0, 0, 3, 2, 4] -> [2, 1, 0, 0, 0, 5, 5, 5, 3, 4] {- Input 41 -}
  [3, 5, 4, 0, 3, 3, 4] -> [1, 3, 1, 3, 3, 2, 2, 4, 2, 1] {- Input 42 -}
  [4, 2, 0, 1, 1, 3, 0] -> [4, 2, 5, 2, 2, 3, 1, 4, 2, 0] {- Input 43 -}
  [4, 4, 4, 5, 3, 4, 0] -> [1, 5, 2, 4, 2, 4, 2, 4, 0, 0] {- Input 44 -}
  [4, 4, 5, 5, 3, 2, 4] -> [5, 2, 1, 4, 5, 4, 2, 1, 2, 1] {- Input 45 -}
  [4, 5, 0, 3, 0, 3, 0] -> [4, 1, 4, 1, 0, 0, 0, 2, 5, 1] {- Input 46 -}
  [4, 5, 0, 4, 3, 0, 0] -> [4, 2, 2, 1, 1, 3, 3, 0, 1, 0] {- Input 47 -}
  [5, 3, 1, 1, 3, 5, 3] -> [0, 0, 5, 5, 4, 2, 4, 2, 4, 1] {- Input 48 -}
  [5, 3, 2, 2, 0, 1, 3] -> [0, 0, 5, 5, 5, 5, 3, 3, 3, 1] {- Input 49 -}
  [5, 4, 1, 0, 4, 2, 0] -> [5, 1, 0, 0, 0, 1, 4, 2, 4, 1] {- Input 50 -}
  [3, 0, 5, 4] ->= [5, 2, 2, 2, 5, 2, 2, 0, 5, 4] {- Input 51 -}
  [3, 4, 5, 4] ->= [3, 4, 2, 2, 3, 3, 4, 2, 2, 1] {- Input 52 -}
  [0, 3, 4, 4, 5] ->= [0, 2, 2, 2, 1, 2, 4, 2, 4, 5] {- Input 53 -}
  [3, 2, 3, 0, 3] ->= [3, 4, 3, 3, 4, 2, 1, 1, 3, 1] {- Input 54 -}
  [4, 4, 1, 2, 0, 4] ->= [5, 5, 4, 3, 4, 2, 3, 1, 3, 1] {- Input 55 -}
  [5, 1, 4, 1, 5, 2] ->= [5, 2, 2, 4, 2, 2, 1, 0, 5, 2] {- Input 56 -}
  [1, 1, 3, 5, 4, 5, 0] ->= [3, 2, 2, 4, 2, 1, 4, 1, 0, 0] {- Input 57 -}
  [3, 2, 5, 4, 4, 5, 0] ->= [3, 2, 0, 0, 0, 0, 5, 3, 4, 0] {- Input 58 -}
  [5, 5, 3, 5, 3, 4, 5] ->= [5, 0, 1, 4, 2, 4, 5, 1, 4, 5] {- Input 59 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [0, 1, 1, 2] -> [0, 1, 3, 4, 2, 2, 4, 2, 2, 2] {- Input 0 -}
  [4, 0, 1, 4] -> [4, 2, 3, 1, 1, 3, 3, 3, 2, 4] {- Input 1 -}
  [3, 5, 0, 4, 5] -> [0, 3, 3, 3, 1, 3, 1, 1, 3, 4] {- Input 2 -}
  [0, 2, 0, 4, 0, 3] -> [0, 2, 2, 3, 4, 2, 2, 3, 1, 1] {- Input 3 -}
  [0, 4, 0, 1, 1, 2] -> [0, 0, 4, 2, 4, 2, 4, 2, 3, 2] {- Input 4 -}
  [0, 4, 3, 2, 3, 5] -> [5, 5, 0, 5, 2, 1, 2, 2, 4, 5] {- Input 5 -}
  [0, 4, 4, 4, 0, 4] -> [0, 5, 4, 5, 3, 4, 1, 4, 2, 4] {- Input 6 -}
  [1, 1, 5, 0, 1, 2] -> [2, 2, 2, 2, 5, 0, 5, 4, 5, 2] {- Input 7 -}
  [1, 2, 3, 2, 0, 3] -> [2, 4, 3, 1, 3, 3, 3, 1, 3, 1] {- Input 8 -}
  [2, 0, 3, 0, 2, 3] -> [2, 4, 1, 0, 0, 0, 5, 0, 2, 3] {- Input 9 -}
  [2, 1, 4, 4, 3, 2] -> [2, 2, 3, 3, 4, 1, 4, 2, 3, 2] {- Input 10 -}
  [3, 3, 0, 3, 5, 4] -> [3, 3, 4, 2, 2, 2, 4, 1, 5, 4] {- Input 11 -}
  [3, 3, 5, 4, 3, 1] -> [3, 2, 4, 2, 1, 5, 1, 3, 1, 3] {- Input 12 -}
  [3, 5, 1, 5, 1, 2] -> [3, 4, 2, 2, 1, 1, 4, 3, 2, 2] {- Input 13 -}
  [3, 5, 3, 1, 1, 0] -> [4, 1, 4, 2, 1, 2, 3, 1, 3, 0] {- Input 14 -}
  [4, 1, 0, 4, 4, 2] -> [4, 2, 3, 2, 3, 3, 1, 4, 2, 2] {- Input 15 -}
  [4, 3, 2, 0, 3, 3] -> [1, 5, 3, 4, 1, 3, 1, 1, 3, 1] {- Input 16 -}
  [4, 5, 3, 2, 0, 2] -> [4, 2, 1, 2, 1, 2, 5, 1, 3, 1] {- Input 17 -}
  [0, 1, 1, 2, 0, 3, 2] -> [0, 2, 2, 0, 5, 2, 4, 1, 3, 2] {- Input 18 -}
  [0, 3, 0, 2, 5, 1, 3] -> [5, 5, 0, 5, 4, 1, 1, 3, 2, 3] {- Input 19 -}
  [0, 3, 0, 3, 0, 5, 4] -> [0, 2, 0, 0, 5, 3, 3, 3, 3, 4] {- Input 20 -}
  [0, 3, 5, 1, 1, 3, 0] -> [5, 5, 0, 5, 5, 1, 4, 1, 1, 0] {- Input 21 -}
  [0, 4, 0, 1, 2, 5, 3] -> [0, 5, 2, 1, 3, 3, 3, 3, 4, 1] {- Input 22 -}
  [0, 5, 0, 4, 3, 4, 5] -> [0, 5, 2, 0, 5, 4, 2, 2, 3, 5] {- Input 23 -}
  [1, 2, 0, 3, 2, 5, 4] -> [1, 1, 5, 5, 0, 0, 2, 1, 2, 4] {- Input 24 -}
  [1, 3, 0, 0, 1, 1, 5] -> [1, 1, 4, 2, 2, 5, 5, 2, 5, 5] {- Input 25 -}
  [1, 3, 4, 0, 4, 0, 2] -> [3, 4, 4, 1, 4, 2, 5, 2, 2, 2] {- Input 26 -}
  [1, 5, 1, 5, 2, 3, 2] -> [5, 2, 0, 2, 3, 3, 1, 1, 1, 2] {- Input 27 -}
  [1, 5, 2, 3, 0, 5, 0] -> [1, 5, 2, 4, 2, 4, 2, 1, 3, 0] {- Input 28 -}
  [1, 5, 3, 2, 5, 3, 5] -> [2, 4, 4, 3, 5, 2, 2, 0, 0, 5] {- Input 29 -}
  [1, 5, 4, 4, 5, 3, 2] -> [1, 2, 0, 5, 2, 2, 2, 0, 5, 2] {- Input 30 -}
  [2, 0, 3, 0, 5, 4, 4] -> [2, 5, 2, 2, 1, 1, 0, 3, 3, 1] {- Input 31 -}
  [2, 0, 3, 4, 4, 4, 4] -> [5, 2, 2, 2, 3, 1, 3, 4, 3, 4] {- Input 32 -}
  [2, 3, 0, 2, 0, 3, 4] -> [2, 3, 5, 0, 0, 0, 1, 4, 2, 1] {- Input 33 -}
  [2, 3, 5, 1, 0, 0, 5] -> [1, 2, 0, 0, 0, 5, 0, 5, 2, 2] {- Input 34 -}
  [3, 0, 2, 3, 0, 5, 4] -> [2, 2, 3, 0, 0, 0, 5, 2, 2, 4] {- Input 35 -}
  [3, 0, 3, 2, 0, 1, 2] -> [1, 3, 5, 2, 4, 3, 4, 2, 1, 2] {- Input 36 -}
  [3, 0, 4, 4, 4, 0, 2] -> [3, 1, 3, 3, 1, 1, 2, 2, 2, 2] {- Input 37 -}
  [3, 2, 0, 1, 3, 3, 0] -> [2, 2, 5, 0, 2, 4, 2, 1, 2, 0] {- Input 38 -}
  [3, 4, 3, 0, 4, 4, 0] -> [3, 4, 2, 2, 1, 2, 0, 3, 4, 0] {- Input 39 -}
  [3, 4, 4, 4, 4, 3, 5] -> [3, 3, 4, 5, 1, 4, 2, 1, 1, 5] {- Input 40 -}
  [3, 5, 0, 0, 3, 2, 4] -> [2, 1, 0, 0, 0, 5, 5, 5, 3, 4] {- Input 41 -}
  [3, 5, 4, 0, 3, 3, 4] -> [1, 3, 1, 3, 3, 2, 2, 4, 2, 1] {- Input 42 -}
  [4, 2, 0, 1, 1, 3, 0] -> [4, 2, 5, 2, 2, 3, 1, 4, 2, 0] {- Input 43 -}
  [4, 4, 4, 5, 3, 4, 0] -> [1, 5, 2, 4, 2, 4, 2, 4, 0, 0] {- Input 44 -}
  [4, 4, 5, 5, 3, 2, 4] -> [5, 2, 1, 4, 5, 4, 2, 1, 2, 1] {- Input 45 -}
  [4, 5, 0, 3, 0, 3, 0] -> [4, 1, 4, 1, 0, 0, 0, 2, 5, 1] {- Input 46 -}
  [4, 5, 0, 4, 3, 0, 0] -> [4, 2, 2, 1, 1, 3, 3, 0, 1, 0] {- Input 47 -}
  [5, 3, 1, 1, 3, 5, 3] -> [0, 0, 5, 5, 4, 2, 4, 2, 4, 1] {- Input 48 -}
  [5, 3, 2, 2, 0, 1, 3] -> [0, 0, 5, 5, 5, 5, 3, 3, 3, 1] {- Input 49 -}
  [5, 4, 1, 0, 4, 2, 0] -> [5, 1, 0, 0, 0, 1, 4, 2, 4, 1] {- Input 50 -}
  [3, 0, 5, 4] -> [5, 2, 2, 2, 5, 2, 2, 0, 5, 4] {- Strictified (Input 51) -}
  [3, 4, 5, 4] -> [3, 4, 2, 2, 3, 3, 4, 2, 2, 1] {- Strictified (Input 52) -}
  [0, 3, 4, 4, 5] -> [0, 2, 2, 2, 1, 2, 4, 2, 4, 5] {- Strictified (Input 53) -}
  [3, 2, 3, 0, 3] -> [3, 4, 3, 3, 4, 2, 1, 1, 3, 1] {- Strictified (Input 54) -}
  [4, 4, 1, 2, 0, 4] -> [ 5 , 5 , 4 , 3 , 4 , 2 , 3 , 1 , 3 , 1 ] {- Strictified (Input 55) -}
  [5, 1, 4, 1, 5, 2] -> [ 5 , 2 , 2 , 4 , 2 , 2 , 1 , 0 , 5 , 2 ] {- Strictified (Input 56) -}
  [1, 1, 3, 5, 4, 5, 0] -> [ 3 , 2 , 2 , 4 , 2 , 1 , 4 , 1 , 0 , 0 ] {- Strictified (Input 57) -}
  [3, 2, 5, 4, 4, 5, 0] -> [ 3 , 2 , 0 , 0 , 0 , 0 , 5 , 3 , 4 , 0 ] {- Strictified (Input 58) -}
  [5, 5, 3, 5, 3, 4, 5] -> [ 5 , 0 , 1 , 4 , 2 , 4 , 5 , 1 , 4 , 5 ] {- Strictified (Input 59) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, -1), (2, -1), (3, -1), (4, -1), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1), (10, -1), (11, -1), (12, -1), (13, -1), (14, -1), (15, -1), (16, -1), (17, -1), (18, -1), (19, -1), (20, -1), (21, -1), (22, -1), (23, -1), (24, -1), (25, -1), (26, -1), (27, -1), (28, -1), (29, -1), (30, -1), (31, -1), (32, -1), (33, -1), (34, -1), (35, -1), (36, -1), (37, -1), (38, -1), (39, -1), (40, -1), (41, -1), (42, -1), (43, -1), (44, -1), (45, -1), (46, -1), (47, -1), (48, -1), (49, -1), (50, -1), (51, 1), (52, -1), (53, -1), (54, -1), (55, -1), (56, -1), (57, -1), (58, -1), (59, -1)], epsilons = [((0, 2, 7), (0, 26, 0)), ((0, 11, 7), (0, 30, 0)), ((0, 14, 7), (0, 25, 0)), ((0, 19, 7), (0, 54, 0)), ((0, 23, 7), (0, 34, 0)), ((0, 28, 7), (0, 25, 0)), ((0, 38, 7), (0, 24, 0)), ((0, 40, 7), (0, 7, 0)), ((0, 43, 7), (0, 43, 0)), ((0, 2, 8), (0, 39, 0)), ((0, 2, 8), (0, 40, 0)), ((0, 2, 8), (0, 52, 0)), ((0, 3, 8), (0, 7, 0)), ((0, 3, 8), (0, 57, 0)), ((0, 4, 8), (0, 38, 0)), ((0, 4, 8), (0, 54, 0)), ((0, 4, 8), (0, 58, 0)), ((0, 5, 8), (0, 17, 0)), ((0, 5, 8), (0, 46, 0)), ((0, 5, 8), (0, 47, 0)), ((0, 9, 8), (0, 33, 0)), ((0, 9, 8), (0, 34, 0)), ((0, 10, 8), (0, 38, 0)), ((0, 10, 8), (0, 54, 0)), ((0, 10, 8), (0, 58, 0)), ((0, 11, 8), (0, 50, 0)), ((0, 12, 8), (0, 25, 0)), ((0, 12, 8), (0, 26, 0)), ((0, 14, 8), (0, 35, 0)), ((0, 14, 8), (0, 36, 0)), ((0, 14, 8), (0, 37, 0)), ((0, 14, 8), (0, 51, 0)), ((0, 14, 8), (1, 51, 0)), ((0, 18, 8), (0, 38, 0)), ((0, 18, 8), (0, 54, 0)), ((0, 18, 8), (0, 58, 0)), ((0, 19, 8), (0, 33, 0)), ((0, 19, 8), (0, 34, 0)), ((0, 20, 8), (0, 39, 0)), ((0, 20, 8), (0, 40, 0)), ((0, 20, 8), (0, 52, 0)), ((0, 22, 8), (0, 15, 0)), ((0, 23, 8), (0, 2, 0)), ((0, 23, 8), (0, 13, 0)), ((0, 23, 8), (0, 14, 0)), ((0, 23, 8), (0, 41, 0)), ((0, 23, 8), (0, 42, 0)), ((0, 25, 8), (0, 59, 0)), ((0, 27, 8), (0, 8, 0)), ((0, 27, 8), (0, 24, 0)), ((0, 28, 8), (0, 35, 0)), ((0, 28, 8), (0, 36, 0)), ((0, 28, 8), (0, 37, 0)), ((0, 28, 8), (0, 51, 0)), ((0, 28, 8), (1, 51, 0)), ((0, 29, 8), (0, 23, 0)), ((0, 32, 8), (0, 39, 0)), ((0, 32, 8), (0, 40, 0)), ((0, 32, 8), (0, 52, 0)), ((0, 33, 8), (0, 10, 0)), ((0, 36, 8), (0, 8, 0)), ((0, 36, 8), (0, 24, 0)), ((0, 38, 8), (0, 9, 0)), ((0, 38, 8), (0, 31, 0)), ((0, 38, 8), (0, 32, 0)), ((0, 39, 8), (0, 1, 0)), ((0, 40, 8), (0, 27, 0)), ((0, 40, 8), (0, 28, 0)), ((0, 40, 8), (0, 29, 0)), ((0, 40, 8), (0, 30, 0)), ((0, 41, 8), (0, 39, 0)), ((0, 41, 8), (0, 40, 0)), ((0, 41, 8), (0, 52, 0)), ((0, 42, 8), (0, 10, 0)), ((0, 43, 8), (0, 9, 0)), ((0, 43, 8), (0, 31, 0)), ((0, 43, 8), (0, 32, 0)), ((0, 45, 8), (0, 10, 0)), ((0, 46, 8), (0, 56, 0)), ((0, 48, 8), (0, 15, 0)), ((0, 50, 8), (0, 15, 0)), ((0, 51, 8), (0, 50, 0)), ((0, 52, 8), (0, 10, 0)), ((0, 53, 8), (0, 17, 0)), ((0, 53, 8), (0, 46, 0)), ((0, 53, 8), (0, 47, 0)), ((0, 58, 8), (0, 1, 0)), ((0, 59, 8), (0, 17, 0)), ((0, 59, 8), (0, 46, 0)), ((0, 59, 8), (0, 47, 0)), ((0, 0, 9), (0, 9, 0)), ((0, 0, 9), (0, 10, 0)), ((0, 0, 9), (0, 31, 0)), ((0, 0, 9), (0, 32, 0)), ((0, 0, 9), (0, 33, 0)), ((0, 0, 9), (0, 34, 0)), ((0, 1, 9), (0, 1, 0)), ((0, 1, 9), (0, 15, 0)), ((0, 1, 9), (0, 16, 0)), ((0, 1, 9), (0, 17, 0)), ((0, 1, 9), (0, 43, 0)), ((0, 1, 9), (0, 44, 0)), ((0, 1, 9), (0, 45, 0)), ((0, 1, 9), (0, 46, 0)), ((0, 1, 9), (0, 47, 0)), ((0, 1, 9), (0, 55, 0)), ((0, 2, 9), (0, 1, 0)), ((0, 2, 9), (0, 15, 0)), ((0, 2, 9), (0, 16, 0)), ((0, 2, 9), (0, 17, 0)), ((0, 2, 9), (0, 43, 0)), ((0, 2, 9), (0, 44, 0)), ((0, 2, 9), (0, 45, 0)), ((0, 2, 9), (0, 46, 0)), ((0, 2, 9), (0, 47, 0)), ((0, 2, 9), (0, 55, 0)), ((0, 3, 9), (0, 7, 0)), ((0, 3, 9), (0, 8, 0)), ((0, 3, 9), (0, 24, 0)), ((0, 3, 9), (0, 25, 0)), ((0, 3, 9), (0, 26, 0)), ((0, 3, 9), (0, 27, 0)), ((0, 3, 9), (0, 28, 0)), ((0, 3, 9), (0, 29, 0)), ((0, 3, 9), (0, 30, 0)), ((0, 3, 9), (0, 57, 0)), ((0, 4, 9), (0, 9, 0)), ((0, 4, 9), (0, 10, 0)), ((0, 4, 9), (0, 31, 0)), ((0, 4, 9), (0, 32, 0)), ((0, 4, 9), (0, 33, 0)), ((0, 4, 9), (0, 34, 0)), ((0, 5, 9), (0, 48, 0)), ((0, 5, 9), (0, 49, 0)), ((0, 5, 9), (0, 50, 0)), ((0, 5, 9), (0, 56, 0)), ((0, 5, 9), (0, 59, 0)), ((0, 6, 9), (0, 1, 0)), ((0, 6, 9), (0, 15, 0)), ((0, 6, 9), (0, 16, 0)), ((0, 6, 9), (0, 17, 0)), ((0, 6, 9), (0, 43, 0)), ((0, 6, 9), (0, 44, 0)), ((0, 6, 9), (0, 45, 0)), ((0, 6, 9), (0, 46, 0)), ((0, 6, 9), (0, 47, 0)), ((0, 6, 9), (0, 55, 0)), ((0, 7, 9), (0, 9, 0)), ((0, 7, 9), (0, 10, 0)), ((0, 7, 9), (0, 31, 0)), ((0, 7, 9), (0, 32, 0)), ((0, 7, 9), (0, 33, 0)), ((0, 7, 9), (0, 34, 0)), ((0, 8, 9), (0, 7, 0)), ((0, 8, 9), (0, 8, 0)), ((0, 8, 9), (0, 24, 0)), ((0, 8, 9), (0, 25, 0)), ((0, 8, 9), (0, 26, 0)), ((0, 8, 9), (0, 27, 0)), ((0, 8, 9), (0, 28, 0)), ((0, 8, 9), (0, 29, 0)), ((0, 8, 9), (0, 30, 0)), ((0, 8, 9), (0, 57, 0)), ((0, 9, 9), (0, 2, 0)), ((0, 9, 9), (0, 11, 0)), ((0, 9, 9), (0, 12, 0)), ((0, 9, 9), (0, 13, 0)), ((0, 9, 9), (0, 14, 0)), ((0, 9, 9), (0, 35, 0)), ((0, 9, 9), (0, 36, 0)), ((0, 9, 9), (0, 37, 0)), ((0, 9, 9), (0, 38, 0)), ((0, 9, 9), (0, 39, 0)), ((0, 9, 9), (0, 40, 0)), ((0, 9, 9), (0, 41, 0)), ((0, 9, 9), (0, 42, 0)), ((0, 9, 9), (0, 51, 0)), ((0, 9, 9), (0, 52, 0)), ((0, 9, 9), (0, 54, 0)), ((0, 9, 9), (0, 58, 0)), ((0, 10, 9), (0, 9, 0)), ((0, 10, 9), (0, 10, 0)), ((0, 10, 9), (0, 31, 0)), ((0, 10, 9), (0, 32, 0)), ((0, 10, 9), (0, 33, 0)), ((0, 10, 9), (0, 34, 0)), ((0, 11, 9), (0, 1, 0)), ((0, 11, 9), (0, 15, 0)), ((0, 11, 9), (0, 16, 0)), ((0, 11, 9), (0, 17, 0)), ((0, 11, 9), (0, 43, 0)), ((0, 11, 9), (0, 44, 0)), ((0, 11, 9), (0, 45, 0)), ((0, 11, 9), (0, 46, 0)), ((0, 11, 9), (0, 47, 0)), ((0, 11, 9), (0, 55, 0)), ((0, 12, 9), (0, 2, 0)), ((0, 12, 9), (0, 11, 0)), ((0, 12, 9), (0, 12, 0)), ((0, 12, 9), (0, 13, 0)), ((0, 12, 9), (0, 14, 0)), ((0, 12, 9), (0, 35, 0)), ((0, 12, 9), (0, 36, 0)), ((0, 12, 9), (0, 37, 0)), ((0, 12, 9), (0, 38, 0)), ((0, 12, 9), (0, 39, 0)), ((0, 12, 9), (0, 40, 0)), ((0, 12, 9), (0, 41, 0)), ((0, 12, 9), (0, 42, 0)), ((0, 12, 9), (0, 51, 0)), ((0, 12, 9), (0, 52, 0)), ((0, 12, 9), (0, 54, 0)), ((0, 12, 9), (0, 58, 0)), ((0, 13, 9), (0, 9, 0)), ((0, 13, 9), (0, 10, 0)), ((0, 13, 9), (0, 31, 0)), ((0, 13, 9), (0, 32, 0)), ((0, 13, 9), (0, 33, 0)), ((0, 13, 9), (0, 34, 0)), ((0, 14, 9), (0, 0, 0)), ((0, 14, 9), (0, 3, 0)), ((0, 14, 9), (0, 4, 0)), ((0, 14, 9), (0, 5, 0)), ((0, 14, 9), (0, 6, 0)), ((0, 14, 9), (0, 18, 0)), ((0, 14, 9), (0, 19, 0)), ((0, 14, 9), (0, 20, 0)), ((0, 14, 9), (0, 21, 0)), ((0, 14, 9), (0, 22, 0)), ((0, 14, 9), (0, 23, 0)), ((0, 14, 9), (0, 53, 0)), ((0, 15, 9), (0, 9, 0)), ((0, 15, 9), (0, 10, 0)), ((0, 15, 9), (0, 31, 0)), ((0, 15, 9), (0, 32, 0)), ((0, 15, 9), (0, 33, 0)), ((0, 15, 9), (0, 34, 0)), ((0, 16, 9), (0, 7, 0)), ((0, 16, 9), (0, 8, 0)), ((0, 16, 9), (0, 24, 0)), ((0, 16, 9), (0, 25, 0)), ((0, 16, 9), (0, 26, 0)), ((0, 16, 9), (0, 27, 0)), ((0, 16, 9), (0, 28, 0)), ((0, 16, 9), (0, 29, 0)), ((0, 16, 9), (0, 30, 0)), ((0, 16, 9), (0, 57, 0)), ((0, 17, 9), (0, 7, 0)), ((0, 17, 9), (0, 8, 0)), ((0, 17, 9), (0, 24, 0)), ((0, 17, 9), (0, 25, 0)), ((0, 17, 9), (0, 26, 0)), ((0, 17, 9), (0, 27, 0)), ((0, 17, 9), (0, 28, 0)), ((0, 17, 9), (0, 29, 0)), ((0, 17, 9), (0, 30, 0)), ((0, 17, 9), (0, 57, 0)), ((0, 18, 9), (0, 9, 0)), ((0, 18, 9), (0, 10, 0)), ((0, 18, 9), (0, 31, 0)), ((0, 18, 9), (0, 32, 0)), ((0, 18, 9), (0, 33, 0)), ((0, 18, 9), (0, 34, 0)), ((0, 19, 9), (0, 2, 0)), ((0, 19, 9), (0, 11, 0)), ((0, 19, 9), (0, 12, 0)), ((0, 19, 9), (0, 13, 0)), ((0, 19, 9), (0, 14, 0)), ((0, 19, 9), (0, 35, 0)), ((0, 19, 9), (0, 36, 0)), ((0, 19, 9), (0, 37, 0)), ((0, 19, 9), (0, 38, 0)), ((0, 19, 9), (0, 39, 0)), ((0, 19, 9), (0, 40, 0)), ((0, 19, 9), (0, 41, 0)), ((0, 19, 9), (0, 42, 0)), ((0, 19, 9), (0, 51, 0)), ((0, 19, 9), (0, 52, 0)), ((0, 19, 9), (0, 54, 0)), ((0, 19, 9), (0, 58, 0)), ((0, 20, 9), (0, 1, 0)), ((0, 20, 9), (0, 15, 0)), ((0, 20, 9), (0, 16, 0)), ((0, 20, 9), (0, 17, 0)), ((0, 20, 9), (0, 43, 0)), ((0, 20, 9), (0, 44, 0)), ((0, 20, 9), (0, 45, 0)), ((0, 20, 9), (0, 46, 0)), ((0, 20, 9), (0, 47, 0)), ((0, 20, 9), (0, 55, 0)), ((0, 21, 9), (0, 0, 0)), ((0, 21, 9), (0, 3, 0)), ((0, 21, 9), (0, 4, 0)), ((0, 21, 9), (0, 5, 0)), ((0, 21, 9), (0, 6, 0)), ((0, 21, 9), (0, 18, 0)), ((0, 21, 9), (0, 19, 0)), ((0, 21, 9), (0, 20, 0)), ((0, 21, 9), (0, 21, 0)), ((0, 21, 9), (0, 22, 0)), ((0, 21, 9), (0, 23, 0)), ((0, 21, 9), (0, 53, 0)), ((0, 22, 9), (0, 7, 0)), ((0, 22, 9), (0, 8, 0)), ((0, 22, 9), (0, 24, 0)), ((0, 22, 9), (0, 25, 0)), ((0, 22, 9), (0, 26, 0)), ((0, 22, 9), (0, 27, 0)), ((0, 22, 9), (0, 28, 0)), ((0, 22, 9), (0, 29, 0)), ((0, 22, 9), (0, 30, 0)), ((0, 22, 9), (0, 57, 0)), ((0, 23, 9), (0, 48, 0)), ((0, 23, 9), (0, 49, 0)), ((0, 23, 9), (0, 50, 0)), ((0, 23, 9), (0, 56, 0)), ((0, 23, 9), (0, 59, 0)), ((0, 24, 9), (0, 1, 0)), ((0, 24, 9), (0, 15, 0)), ((0, 24, 9), (0, 16, 0)), ((0, 24, 9), (0, 17, 0)), ((0, 24, 9), (0, 43, 0)), ((0, 24, 9), (0, 44, 0)), ((0, 24, 9), (0, 45, 0)), ((0, 24, 9), (0, 46, 0)), ((0, 24, 9), (0, 47, 0)), ((0, 24, 9), (0, 55, 0)), ((0, 25, 9), (0, 48, 0)), ((0, 25, 9), (0, 49, 0)), ((0, 25, 9), (0, 50, 0)), ((0, 25, 9), (0, 56, 0)), ((0, 25, 9), (0, 59, 0)), ((0, 26, 9), (0, 9, 0)), ((0, 26, 9), (0, 10, 0)), ((0, 26, 9), (0, 31, 0)), ((0, 26, 9), (0, 32, 0)), ((0, 26, 9), (0, 33, 0)), ((0, 26, 9), (0, 34, 0)), ((0, 27, 9), (0, 9, 0)), ((0, 27, 9), (0, 10, 0)), ((0, 27, 9), (0, 31, 0)), ((0, 27, 9), (0, 32, 0)), ((0, 27, 9), (0, 33, 0)), ((0, 27, 9), (0, 34, 0)), ((0, 28, 9), (0, 0, 0)), ((0, 28, 9), (0, 3, 0)), ((0, 28, 9), (0, 4, 0)), ((0, 28, 9), (0, 5, 0)), ((0, 28, 9), (0, 6, 0)), ((0, 28, 9), (0, 18, 0)), ((0, 28, 9), (0, 19, 0)), ((0, 28, 9), (0, 20, 0)), ((0, 28, 9), (0, 21, 0)), ((0, 28, 9), (0, 22, 0)), ((0, 28, 9), (0, 23, 0)), ((0, 28, 9), (0, 53, 0)), ((0, 29, 9), (0, 48, 0)), ((0, 29, 9), (0, 49, 0)), ((0, 29, 9), (0, 50, 0)), ((0, 29, 9), (0, 56, 0)), ((0, 29, 9), (0, 59, 0)), ((0, 30, 9), (0, 9, 0)), ((0, 30, 9), (0, 10, 0)), ((0, 30, 9), (0, 31, 0)), ((0, 30, 9), (0, 32, 0)), ((0, 30, 9), (0, 33, 0)), ((0, 30, 9), (0, 34, 0)), ((0, 31, 9), (0, 7, 0)), ((0, 31, 9), (0, 8, 0)), ((0, 31, 9), (0, 24, 0)), ((0, 31, 9), (0, 25, 0)), ((0, 31, 9), (0, 26, 0)), ((0, 31, 9), (0, 27, 0)), ((0, 31, 9), (0, 28, 0)), ((0, 31, 9), (0, 29, 0)), ((0, 31, 9), (0, 30, 0)), ((0, 31, 9), (0, 57, 0)), ((0, 32, 9), (0, 1, 0)), ((0, 32, 9), (0, 15, 0)), ((0, 32, 9), (0, 16, 0)), ((0, 32, 9), (0, 17, 0)), ((0, 32, 9), (0, 43, 0)), ((0, 32, 9), (0, 44, 0)), ((0, 32, 9), (0, 45, 0)), ((0, 32, 9), (0, 46, 0)), ((0, 32, 9), (0, 47, 0)), ((0, 32, 9), (0, 55, 0)), ((0, 33, 9), (0, 7, 0)), ((0, 33, 9), (0, 8, 0)), ((0, 33, 9), (0, 24, 0)), ((0, 33, 9), (0, 25, 0)), ((0, 33, 9), (0, 26, 0)), ((0, 33, 9), (0, 27, 0)), ((0, 33, 9), (0, 28, 0)), ((0, 33, 9), (0, 29, 0)), ((0, 33, 9), (0, 30, 0)), ((0, 33, 9), (0, 57, 0)), ((0, 34, 9), (0, 9, 0)), ((0, 34, 9), (0, 10, 0)), ((0, 34, 9), (0, 31, 0)), ((0, 34, 9), (0, 32, 0)), ((0, 34, 9), (0, 33, 0)), ((0, 34, 9), (0, 34, 0)), ((0, 35, 9), (0, 1, 0)), ((0, 35, 9), (0, 15, 0)), ((0, 35, 9), (0, 16, 0)), ((0, 35, 9), (0, 17, 0)), ((0, 35, 9), (0, 43, 0)), ((0, 35, 9), (0, 44, 0)), ((0, 35, 9), (0, 45, 0)), ((0, 35, 9), (0, 46, 0)), ((0, 35, 9), (0, 47, 0)), ((0, 35, 9), (0, 55, 0)), ((0, 36, 9), (0, 9, 0)), ((0, 36, 9), (0, 10, 0)), ((0, 36, 9), (0, 31, 0)), ((0, 36, 9), (0, 32, 0)), ((0, 36, 9), (0, 33, 0)), ((0, 36, 9), (0, 34, 0)), ((0, 37, 9), (0, 9, 0)), ((0, 37, 9), (0, 10, 0)), ((0, 37, 9), (0, 31, 0)), ((0, 37, 9), (0, 32, 0)), ((0, 37, 9), (0, 33, 0)), ((0, 37, 9), (0, 34, 0)), ((0, 38, 9), (0, 0, 0)), ((0, 38, 9), (0, 3, 0)), ((0, 38, 9), (0, 4, 0)), ((0, 38, 9), (0, 5, 0)), ((0, 38, 9), (0, 6, 0)), ((0, 38, 9), (0, 18, 0)), ((0, 38, 9), (0, 19, 0)), ((0, 38, 9), (0, 20, 0)), ((0, 38, 9), (0, 21, 0)), ((0, 38, 9), (0, 22, 0)), ((0, 38, 9), (0, 23, 0)), ((0, 38, 9), (0, 53, 0)), ((0, 39, 9), (0, 0, 0)), ((0, 39, 9), (0, 3, 0)), ((0, 39, 9), (0, 4, 0)), ((0, 39, 9), (0, 5, 0)), ((0, 39, 9), (0, 6, 0)), ((0, 39, 9), (0, 18, 0)), ((0, 39, 9), (0, 19, 0)), ((0, 39, 9), (0, 20, 0)), ((0, 39, 9), (0, 21, 0)), ((0, 39, 9), (0, 22, 0)), ((0, 39, 9), (0, 23, 0)), ((0, 39, 9), (0, 53, 0)), ((0, 40, 9), (0, 48, 0)), ((0, 40, 9), (0, 49, 0)), ((0, 40, 9), (0, 50, 0)), ((0, 40, 9), (0, 56, 0)), ((0, 40, 9), (0, 59, 0)), ((0, 41, 9), (0, 1, 0)), ((0, 41, 9), (0, 15, 0)), ((0, 41, 9), (0, 16, 0)), ((0, 41, 9), (0, 17, 0)), ((0, 41, 9), (0, 43, 0)), ((0, 41, 9), (0, 44, 0)), ((0, 41, 9), (0, 45, 0)), ((0, 41, 9), (0, 46, 0)), ((0, 41, 9), (0, 47, 0)), ((0, 41, 9), (0, 55, 0)), ((0, 42, 9), (0, 7, 0)), ((0, 42, 9), (0, 8, 0)), ((0, 42, 9), (0, 24, 0)), ((0, 42, 9), (0, 25, 0)), ((0, 42, 9), (0, 26, 0)), ((0, 42, 9), (0, 27, 0)), ((0, 42, 9), (0, 28, 0)), ((0, 42, 9), (0, 29, 0)), ((0, 42, 9), (0, 30, 0)), ((0, 42, 9), (0, 57, 0)), ((0, 43, 9), (0, 0, 0)), ((0, 43, 9), (0, 3, 0)), ((0, 43, 9), (0, 4, 0)), ((0, 43, 9), (0, 5, 0)), ((0, 43, 9), (0, 6, 0)), ((0, 43, 9), (0, 18, 0)), ((0, 43, 9), (0, 19, 0)), ((0, 43, 9), (0, 20, 0)), ((0, 43, 9), (0, 21, 0)), ((0, 43, 9), (0, 22, 0)), ((0, 43, 9), (0, 23, 0)), ((0, 43, 9), (0, 53, 0)), ((0, 44, 9), (0, 0, 0)), ((0, 44, 9), (0, 3, 0)), ((0, 44, 9), (0, 4, 0)), ((0, 44, 9), (0, 5, 0)), ((0, 44, 9), (0, 6, 0)), ((0, 44, 9), (0, 18, 0)), ((0, 44, 9), (0, 19, 0)), ((0, 44, 9), (0, 20, 0)), ((0, 44, 9), (0, 21, 0)), ((0, 44, 9), (0, 22, 0)), ((0, 44, 9), (0, 23, 0)), ((0, 44, 9), (0, 53, 0)), ((0, 45, 9), (0, 7, 0)), ((0, 45, 9), (0, 8, 0)), ((0, 45, 9), (0, 24, 0)), ((0, 45, 9), (0, 25, 0)), ((0, 45, 9), (0, 26, 0)), ((0, 45, 9), (0, 27, 0)), ((0, 45, 9), (0, 28, 0)), ((0, 45, 9), (0, 29, 0)), ((0, 45, 9), (0, 30, 0)), ((0, 45, 9), (0, 57, 0)), ((0, 46, 9), (0, 7, 0)), ((0, 46, 9), (0, 8, 0)), ((0, 46, 9), (0, 24, 0)), ((0, 46, 9), (0, 25, 0)), ((0, 46, 9), (0, 26, 0)), ((0, 46, 9), (0, 27, 0)), ((0, 46, 9), (0, 28, 0)), ((0, 46, 9), (0, 29, 0)), ((0, 46, 9), (0, 30, 0)), ((0, 46, 9), (0, 57, 0)), ((0, 47, 9), (0, 0, 0)), ((0, 47, 9), (0, 3, 0)), ((0, 47, 9), (0, 4, 0)), ((0, 47, 9), (0, 5, 0)), ((0, 47, 9), (0, 6, 0)), ((0, 47, 9), (0, 18, 0)), ((0, 47, 9), (0, 19, 0)), ((0, 47, 9), (0, 20, 0)), ((0, 47, 9), (0, 21, 0)), ((0, 47, 9), (0, 22, 0)), ((0, 47, 9), (0, 23, 0)), ((0, 47, 9), (0, 53, 0)), ((0, 48, 9), (0, 7, 0)), ((0, 48, 9), (0, 8, 0)), ((0, 48, 9), (0, 24, 0)), ((0, 48, 9), (0, 25, 0)), ((0, 48, 9), (0, 26, 0)), ((0, 48, 9), (0, 27, 0)), ((0, 48, 9), (0, 28, 0)), ((0, 48, 9), (0, 29, 0)), ((0, 48, 9), (0, 30, 0)), ((0, 48, 9), (0, 57, 0)), ((0, 49, 9), (0, 7, 0)), ((0, 49, 9), (0, 8, 0)), ((0, 49, 9), (0, 24, 0)), ((0, 49, 9), (0, 25, 0)), ((0, 49, 9), (0, 26, 0)), ((0, 49, 9), (0, 27, 0)), ((0, 49, 9), (0, 28, 0)), ((0, 49, 9), (0, 29, 0)), ((0, 49, 9), (0, 30, 0)), ((0, 49, 9), (0, 57, 0)), ((0, 50, 9), (0, 7, 0)), ((0, 50, 9), (0, 8, 0)), ((0, 50, 9), (0, 24, 0)), ((0, 50, 9), (0, 25, 0)), ((0, 50, 9), (0, 26, 0)), ((0, 50, 9), (0, 27, 0)), ((0, 50, 9), (0, 28, 0)), ((0, 50, 9), (0, 29, 0)), ((0, 50, 9), (0, 30, 0)), ((0, 50, 9), (0, 57, 0)), ((0, 51, 9), (0, 1, 0)), ((0, 51, 9), (0, 15, 0)), ((0, 51, 9), (0, 16, 0)), ((0, 51, 9), (0, 17, 0)), ((0, 51, 9), (0, 43, 0)), ((0, 51, 9), (0, 44, 0)), ((0, 51, 9), (0, 45, 0)), ((0, 51, 9), (0, 46, 0)), ((0, 51, 9), (0, 47, 0)), ((0, 51, 9), (0, 55, 0)), ((0, 52, 9), (0, 7, 0)), ((0, 52, 9), (0, 8, 0)), ((0, 52, 9), (0, 24, 0)), ((0, 52, 9), (0, 25, 0)), ((0, 52, 9), (0, 26, 0)), ((0, 52, 9), (0, 27, 0)), ((0, 52, 9), (0, 28, 0)), ((0, 52, 9), (0, 29, 0)), ((0, 52, 9), (0, 30, 0)), ((0, 52, 9), (0, 57, 0)), ((0, 53, 9), (0, 48, 0)), ((0, 53, 9), (0, 49, 0)), ((0, 53, 9), (0, 50, 0)), ((0, 53, 9), (0, 56, 0)), ((0, 53, 9), (0, 59, 0)), ((0, 54, 9), (0, 7, 0)), ((0, 54, 9), (0, 8, 0)), ((0, 54, 9), (0, 24, 0)), ((0, 54, 9), (0, 25, 0)), ((0, 54, 9), (0, 26, 0)), ((0, 54, 9), (0, 27, 0)), ((0, 54, 9), (0, 28, 0)), ((0, 54, 9), (0, 29, 0)), ((0, 54, 9), (0, 30, 0)), ((0, 54, 9), (0, 57, 0)), ((0, 55, 9), (0, 7, 0)), ((0, 55, 9), (0, 8, 0)), ((0, 55, 9), (0, 24, 0)), ((0, 55, 9), (0, 25, 0)), ((0, 55, 9), (0, 26, 0)), ((0, 55, 9), (0, 27, 0)), ((0, 55, 9), (0, 28, 0)), ((0, 55, 9), (0, 29, 0)), ((0, 55, 9), (0, 30, 0)), ((0, 55, 9), (0, 57, 0)), ((0, 56, 9), (0, 9, 0)), ((0, 56, 9), (0, 10, 0)), ((0, 56, 9), (0, 31, 0)), ((0, 56, 9), (0, 32, 0)), ((0, 56, 9), (0, 33, 0)), ((0, 56, 9), (0, 34, 0)), ((0, 57, 9), (0, 0, 0)), ((0, 57, 9), (0, 3, 0)), ((0, 57, 9), (0, 4, 0)), ((0, 57, 9), (0, 5, 0)), ((0, 57, 9), (0, 6, 0)), ((0, 57, 9), (0, 18, 0)), ((0, 57, 9), (0, 19, 0)), ((0, 57, 9), (0, 20, 0)), ((0, 57, 9), (0, 21, 0)), ((0, 57, 9), (0, 22, 0)), ((0, 57, 9), (0, 23, 0)), ((0, 57, 9), (0, 53, 0)), ((0, 58, 9), (0, 0, 0)), ((0, 58, 9), (0, 3, 0)), ((0, 58, 9), (0, 4, 0)), ((0, 58, 9), (0, 5, 0)), ((0, 58, 9), (0, 6, 0)), ((0, 58, 9), (0, 18, 0)), ((0, 58, 9), (0, 19, 0)), ((0, 58, 9), (0, 20, 0)), ((0, 58, 9), (0, 21, 0)), ((0, 58, 9), (0, 22, 0)), ((0, 58, 9), (0, 23, 0)), ((0, 58, 9), (0, 53, 0)), ((0, 59, 9), (0, 48, 0)), ((0, 59, 9), (0, 49, 0)), ((0, 59, 9), (0, 50, 0)), ((0, 59, 9), (0, 56, 0)), ((0, 59, 9), (0, 59, 0)), ((1, 51, 10), (0, 6, 3))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (51/9,6)\Strictify(60,6)\RelRFCmb{1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E      , closure = Backward\n , start_strict_only = True\n , max_closure_length
E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E      = True})" , input_size = Size { num_rules = 9 , num_strict_rules = 9 ,
E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 6 , total_length
E      = 141} , self = 34 , parent = Nothing , duration = 0.111433658000 , status
E      = Except "AsyncCancelled" , start = 2025-09-04 07:29:57.975181644 UTC ,
E      finish = 2025-09-04 07:29:58.086615302 UTC , thread_cap_info = ("ThreadId
E      43", 3, False)}
E      
| F    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F    = False}" , input_size = Size { num_rules = 60 , num_strict_rules = 60
| F    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 6 , total_length
| F    = 985} , self = 36 , parent = Nothing , duration = 0.106966862000 , status
| F    = Fail , start = 2025-09-04 07:29:58.002176621 UTC , finish = 2025-09-04
| F    07:29:58.109143483 UTC , thread_cap_info = ("ThreadId 61", 3, False)}
| F    
| | S  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S  = Size { num_rules = 2160 , num_strict_rules = 2160 , num_top_rules = 0
| | S  , num_weak_rules = 0 , alphabet_size = 36 , total_length = 39780} , self
| | S  = 42 , parent = Nothing , duration = 0.186862767000 , status = Success
| | S  , start = 2025-09-04 07:29:58.066562039 UTC , finish = 2025-09-04 07:29:58.253424806
| | S  UTC , thread_cap_info = ("ThreadId 88", 2, False)}
| | S  
E | |  
  F |  
    S  
