last 924 length 3889
CNF 924 vars 3889 clauses
last 996 length 4235
CNF 996 vars 4235 clauses
last 5098 length 21497
CNF 5098 vars 21497 clauses
last 5338 length 22475
CNF 5338 vars 22475 clauses
**************************************************
summary
**************************************************
SRS with 5 strict rules and 1 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 5 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 45 weak rules on 9 letters       weights
  SRS with 0 strict rules and 27 weak rules on 9 letters       no strict rules

  2 SRS with 5 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 5 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 45 rules on 9 letters       weights
    SRS with 27 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 15 rules on 9 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, c] -> [c, a, b] {- Input 0 -}
  [c, b, b] -> [a, a, c] {- Input 1 -}
  [a, a, b] -> [b, b, c] {- Input 2 -}
  [b, b, c] -> [a, b, c] {- Input 3 -}
  [b, b, b] -> [b, a, b] {- Input 4 -}
  [c, b, a] ->= [b, a, c] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, b, c] -> [c, a, b] {- Input 0 -}
  [c, b, b] -> [a, a, c] {- Input 1 -}
  [a, a, b] -> [b, b, c] {- Input 2 -}
  [b, b, c] -> [a, b, c] {- Input 3 -}
  [b, b, b] -> [b, a, b] {- Input 4 -}
  [c, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, b, c] ->= [c, a, b] {- Input 0 -}
  [c, b, b] ->= [a, a, c] {- Input 1 -}
  [a, a, b] ->= [b, b, c] {- Input 2 -}
  [b, b, c] ->= [a, b, c] {- Input 3 -}
  [b, b, b] -> [b, a, b] {- Input 4 -}
  [c, b, a] ->= [b, a, c] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, c], [c, b], [b, b], [b, c]] ->= [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, c], [c, b], [b, b], [b, b]] ->= [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, c], [c, b], [b, b], [b, a]] ->= [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, c]] ->= [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, b]] ->= [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, a]] ->= [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, c]] ->= [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, b]] ->= [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, a]] ->= [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, b], [b, c]] ->= [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, b]] ->= [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, a]] ->= [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, c]] ->= [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, b]] ->= [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, a]] ->= [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, c]] ->= [ [a, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, b]] ->= [ [a, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, a]] ->= [ [a, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[c, c], [c, b], [b, a], [a, c]] ->= [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] ->= [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, a]] ->= [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] ->= [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] ->= [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, a]] ->= [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] ->= [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] ->= [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, a]] ->= [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, c]] ->= [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, b]] ->= [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, a]] ->= [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, b], [b, c]] ->= [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, b]] ->= [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, a]] ->= [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, c]] ->= [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, b]] ->= [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, a]] ->= [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, c], [c, b], [b, a], [a, c]] ->= [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] ->= [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] ->= [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] ->= [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] ->= [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] ->= [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [c, b, c] -> [c, a, b] {- Input 0 -}
  [c, b, b] -> [a, a, c] {- Input 1 -}
  [a, a, b] -> [b, b, c] {- Input 2 -}
  [b, b, c] -> [a, b, c] {- Input 3 -}
  [c, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, b, c] -> [c, a, b] {- Input 0 -}
  [c, b, b] -> [a, a, c] {- Input 1 -}
  [a, a, b] -> [b, b, c] {- Input 2 -}
  [b, b, c] -> [a, b, c] {- Input 3 -}
  [c, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, c], [c, b], [b, b], [b, c]] -> [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, c], [c, b], [b, b], [b, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, c], [c, b], [b, b], [b, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, c]] -> [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, b], [b, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, c]] -> [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, c]] -> [ [a, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, c]] -> [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, b], [b, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, c], [c, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, c], [c, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
reason
  ([a, a], 4/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (5/1,3)\Strictify(6,3)\Split[(1/5,3)\TileAllAll{2}(9/45,9)\Weight(0/27,9)[],(5,3)\Split[(5,3)\TileAllAll{2}(45,9)\Weight(27,9)\Matrix{\Natural}{2}(15,9)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E            , closure = Backward\n , start_strict_only = True\n , max_closure_length
E            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E            = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E            = 6} , self = 83 , parent = Nothing , duration = 0.188625601000 , status
E            = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.84714512 UTC ,
E            finish = 2025-09-04 08:20:56.035770721 UTC , thread_cap_info = ("ThreadId
E            55", 0, False)}
E            
| E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E          = 6} , self = 79 , parent = Nothing , duration = 0.169877659000 , status
| E          = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.847369805 UTC ,
| E          finish = 2025-09-04 08:20:56.017247464 UTC , thread_cap_info = ("ThreadId
| E          57", 1, False)}
| E          
| | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E        = 6} , self = 57 , parent = Nothing , duration = 0.122706201000 , status
| | E        = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.853383637 UTC ,
| | E        finish = 2025-09-04 08:20:55.976089838 UTC , thread_cap_info = ("ThreadId
| | E        79", 2, False)}
| | E        
| | | F      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | F      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | F      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | F      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | F      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | F      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | F      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | F      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | F      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | F      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F      = 36} , self = 84 , parent = Nothing , duration = 0.141104107000 , status
| | | F      = Fail , start = 2025-09-04 08:20:55.895833273 UTC , finish = 2025-09-04
| | | F      08:20:56.03693738 UTC , thread_cap_info = ("ThreadId 115", 0, False)}
| | | F      
| | | | F    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | F    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F    = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | | F    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | F    = 36} , self = 88 , parent = Nothing , duration = 0.136426048000 , status
| | | | F    = Fail , start = 2025-09-04 08:20:55.915738776 UTC , finish = 2025-09-04
| | | | F    08:20:56.052164824 UTC , thread_cap_info = ("ThreadId 116", 0, False)}
| | | | F    
| | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | S  = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| | | | | S  = 32} , self = 77 , parent = Nothing , duration = 0.100778363000 , status
| | | | | S  = Success , start = 2025-09-04 08:20:55.916376514 UTC , finish = 2025-09-04
| | | | | S  08:20:56.017154877 UTC , thread_cap_info = ("ThreadId 89", 1, False)}
| | | | | S  
| | E | | |  
| | F | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F | | |  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F | | |  = 0 , alphabet_size = 9 , total_length = 216} , self = 92 , parent = Nothing
| | F | | |  , duration = 0.110636123000 , status = Fail , start = 2025-09-04 08:20:55.991349499
| | F | | |  UTC , finish = 2025-09-04 08:20:56.101985622 UTC , thread_cap_info = ("ThreadId
| | F | | |  144", 2, False)}
| | F | | |  
| | | | | S  
| E | | |    
E   | | |    
    | F |    
    |   F    
F   |        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F   |        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F   |        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F   |        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F   |        = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules = 0 , num_weak_rules
F   |        = 0 , alphabet_size = 3 , total_length = 36} , self = 105 , parent = Nothing
F   |        , duration = 0.167153513000 , status = Fail , start = 2025-09-04 08:20:56.055525849
F   |        UTC , finish = 2025-09-04 08:20:56.222679362 UTC , thread_cap_info = ("ThreadId
F   |        164", 3, False)}
F   |        
| F |        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F |        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F |        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F |        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F |        = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules = 0 , num_weak_rules
| F |        = 0 , alphabet_size = 3 , total_length = 36} , self = 112 , parent = Nothing
| F |        , duration = 0.184411439000 , status = Fail , start = 2025-09-04 08:20:56.075769369
| F |        UTC , finish = 2025-09-04 08:20:56.260180808 UTC , thread_cap_info = ("ThreadId
| F |        166", 3, False)}
| F |        
| | F        
| | S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | S        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | S        = 216} , self = 107 , parent = Nothing , duration = 0.132343167000 , status
| | S        = Success , start = 2025-09-04 08:20:56.115688278 UTC , finish = 2025-09-04
| | S        08:20:56.248031445 UTC , thread_cap_info = ("ThreadId 178", 3, False)}
| | S        
F | |        
  | S        
  F          
