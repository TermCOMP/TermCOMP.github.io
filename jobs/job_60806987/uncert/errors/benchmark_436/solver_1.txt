[Info] pool sizes (success) 3 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 3 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 908 length 3411
CNF 908 vars 3411 clauses
last 244 length 973
CNF 244 vars 973 clauses
last 373 length 1565
CNF 373 vars 1565 clauses
last 7836 length 39116
last 8646 length 38364
CNF 8646 vars 38364 clauses
CNF 7836 vars 39116 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1765, clauses: 6455
last 1765 length 6455
last 7836 length 39116
CNF 1765 vars 6455 clauses
CNF 7836 vars 39116 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1765, clauses: 6455, status: Unsatisfied, time: 0.317271813s
last 8646 length 38364
last 7836 length 39116
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12386, clauses: 50941
last 8646 length 38364
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20029, clauses: 79730
CNF 8646 vars 38364 clauses
last 12386 length 50941
CNF 7836 vars 39116 clauses
CNF 8646 vars 38364 clauses
last 20029 length 79730
CNF 12386 vars 50941 clauses
CNF 20029 vars 79730 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12386, clauses: 50941, status: Satisfied, time: 1.506122283s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 29355, clauses: 122453
last 172 length 695
last 256 length 1107
CNF 256 vars 1107 clauses
CNF 172 vars 695 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20029, clauses: 79730, status: Satisfied, time: 1.665402271s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1278, clauses: 4530
last 1278 length 4530
**************************************************
summary
**************************************************
SRS with 3 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 2 weak rules on 4 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 2 weak rules on 4 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 32 strict rules and 32 weak rules on 16 letters       weights
  SRS with 0 strict rules and 32 weak rules on 13 letters       no strict rules

  2 SRS with 0 strict rules and 2 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, c, a] -> [d, d] {- Input 0 -}
  [b] -> [c, c] {- Input 1 -}
  [a, a] -> [a, c, b, a] {- Input 2 -}
  [a, b] ->= [d] {- Input 3 -}
  [d] ->= [a, b] {- Input 4 -}
reason
  ( d
  , St  / 0A 1A  - \
        | -  -1A - |
        \ 0A 0A  - / )
  ( a
  , St  / 0A 0A 1A  \
        | -  -  -1A |
        \ 0A 1A -   / )
  ( b
  , St  / 0A 0A  - \
        | -  -1A - |
        \ -  0A  - / )
  ( c
  , St  / 0A - -  \
        | -  - 1A |
        \ -  - -  / )
   property Termination
has value Just True
for SRS
  [b] -> [c, c] {- Input 1 -}
  [a, a] -> [a, c, b, a] {- Input 2 -}
  [a, b] ->= [d] {- Input 3 -}
  [d] ->= [a, b] {- Input 4 -}
reason
  split
   property Termination
has value Just True
for SRS
  [b] -> [c, c] {- Input 1 -}
  [a, a] -> [a, c, b, a] {- Input 2 -}
  [a, b] ->= [d] {- Input 3 -}
  [d] ->= [a, b] {- Input 4 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, b]] -> [[b, c], [c, c], [c, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b], [b, c]] -> [[b, c], [c, c], [c, c]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a]] -> [[b, c], [c, c], [c, a]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, d]] -> [[b, c], [c, c], [c, d]] {- Semlab 0 (Concon 3 (Input 1)) -}
  [[c, b], [b, b]] -> [[c, c], [c, c], [c, b]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c]] -> [[c, c], [c, c], [c, c]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, a]] -> [[c, c], [c, c], [c, a]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, d]] -> [[c, c], [c, c], [c, d]] {- Semlab 1 (Concon 3 (Input 1)) -}
  [[a, b], [b, b]] -> [[a, c], [c, c], [c, b]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b], [b, c]] -> [[a, c], [c, c], [c, c]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, a]] -> [[a, c], [c, c], [c, a]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, d]] -> [[a, c], [c, c], [c, d]] {- Semlab 2 (Concon 3 (Input 1)) -}
  [[d, b], [b, b]] -> [[d, c], [c, c], [c, b]] {- Semlab 3 (Concon 0 (Input 1)) -}
  [[d, b], [b, c]] -> [[d, c], [c, c], [c, c]] {- Semlab 3 (Concon 1 (Input 1)) -}
  [[d, b], [b, a]] -> [[d, c], [c, c], [c, a]] {- Semlab 3 (Concon 2 (Input 1)) -}
  [[d, b], [b, d]] -> [[d, c], [c, c], [c, d]] {- Semlab 3 (Concon 3 (Input 1)) -}
  [[b, a], [a, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, c]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, a]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a], [a, d]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, d] ] {- Semlab 0 (Concon 3 (Input 2)) -}
  [[c, a], [a, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, a], [a, a], [a, c]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a], [a, a], [a, a]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a], [a, d]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, d] ] {- Semlab 1 (Concon 3 (Input 2)) -}
  [[a, a], [a, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, a], [a, a], [a, c]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a], [a, a], [a, a]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, a], [a, a], [a, d]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, d] ] {- Semlab 2 (Concon 3 (Input 2)) -}
  [[d, a], [a, a], [a, b]] -> [ [d, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 3 (Concon 0 (Input 2)) -}
  [[d, a], [a, a], [a, c]] -> [ [d, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 3 (Concon 1 (Input 2)) -}
  [[d, a], [a, a], [a, a]] -> [ [d, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 3 (Concon 2 (Input 2)) -}
  [[d, a], [a, a], [a, d]] -> [ [d, a] , [a, c] , [c, b] , [b, a] , [a, d] ] {- Semlab 3 (Concon 3 (Input 2)) -}
  [[b, a], [a, b], [b, b]] ->= [ [b, d] , [d, b] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, d] , [d, c] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, d] , [d, a] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, a], [a, b], [b, d]] ->= [ [b, d] , [d, d] ] {- Semlab 0 (Concon 3 (Input 3)) -}
  [[c, a], [a, b], [b, b]] ->= [ [c, d] , [d, b] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, a], [a, b], [b, c]] ->= [ [c, d] , [d, c] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, a], [a, b], [b, a]] ->= [ [c, d] , [d, a] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, a], [a, b], [b, d]] ->= [ [c, d] , [d, d] ] {- Semlab 1 (Concon 3 (Input 3)) -}
  [[a, a], [a, b], [b, b]] ->= [ [a, d] , [d, b] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, c]] ->= [ [a, d] , [d, c] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, a], [a, b], [b, a]] ->= [ [a, d] , [d, a] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, a], [a, b], [b, d]] ->= [ [a, d] , [d, d] ] {- Semlab 2 (Concon 3 (Input 3)) -}
  [[d, a], [a, b], [b, b]] ->= [ [d, d] , [d, b] ] {- Semlab 3 (Concon 0 (Input 3)) -}
  [[d, a], [a, b], [b, c]] ->= [ [d, d] , [d, c] ] {- Semlab 3 (Concon 1 (Input 3)) -}
  [[d, a], [a, b], [b, a]] ->= [ [d, d] , [d, a] ] {- Semlab 3 (Concon 2 (Input 3)) -}
  [[d, a], [a, b], [b, d]] ->= [ [d, d] , [d, d] ] {- Semlab 3 (Concon 3 (Input 3)) -}CNF 1278 vars 4530 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1278, clauses: 4530, status: Satisfied, time: 0.204094184s

  [[b, d], [d, b]] ->= [ [b, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[b, d], [d, c]] ->= [ [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[b, d], [d, a]] ->= [ [b, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, d], [d, d]] ->= [ [b, a] , [a, b] , [b, d] ] {- Semlab 0 (Concon 3 (Input 4)) -}
  [[c, d], [d, b]] ->= [ [c, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, d], [d, c]] ->= [ [c, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, d], [d, a]] ->= [ [c, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[c, d], [d, d]] ->= [ [c, a] , [a, b] , [b, d] ] {- Semlab 1 (Concon 3 (Input 4)) -}
  [[a, d], [d, b]] ->= [ [a, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[a, d], [d, c]] ->= [ [a, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[a, d], [d, a]] ->= [ [a, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[a, d], [d, d]] ->= [ [a, a] , [a, b] , [b, d] ] {- Semlab 2 (Concon 3 (Input 4)) -}
  [[d, d], [d, b]] ->= [ [d, a] , [a, b] , [b, b] ] {- Semlab 3 (Concon 0 (Input 4)) -}
  [[d, d], [d, c]] ->= [ [d, a] , [a, b] , [b, c] ] {- Semlab 3 (Concon 1 (Input 4)) -}
  [[d, d], [d, a]] ->= [ [d, a] , [a, b] , [b, a] ] {- Semlab 3 (Concon 2 (Input 4)) -}
  [[d, d], [d, d]] ->= [ [d, a] , [a, b] , [b, d] ] {- Semlab 3 (Concon 3 (Input 4)) -}
reason
  ([d, d], 2/1)
  ([d, a], 2/1)
  ([d, b], 2/1)
  ([d, c], 1/1)
  ([a, d], 3/1)
  ([a, a], 3/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, d], 2/1)
  ([b, a], 2/1)
  ([b, b], 2/1)
  ([b, c], 1/1)
  ([c, d], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b]] ->= [ [b, d] , [d, b] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, d] , [d, c] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, d] , [d, a] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, a], [a, b], [b, d]] ->= [ [b, d] , [d, d] ] {- Semlab 0 (Concon 3 (Input 3)) -}
  [[c, a], [a, b], [b, b]] ->= [ [c, d] , [d, b] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, a], [a, b], [b, c]] ->= [ [c, d] , [d, c] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, a], [a, b], [b, a]] ->= [ [c, d] , [d, a] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, a], [a, b], [b, d]] ->= [ [c, d] , [d, d] ] {- Semlab 1 (Concon 3 (Input 3)) -}
  [[a, a], [a, b], [b, b]] ->= [ [a, d] , [d, b] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, c]] ->= [ [a, d] , [d, c] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, a], [a, b], [b, a]] ->= [ [a, d] , [d, a] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, a], [a, b], [b, d]] ->= [ [a, d] , [d, d] ] {- Semlab 2 (Concon 3 (Input 3)) -}
  [[d, a], [a, b], [b, b]] ->= [ [d, d] , [d, b] ] {- Semlab 3 (Concon 0 (Input 3)) -}
  [[d, a], [a, b], [b, c]] ->= [ [d, d] , [d, c] ] {- Semlab 3 (Concon 1 (Input 3)) -}
  [[d, a], [a, b], [b, a]] ->= [ [d, d] , [d, a] ] {- Semlab 3 (Concon 2 (Input 3)) -}
  [[d, a], [a, b], [b, d]] ->= [ [d, d] , [d, d] ] {- Semlab 3 (Concon 3 (Input 3)) -}
  [[b, d], [d, b]] ->= [ [b, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[b, d], [d, c]] ->= [ [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[b, d], [d, a]] ->= [ [b, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, d], [d, d]] ->= [ [b, a] , [a, b] , [b, d] ] {- Semlab 0 (Concon 3 (Input 4)) -}
  [[c, d], [d, b]] ->= [ [c, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, d], [d, c]] ->= [ [c, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, d], [d, a]] ->= [ [c, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[c, d], [d, d]] ->= [ [c, a] , [a, b] , [b, d] ] {- Semlab 1 (Concon 3 (Input 4)) -}
  [[a, d], [d, b]] ->= [ [a, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[a, d], [d, c]] ->= [ [a, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[a, d], [d, a]] ->= [ [a, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[a, d], [d, d]] ->= [ [a, a] , [a, b] , [b, d] ] {- Semlab 2 (Concon 3 (Input 4)) -}
  [[d, d], [d, b]] ->= [ [d, a] , [a, b] , [b, b] ] {- Semlab 3 (Concon 0 (Input 4)) -}
  [[d, d], [d, c]] ->= [ [d, a] , [a, b] , [b, c] ] {- Semlab 3 (Concon 1 (Input 4)) -}
  [[d, d], [d, a]] ->= [ [d, a] , [a, b] , [b, a] ] {- Semlab 3 (Concon 2 (Input 4)) -}
  [[d, d], [d, d]] ->= [ [d, a] , [a, b] , [b, d] ] {- Semlab 3 (Concon 3 (Input 4)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, b] ->= [d] {- Input 3 -}
  [d] ->= [a, b] {- Input 4 -}
reason
  no strict rules

**************************************************
skeleton: (3/2,4)\Matrix{\ArcticBZ}{3}(2/2,4)\Split[(2/2,4)\TileAllAll{2}(32/32,16)\Weight(0/32,13)[],(0/2,3)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 2.791221641000
  min duration 0.101510866000
  total durat. 6.138231995000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 71
    , parent = Nothing
    , duration = 2.602355079000
    , status = Fail
    , start = 2025-09-04 08:29:23.068222006 UTC
    , finish = 2025-09-04 08:29:25.670577085 UTC
    , thread_cap_info = ("ThreadId 133", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 73
    , parent = Nothing
    , duration = 2.791221641000
    , status = Fail
    , start = 2025-09-04 08:29:23.106718339 UTC
    , finish = 2025-09-04 08:29:25.89793998 UTC
    , thread_cap_info = ("ThreadId 137", 2, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 2.643021851000
  min duration 0.078492173000
  total durat. 4.982596228000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 69
    , parent = Nothing
    , duration = 1.166833180000
    , status = Fail
    , start = 2025-09-04 08:29:23.086456931 UTC
    , finish = 2025-09-04 08:29:24.253290111 UTC
    , thread_cap_info = ("ThreadId 135", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 72
    , parent = Nothing
    , duration = 2.643021851000
    , status = Fail
    , start = 2025-09-04 08:29:23.128380447 UTC
    , finish = 2025-09-04 08:29:25.771402298 UTC
    , thread_cap_info = ("ThreadId 139", 2, False)}
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 2.914620749000
  min duration 2.914620749000
  total durat. 2.914620749000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 20}
    , self = 74
    , parent = Nothing
    , duration = 2.914620749000
    , status = Success
    , start = 2025-09-04 08:29:23.146822878 UTC
    , finish = 2025-09-04 08:29:26.061443627 UTC
    , thread_cap_info = ("ThreadId 132", 2, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 3.212891922000
  min duration 3.212891922000
  total durat. 3.212891922000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 89
    , parent = Nothing
    , duration = 3.212891922000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:29:23.262266059 UTC
    , finish = 2025-09-04 08:29:26.475157981 UTC
    , thread_cap_info = ("ThreadId 144", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.772653536000
  min duration 1.772653536000
  total durat. 1.772653536000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 20}
    , self = 76
    , parent = Nothing
    , duration = 1.772653536000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:29:24.37158499 UTC
    , finish = 2025-09-04 08:29:26.144238526 UTC
    , thread_cap_info = ("ThreadId 151", 2, False)}
Success : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 2.959281853000
  min duration 2.959281853000
  total durat. 2.959281853000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 60
      , num_strict_rules = 28
      , num_top_rules = 0
      , num_weak_rules = 32
      , alphabet_size = 16
      , total_length = 356}
    , self = 87
    , parent = Nothing
    , duration = 2.959281853000
    , status = Success
    , start = 2025-09-04 08:29:23.446465433 UTC
    , finish = 2025-09-04 08:29:26.405747286 UTC
    , thread_cap_info = ("ThreadId 145", 1, False)}
**************************************************
F                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                    , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                    = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 3 ,
F                    num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F                    = 20} , self = 63 , parent = Nothing , duration = 0.378597747000 , status
F                    = Fail , start = 2025-09-04 08:29:22.712894768 UTC , finish = 2025-09-04
F                    08:29:23.091492515 UTC , thread_cap_info = ("ThreadId 87", 3, False)}
F                    
| F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                  = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 3 ,
| F                  num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F                  = 20} , self = 67 , parent = Nothing , duration = 0.743225561000 , status
| F                  = Fail , start = 2025-09-04 08:29:22.712904037 UTC , finish = 2025-09-04
| F                  08:29:23.456129598 UTC , thread_cap_info = ("ThreadId 88", 3, False)}
| F                  
| | S                Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | S                , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | S                , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | S                = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | S                , cpf = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | S                = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | S                = 356} , self = 68 , parent = Nothing , duration = 0.732814358000 , status
| | S                = Success , start = 2025-09-04 08:29:22.746712802 UTC , finish = 2025-09-04
| | S                08:29:23.47952716 UTC , thread_cap_info = ("ThreadId 107", 3, False)}
| | S                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | F              = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | | F              = 356} , self = 66 , parent = Nothing , duration = 0.673246777000 , status
| | | F              = Fail , start = 2025-09-04 08:29:22.746754391 UTC , finish = 2025-09-04
| | | F              08:29:23.420001168 UTC , thread_cap_info = ("ThreadId 109", 1, False)}
| | | F              
| | | | S            Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | S            , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | S            , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | S            = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | S            , cpf = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | S            = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | S            = 20} , self = 54 , parent = Nothing , duration = 0.113307132000 , status
| | | | S            = Success , start = 2025-09-04 08:29:22.758850833 UTC , finish = 2025-09-04
| | | | S            08:29:22.872157965 UTC , thread_cap_info = ("ThreadId 112", 2, False)}
| | | | S            
| | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | | | F          = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | | | | F          = 356} , self = 65 , parent = Nothing , duration = 0.495783100000 , status
| | | | | F          = Fail , start = 2025-09-04 08:29:22.766454261 UTC , finish = 2025-09-04
| | | | | F          08:29:23.262237361 UTC , thread_cap_info = ("ThreadId 108", 1, False)}
| | | | | F          
| | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F        = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | F        = 20} , self = 59 , parent = Nothing , duration = 0.147361309000 , status
| | | | | | F        = Fail , start = 2025-09-04 08:29:22.80703028 UTC , finish = 2025-09-04
| | | | | | F        08:29:22.954391589 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| | | | | | F        
| | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | F      = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | | F      = 20} , self = 64 , parent = Nothing , duration = 0.421002247000 , status
| | | | | | | F      = Fail , start = 2025-09-04 08:29:22.808152582 UTC , finish = 2025-09-04
| | | | | | | F      08:29:23.229154829 UTC , thread_cap_info = ("ThreadId 120", 2, False)}
| | | | | | | F      
| | | | S | | |      
| | | |   | F |      
| | | | F |   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | | F |   |      = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | | | F |   |      = 356} , self = 71 , parent = Nothing , duration = 2.602355079000 , status
| | | | F |   |      = Fail , start = 2025-09-04 08:29:23.068222006 UTC , finish = 2025-09-04
| | | | F |   |      08:29:25.670577085 UTC , thread_cap_info = ("ThreadId 133", 2, False)}
| | | | F |   |      
| | | | | | F |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F |      = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | | | | F |      = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | | | | | F |      = 356} , self = 69 , parent = Nothing , duration = 1.166833180000 , status
| | | | | | F |      = Fail , start = 2025-09-04 08:29:23.086456931 UTC , finish = 2025-09-04
| | | | | | F |      08:29:24.253290111 UTC , thread_cap_info = ("ThreadId 135", 2, False)}
| | | | | | F |      
F | | | | | | |      
F | | | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
F | | | | | | |      = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
F | | | | | | |      = 356} , self = 73 , parent = Nothing , duration = 2.791221641000 , status
F | | | | | | |      = Fail , start = 2025-09-04 08:29:23.106718339 UTC , finish = 2025-09-04
F | | | | | | |      08:29:25.89793998 UTC , thread_cap_info = ("ThreadId 137", 2, False)}
F | | | | | | |      
| | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | | | | | | F    = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 16 , total_length
| | | | | | | | F    = 356} , self = 72 , parent = Nothing , duration = 2.643021851000 , status
| | | | | | | | F    = Fail , start = 2025-09-04 08:29:23.128380447 UTC , finish = 2025-09-04
| | | | | | | | F    08:29:25.771402298 UTC , thread_cap_info = ("ThreadId 139", 2, False)}
| | | | | | | | F    
| | | | | | | | | S  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | | | | | | S  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | | | | | | | S  = 4 , total_length = 20} , self = 74 , parent = Nothing , duration = 2.914620749000
| | | | | | | | | S  , status = Success , start = 2025-09-04 08:29:23.146822878 UTC , finish
| | | | | | | | | S  = 2025-09-04 08:29:26.061443627 UTC , thread_cap_info = ("ThreadId 132",
| | | | | | | | | S  2, False)}
| | | | | | | | | S  
| | | | | | | F | |  
| | | | | F |   | |  
| | | | | E |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | E |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 60
| | | | | E |   | |  , num_strict_rules = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size
| | | | | E |   | |  = 16 , total_length = 356} , self = 89 , parent = Nothing , duration =
| | | | | E |   | |  3.212891922000 , status = Except "AsyncCancelled" , start = 2025-09-04
| | | | | E |   | |  08:29:23.262266059 UTC , finish = 2025-09-04 08:29:26.475157981 UTC , thread_cap_info
| | | | | E |   | |  = ("ThreadId 144", 1, False)}
| | | | | E |   | |  
| | | F | | |   | |  
| | | S | | |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S | | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 60
| | | S | | |   | |  , num_strict_rules = 28 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size
| | | S | | |   | |  = 16 , total_length = 356} , self = 87 , parent = Nothing , duration =
| | | S | | |   | |  2.959281853000 , status = Success , start = 2025-09-04 08:29:23.446465433
| | | S | | |   | |  UTC , finish = 2025-09-04 08:29:26.405747286 UTC , thread_cap_info = ("ThreadId
| | | S | | |   | |  145", 1, False)}
| | | S | | |   | |  
| F | | | | |   | |  
|   S | | | |   | |  
| F   | | | |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| F   | | | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| F   | | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| F   | | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F   | | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F   | | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| F   | | | |   | |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| F   | | | |   | |  = 4 , total_length = 20} , self = 70 , parent = Nothing , duration = 0.783744153000
| F   | | | |   | |  , status = Fail , start = 2025-09-04 08:29:23.566468257 UTC , finish =
| F   | | | |   | |  2025-09-04 08:29:24.35021241 UTC , thread_cap_info = ("ThreadId 147", 2,
| F   | | | |   | |  False)}
| F   | | | |   | |  
| |   | | | F   | |  
| F   | | |     | |  
| E   | | |     | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E   | | |     | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   | | |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   | | |     | |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   | | |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   | | |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| E   | | |     | |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| E   | | |     | |  = 4 , total_length = 20} , self = 76 , parent = Nothing , duration = 1.772653536000
| E   | | |     | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:29:24.37158499
| E   | | |     | |  UTC , finish = 2025-09-04 08:29:26.144238526 UTC , thread_cap_info = ("ThreadId
| E   | | |     | |  151", 2, False)}
| E   | | |     | |  
| |   | F |     | |  
| |   |   |     F |  
F |   |   |       |  
  |   |   |       S  
  E   |   |          
F     |   |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F     |   |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     |   |          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F     |   |          = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F     |   |          = 15} , self = 85 , parent = Nothing , duration = 0.101510866000 , status
F     |   |          = Fail , start = 2025-09-04 08:29:26.231742394 UTC , finish = 2025-09-04
F     |   |          08:29:26.33325326 UTC , thread_cap_info = ("ThreadId 169", 2, False)}
F     |   |          
F     |   |          
      S   |          
          E          
