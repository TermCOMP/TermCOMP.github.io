[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 238 length 999
last 412 length 1691
CNF 412 vars 1691 clauses
CNF 238 vars 999 clauses
last 412 length 1691
CNF 412 vars 1691 clauses
last 238 length 999
CNF 238 vars 999 clauses
last 562 length 2265
CNF 562 vars 2265 clauses
last 230 length 909
last 1002 length 4231
last 468 length 1895
last 562 length 2265
CNF 230 vars 909 clauses
CNF 1002 vars 4231 clauses
last 1002 length 4231
CNF 468 vars 1895 clauses
CNF 562 vars 2265 clauses
last 1659 length 6613
last 2307 length 9349
last 2307 length 9349
last 1659 length 6613
CNF 1002 vars 4231 clauses
last 4273 length 17031
CNF 1659 vars 6613 clauses
CNF 2307 vars 9349 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1544, clauses: 5667
last 7409 length 30065
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8787, clauses: 35972
CNF 2307 vars 9349 clauses
CNF 1659 vars 6613 clauses
CNF 4273 vars 17031 clauses
last 1544 length 5667
CNF 7409 vars 30065 clauses
last 8787 length 35972
CNF 1544 vars 5667 clauses
CNF 8787 vars 35972 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1544, clauses: 5667, status: Unsatisfied, time: 0.364004882s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8787, clauses: 35972, status: Satisfied, time: 0.345230666s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7469, clauses: 28739
last 7469 length 28739
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       mirror
SRS with 1 strict rules and 2 weak rules on 3 letters       context
SRS with 1 strict rules and 6 weak rules on 3 letters       mirror
SRS with 1 strict rules and 6 weak rules on 3 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c] -> [c, b] {- Input 0 -}
  [] ->= [a, b] {- Input 1 -}
  [a, b] ->= [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, a] -> [b, c] {- Mirror (Input 0) -}
  [] ->= [b, a] {- Mirror (Input 1) -}
  [b, a] ->= [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [c, a] -> [b, c] {- Mirror (Input 0) -}
  [a] ->= [a, b, a] {- Mirror (Input 1) -}
  [b] ->= [b, b, a] {- Mirror (Input 1) -}
  [c] ->= [c, b, a] {- Mirror (Input 1) -}
  [a, b, a] ->= [a] {- Mirror (Input 2) -}
  [b, b, a] ->= [b] {- Mirror (Input 2) -}
  [c, b, a] ->= [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, c] -> [c, b] {- Input 0 -}
  [a] ->= [a, b, a] {- Input 1 -}
  [b] ->= [a, b, b] {- Input 1 -}
  [c] ->= [a, b, c] {- Input 1 -}
  [a, b, a] ->= [a] {- Input 2 -}
  [a, b, b] ->= [b] {- Input 2 -}
  [a, b, c] ->= [c] {- Input 2 -}
reason
  ( a
  , St  / 0A  -  1A \
        | -2A 0A 1A |
        \ -   -  1A / )
  ( b
  , St  / 0A  -  -1A \
        | -2A 0A -1A |
        \ -   -  -1A / )
  ( c
  , St  / 1A -1A 2A \
        | 1A -1A 0A |
        \ 1A -1A 0A / )
   property Termination
has value Just True
for SRS
  [a] ->= [a, b, a] {- Input 1 -}
  [b] ->= [a, b, b] {- Input 1 -}
  [c] ->= [a, b, c] {- Input 1 -}
  [a, b, a] ->= [a] {- Input 2 -}
  [a, b, b] ->= [b] {- Input 2 -}
  [a, b, c] ->= [c] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: \Mirror(1/2,3)\Context\Mirror(1/6,3)\Matrix{\ArcticBZ}{3}(0/6,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 7469 vars 28739 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 2.133292880000
  min duration 0.026329405000
  total durat. 9.039061410000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 22
      , num_strict_rules = 14
      , num_top_rules = 14
      , num_weak_rules = 8
      , alphabet_size = 8
      , total_length = 76}
    , self = 105
    , parent = Nothing
    , duration = 1.686834647000
    , status = Fail
    , start = 2025-09-04 08:25:54.43384376 UTC
    , finish = 2025-09-04 08:25:56.120678407 UTC
    , thread_cap_info = ("ThreadId 136", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 18
      , alphabet_size = 9
      , total_length = 126}
    , self = 109
    , parent = Nothing
    , duration = 1.759747937000
    , status = Fail
    , start = 2025-09-04 08:25:54.537757229 UTC
    , finish = 2025-09-04 08:25:56.297505166 UTC
    , thread_cap_info = ("ThreadId 177", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 18
      , alphabet_size = 9
      , total_length = 126}
    , self = 110
    , parent = Nothing
    , duration = 1.989651636000
    , status = Fail
    , start = 2025-09-04 08:25:54.491403232 UTC
    , finish = 2025-09-04 08:25:56.481054868 UTC
    , thread_cap_info = ("ThreadId 161", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 54
      , alphabet_size = 9
      , total_length = 378}
    , self = 113
    , parent = Nothing
    , duration = 2.133292880000
    , status = Fail
    , start = 2025-09-04 08:25:54.480450778 UTC
    , finish = 2025-09-04 08:25:56.613743658 UTC
    , thread_cap_info = ("ThreadId 169", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 2.060309633000
  min duration 0.034730080000
  total durat. 7.050364436000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 18
      , alphabet_size = 9
      , total_length = 126}
    , self = 108
    , parent = Nothing
    , duration = 1.740509110000
    , status = Fail
    , start = 2025-09-04 08:25:54.551365161 UTC
    , finish = 2025-09-04 08:25:56.291874271 UTC
    , thread_cap_info = ("ThreadId 179", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 18
      , alphabet_size = 9
      , total_length = 126}
    , self = 111
    , parent = Nothing
    , duration = 1.983984118000
    , status = Fail
    , start = 2025-09-04 08:25:54.512433639 UTC
    , finish = 2025-09-04 08:25:56.496417757 UTC
    , thread_cap_info = ("ThreadId 162", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 54
      , alphabet_size = 9
      , total_length = 378}
    , self = 112
    , parent = Nothing
    , duration = 2.060309633000
    , status = Fail
    , start = 2025-09-04 08:25:54.49139137 UTC
    , finish = 2025-09-04 08:25:56.551701003 UTC
    , thread_cap_info = ("ThreadId 171", 0, False)}
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.965661860000
  min duration 1.965661860000
  total durat. 1.965661860000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 28}
    , self = 115
    , parent = Nothing
    , duration = 1.965661860000
    , status = Success
    , start = 2025-09-04 08:25:54.755274569 UTC
    , finish = 2025-09-04 08:25:56.720936429 UTC
    , thread_cap_info = ("ThreadId 181", 0, False)}
Fail : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.280642891000
  min duration 1.280642891000
  total durat. 1.280642891000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 28}
    , self = 114
    , parent = Nothing
    , duration = 1.280642891000
    , status = Fail
    , start = 2025-09-04 08:25:55.375441349 UTC
    , finish = 2025-09-04 08:25:56.65608424 UTC
    , thread_cap_info = ("ThreadId 184", 0, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.107011486000
  min duration 1.107011486000
  total durat. 1.107011486000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 8}
    , self = 104
    , parent = Nothing
    , duration = 1.107011486000
    , status = Fail
    , start = 2025-09-04 08:25:54.411098789 UTC
    , finish = 2025-09-04 08:25:55.518110275 UTC
    , thread_cap_info = ("ThreadId 117", 2, False)}
Fail : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 24
  max duration 1.127721026000
  min duration 0.000019633000
  total durat. 1.804431989000
  Info
    { what = "Weight\n  { modus = Pre (Or_Else Count (GLPK   { goal = Optimize, epsilon_digits = 6}))\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 2187
      , num_strict_rules = 729
      , num_top_rules = 0
      , num_weak_rules = 1458
      , alphabet_size = 81
      , total_length = 14580}
    , self = 106
    , parent = Nothing
    , duration = 1.127721026000
    , status = Fail
    , start = 2025-09-04 08:25:55.008493957 UTC
    , finish = 2025-09-04 08:25:56.136214983 UTC
    , thread_cap_info = ("ThreadId 182", 3, False)}
**************************************************
F                          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                          , closure = Backward\n , start_strict_only = True\n , max_closure_length
F                          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
F                          num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
F                          = 8} , self = 104 , parent = Nothing , duration = 1.107011486000 , status
F                          = Fail , start = 2025-09-04 08:25:54.411098789 UTC , finish = 2025-09-04
F                          08:25:55.518110275 UTC , thread_cap_info = ("ThreadId 117", 2, False)}
F                          
| F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                        = False\n , verbose = False}" , input_size = Size { num_rules = 22 , num_strict_rules
| F                        = 14 , num_top_rules = 14 , num_weak_rules = 8 , alphabet_size = 8 , total_length
| F                        = 76} , self = 105 , parent = Nothing , duration = 1.686834647000 , status
| F                        = Fail , start = 2025-09-04 08:25:54.43384376 UTC , finish = 2025-09-04
| F                        08:25:56.120678407 UTC , thread_cap_info = ("ThreadId 136", 0, False)}
| F                        
| | F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 22 , num_strict_rules
| | F                      = 14 , num_top_rules = 14 , num_weak_rules = 8 , alphabet_size = 8 , total_length
| | F                      = 76} , self = 100 , parent = Nothing , duration = 0.524587704000 , status
| | F                      = Fail , start = 2025-09-04 08:25:54.434215838 UTC , finish = 2025-09-04
| | F                      08:25:54.958803542 UTC , thread_cap_info = ("ThreadId 122", 1, False)}
| | F                      
| | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F                    = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | F                    = 28} , self = 102 , parent = Nothing , duration = 0.875389255000 , status
| | | F                    = Fail , start = 2025-09-04 08:25:54.444036549 UTC , finish = 2025-09-04
| | | F                    08:25:55.319425804 UTC , thread_cap_info = ("ThreadId 150", 0, False)}
| | | F                    
| | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 22 , num_strict_rules
| | | | F                  = 14 , num_top_rules = 14 , num_weak_rules = 8 , alphabet_size = 8 , total_length
| | | | F                  = 76} , self = 103 , parent = Nothing , duration = 0.882192276000 , status
| | | | F                  = Fail , start = 2025-09-04 08:25:54.454220198 UTC , finish = 2025-09-04
| | | | F                  08:25:55.336412474 UTC , thread_cap_info = ("ThreadId 123", 1, False)}
| | | | F                  
| | | | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | F                = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | F                = 28} , self = 99 , parent = Nothing , duration = 0.246373159000 , status
| | | | | F                = Fail , start = 2025-09-04 08:25:54.454225201 UTC , finish = 2025-09-04
| | | | | F                08:25:54.70059836 UTC , thread_cap_info = ("ThreadId 151", 0, False)}
| | | | | F                
| | | | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | F              = 9 , num_top_rules = 0 , num_weak_rules = 54 , alphabet_size = 9 , total_length
| | | | | | F              = 378} , self = 113 , parent = Nothing , duration = 2.133292880000 , status
| | | | | | F              = Fail , start = 2025-09-04 08:25:54.480450778 UTC , finish = 2025-09-04
| | | | | | F              08:25:56.613743658 UTC , thread_cap_info = ("ThreadId 169", 0, False)}
| | | | | | F              
| | | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | | F            = 9 , num_top_rules = 0 , num_weak_rules = 54 , alphabet_size = 9 , total_length
| | | | | | | F            = 378} , self = 112 , parent = Nothing , duration = 2.060309633000 , status
| | | | | | | F            = Fail , start = 2025-09-04 08:25:54.49139137 UTC , finish = 2025-09-04
| | | | | | | F            08:25:56.551701003 UTC , thread_cap_info = ("ThreadId 171", 0, False)}
| | | | | | | F            
| | | | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | F          = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | F          = 126} , self = 110 , parent = Nothing , duration = 1.989651636000 , status
| | | | | | | | F          = Fail , start = 2025-09-04 08:25:54.491403232 UTC , finish = 2025-09-04
| | | | | | | | F          08:25:56.481054868 UTC , thread_cap_info = ("ThreadId 161", 3, False)}
| | | | | | | | F          
| | | | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | F        = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | F        = 126} , self = 111 , parent = Nothing , duration = 1.983984118000 , status
| | | | | | | | | F        = Fail , start = 2025-09-04 08:25:54.512433639 UTC , finish = 2025-09-04
| | | | | | | | | F        08:25:56.496417757 UTC , thread_cap_info = ("ThreadId 162", 3, False)}
| | | | | | | | | F        
| | | | | | | | | | S      Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | | | | | | | S      , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | | | | | | | S      , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | | | | | | | S      = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | | | | | | | S      , cpf = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | | S      = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | | S      = 126} , self = 101 , parent = Nothing , duration = 0.437997491000 , status
| | | | | | | | | | S      = Success , start = 2025-09-04 08:25:54.537724796 UTC , finish = 2025-09-04
| | | | | | | | | | S      08:25:54.975722287 UTC , thread_cap_info = ("ThreadId 163", 3, False)}
| | | | | | | | | | S      
| | | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | | | F    = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | | | F    = 126} , self = 109 , parent = Nothing , duration = 1.759747937000 , status
| | | | | | | | | | | F    = Fail , start = 2025-09-04 08:25:54.537757229 UTC , finish = 2025-09-04
| | | | | | | | | | | F    08:25:56.297505166 UTC , thread_cap_info = ("ThreadId 177", 2, False)}
| | | | | | | | | | | F    
| | | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | | | | F  = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | | | | F  = 126} , self = 108 , parent = Nothing , duration = 1.740509110000 , status
| | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:25:54.551365161 UTC , finish = 2025-09-04
| | | | | | | | | | | | F  08:25:56.291874271 UTC , thread_cap_info = ("ThreadId 179", 2, False)}
| | | | | | | | | | | | F  
| | | | | F | | | | | | |  
| | | | | S | | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | S | | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | S | | | | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | | S | | | | | | |  = 3 , total_length = 28} , self = 115 , parent = Nothing , duration = 1.965661860000
| | | | | S | | | | | | |  , status = Success , start = 2025-09-04 08:25:54.755274569 UTC , finish
| | | | | S | | | | | | |  = 2025-09-04 08:25:56.720936429 UTC , thread_cap_info = ("ThreadId 181",
| | | | | S | | | | | | |  0, False)}
| | | | | S | | | | | | |  
| | F | | | | | | | | | |  
| |   | | | | | | | S | |  
| | F | | | | | | |   | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | F | | | | | | |   | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | F | | | | | | |   | |  = Size { num_rules = 2187 , num_strict_rules = 729 , num_top_rules = 0
| | F | | | | | | |   | |  , num_weak_rules = 1458 , alphabet_size = 81 , total_length = 14580} ,
| | F | | | | | | |   | |  self = 106 , parent = Nothing , duration = 1.127721026000 , status = Fail
| | F | | | | | | |   | |  , start = 2025-09-04 08:25:55.008493957 UTC , finish = 2025-09-04 08:25:56.136214983
| | F | | | | | | |   | |  UTC , thread_cap_info = ("ThreadId 182", 3, False)}
| | F | | | | | | |   | |  
| | | F | | | | | |   | |  
| | |   F | | | | |   | |  
| | | F   | | | | |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | F   | | | | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | F   | | | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | F   | | | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F   | | | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F   | | | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | F   | | | | |   | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | F   | | | | |   | |  = 3 , total_length = 28} , self = 114 , parent = Nothing , duration = 1.280642891000
| | | F   | | | | |   | |  , status = Fail , start = 2025-09-04 08:25:55.375441349 UTC , finish =
| | | F   | | | | |   | |  2025-09-04 08:25:56.65608424 UTC , thread_cap_info = ("ThreadId 184", 0,
| | | F   | | | | |   | |  False)}
| | | F   | | | | |   | |  
F | | |   | | | | |   | |  
  F | |   | | | | |   | |  
    F |   | | | | |   | |  
F     |   | | | | |   | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
F     |   | | | | |   | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
F     |   | | | | |   | |  = Size { num_rules = 2187 , num_strict_rules = 729 , num_top_rules = 0
F     |   | | | | |   | |  , num_weak_rules = 1458 , alphabet_size = 81 , total_length = 14580} ,
F     |   | | | | |   | |  self = 117 , parent = Nothing , duration = 0.647716399000 , status = Fail
F     |   | | | | |   | |  , start = 2025-09-04 08:25:56.136642125 UTC , finish = 2025-09-04 08:25:56.784358524
F     |   | | | | |   | |  UTC , thread_cap_info = ("ThreadId 191", 3, False)}
F     |   | | | | |   | |  
|     |   | | | | |   | F  
|     |   | | | | |   F    
|     |   | | | F |        
|     |   | | |   F        
|     |   | | F            
|     |   | F              
|     F   |                
| E       |                Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E       |                = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E       |                = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E       |                , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E       |                \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E       |                , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E       |                , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| E       |                = 3 , total_length = 28} , self = 118 , parent = Nothing , duration = 0.743118703000
| E       |                , status = Except "AsyncCancelled" , start = 2025-09-04 08:25:56.681616681
| E       |                UTC , finish = 2025-09-04 08:25:57.424735384 UTC , thread_cap_info = ("ThreadId
| E       |                200", 0, False)}
| E       |                
| |       S                
F |                        
  E                        
