[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 803 length 3900
CNF 803 vars 3900 clauses
last 717 length 3460
CNF 717 vars 3460 clauses
last 474 length 2128
last 566 length 2817
CNF 566 vars 2817 clauses
CNF 474 vars 2128 clauses
last 1442 length 7414
last 1688 length 9559
last 566 length 2817
last 1466 length 7122
last 726 length 3093
last 1703 length 9995
last 1789 length 8021
last 1552 length 8168
last 1466 length 7122
CNF 1442 vars 7414 clauses
CNF 1688 vars 9559 clauses
last 1981 length 9540
CNF 566 vars 2817 clauses
last 12143 length 73437
CNF 1466 vars 7122 clauses
last 13382 length 104826
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14860, clauses: 61965
CNF 726 vars 3093 clauses
CNF 1789 vars 8021 clauses
CNF 1703 vars 9995 clauses
CNF 1466 vars 7122 clauses
CNF 1552 vars 8168 clauses
CNF 1981 vars 9540 clauses
CNF 12143 vars 73437 clauses
last 14860 length 61965
CNF 13382 vars 104826 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2092, clauses: 8277
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2196, clauses: 8535
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16166, clauses: 67159
CNF 14860 vars 61965 clauses
last 2092 length 8277
last 2196 length 8535
last 16166 length 67159
CNF 2092 vars 8277 clauses
CNF 2196 vars 8535 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14860, clauses: 61965, status: Satisfied, time: 0.360368218s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2196, clauses: 8535, status: Satisfied, time: 0.06802933s
CNF 16166 vars 67159 clauses
last 473 length 2075
last 444 length 2020
CNF 473 vars 2075 clauses
CNF 444 vars 2020 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 8 weak rules on 4 letters       weights
SRS with 1 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, a, b, b] -> [] {- Input 0 -}
  [a] ->= [] {- Input 1 -}
  [] ->= [b, a, b, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, a], [a, a], [a, b], [b, b], [b, b]] -> [ [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, b], [b, a]] -> [ [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b], [b, b]] -> [ [ a , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b], [b, a]] -> [ [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a], [a, a]] ->= [[b, a]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b]] ->= [[a, b]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a], [a, a]] ->= [[a, a]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, a] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, b], [b, a]] -> [ [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 5 5 \
                | 0 0 5 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 1 0 \
                | 0 2 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 5 0 \
                | 0 5 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,2)\TileAllAll{2}(4/8,4)\Weight(1/4,4)\Matrix{\Natural}{3}(0/4,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 9
  max duration 0.757423099000
  min duration 0.020488310000
  total durat. 3.925598191000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 9
  max duration 0.860420256000
  min duration 0.015815100000
  total durat. 4.175210445000
**************************************************
last 1981 length 9540
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1740, clauses: 6826
last 1740 length 6826
F                          CNF 1740 vars 6826 clauses
Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                          = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
F                          = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
F                          = 84} , self = 107 , parent = Nothing , duration = 0.578274341000 , status
F                          = Fail , start = 2025-09-04 08:23:51.33019481 UTC , finish = 2025-09-04
F                          08:23:51.908469151 UTC , thread_cap_info = ("ThreadId 132", 2, False)}
F                          
| F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                        = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| F                        = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| F                        = 84} , self = 114 , parent = Nothing , duration = 0.757423099000 , status
| F                        = Fail , start = 2025-09-04 08:23:51.333841596 UTC , finish = 2025-09-04
| F                        08:23:52.091264695 UTC , thread_cap_info = ("ThreadId 142", 1, False)}
| F                        
| | F                      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F                      = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F                      = 28} , self = 109 , parent = Nothing , duration = 0.597993197000 , status
| | F                      = Fail , start = 2025-09-04 08:23:51.336162664 UTC , finish = 2025-09-04
| | F                      08:23:51.934155861 UTC , thread_cap_info = ("ThreadId 151", 0, False)}
| | F                      
| | | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | F                    = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | F                    = 84} , self = 112 , parent = Nothing , duration = 0.700923984000 , status
| | | F                    = Fail , start = 2025-09-04 08:23:51.348194384 UTC , finish = 2025-09-04
| | | F                    08:23:52.049118368 UTC , thread_cap_info = ("ThreadId 143", 3, False)}
| | | F                    
| | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | F                  = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | F                  = 84} , self = 106 , parent = Nothing , duration = 0.560232350000 , status
| | | | F                  = Fail , start = 2025-09-04 08:23:51.348196487 UTC , finish = 2025-09-04
| | | | F                  08:23:51.908428837 UTC , thread_cap_info = ("ThreadId 133", 2, False)}
| | | | F                  
| | | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F                = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | F                = 28} , self = 108 , parent = Nothing , duration = 0.554764147000 , status
| | | | | F                = Fail , start = 2025-09-04 08:23:51.375998948 UTC , finish = 2025-09-04
| | | | | F                08:23:51.930763095 UTC , thread_cap_info = ("ThreadId 167", 2, False)}
| | | | | F                
| | | | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F              = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F              = 28} , self = 113 , parent = Nothing , duration = 0.671936062000 , status
| | | | | | F              = Fail , start = 2025-09-04 08:23:51.383323799 UTC , finish = 2025-09-04
| | | | | | F              08:23:52.055259861 UTC , thread_cap_info = ("ThreadId 168", 2, False)}
| | | | | | F              
| | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | F            = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 2 , total_length
| | | | | | | F            = 32} , self = 110 , parent = Nothing , duration = 0.608027461000 , status
| | | | | | | F            = Fail , start = 2025-09-04 08:23:51.38798672 UTC , finish = 2025-09-04
| | | | | | | F            08:23:51.996014181 UTC , thread_cap_info = ("ThreadId 144", 3, False)}
| | | | | | | F            
| | | | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | | | | F          = 1 , num_top_rules = 0 , num_weak_rules = 36 , alphabet_size = 13 , total_length
| | | | | | | | F          = 285} , self = 116 , parent = Nothing , duration = 0.750951184000 , status
| | | | | | | | F          = Fail , start = 2025-09-04 08:23:51.395933018 UTC , finish = 2025-09-04
| | | | | | | | F          08:23:52.146884202 UTC , thread_cap_info = ("ThreadId 174", 2, False)}
| | | | | | | | F          
| | | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | F        = 2 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | | | | | F        = 76} , self = 111 , parent = Nothing , duration = 0.589534126000 , status
| | | | | | | | | F        = Fail , start = 2025-09-04 08:23:51.408569562 UTC , finish = 2025-09-04
| | | | | | | | | F        08:23:51.998103688 UTC , thread_cap_info = ("ThreadId 179", 1, False)}
| | | | | | | | | F        
| | | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | F      = 2 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | | | | | | F      = 76} , self = 115 , parent = Nothing , duration = 0.683313449000 , status
| | | | | | | | | | F      = Fail , start = 2025-09-04 08:23:51.426609224 UTC , finish = 2025-09-04
| | | | | | | | | | F      08:23:52.109922673 UTC , thread_cap_info = ("ThreadId 181", 1, False)}
| | | | | | | | | | F      
| | | | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | | | | | | | F    = 1 , num_top_rules = 0 , num_weak_rules = 36 , alphabet_size = 13 , total_length
| | | | | | | | | | | F    = 285} , self = 117 , parent = Nothing , duration = 0.860420256000 , status
| | | | | | | | | | | F    = Fail , start = 2025-09-04 08:23:51.428330363 UTC , finish = 2025-09-04
| | | | | | | | | | | F    08:23:52.288750619 UTC , thread_cap_info = ("ThreadId 176", 2, False)}
| | | | | | | | | | | F    
| | | | | | | | | | | | S  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | | | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | | | | | | S  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| | | | | | | | | | | | S  = 2 , total_length = 32} , self = 118 , parent = Nothing , duration = 0.864338579000
| | | | | | | | | | | | S  , status = Success , start = 2025-09-04 08:23:51.474878908 UTC , finish
| | | | | | | | | | | | S  = 2025-09-04 08:23:52.339217487 UTC , thread_cap_info = ("ThreadId 184",
| | | | | | | | | | | | S  1, False)}
| | | | | | | | | | | | S  
| | | | F | | | | | | | |  
F | | |   | | | | | | | |  
  | | |   F | | | | | | |  
E | | |     | | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E | | |     | | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | |     | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | |     | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |     | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |     | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
E | | |     | | | | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
E | | |     | | | | | | |  = 4 , total_length = 28} , self = 133 , parent = Nothing , duration = 0.457795127000
E | | |     | | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:51.930790504
E | | |     | | | | | | |  UTC , finish = 2025-09-04 08:23:52.388585631 UTC , thread_cap_info = ("ThreadId
E | | |     | | | | | | |  194", 2, False)}
E | | |     | | | | | | |  
| | F |     | | | | | | |  
| |   |     | F | | | | |  
| | E |     |   | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | E |     |   | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |     |   | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |     |   | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |     |   | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |     |   | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | E |     |   | | | | |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| | E |     |   | | | | |  = 2 , total_length = 32} , self = 120 , parent = Nothing , duration = 0.357008406000
| | E |     |   | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:51.996112115
| | E |     |   | | | | |  UTC , finish = 2025-09-04 08:23:52.353120521 UTC , thread_cap_info = ("ThreadId
| | E |     |   | | | | |  198", 1, False)}
| | E |     |   | | | | |  
| | | |     |   | F | | |  
| | | F     |   |   | | |  
| | |       F   |   | | |  
| | | S         |   | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S         |   | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S         |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S         |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S         |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S         |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | S         |   | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| | | S         |   | | |  = 4 , total_length = 28} , self = 121 , parent = Nothing , duration = 0.285056650000
| | | S         |   | | |  , status = Success , start = 2025-09-04 08:23:52.068424943 UTC , finish
| | | S         |   | | |  = 2025-09-04 08:23:52.353481593 UTC , thread_cap_info = ("ThreadId 199",
| | | S         |   | | |  2, False)}
| | | S         |   | | |  
| F | |         |   | | |  
|   | |         |   F | |  
|   | |         F     | |  
|   | |               F |  
|   | |                 S  
|   E |                    
|     S                    
E                          
