[Info] pool sizes (success) 9 seen 9 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 9 seen 9 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 375 length 1446
CNF 375 vars 1446 clauses
last 12 length 33
last 398 length 1568
CNF 12 vars 33 clauses
last 12 length 33
CNF 398 vars 1568 clauses
last 683 length 2714
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8562
last 618 length 2413
CNF 12 vars 33 clauses
CNF 683 vars 2714 clauses
last 2468 length 8562
CNF 618 vars 2413 clauses
CNF 2468 vars 8562 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8562, status: Unsatisfied, time: 0.020061524s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4404, clauses: 16172
last 4404 length 16172
CNF 4404 vars 16172 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4404, clauses: 16172, status: Satisfied, time: 0.122970932s
last 487 length 1886
last 545 length 2151
CNF 487 vars 1886 clauses
CNF 545 vars 2151 clauses
last 443 length 1712
last 487 length 1919
CNF 487 vars 1919 clauses
CNF 443 vars 1712 clauses
last 399 length 1538
last 429 length 1687
CNF 399 vars 1538 clauses
CNF 429 vars 1687 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2959, clauses: 10641
last 2959 length 10641
CNF 2959 vars 10641 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2959, clauses: 10641, status: Satisfied, time: 0.135721464s
**************************************************
summary
**************************************************
SRS with 7 strict rules and 9 weak rules on 8 letters       weights
SRS with 5 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 9 weak rules on 7 letters       weights
SRS with 3 strict rules and 9 weak rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 9 weak rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 9 weak rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 9 weak rules on 7 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [t, u] -> [t, c, d] {- Input 0 -}
  [d, f] -> [f, d] {- Input 1 -}
  [d, g] -> [u, g] {- Input 2 -}
  [f, u] -> [u, f] {- Input 3 -}
  [d, n] -> [d] {- Input 4 -}
  [d, o] -> [d] {- Input 5 -}
  [o, u] -> [u] {- Input 6 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  (d, 0/1)
  (t, 0/1)
  (n, 0/1)
  (g, 0/1)
  (f, 0/1)
  (o, 1/1)
  (u, 0/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [t, u] -> [t, c, d] {- Input 0 -}
  [d, f] -> [f, d] {- Input 1 -}
  [d, g] -> [u, g] {- Input 2 -}
  [f, u] -> [u, f] {- Input 3 -}
  [d, n] -> [d] {- Input 4 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  ( d
  , St (Corner  / 1 1 5 \
                | 0 3 0 |
                \ 0 0 1 /) )
  ( t
  , St (Corner  / 1 3 0 \
                | 0 0 1 |
                \ 0 0 1 /) )
  ( n
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( g
  , St (Corner  / 1 3 1 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( f
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( o
  , St (Corner  / 1 5 3 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( u
  , St (Corner  / 1 0 5 \
                | 0 3 0 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 2 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [t, u] -> [t, c, d] {- Input 0 -}
  [d, f] -> [f, d] {- Input 1 -}
  [f, u] -> [u, f] {- Input 3 -}
  [d, n] -> [d] {- Input 4 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  (d, 0/1)
  (t, 0/1)
  (n, 0/1)
  (f, 0/1)
  (o, 0/1)
  (u, 1/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [d, f] -> [f, d] {- Input 1 -}
  [f, u] -> [u, f] {- Input 3 -}
  [d, n] -> [d] {- Input 4 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  ( d
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( t
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( n
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( f
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( o
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( u
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( c
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [d, f] -> [f, d] {- Input 1 -}
  [d, n] -> [d] {- Input 4 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  ( d
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( t
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( n
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( f
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( o
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( u
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( c
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [d, n] -> [d] {- Input 4 -}
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  ( d
  , St (Corner  / 1 2 5 \
                | 0 0 4 |
                \ 0 0 1 /) )
  ( t
  , St (Corner  / 1 0 4 \
                | 0 0 1 |
                \ 0 0 1 /) )
  ( n
  , St (Corner  / 1 0 0 \
                | 0 4 2 |
                \ 0 0 1 /) )
  ( f
  , St (Corner  / 1 0 4 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( o
  , St (Corner  / 1 0 5 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( u
  , St (Corner  / 1 0 5 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [n, u] ->= [u] {- Input 7 -}
  [f] ->= [f, n] {- Input 8 -}
  [t] ->= [t, c, n] {- Input 9 -}
  [c, n] ->= [n, c] {- Input 10 -}
  [c, o] ->= [o, c] {- Input 11 -}
  [c, o] ->= [o] {- Input 12 -}
  [c, f] ->= [f, c] {- Input 13 -}
  [c, u] ->= [u, c] {- Input 14 -}
  [c, d] ->= [d, c] {- Input 15 -}
reason
  no strict rules

**************************************************
skeleton: (7/9,8)\Weight(5/9,8)\Matrix{\Natural}{3}(4/9,7)\Weight(3/9,7)\Matrix{\Natural}{2}(2/9,7)\Matrix{\Natural}{2}(1/9,7)\Matrix{\Natural}{3}(0/9,7)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.737504517000
  min duration 0.582038039000
  total durat. 1.319542556000
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.759297678000
  min duration 0.623497998000
  total durat. 1.382795676000
**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = False}" , input_size = Size { num_rules = 9 , num_strict_rules = 9 ,
E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
E              = 33} , self = 46 , parent = Nothing , duration = 0.126347230000 , status
E              = Except "AsyncCancelled" , start = 2025-09-04 07:31:42.350050112 UTC ,
E              finish = 2025-09-04 07:31:42.476397342 UTC , thread_cap_info = ("ThreadId
E              20", 0, False)}
E              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F            = 1 , num_top_rules = 1 , num_weak_rules = 8 , alphabet_size = 7 , total_length
| F            = 33} , self = 58 , parent = Nothing , duration = 0.179828077000 , status
| F            = Fail , start = 2025-09-04 07:31:42.377183331 UTC , finish = 2025-09-04
| F            07:31:42.557011408 UTC , thread_cap_info = ("ThreadId 83", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | F          = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 1 , total_length
| | F          = 2} , self = 57 , parent = Nothing , duration = 0.162920970000 , status
| | F          = Fail , start = 2025-09-04 07:31:42.38376173 UTC , finish = 2025-09-04
| | F          07:31:42.5466827 UTC , thread_cap_info = ("ThreadId 89", 1, False)}
| | F          
| | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F        = 9 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 8 , alphabet_size
| | | F        = 7 , total_length = 33} , self = 70 , parent = Nothing , duration = 0.199245070000
| | | F        , status = Fail , start = 2025-09-04 07:31:42.3838707 UTC , finish = 2025-09-04
| | | F        07:31:42.58311577 UTC , thread_cap_info = ("ThreadId 91", 1, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | F      = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 1 , total_length
| | | | F      = 2} , self = 62 , parent = Nothing , duration = 0.154557062000 , status
| | | | F      = Fail , start = 2025-09-04 07:31:42.41277793 UTC , finish = 2025-09-04
| | | | F      07:31:42.567334992 UTC , thread_cap_info = ("ThreadId 90", 1, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | F    = 5 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | F    = 53} , self = 69 , parent = Nothing , duration = 0.117297811000 , status
| | | | | F    = Fail , start = 2025-09-04 07:31:42.465600355 UTC , finish = 2025-09-04
| | | | | F    07:31:42.582898166 UTC , thread_cap_info = ("ThreadId 104", 2, False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | | F  = 5 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | F  = 53} , self = 64 , parent = Nothing , duration = 0.105677352000 , status
| | | | | | F  = Fail , start = 2025-09-04 07:31:42.465602572 UTC , finish = 2025-09-04
| | | | | | F  07:31:42.571279924 UTC , thread_cap_info = ("ThreadId 105", 2, False)}
| | | | | | F  
E | | | | | |  
S | | | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S | | | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S | | | | | |  = Size { num_rules = 896 , num_strict_rules = 320 , num_top_rules = 0 ,
S | | | | | |  num_weak_rules = 576 , alphabet_size = 64 , total_length = 5184} , self
S | | | | | |  = 71 , parent = Nothing , duration = 0.167434507000 , status = Success
S | | | | | |  , start = 2025-09-04 07:31:42.522884464 UTC , finish = 2025-09-04 07:31:42.690318971
S | | | | | |  UTC , thread_cap_info = ("ThreadId 119", 3, False)}
S | | | | | |  
| | F | | | |  
| F   | | | |  
|     | F | |  
|     |   | F  
| E   |   |    Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E   |   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| E   |   |    , num_strict_rules = 5 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| E   |   |    = 8 , total_length = 53} , self = 75 , parent = Nothing , duration = 0.283830261000
| E   |   |    , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:42.57906315
| E   |   |    UTC , finish = 2025-09-04 07:31:42.862893411 UTC , thread_cap_info = ("ThreadId
| E   |   |    130", 2, False)}
| E   |   |    
| | E |   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E |   |    = False\n , verbose = False}" , input_size = Size { num_rules = 692 , num_strict_rules
| | E |   |    = 266 , num_top_rules = 0 , num_weak_rules = 426 , alphabet_size = 62 ,
| | E |   |    total_length = 3984} , self = 98 , parent = Nothing , duration = 0.582038039000
| | E |   |    , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:42.580848815
| | E |   |    UTC , finish = 2025-09-04 07:31:43.162886854 UTC , thread_cap_info = ("ThreadId
| | E |   |    137", 0, False)}
| | E |   |    
| | | | E |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E |    = False\n , verbose = False}" , input_size = Size { num_rules = 692 , num_strict_rules
| | | | E |    = 266 , num_top_rules = 0 , num_weak_rules = 426 , alphabet_size = 62 ,
| | | | E |    total_length = 3984} , self = 102 , parent = Nothing , duration = 0.623497998000
| | | | E |    , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:42.582882227
| | | | E |    UTC , finish = 2025-09-04 07:31:43.206380225 UTC , thread_cap_info = ("ThreadId
| | | | E |    139", 0, False)}
| | | | E |    
| | | | | F    
| | | F |      
| | | S |      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| | | S |      , num_strict_rules = 5 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | S |      = 8 , total_length = 53} , self = 73 , parent = Nothing , duration = 0.232144881000
| | | S |      , status = Success , start = 2025-09-04 07:31:42.602914505 UTC , finish
| | | S |      = 2025-09-04 07:31:42.835059386 UTC , thread_cap_info = ("ThreadId 141",
| | | S |      2, False)}
| | | S |      
S | | | |      
  | | S |      
  E |   |      
S   |   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S   |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S   |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
S   |   |      = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
S   |   |      = 40} , self = 103 , parent = Nothing , duration = 0.183293728000 , status
S   |   |      = Success , start = 2025-09-04 07:31:43.027328158 UTC , finish = 2025-09-04
S   |   |      07:31:43.210621886 UTC , thread_cap_info = ("ThreadId 184", 2, False)}
S   |   |      
| S |   |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| S |   |      = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
| S |   |      = 40} , self = 97 , parent = Nothing , duration = 0.127374809000 , status
| S |   |      = Success , start = 2025-09-04 07:31:43.031901858 UTC , finish = 2025-09-04
| S |   |      07:31:43.159276667 UTC , thread_cap_info = ("ThreadId 185", 2, False)}
| S |   |      
| S |   |      
|   E   |      
|       E      
S              
E              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E              = False\n , verbose = False}" , input_size = Size { num_rules = 476 , num_strict_rules
E              = 84 , num_top_rules = 0 , num_weak_rules = 392 , alphabet_size = 49 ,
E              total_length = 2674} , self = 110 , parent = Nothing , duration = 0.737504517000
E              , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:43.305382917
E              UTC , finish = 2025-09-04 07:31:44.042887434 UTC , thread_cap_info = ("ThreadId
E              199", 2, False)}
E              
| E            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E            = False\n , verbose = False}" , input_size = Size { num_rules = 476 , num_strict_rules
| E            = 84 , num_top_rules = 0 , num_weak_rules = 392 , alphabet_size = 49 ,
| E            total_length = 2674} , self = 111 , parent = Nothing , duration = 0.759297678000
| E            , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:43.323601415
| E            UTC , finish = 2025-09-04 07:31:44.082899093 UTC , thread_cap_info = ("ThreadId
| E            201", 2, False)}
| E            
E |            
  E            
F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F              = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F              = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
F              = 36} , self = 114 , parent = Nothing , duration = 0.339200269000 , status
F              = Fail , start = 2025-09-04 07:31:44.143839492 UTC , finish = 2025-09-04
F              07:31:44.483039761 UTC , thread_cap_info = ("ThreadId 213", 2, False)}
F              
| S            Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| S            , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| S            , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| S            = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| S            , cpf = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| S            = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
| S            = 36} , self = 113 , parent = Nothing , duration = 0.240639551000 , status
| S            = Success , start = 2025-09-04 07:31:44.147583072 UTC , finish = 2025-09-04
| S            07:31:44.388222623 UTC , thread_cap_info = ("ThreadId 214", 2, False)}
| S            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F          = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
| | F          = 36} , self = 116 , parent = Nothing , duration = 0.124079008000 , status
| | F          = Fail , start = 2025-09-04 07:31:44.379158786 UTC , finish = 2025-09-04
| | F          07:31:44.503237794 UTC , thread_cap_info = ("ThreadId 215", 2, False)}
| | F          
| S |          
F   |          
    F          
E              Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
E              , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
E              = 7 , total_length = 36} , self = 122 , parent = Nothing , duration = 0.496071990000
E              , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:44.527951062
E              UTC , finish = 2025-09-04 07:31:45.024023052 UTC , thread_cap_info = ("ThreadId
E              219", 2, False)}
E              
| S            Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| S            = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| S            , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| S            = 7 , total_length = 36} , self = 119 , parent = Nothing , duration = 0.308263580000
| S            , status = Success , start = 2025-09-04 07:31:44.527955354 UTC , finish
| S            = 2025-09-04 07:31:44.836218934 UTC , thread_cap_info = ("ThreadId 220",
| S            2, False)}
| S            
| S            
E              
