[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 570 length 2509
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 570 vars 2509 clauses
last 432 length 1820
CNF 432 vars 1820 clauses
last 376 length 1563
CNF 376 vars 1563 clauses
last 799 length 3462
last 920 length 4011
CNF 799 vars 3462 clauses
CNF 920 vars 4011 clauses
last 944 length 3979
last 828 length 3845
CNF 944 vars 3979 clauses
last 799 length 3462
CNF 828 vars 3845 clauses
last 526 length 2326
last 703 length 3013
last 1317 length 6455
last 1587 length 8881
last 920 length 4011
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1961, clauses: 7179
CNF 799 vars 3462 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1280, clauses: 5032
last 1215 length 5225
last 1009 length 4430
CNF 703 vars 3013 clauses
CNF 526 vars 2326 clauses
CNF 1317 vars 6455 clauses
CNF 1587 vars 8881 clauses
last 1961 length 7179
CNF 920 vars 4011 clauses
last 1280 length 5032
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9412, clauses: 39189
CNF 1215 vars 5225 clauses
CNF 1009 vars 4430 clauses
CNF 1961 vars 7179 clauses
CNF 1280 vars 5032 clauses
last 9412 length 39189
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1599, clauses: 6189
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1961, clauses: 7179, status: Unsatisfied, time: 1.106894454s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1280, clauses: 5032, status: Satisfied, time: 1.007676453s
last 1599 length 6189
CNF 9412 vars 39189 clauses
CNF 1599 vars 6189 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1599, clauses: 6189, status: Satisfied, time: 0.347752973s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 1 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 4 weak rules on 4 letters       weights
SRS with 1 strict rules and 4 weak rules on 4 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 4 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 32 strict rules and 48 weak rules on 16 letters       weights
  SRS with 0 strict rules and 33 weak rules on 12 letters       no strict rules

  2 SRS with 1 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 2 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, a] -> [] {- Input 0 -}
  [a, a] ->= [a, a, b, a] {- Input 1 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  split
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] ->= [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, a]] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a]] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [ [[b, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
reason
  ([[a, a], [a, a]], 1/1)
  ([[a, a], [a, b]], 0/1)
  ([[a, a], [b, a]], 1/1)
  ([[a, a], [b, b]], 0/1)
  ([[a, b], [a, a]], 1/1)
  ([[a, b], [a, b]], 1/1)
  ([[a, b], [b, a]], 0/1)
  ([[a, b], [b, b]], 1/1)
  ([[b, a], [a, a]], 0/1)
  ([[b, a], [a, b]], 0/1)
  ([[b, a], [b, a]], 1/1)
  ([[b, a], [b, b]], 0/1)
  ([[b, b], [a, a]], 0/1)
  ([[b, b], [a, b]], 0/1)
  ([[b, b], [b, a]], 1/1)
  ([[b, b], [b, b]], 0/1)
   property Termination
has value Just True
for SRS
  [ [[a, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 2 \
                | 0 0 3 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 4 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 2 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 5 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  no strict rules

**************************************************
skeleton: (1/1,2)\TileAllAll{2}(4/4,4)\Weight(1/4,4)\Split[(2/3,4)\TileAllAll{2}(32/48,16)\Weight(0/33,12)[],(1/2,4)\Matrix{\Natural}{3}(0/2,3)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 2.040478371000
  min duration 0.050575891000
  total durat. 7.462909723000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 22}
    , self = 109
    , parent = Nothing
    , duration = 1.322729666000
    , status = Fail
    , start = 2025-09-04 08:23:25.827692821 UTC
    , finish = 2025-09-04 08:23:27.150422487 UTC
    , thread_cap_info = ("ThreadId 184", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 40}
    , self = 110
    , parent = Nothing
    , duration = 1.557393488000
    , status = Fail
    , start = 2025-09-04 08:23:25.686121247 UTC
    , finish = 2025-09-04 08:23:27.243514735 UTC
    , thread_cap_info = ("ThreadId 117", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 48}
    , self = 113
    , parent = Nothing
    , duration = 1.919967823000
    , status = Fail
    , start = 2025-09-04 08:23:25.918223685 UTC
    , finish = 2025-09-04 08:23:27.838191508 UTC
    , thread_cap_info = ("ThreadId 186", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 38}
    , self = 112
    , parent = Nothing
    , duration = 2.040478371000
    , status = Fail
    , start = 2025-09-04 08:23:25.726384743 UTC
    , finish = 2025-09-04 08:23:27.766863114 UTC
    , thread_cap_info = ("ThreadId 167", 1, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 1.902039895000
  min duration 0.025753793000
  total durat. 7.059752756000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 22}
    , self = 108
    , parent = Nothing
    , duration = 1.304982070000
    , status = Fail
    , start = 2025-09-04 08:23:25.845424847 UTC
    , finish = 2025-09-04 08:23:27.150406917 UTC
    , thread_cap_info = ("ThreadId 185", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 38}
    , self = 107
    , parent = Nothing
    , duration = 1.305843222000
    , status = Fail
    , start = 2025-09-04 08:23:25.742630822 UTC
    , finish = 2025-09-04 08:23:27.048474044 UTC
    , thread_cap_info = ("ThreadId 169", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 40}
    , self = 111
    , parent = Nothing
    , duration = 1.528657468000
    , status = Fail
    , start = 2025-09-04 08:23:25.714924524 UTC
    , finish = 2025-09-04 08:23:27.243581992 UTC
    , thread_cap_info = ("ThreadId 120", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 48}
    , self = 114
    , parent = Nothing
    , duration = 1.902039895000
    , status = Fail
    , start = 2025-09-04 08:23:25.98962218 UTC
    , finish = 2025-09-04 08:23:27.891662075 UTC
    , thread_cap_info = ("ThreadId 192", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.296321068000
  min duration 1.296321068000
  total durat. 1.296321068000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 22}
    , self = 120
    , parent = Nothing
    , duration = 1.296321068000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:23:27.150455975 UTC
    , finish = 2025-09-04 08:23:28.446777043 UTC
    , thread_cap_info = ("ThreadId 211", 3, False)}
Success : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 2.360952520000
  min duration 1.249535421000
  total durat. 3.610487941000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 22}
    , self = 118
    , parent = Nothing
    , duration = 1.249535421000
    , status = Success
    , start = 2025-09-04 08:23:27.161580824 UTC
    , finish = 2025-09-04 08:23:28.411116245 UTC
    , thread_cap_info = ("ThreadId 212", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 2
      , total_length = 18}
    , self = 116
    , parent = Nothing
    , duration = 2.360952520000
    , status = Success
    , start = 2025-09-04 08:23:25.924280667 UTC
    , finish = 2025-09-04 08:23:28.285233187 UTC
    , thread_cap_info = ("ThreadId 188", 1, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.267040989000
  min duration 2.267040989000
  total durat. 2.267040989000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 38}
    , self = 115
    , parent = Nothing
    , duration = 2.267040989000
    , status = Fail
    , start = 2025-09-04 08:23:26.000169866 UTC
    , finish = 2025-09-04 08:23:28.267210855 UTC
    , thread_cap_info = ("ThreadId 202", 2, False)}
**************************************************
F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
F                      = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F                      = 38} , self = 105 , parent = Nothing , duration = 0.318873246000 , status
F                      = Fail , start = 2025-09-04 08:23:25.670075533 UTC , finish = 2025-09-04
F                      08:23:25.988948779 UTC , thread_cap_info = ("ThreadId 118", 2, False)}
F                      
| F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| F                    = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F                    = 38} , self = 106 , parent = Nothing , duration = 0.759321991000 , status
| F                    = Fail , start = 2025-09-04 08:23:25.670079015 UTC , finish = 2025-09-04
| F                    08:23:26.429401006 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F                  = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F                  = 38} , self = 99 , parent = Nothing , duration = 0.252891238000 , status
| | F                  = Fail , start = 2025-09-04 08:23:25.671365281 UTC , finish = 2025-09-04
| | F                  08:23:25.924256519 UTC , thread_cap_info = ("ThreadId 154", 3, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | F                = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F                = 40} , self = 110 , parent = Nothing , duration = 1.557393488000 , status
| | | F                = Fail , start = 2025-09-04 08:23:25.686121247 UTC , finish = 2025-09-04
| | | F                08:23:27.243514735 UTC , thread_cap_info = ("ThreadId 117", 2, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | F              = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F              = 38} , self = 96 , parent = Nothing , duration = 0.136195534000 , status
| | | | F              = Fail , start = 2025-09-04 08:23:25.68613062 UTC , finish = 2025-09-04
| | | | F              08:23:25.822326154 UTC , thread_cap_info = ("ThreadId 155", 3, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F            = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | F            = 40} , self = 111 , parent = Nothing , duration = 1.528657468000 , status
| | | | | F            = Fail , start = 2025-09-04 08:23:25.714924524 UTC , finish = 2025-09-04
| | | | | F            08:23:27.243581992 UTC , thread_cap_info = ("ThreadId 120", 2, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F          = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F          = 38} , self = 112 , parent = Nothing , duration = 2.040478371000 , status
| | | | | | F          = Fail , start = 2025-09-04 08:23:25.726384743 UTC , finish = 2025-09-04
| | | | | | F          08:23:27.766863114 UTC , thread_cap_info = ("ThreadId 167", 1, False)}
| | | | | | F          
| | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | F        = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | F        = 38} , self = 107 , parent = Nothing , duration = 1.305843222000 , status
| | | | | | | F        = Fail , start = 2025-09-04 08:23:25.742630822 UTC , finish = 2025-09-04
| | | | | | | F        08:23:27.048474044 UTC , thread_cap_info = ("ThreadId 169", 1, False)}
| | | | | | | F        
| | | | F | | |        
| | | | F | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | F | | |        = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | F | | |        = 22} , self = 109 , parent = Nothing , duration = 1.322729666000 , status
| | | | F | | |        = Fail , start = 2025-09-04 08:23:25.827692821 UTC , finish = 2025-09-04
| | | | F | | |        08:23:27.150422487 UTC , thread_cap_info = ("ThreadId 184", 3, False)}
| | | | F | | |        
| | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | F      = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | | | F      = 22} , self = 108 , parent = Nothing , duration = 1.304982070000 , status
| | | | | | | | F      = Fail , start = 2025-09-04 08:23:25.845424847 UTC , finish = 2025-09-04
| | | | | | | | F      08:23:27.150406917 UTC , thread_cap_info = ("ThreadId 185", 3, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | | | F    = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | F    = 48} , self = 113 , parent = Nothing , duration = 1.919967823000 , status
| | | | | | | | | F    = Fail , start = 2025-09-04 08:23:25.918223685 UTC , finish = 2025-09-04
| | | | | | | | | F    08:23:27.838191508 UTC , thread_cap_info = ("ThreadId 186", 1, False)}
| | | | | | | | | F    
| | F | | | | | | |    
| | S | | | | | | |    Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | S | | | | | | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | S | | | | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | S | | | | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | | | | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | | | | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | S | | | | | | |    , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size
| | S | | | | | | |    = 2 , total_length = 18} , self = 116 , parent = Nothing , duration = 2.360952520000
| | S | | | | | | |    , status = Success , start = 2025-09-04 08:23:25.924280667 UTC , finish
| | S | | | | | | |    = 2025-09-04 08:23:28.285233187 UTC , thread_cap_info = ("ThreadId 188",
| | S | | | | | | |    1, False)}
| | S | | | | | | |    
F | | | | | | | | |    
F | | | | | | | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F | | | | | | | | |    = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F | | | | | | | | |    = 48} , self = 114 , parent = Nothing , duration = 1.902039895000 , status
F | | | | | | | | |    = Fail , start = 2025-09-04 08:23:25.98962218 UTC , finish = 2025-09-04
F | | | | | | | | |    08:23:27.891662075 UTC , thread_cap_info = ("ThreadId 192", 1, False)}
F | | | | | | | | |    
| | | | | | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | | | F  = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | | | | | | | | | F  = 4 , total_length = 38} , self = 115 , parent = Nothing , duration = 2.267040989000
| | | | | | | | | | F  , status = Fail , start = 2025-09-04 08:23:26.000169866 UTC , finish =
| | | | | | | | | | F  2025-09-04 08:23:28.267210855 UTC , thread_cap_info = ("ThreadId 202",
| | | | | | | | | | F  2, False)}
| | | | | | | | | | F  
| F | | | | | | | | |  
|   | | | | | F | | |  
|   | | | | |   F | |  
|   | | F | |     | |  
| E | |   | |     | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E | |   | |     | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |   | |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |   | |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |   | |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |   | |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| E | |   | |     | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| E | |   | |     | |  = 4 , total_length = 22} , self = 120 , parent = Nothing , duration = 1.296321068000
| E | |   | |     | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:27.150455975
| E | |   | |     | |  UTC , finish = 2025-09-04 08:23:28.446777043 UTC , thread_cap_info = ("ThreadId
| E | |   | |     | |  211", 3, False)}
| E | |   | |     | |  
| | | | S | |     | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | S | |     | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | S | |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | S | |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S | |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S | |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | S | |     | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | | S | |     | |  = 4 , total_length = 22} , self = 118 , parent = Nothing , duration = 1.249535421000
| | | | S | |     | |  , status = Success , start = 2025-09-04 08:23:27.161580824 UTC , finish
| | | | S | |     | |  = 2025-09-04 08:23:28.411116245 UTC , thread_cap_info = ("ThreadId 212",
| | | | S | |     | |  3, False)}
| | | | S | |     | |  
| | | F | | |     | |  
| | |   | F |     | |  
| | |   |   F     | |  
| | |   |         F |  
F | |   |           |  
  | |   |           F  
  | S   |              
  |     S              
  E                    
