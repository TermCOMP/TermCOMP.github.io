[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 313 length 1275
last 311 length 1268
CNF 311 vars 1268 clauses
CNF 313 vars 1275 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1298, clauses: 4895
last 1298 length 4895
CNF 1298 vars 4895 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1298, clauses: 4895, status: Unsatisfied, time: 0.111538388s
last 6201 length 28098
CNF 6201 vars 28098 clauses
last 6201 length 28098
last 6201 length 28098
last 6129 length 30324
CNF 6201 vars 28098 clauses
CNF 6201 vars 28098 clauses
CNF 6129 vars 30324 clauses
last 6128 length 30320
last 6128 length 30320
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9503, clauses: 39249
CNF 6128 vars 30320 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 22600, clauses: 94667
last 9503 length 39249
CNF 6128 vars 30320 clauses
last 22600 length 94667
CNF 9503 vars 39249 clauses
CNF 22600 vars 94667 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10120, clauses: 41203
last 10120 length 41203
CNF 10120 vars 41203 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9503, clauses: 39249, status: Satisfied, time: 0.562156468s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 2 weak rules on 2 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, p, b] -> [b, a, p, b] {- Input 0 -}
  [p] ->= [a, p, a] {- Input 1 -}
  [a, p, a, a] ->= [p] {- Input 2 -}
reason
  ( p
  , St  / 0A - -  \
        | 1A - 1A |
        \ -  - -  / )
  ( a
  , St  / 0A -   -   \
        | 1A -2A -1A |
        \ -  -   1A  / )
  ( b
  , St  / 0A  -1A 0A \
        | -1A -1A -  |
        \ 1A  0A  1A / )
   property Termination
has value Just True
for SRS
  [p] ->= [a, p, a] {- Input 1 -}
  [a, p, a, a] ->= [p] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\Matrix{\ArcticBZ}{3}(0/2,2)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.459085777000
  min duration 0.009744350000
  total durat. 1.119841339000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.820977694000
  min duration 0.012345781000
  total durat. 1.967383816000
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.217144946000
  min duration 1.217144946000
  total durat. 1.217144946000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 16}
    , self = 63
    , parent = Nothing
    , duration = 1.217144946000
    , status = Success
    , start = 2025-09-04 08:29:46.664540598 UTC
    , finish = 2025-09-04 08:29:47.881685544 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.039308165000
  min duration 1.039308165000
  total durat. 1.039308165000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 16}
    , self = 65
    , parent = Nothing
    , duration = 1.039308165000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:29:46.878146902 UTC
    , finish = 2025-09-04 08:29:47.917455067 UTC
    , thread_cap_info = ("ThreadId 120", 0, False)}
**************************************************
S                  Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
S                  , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
S                  , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
S                  = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
S                  , cpf = False}" , input_size = Size { num_rules = 27 , num_strict_rules
S                  = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
S                  = 198} , self = 51 , parent = Nothing , duration = 0.117084288000 , status
S                  = Success , start = 2025-09-04 08:29:46.653689992 UTC , finish = 2025-09-04
S                  08:29:46.77077428 UTC , thread_cap_info = ("ThreadId 93", 3, False)}
S                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| F                = 198} , self = 57 , parent = Nothing , duration = 0.459085777000 , status
| F                = Fail , start = 2025-09-04 08:29:46.660362373 UTC , finish = 2025-09-04
| F                08:29:47.11944815 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
| F                
| | S              Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | S              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | S              , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | S              = 3 , total_length = 16} , self = 63 , parent = Nothing , duration = 1.217144946000
| | S              , status = Success , start = 2025-09-04 08:29:46.664540598 UTC , finish
| | S              = 2025-09-04 08:29:47.881685544 UTC , thread_cap_info = ("ThreadId 101",
| | S              0, False)}
| | S              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F            = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | F            = 198} , self = 62 , parent = Nothing , duration = 0.820977694000 , status
| | | F            = Fail , start = 2025-09-04 08:29:46.678087878 UTC , finish = 2025-09-04
| | | F            08:29:47.499065572 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | | F            
| | | | F          Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | F          = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | F          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | F          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | F          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | F          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | F          , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | | F          = 3 , total_length = 16} , self = 52 , parent = Nothing , duration = 0.122653539000
| | | | F          , status = Fail , start = 2025-09-04 08:29:46.678087988 UTC , finish =
| | | | F          2025-09-04 08:29:46.800741527 UTC , thread_cap_info = ("ThreadId 103",
| | | | F          0, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | F        = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | F        = 198} , self = 54 , parent = Nothing , duration = 0.337620337000 , status
| | | | | F        = Fail , start = 2025-09-04 08:29:46.703045456 UTC , finish = 2025-09-04
| | | | | F        08:29:47.040665793 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | F      = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | F      = 198} , self = 58 , parent = Nothing , duration = 0.440302670000 , status
| | | | | | F      = Fail , start = 2025-09-04 08:29:46.717246654 UTC , finish = 2025-09-04
| | | | | | F      08:29:47.157549324 UTC , thread_cap_info = ("ThreadId 111", 0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | F    = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | F    = 198} , self = 53 , parent = Nothing , duration = 0.313390875000 , status
| | | | | | | F    = Fail , start = 2025-09-04 08:29:46.71936666 UTC , finish = 2025-09-04
| | | | | | | F    08:29:47.032757535 UTC , thread_cap_info = ("ThreadId 115", 1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | F  = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | F  = 198} , self = 61 , parent = Nothing , duration = 0.693757671000 , status
| | | | | | | | F  = Fail , start = 2025-09-04 08:29:46.740291732 UTC , finish = 2025-09-04
| | | | | | | | F  08:29:47.434049403 UTC , thread_cap_info = ("ThreadId 117", 1, False)}
| | | | | | | | F  
S | | | | | | | |  
F | | | | | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
F | | | | | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
F | | | | | | | |  = Size { num_rules = 2187 , num_strict_rules = 729 , num_top_rules = 0
F | | | | | | | |  , num_weak_rules = 1458 , alphabet_size = 81 , total_length = 20412} ,
F | | | | | | | |  self = 55 , parent = Nothing , duration = 0.317867468000 , status = Fail
F | | | | | | | |  , start = 2025-09-04 08:29:46.777245007 UTC , finish = 2025-09-04 08:29:47.095112475
F | | | | | | | |  UTC , thread_cap_info = ("ThreadId 119", 3, False)}
F | | | | | | | |  
| | | | F | | | |  
| | | | E | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | E | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E | | | |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | E | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | | E | | | |  = 3 , total_length = 16} , self = 65 , parent = Nothing , duration = 1.039308165000
| | | | E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:29:46.878146902
| | | | E | | | |  UTC , finish = 2025-09-04 08:29:47.917455067 UTC , thread_cap_info = ("ThreadId
| | | | E | | | |  120", 0, False)}
| | | | E | | | |  
| | | | | | | F |  
| | | | | F |   |  
F | | | |   |   |  
F | | | |   |   |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
F | | | |   |   |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
F | | | |   |   |  = Size { num_rules = 2187 , num_strict_rules = 729 , num_top_rules = 0
F | | | |   |   |  , num_weak_rules = 1458 , alphabet_size = 81 , total_length = 20412} ,
F | | | |   |   |  self = 59 , parent = Nothing , duration = 0.275263825000 , status = Fail
F | | | |   |   |  , start = 2025-09-04 08:29:47.095520062 UTC , finish = 2025-09-04 08:29:47.370783887
F | | | |   |   |  UTC , thread_cap_info = ("ThreadId 126", 3, False)}
F | | | |   |   |  
| F | | |   |   |  
|   | | |   F   |  
F   | | |       |  
    | | |       F  
    | F |          
    S   |          
        E          
