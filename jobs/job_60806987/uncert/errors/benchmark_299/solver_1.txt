[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 551 length 2783
CNF 551 vars 2783 clauses
last 664 length 3834
CNF 664 vars 3834 clauses
last 1003 length 5007
CNF 1003 vars 5007 clauses
last 1109 length 5702
last 1001 length 4899
CNF 1109 vars 5702 clauses
last 1061 length 5334
CNF 1001 vars 4899 clauses
CNF 1061 vars 5334 clauses
last 3217 length 20282
last 2952 length 17955
last 693 length 3393
CNF 2952 vars 17955 clauses
CNF 3217 vars 20282 clauses
last 3603 length 25439
last 901 length 4819
CNF 693 vars 3393 clauses
last 610 length 2678
last 516 length 2300
last 3523 length 23782
last 901 length 4819
last 1523 length 7011
last 693 length 3393
last 1885 length 9083
last 12271 length 73482
CNF 3603 vars 25439 clauses
CNF 901 vars 4819 clauses
CNF 610 vars 2678 clauses
CNF 516 vars 2300 clauses
last 13561 length 102919
CNF 3523 vars 23782 clauses
CNF 901 vars 4819 clauses
CNF 1523 vars 7011 clauses
CNF 693 vars 3393 clauses
CNF 1885 vars 9083 clauses
CNF 12271 vars 73482 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14906, clauses: 61786
CNF 13561 vars 102919 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1971, clauses: 7816
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2058, clauses: 8031
last 14906 length 61786
last 1971 length 7816
last 2058 length 8031
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13600, clauses: 56772
last 13600 length 56772
CNF 2058 vars 8031 clauses
CNF 1971 vars 7816 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2058, clauses: 8031, status: Satisfied, time: 0.041368725s
CNF 14906 vars 61786 clauses
CNF 13600 vars 56772 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1971, clauses: 7816, status: Unsatisfied, time: 0.059335349s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13600, clauses: 56772, status: Satisfied, time: 0.076445592s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 8 weak rules on 4 letters       weights
SRS with 1 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, a, b] -> [] {- Input 0 -}
  [a] ->= [] {- Input 1 -}
  [] ->= [b, a, b, b, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, a], [a, a], [a, b], [b, b]] -> [ [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a]] -> [ [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b]] -> [ [ a , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a], [a, a]] ->= [[b, a]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b]] ->= [[a, b]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a], [a, a]] ->= [[a, a]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 3 \
                | 0 0 1 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 1 0 \
                | 0 6 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 4 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,2)\TileAllAll{2}(4/8,4)\Weight(1/4,4)\Matrix{\Natural}{3}(0/4,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 10
  max duration 0.832059018000
  min duration 0.008258991000
  total durat. 3.870809018000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 10
  max duration 0.857958733000
  min duration 0.019307282000
  total durat. 4.740307394000
**************************************************
F                            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                            = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
F                            = 19 , num_top_rules = 19 , num_weak_rules = 4 , alphabet_size = 6 , total_length
F                            = 108} , self = 109 , parent = Nothing , duration = 0.430088540000 , status
F                            = Fail , start = 2025-09-04 08:23:47.152569556 UTC , finish = 2025-09-04
F                            08:23:47.582658096 UTC , thread_cap_info = ("ThreadId 131", 3, False)}
F                            
| F                          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                          = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| F                          = 19 , num_top_rules = 19 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| F                          = 108} , self = 114 , parent = Nothing , duration = 0.710204180000 , status
| F                          = Fail , start = 2025-09-04 08:23:47.158637225 UTC , finish = 2025-09-04
| F                          08:23:47.868841405 UTC , thread_cap_info = ("ThreadId 128", 2, False)}
| F                          
| | F                        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | F                        = 19 , num_top_rules = 19 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | F                        = 108} , self = 111 , parent = Nothing , duration = 0.681460583000 , status
| | F                        = Fail , start = 2025-09-04 08:23:47.169022422 UTC , finish = 2025-09-04
| | F                        08:23:47.850483005 UTC , thread_cap_info = ("ThreadId 132", 3, False)}
| | F                        
| | | F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | F                      = 19 , num_top_rules = 19 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | F                      = 108} , self = 108 , parent = Nothing , duration = 0.322718729000 , status
| | | F                      = Fail , start = 2025-09-04 08:23:47.169162328 UTC , finish = 2025-09-04
| | | F                      08:23:47.491881057 UTC , thread_cap_info = ("ThreadId 127", 2, False)}
| | | F                      
| | | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | F                    = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F                    = 30} , self = 110 , parent = Nothing , duration = 0.376373817000 , status
| | | | F                    = Fail , start = 2025-09-04 08:23:47.252729519 UTC , finish = 2025-09-04
| | | | F                    08:23:47.629103336 UTC , thread_cap_info = ("ThreadId 159", 3, False)}
| | | | F                    
| | | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F                  = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | F                  = 30} , self = 115 , parent = Nothing , duration = 0.611038373000 , status
| | | | | F                  = Fail , start = 2025-09-04 08:23:47.262725703 UTC , finish = 2025-09-04
| | | | | F                  08:23:47.873764076 UTC , thread_cap_info = ("ThreadId 162", 3, False)}
| | | | | F                  
| | | | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | F                = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 2 , total_length
| | | | | | F                = 32} , self = 113 , parent = Nothing , duration = 0.588806434000 , status
| | | | | | F                = Fail , start = 2025-09-04 08:23:47.269392324 UTC , finish = 2025-09-04
| | | | | | F                08:23:47.858198758 UTC , thread_cap_info = ("ThreadId 164", 2, False)}
| | | | | | F                
| | | | | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | F              = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 2 , total_length
| | | | | | | F              = 32} , self = 112 , parent = Nothing , duration = 0.581815167000 , status
| | | | | | | F              = Fail , start = 2025-09-04 08:23:47.276373933 UTC , finish = 2025-09-04
| | | | | | | F              08:23:47.8581891 UTC , thread_cap_info = ("ThreadId 165", 3, False)}
| | | | | | | F              
| | | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | | | | F            = 1 , num_top_rules = 0 , num_weak_rules = 36 , alphabet_size = 13 , total_length
| | | | | | | | F            = 316} , self = 120 , parent = Nothing , duration = 0.832059018000 , status
| | | | | | | | F            = Fail , start = 2025-09-04 08:23:47.281455191 UTC , finish = 2025-09-04
| | | | | | | | F            08:23:48.113514209 UTC , thread_cap_info = ("ThreadId 173", 1, False)}
| | | | | | | | F            
| | | | | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | | | | | F          = 1 , num_top_rules = 0 , num_weak_rules = 36 , alphabet_size = 13 , total_length
| | | | | | | | | F          = 316} , self = 121 , parent = Nothing , duration = 0.857958733000 , status
| | | | | | | | | F          = Fail , start = 2025-09-04 08:23:47.28146058 UTC , finish = 2025-09-04
| | | | | | | | | F          08:23:48.139419313 UTC , thread_cap_info = ("ThreadId 175", 1, False)}
| | | | | | | | | F          
| | | | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | F        = 2 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | | | | | | F        = 80} , self = 118 , parent = Nothing , duration = 0.605111645000 , status
| | | | | | | | | | F        = Fail , start = 2025-09-04 08:23:47.28311679 UTC , finish = 2025-09-04
| | | | | | | | | | F        08:23:47.888228435 UTC , thread_cap_info = ("ThreadId 181", 3, False)}
| | | | | | | | | | F        
| | | | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | | F      = 2 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | | | | | | | F      = 80} , self = 119 , parent = Nothing , duration = 0.606156686000 , status
| | | | | | | | | | | F      = Fail , start = 2025-09-04 08:23:47.288234246 UTC , finish = 2025-09-04
| | | | | | | | | | | F      08:23:47.894390932 UTC , thread_cap_info = ("ThreadId 183", 3, False)}
| | | | | | | | | | | F      
| | | | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | | | | | | F    = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | | | F    = 30} , self = 117 , parent = Nothing , duration = 0.581439815000 , status
| | | | | | | | | | | | F    = Fail , start = 2025-09-04 08:23:47.296448561 UTC , finish = 2025-09-04
| | | | | | | | | | | | F    08:23:47.877888376 UTC , thread_cap_info = ("ThreadId 188", 2, False)}
| | | | | | | | | | | | F    
| | | | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | | | | | | | F  = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | | | | F  = 30} , self = 116 , parent = Nothing , duration = 0.577320463000 , status
| | | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:23:47.296452933 UTC , finish = 2025-09-04
| | | | | | | | | | | | | F  08:23:47.873773396 UTC , thread_cap_info = ("ThreadId 190", 2, False)}
| | | | | | | | | | | | | F  
| | | F | | | | | | | | | |  
F | |   | | | | | | | | | |  
  | |   F | | | | | | | | |  
E | |     | | | | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E | |     | | | | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |     | | | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |     | | | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |     | | | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |     | | | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
E | |     | | | | | | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
E | |     | | | | | | | | |  = 4 , total_length = 30} , self = 129 , parent = Nothing , duration = 0.604780615000
E | |     | | | | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:47.629185486
E | |     | | | | | | | | |  UTC , finish = 2025-09-04 08:23:48.233966101 UTC , thread_cap_info = ("ThreadId
E | |     | | | | | | | | |  195", 3, False)}
E | |     | | | | | | | | |  
| | F     | | | | | | | | |  
| |       | | F | | | | | |  
| |       | F   | | | | | |  
| | S     |     | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | S     |     | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S     |     | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S     |     | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |     | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |     | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | S     |     | | | | | |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| | S     |     | | | | | |  = 2 , total_length = 32} , self = 125 , parent = Nothing , duration = 0.368049653000
| | S     |     | | | | | |  , status = Success , start = 2025-09-04 08:23:47.858219937 UTC , finish
| | S     |     | | | | | |  = 2025-09-04 08:23:48.22626959 UTC , thread_cap_info = ("ThreadId 204",
| | S     |     | | | | | |  3, False)}
| | S     |     | | | | | |  
| | | F   |     | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | F   |     | | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | F   |     | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | F   |     | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F   |     | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F   |     | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | F   |     | | | | | |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| | | F   |     | | | | | |  = 2 , total_length = 32} , self = 124 , parent = Nothing , duration = 0.329702249000
| | | F   |     | | | | | |  , status = Fail , start = 2025-09-04 08:23:47.858239061 UTC , finish =
| | | F   |     | | | | | |  2025-09-04 08:23:48.18794131 UTC , thread_cap_info = ("ThreadId 205", 3,
| | | F   |     | | | | | |  False)}
| | | F   |     | | | | | |  
| F | |   |     | | | | | |  
|   | |   F     | | | | | |  
|   | |         | | | | | F  
|   | |         | | | | F    
|   | |         | | F |      
| S | |         | |   |      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| S | |         | |   |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S | |         | |   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S | |         | |   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | |         | |   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | |         | |   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| S | |         | |   |      , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| S | |         | |   |      = 4 , total_length = 30} , self = 122 , parent = Nothing , duration = 0.299616968000
| S | |         | |   |      , status = Success , start = 2025-09-04 08:23:47.888243089 UTC , finish
| S | |         | |   |      = 2025-09-04 08:23:48.187860057 UTC , thread_cap_info = ("ThreadId 207",
| S | |         | |   |      0, False)}
| S | |         | |   |      
| | | |         | |   F      
| | | |         F |          
| | | |           F          
| S | |                      
|   | F                      
|   S                        
E                            
