[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 802 length 3771
CNF 802 vars 3771 clauses
last 695 length 3199
CNF 695 vars 3199 clauses
last 970 length 5077
CNF 970 vars 5077 clauses
last 542 length 2585
CNF 542 vars 2585 clauses
last 542 length 2585
CNF 542 vars 2585 clauses
last 695 length 3199
CNF 695 vars 3199 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4622, clauses: 16956
last 4622 length 16956
CNF 4622 vars 16956 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4622, clauses: 16956
last 4622 length 16956
CNF 4622 vars 16956 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4622, clauses: 16956, status: Unsatisfied, time: 0.085707727s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9140, clauses: 37677
last 9140 length 37677
last 552 length 2381
CNF 9140 vars 37677 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4622, clauses: 16956, status: Unsatisfied, time: 0.097935875s
CNF 552 vars 2381 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9140, clauses: 37677, status: Unsatisfied, time: 0.04618865s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9140, clauses: 37677
last 9140 length 37677
last 738 length 3254
CNF 9140 vars 37677 clauses
last 2218 length 11351
last 2218 length 11351
last 2242 length 10339
last 958 length 4443
last 2242 length 10339
last 1193 length 5992
last 1193 length 5992
last 958 length 4443
CNF 738 vars 3254 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9140, clauses: 37677, status: Unsatisfied, time: 0.161115664s
last 5815 length 29960
last 6939 length 31721
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15359, clauses: 63777
CNF 2218 vars 11351 clauses
CNF 2218 vars 11351 clauses
CNF 2242 vars 10339 clauses
CNF 2242 vars 10339 clauses
CNF 958 vars 4443 clauses
CNF 1193 vars 5992 clauses
CNF 1193 vars 5992 clauses
CNF 958 vars 4443 clauses
CNF 5815 vars 29960 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2419, clauses: 9391
CNF 6939 vars 31721 clauses
last 15359 length 63777
last 2419 length 9391
CNF 15359 vars 63777 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4780, clauses: 17847
CNF 2419 vars 9391 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15359, clauses: 63777, status: Satisfied, time: 0.823005152s
last 4780 length 17847
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30853, clauses: 127117
last 30853 length 127117
CNF 4780 vars 17847 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4780, clauses: 17847, status: Satisfied, time: 0.400359049s
CNF 30853 vars 127117 clauses
last 595 length 2644
last 435 length 1906
CNF 595 vars 2644 clauses
CNF 435 vars 1906 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2185, clauses: 8404
last 2185 length 8404
CNF 2185 vars 8404 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2185, clauses: 8404, status: Unsatisfied, time: 0.105625607s
last 6939 length 31721
last 5815 length 29960
CNF 6939 vars 31721 clauses
CNF 5815 vars 29960 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 18 weak rules on 9 letters       weights
SRS with 1 strict rules and 16 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 16 weak rules on 8 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c, a] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [b, a, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ c , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [a, c]
  , St (Corner  / 1 0 0 \
                | 0 3 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 1 0 \
                | 0 4 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 0 \
                | 0 4 0 |
                \ 0 0 1 /) )
  ( [b, c]
  , St (Corner  / 1 0 7 \
                | 0 0 4 |
                \ 0 0 1 /) )
  ( [c, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [c, b]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [c, c]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\TileAllAll{2}(9/18,9)\Weight(1/16,9)\Matrix{\Natural}{3}(0/16,8)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13963, clauses: 57880
last 13963 length 57880

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 10
  max duration 0.895754857000
  min duration 0.010376614000
  total durat. 4.668267395000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 10
  max duration 0.805910010000
  min duration 0.005986631000
  total durat. 4.096995938000
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.522198005000
  min duration 1.522198005000
  total durat. 1.522198005000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 42}
    , self = 124
    , parent = Nothing
    , duration = 1.522198005000
    , status = Success
    , start = 2025-09-04 08:27:33.329779831 UTC
    , finish = 2025-09-04 08:27:34.851977836 UTC
    , thread_cap_info = ("ThreadId 185", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.221661611000
  min duration 1.221661611000
  total durat. 1.221661611000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 16
      , alphabet_size = 9
      , total_length = 70}
    , self = 139
    , parent = Nothing
    , duration = 1.221661611000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:27:34.110269931 UTC
    , finish = 2025-09-04 08:27:35.331931542 UTC
    , thread_cap_info = ("ThreadId 212", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.242108378000
  min duration 1.242108378000
  total durat. 1.242108378000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 42}
    , self = 126
    , parent = Nothing
    , duration = 1.242108378000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:27:33.650465389 UTC
    , finish = 2025-09-04 08:27:34.892573767 UTC
    , thread_cap_info = ("ThreadId 207", 1, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.034020089000
  min duration 1.034020089000
  total durat. 1.034020089000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 8}
    , self = 119
    , parent = Nothing
    , duration = 1.034020089000
    , status = Fail
    , start = 2025-09-04 08:27:33.042496837 UTC
    , finish = 2025-09-04 08:27:34.076516926 UTC
    , thread_cap_info = ("ThreadId 112", 1, False)}
**************************************************
F                                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                                , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
F                                num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
F                                = 8} , self = 119 , parent = Nothing , duration = 1.034020089000 , status
F                                = Fail , start = 2025-09-04 08:27:33.042496837 UTC , finish = 2025-09-04
F                                08:27:34.076516926 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
F                                
| F                              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| F                              num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| F                              = 8} , self = 116 , parent = Nothing , duration = 0.941782238000 , status
| F                              = Fail , start = 2025-09-04 08:27:33.049857003 UTC , finish = 2025-09-04
| F                              08:27:33.991639241 UTC , thread_cap_info = ("ThreadId 113", 1, False)}
| F                              
| | F                            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F                            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F                            = 21 , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 6
| | F                            , alphabet_size = 6 , total_length = 75} , self = 91 , parent = Nothing
| | F                            , duration = 0.132705001000 , status = Fail , start = 2025-09-04 08:27:33.050547812
| | F                            UTC , finish = 2025-09-04 08:27:33.183252813 UTC , thread_cap_info = ("ThreadId
| | F                            119", 2, False)}
| | F                            
| | | F                          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | F                          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | F                          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | F                          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F                          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F                          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 21
| | | F                          , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size
| | | F                          = 6 , total_length = 75} , self = 96 , parent = Nothing , duration = 0.171628693000
| | | F                          , status = Fail , start = 2025-09-04 08:27:33.062708309 UTC , finish =
| | | F                          2025-09-04 08:27:33.234337002 UTC , thread_cap_info = ("ThreadId 126",
| | | F                          2, False)}
| | | F                          
| | | | F                        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F                        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F                        = 21 , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 6
| | | | F                        , alphabet_size = 6 , total_length = 75} , self = 95 , parent = Nothing
| | | | F                        , duration = 0.147905007000 , status = Fail , start = 2025-09-04 08:27:33.064999319
| | | | F                        UTC , finish = 2025-09-04 08:27:33.212904326 UTC , thread_cap_info = ("ThreadId
| | | | F                        128", 0, False)}
| | | | F                        
| | | | | F                      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | F                      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | F                      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | F                      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F                      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F                      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 21
| | | | | F                      , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size
| | | | | F                      = 6 , total_length = 75} , self = 110 , parent = Nothing , duration = 0.509670604000
| | | | | F                      , status = Fail , start = 2025-09-04 08:27:33.113204158 UTC , finish =
| | | | | F                      2025-09-04 08:27:33.622874762 UTC , thread_cap_info = ("ThreadId 138",
| | | | | F                      0, False)}
| | | | | F                      
| | | | | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | F                    = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | | F                    = 42} , self = 111 , parent = Nothing , duration = 0.491929524000 , status
| | | | | | F                    = Fail , start = 2025-09-04 08:27:33.139996583 UTC , finish = 2025-09-04
| | | | | | F                    08:27:33.631926107 UTC , thread_cap_info = ("ThreadId 154", 1, False)}
| | | | | | F                    
| | | | | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | F                  = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | | | | F                  total_length = 216} , self = 112 , parent = Nothing , duration = 0.771559321000
| | | | | | | F                  , status = Fail , start = 2025-09-04 08:27:33.141244129 UTC , finish =
| | | | | | | F                  2025-09-04 08:27:33.91280345 UTC , thread_cap_info = ("ThreadId 157", 1,
| | | | | | | F                  False)}
| | | | | | | F                  
| | | | | | | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | F                = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | | | | F                = 42} , self = 102 , parent = Nothing , duration = 0.109708663000 , status
| | | | | | | | F                = Fail , start = 2025-09-04 08:27:33.183000796 UTC , finish = 2025-09-04
| | | | | | | | F                08:27:33.292709459 UTC , thread_cap_info = ("ThreadId 158", 1, False)}
| | | | | | | | F                
| | F | | | | | |                
| | F | | | | | |                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | | | |                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | | | |                = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | F | | | | | |                = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | F | | | | | |                total_length = 216} , self = 114 , parent = Nothing , duration = 0.761368365000
| | F | | | | | |                , status = Fail , start = 2025-09-04 08:27:33.199254138 UTC , finish =
| | F | | | | | |                2025-09-04 08:27:33.960622503 UTC , thread_cap_info = ("ThreadId 156",
| | F | | | | | |                1, False)}
| | F | | | | | |                
| | | | | | | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | | | F              = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | | | | | | F              total_length = 216} , self = 115 , parent = Nothing , duration = 0.780255905000
| | | | | | | | | F              , status = Fail , start = 2025-09-04 08:27:33.210671118 UTC , finish =
| | | | | | | | | F              2025-09-04 08:27:33.990927023 UTC , thread_cap_info = ("ThreadId 163",
| | | | | | | | | F              1, False)}
| | | | | | | | | F              
| | | | | | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | | | | F            = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | | | | | | | F            total_length = 216} , self = 113 , parent = Nothing , duration = 0.722408609000
| | | | | | | | | | F            , status = Fail , start = 2025-09-04 08:27:33.210674094 UTC , finish =
| | | | | | | | | | F            2025-09-04 08:27:33.933082703 UTC , thread_cap_info = ("ThreadId 164",
| | | | | | | | | | F            1, False)}
| | | | | | | | | | F            
| | | | F | | | | | |            
| | | F   | | | | | |            
| | | F   | | | | | |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   | | | | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   | | | | | |            = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | F   | | | | | |            = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | F   | | | | | |            = 70} , self = 117 , parent = Nothing , duration = 0.773062260000 , status
| | | F   | | | | | |            = Fail , start = 2025-09-04 08:27:33.283365923 UTC , finish = 2025-09-04
| | | F   | | | | | |            08:27:34.056428183 UTC , thread_cap_info = ("ThreadId 175", 1, False)}
| | | F   | | | | | |            
| | | | F | | | | | |            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | | | | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | | | | | |            = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | F | | | | | |            = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | F | | | | | |            = 70} , self = 118 , parent = Nothing , duration = 0.784749500000 , status
| | | | F | | | | | |            = Fail , start = 2025-09-04 08:27:33.285430894 UTC , finish = 2025-09-04
| | | | F | | | | | |            08:27:34.070180394 UTC , thread_cap_info = ("ThreadId 177", 1, False)}
| | | | F | | | | | |            
| | | | | | | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | | | | F          = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | | | | F          = 70} , self = 121 , parent = Nothing , duration = 0.823588009000 , status
| | | | | | | | | | | F          = Fail , start = 2025-09-04 08:27:33.290437273 UTC , finish = 2025-09-04
| | | | | | | | | | | F          08:27:34.114025282 UTC , thread_cap_info = ("ThreadId 179", 1, False)}
| | | | | | | | | | | F          
| | | | | | | | F | | |          
| | | | | | | | F | | |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F | | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F | | |          = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | F | | |          = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | F | | |          = 70} , self = 120 , parent = Nothing , duration = 0.796517919000 , status
| | | | | | | | F | | |          = Fail , start = 2025-09-04 08:27:33.298982261 UTC , finish = 2025-09-04
| | | | | | | | F | | |          08:27:34.09550018 UTC , thread_cap_info = ("ThreadId 180", 1, False)}
| | | | | | | | F | | |          
| | | | | | | | | | | | S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | | | | | | | | S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | | | | | | | | S        = Size { num_rules = 1377 , num_strict_rules = 81 , num_top_rules = 0 ,
| | | | | | | | | | | | S        num_weak_rules = 1296 , alphabet_size = 81 , total_length = 8424} , self
| | | | | | | | | | | | S        = 106 , parent = Nothing , duration = 0.209876315000 , status = Success
| | | | | | | | | | | | S        , start = 2025-09-04 08:27:33.325244415 UTC , finish = 2025-09-04 08:27:33.53512073
| | | | | | | | | | | | S        UTC , thread_cap_info = ("ThreadId 183", 1, False)}
| | | | | | | | | | | | S        
| | | | | | | | | | | | | S      Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | | | | | | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | | | | | | | | S      , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | | | | | | | | | | S      = 3 , total_length = 42} , self = 124 , parent = Nothing , duration = 1.522198005000
| | | | | | | | | | | | | S      , status = Success , start = 2025-09-04 08:27:33.329779831 UTC , finish
| | | | | | | | | | | | | S      = 2025-09-04 08:27:34.851977836 UTC , thread_cap_info = ("ThreadId 185",
| | | | | | | | | | | | | S      1, False)}
| | | | | | | | | | | | | S      
| | | | | | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | | | | | | | | | | | | F    = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | F    = 312} , self = 123 , parent = Nothing , duration = 0.895754857000 , status
| | | | | | | | | | | | | | F    = Fail , start = 2025-09-04 08:27:33.338724533 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | F    08:27:34.23447939 UTC , thread_cap_info = ("ThreadId 187", 0, False)}
| | | | | | | | | | | | | | F    
| | | | | | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | | | | | | | | | | | | | F  = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | | F  = 312} , self = 122 , parent = Nothing , duration = 0.805910010000 , status
| | | | | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:27:33.36977239 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | F  08:27:34.1756824 UTC , thread_cap_info = ("ThreadId 189", 0, False)}
| | | | | | | | | | | | | | | F  
| | | | | | | | | | | | S | | |  
| | | | | F | | | | | |   | | |  
| | | | |   F | | | | |   | | |  
| | | | | E   | | | | |   | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | E   | | | | |   | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | E   | | | | |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | E   | | | | |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E   | | | | |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E   | | | | |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | E   | | | | |   | | |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | | E   | | | | |   | | |  = 3 , total_length = 42} , self = 126 , parent = Nothing , duration = 1.242108378000
| | | | | E   | | | | |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:33.650465389
| | | | | E   | | | | |   | | |  UTC , finish = 2025-09-04 08:27:34.892573767 UTC , thread_cap_info = ("ThreadId
| | | | | E   | | | | |   | | |  207", 1, False)}
| | | | | E   | | | | |   | | |  
| | | | | |   F | | | |   | | |  
| | | | | |     | | F |   | | |  
| | F | | |     | |   |   | | |  
| |   | | |     | F   |   | | |  
| F   | | |     |     |   | | |  
|     F | |     |     |   | | |  
|       F |     |     |   | | |  
F         |     |     |   | | |  
          |     F     |   | | |  
E         |           |   | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E         |           |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E         |           |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E         |           |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E         |           |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E         |           |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
E         |           |   | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
E         |           |   | | |  = 9 , total_length = 70} , self = 139 , parent = Nothing , duration = 1.221661611000
E         |           |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:34.110269931
E         |           |   | | |  UTC , finish = 2025-09-04 08:27:35.331931542 UTC , thread_cap_info = ("ThreadId
E         |           |   | | |  212", 1, False)}
E         |           |   | | |  
|         |           F   | | |  
| S       |               | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| S       |               | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S       |               | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S       |               | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S       |               | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S       |               | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| S       |               | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
| S       |               | | |  = 9 , total_length = 70} , self = 128 , parent = Nothing , duration = 0.823665193000
| S       |               | | |  , status = Success , start = 2025-09-04 08:27:34.171596403 UTC , finish
| S       |               | | |  = 2025-09-04 08:27:34.995261596 UTC , thread_cap_info = ("ThreadId 213",
| S       |               | | |  1, False)}
| S       |               | | |  
| |       |               | | F  
| |       |               | F    
| |       |               S      
| |       E                      
| S                              
E                                
F                                Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
F                                = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F                                = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F                                , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F                                \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F                                , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
F                                , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
F                                = 3 , total_length = 36} , self = 142 , parent = Nothing , duration = 0.126797971000
F                                , status = Fail , start = 2025-09-04 08:27:35.349780236 UTC , finish =
F                                2025-09-04 08:27:35.476578207 UTC , thread_cap_info = ("ThreadId 239",
F                                1, False)}
F                                
F                                
