[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 580 length 2315
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 22 length 73
last 25 length 90
last 12 length 33
last 12 length 33
CNF 22 vars 73 clauses
CNF 12 vars 33 clauses
CNF 12 vars 33 clauses
CNF 25 vars 90 clauses
last 668 length 2691
CNF 668 vars 2691 clauses
last 114 length 419
CNF 580 vars 2315 clauses
CNF 114 vars 419 clauses
last 141 length 534
CNF 141 vars 534 clauses
last 1578 length 6139
last 1686 length 6603
CNF 1686 vars 6603 clauses
CNF 1578 vars 6139 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1235, clauses: 4234
last 1235 length 4234
CNF 1235 vars 4234 clauses
last 1686 length 6603
last 1578 length 6139
last 1686 length 6603
CNF 1686 vars 6603 clauses
CNF 1578 vars 6139 clauses
last 1578 length 6139
CNF 1578 vars 6139 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1235, clauses: 4234, status: Satisfied, time: 0.077444833s
CNF 1686 vars 6603 clauses
last 90 length 327
last 110 length 415
last 1250 length 4895
last 1390 length 5467
CNF 1250 vars 4895 clauses
CNF 1390 vars 5467 clauses
CNF 90 vars 327 clauses
CNF 110 vars 415 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1010, clauses: 3387
last 1010 length 3387
CNF 1010 vars 3387 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1010, clauses: 3387, status: Satisfied, time: 0.033716391s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5950, clauses: 23831
**************************************************
summary
**************************************************
SRS with 3 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 2 weak rules on 4 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [a] {- Input 0 -}
  [d, b] -> [b] {- Input 1 -}
  [d, c] -> [c] {- Input 2 -}
  [a] ->= [d, a] {- Input 3 -}
  [c] ->= [c, b] {- Input 4 -}
reason
  ( d
  , St (Corner  / 1 1 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( a
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( b
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 1 1 \
                | 0 3 1 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [a, b] -> [a] {- Input 0 -}
  [d, b] -> [b] {- Input 1 -}
  [a] ->= [d, a] {- Input 3 -}
  [c] ->= [c, b] {- Input 4 -}
reason
  ( d
  , St (Corner  / 1 2 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( a
  , St (Corner  / 1 7 7 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( b
  , St (Corner  / 1 0 0 \
                | 0 2 1 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 0 2 \
                | 0 0 2 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [a] ->= [d, a] {- Input 3 -}
  [c] ->= [c, b] {- Input 4 -}
reason
  no strict rules

**************************************************
skeleton: (3/2,4)\Matrix{\Natural}{3}(2/2,4)\Matrix{\Natural}{3}(0/2,4)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F              = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
F              = 12 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 16 , total_length
F              = 100} , self = 90 , parent = Nothing , duration = 0.178261559000 , status
F              = Fail , start = 2025-09-04 07:31:47.269059664 UTC , finish = 2025-09-04
F              07:31:47.447321223 UTC , thread_cap_info = ("ThreadId 137", 3, False)}
F              
| E            Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E            = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| E            , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| E            = 4 , total_length = 15} , self = 94 , parent = Nothing , duration = 0.193066082000
| E            , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:47.275481166
| E            UTC , finish = 2025-09-04 07:31:47.468547248 UTC , thread_cap_info = ("ThreadId
| E            148", 0, False)}
| E            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | F          = 12 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 16 , total_length
| | F          = 100} , self = 89 , parent = Nothing , duration = 0.112746145000 , status
| | F          = Fail , start = 2025-09-04 07:31:47.285826843 UTC , finish = 2025-09-04
| | F          07:31:47.398572988 UTC , thread_cap_info = ("ThreadId 139", 1, False)}
| | F          
| | | S        Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | S        , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | S        = 4 , total_length = 15} , self = 92 , parent = Nothing , duration = 0.153957363000
| | | S        , status = Success , start = 2025-09-04 07:31:47.314532473 UTC , finish
| | | S        = 2025-09-04 07:31:47.468489836 UTC , thread_cap_info = ("ThreadId 153",
| | | S        0, False)}
| | | S        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | F      = 12 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 16 , total_length
| | | | F      = 100} , self = 105 , parent = Nothing , duration = 0.145990175000 , status
| | | | F      = Fail , start = 2025-09-04 07:31:47.356175528 UTC , finish = 2025-09-04
| | | | F      07:31:47.502165703 UTC , thread_cap_info = ("ThreadId 165", 2, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | F    = 12 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 16 , total_length
| | | | | F    = 100} , self = 110 , parent = Nothing , duration = 0.141136543000 , status
| | | | | F    = Fail , start = 2025-09-04 07:31:47.375986593 UTC , finish = 2025-09-04
| | | | | F    07:31:47.517123136 UTC , thread_cap_info = ("ThreadId 166", 2, False)}
| | | | | F    
| | | | | | S  Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | | | S  , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | | | S  , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | | | S  = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | | | S  , cpf = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | | S  = 12 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 16 , total_length
| | | | | | S  = 100} , self = 113 , parent = Nothing , duration = 0.247382298000 , status
| | | | | | S  = Success , start = 2025-09-04 07:31:47.392840458 UTC , finish = 2025-09-04
| | | | | | S  07:31:47.640222756 UTC , thread_cap_info = ("ThreadId 167", 2, False)}
| | | | | | S  
| | F | | | |  
F |   | | | |  
  |   S | | |  
  E     | | |  
        F | |  
E         | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E         | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E         | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E         | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E         | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E         | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E         | |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
E         | |  = 4 , total_length = 12} , self = 114 , parent = Nothing , duration = 0.140912034000
E         | |  , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:47.507444033
E         | |  UTC , finish = 2025-09-04 07:31:47.648356067 UTC , thread_cap_info = ("ThreadId
E         | |  202", 0, False)}
E         | |  
|         F |  
| S         |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| S         |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| S         |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| S         |  = 4 , total_length = 12} , self = 111 , parent = Nothing , duration = 0.121189589000
| S         |  , status = Success , start = 2025-09-04 07:31:47.517231202 UTC , finish
| S         |  = 2025-09-04 07:31:47.638420791 UTC , thread_cap_info = ("ThreadId 206",
| S         |  0, False)}
| S         |  
| S         |  
|           S  
E              
