[Info] pool sizes (success) 9 seen 9 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 9 seen 9 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 545 length 2105
last 593 length 2300
CNF 545 vars 2105 clauses
CNF 593 vars 2300 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3537, clauses: 12943
last 3537 length 12943
CNF 3537 vars 12943 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3537, clauses: 12943, status: Satisfied, time: 0.146939107s
last 567 length 2208
last 512 length 1986
CNF 567 vars 2208 clauses
CNF 512 vars 1986 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3285, clauses: 12096
last 3285 length 12096
CNF 3285 vars 12096 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3285, clauses: 12096, status: Satisfied, time: 0.113531167s
**************************************************
summary
**************************************************
SRS with 6 strict rules and 9 weak rules on 7 letters       weights
SRS with 3 strict rules and 9 weak rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 9 weak rules on 6 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 9 weak rules on 6 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [p, s] -> [s] {- Input 0 -}
  [n, s] -> [s] {- Input 1 -}
  [o, s] -> [s] {- Input 2 -}
  [o, n] -> [n, o] {- Input 3 -}
  [o, m] -> [n, o] {- Input 4 -}
  [n, o, p] -> [o, n] {- Input 5 -}
  [t] ->= [t, c, n] {- Input 6 -}
  [p, n] ->= [m, p] {- Input 7 -}
  [p, m] ->= [m, p] {- Input 8 -}
  [n, p] ->= [p, n] {- Input 9 -}
  [c, p] ->= [p, c] {- Input 10 -}
  [c, m] ->= [m, c] {- Input 11 -}
  [c, n] ->= [n, c] {- Input 12 -}
  [c, o] ->= [o, c] {- Input 13 -}
  [c, o] ->= [o] {- Input 14 -}
reason
  (s, 0/1)
  (t, 0/1)
  (n, 0/1)
  (p, 1/1)
  (o, 1/1)
  (c, 0/1)
  (m, 0/1)
   property Termination
has value Just True
for SRS
  [n, s] -> [s] {- Input 1 -}
  [o, n] -> [n, o] {- Input 3 -}
  [o, m] -> [n, o] {- Input 4 -}
  [t] ->= [t, c, n] {- Input 6 -}
  [p, n] ->= [m, p] {- Input 7 -}
  [p, m] ->= [m, p] {- Input 8 -}
  [n, p] ->= [p, n] {- Input 9 -}
  [c, p] ->= [p, c] {- Input 10 -}
  [c, m] ->= [m, c] {- Input 11 -}
  [c, n] ->= [n, c] {- Input 12 -}
  [c, o] ->= [o, c] {- Input 13 -}
  [c, o] ->= [o] {- Input 14 -}
reason
  ( s
  , St (Corner  / 1 7 7 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( t
  , St (Corner  / 1 6 1 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( n
  , St (Corner  / 1 4 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( p
  , St (Corner  / 1 1 3 \
                | 0 4 0 |
                \ 0 0 1 /) )
  ( o
  , St (Corner  / 1 2 3 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 1 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( m
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [o, n] -> [n, o] {- Input 3 -}
  [o, m] -> [n, o] {- Input 4 -}
  [t] ->= [t, c, n] {- Input 6 -}
  [p, n] ->= [m, p] {- Input 7 -}
  [p, m] ->= [m, p] {- Input 8 -}
  [n, p] ->= [p, n] {- Input 9 -}
  [c, p] ->= [p, c] {- Input 10 -}
  [c, m] ->= [m, c] {- Input 11 -}
  [c, n] ->= [n, c] {- Input 12 -}
  [c, o] ->= [o, c] {- Input 13 -}
  [c, o] ->= [o] {- Input 14 -}
reason
  ( t
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( n
  , St (Corner  / 1 0 0 \
                | 0 4 6 |
                \ 0 0 1 /) )
  ( p
  , St (Corner  / 1 0 5 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( o
  , St (Corner  / 1 1 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( c
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( m
  , St (Corner  / 1 0 0 \
                | 0 4 6 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [t] ->= [t, c, n] {- Input 6 -}
  [p, n] ->= [m, p] {- Input 7 -}
  [p, m] ->= [m, p] {- Input 8 -}
  [n, p] ->= [p, n] {- Input 9 -}
  [c, p] ->= [p, c] {- Input 10 -}
  [c, m] ->= [m, c] {- Input 11 -}
  [c, n] ->= [n, c] {- Input 12 -}
  [c, o] ->= [o, c] {- Input 13 -}
  [c, o] ->= [o] {- Input 14 -}
reason
  no strict rules

**************************************************
skeleton: (6/9,7)\Weight(3/9,7)\Matrix{\Natural}{3}(2/9,6)\Matrix{\Natural}{3}(0/9,6)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.598962807000
  min duration 1.598962807000
  total durat. 1.598962807000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 7
      , total_length = 46}
    , self = 59
    , parent = Nothing
    , duration = 1.598962807000
    , status = Fail
    , start = 2025-09-04 07:31:41.349263939 UTC
    , finish = 2025-09-04 07:31:42.948226746 UTC
    , thread_cap_info = ("ThreadId 67", 1, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.762681224000
  min duration 1.762681224000
  total durat. 1.762681224000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 7
      , total_length = 46}
    , self = 62
    , parent = Nothing
    , duration = 1.762681224000
    , status = Fail
    , start = 2025-09-04 07:31:41.334844374 UTC
    , finish = 2025-09-04 07:31:43.097525598 UTC
    , thread_cap_info = ("ThreadId 66", 1, False)}
**************************************************
F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F            = True})" , input_size = Size { num_rules = 12 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
F            = 46} , self = 62 , parent = Nothing , duration = 1.762681224000 , status
F            = Fail , start = 2025-09-04 07:31:41.334844374 UTC , finish = 2025-09-04
F            07:31:43.097525598 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
F            
| F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F          = True})" , input_size = Size { num_rules = 12 , num_strict_rules = 3 ,
| F          num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 7 , total_length
| F          = 46} , self = 59 , parent = Nothing , duration = 1.598962807000 , status
| F          = Fail , start = 2025-09-04 07:31:41.349263939 UTC , finish = 2025-09-04
| F          07:31:42.948226746 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
| F          
| | E        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E        , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | E        = 7 , total_length = 46} , self = 45 , parent = Nothing , duration = 0.362475911000
| | E        , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:41.425825518
| | E        UTC , finish = 2025-09-04 07:31:41.788301429 UTC , thread_cap_info = ("ThreadId
| | E        84", 2, False)}
| | E        
| | | S      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | S      , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | S      = 7 , total_length = 46} , self = 42 , parent = Nothing , duration = 0.246519564000
| | | S      , status = Success , start = 2025-09-04 07:31:41.448347926 UTC , finish
| | | S      = 2025-09-04 07:31:41.69486749 UTC , thread_cap_info = ("ThreadId 86",
| | | S      0, False)}
| | | S      
| | | | E    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 412 , num_strict_rules
| | | | E    = 88 , num_top_rules = 0 , num_weak_rules = 324 , alphabet_size = 48 ,
| | | | E    total_length = 2402} , self = 49 , parent = Nothing , duration = 0.804059201000
| | | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:41.561754062
| | | | E    UTC , finish = 2025-09-04 07:31:42.365813263 UTC , thread_cap_info = ("ThreadId
| | | | E    98", 2, False)}
| | | | E    
| | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 412 , num_strict_rules
| | | | | E  = 88 , num_top_rules = 0 , num_weak_rules = 324 , alphabet_size = 48 ,
| | | | | E  total_length = 2402} , self = 50 , parent = Nothing , duration = 0.805363695000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:41.56175608
| | | | | E  UTC , finish = 2025-09-04 07:31:42.367119775 UTC , thread_cap_info = ("ThreadId
| | | | | E  100", 2, False)}
| | | | | E  
| | | S | |  
| | E   | |  
| |     E |  
| |       E  
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | F        = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 6 , total_length
| | F        = 43} , self = 54 , parent = Nothing , duration = 0.254917802000 , status
| | F        = Fail , start = 2025-09-04 07:31:42.389535645 UTC , finish = 2025-09-04
| | F        07:31:42.644453447 UTC , thread_cap_info = ("ThreadId 121", 2, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | F      = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 6 , total_length
| | | F      = 43} , self = 56 , parent = Nothing , duration = 0.331264547000 , status
| | | F      = Fail , start = 2025-09-04 07:31:42.398101142 UTC , finish = 2025-09-04
| | | F      07:31:42.729365689 UTC , thread_cap_info = ("ThreadId 123", 2, False)}
| | | F      
| | | | S    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | S    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | S    = Size { num_rules = 396 , num_strict_rules = 72 , num_top_rules = 0 ,
| | | | S    num_weak_rules = 324 , alphabet_size = 36 , total_length = 2340} , self
| | | | S    = 53 , parent = Nothing , duration = 0.239528163000 , status = Success
| | | | S    , start = 2025-09-04 07:31:42.404886098 UTC , finish = 2025-09-04 07:31:42.644414261
| | | | S    UTC , thread_cap_info = ("ThreadId 125", 2, False)}
| | | | S    
| | | | S    
| | F |      
| | E |      Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | E |      , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | E |      = 6 , total_length = 43} , self = 63 , parent = Nothing , duration = 0.533382009000
| | E |      , status = Except "AsyncCancelled" , start = 2025-09-04 07:31:42.693786634
| | E |      UTC , finish = 2025-09-04 07:31:43.227168643 UTC , thread_cap_info = ("ThreadId
| | E |      128", 2, False)}
| | E |      
| | | F      
| | | S      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | S      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | S      , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | S      = 6 , total_length = 43} , self = 60 , parent = Nothing , duration = 0.185568120000
| | | S      , status = Success , start = 2025-09-04 07:31:42.765830077 UTC , finish
| | | S      = 2025-09-04 07:31:42.951398197 UTC , thread_cap_info = ("ThreadId 130",
| | | S      2, False)}
| | | S      
| F | |      
|   | S      
F   |        
    E        
