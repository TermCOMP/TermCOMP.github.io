last 234 length 923
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 412 length 1691
CNF 412 vars 1691 clauses
last 238 length 999
last 238 length 999
last 412 length 1691
CNF 238 vars 999 clauses
last 262 length 1030
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2076, clauses: 7559
CNF 238 vars 999 clauses
last 476 length 1923
CNF 412 vars 1691 clauses
CNF 262 vars 1030 clauses
last 2076 length 7559
CNF 476 vars 1923 clauses
last 4205 length 16645
CNF 2076 vars 7559 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2076, clauses: 7559, status: Unsatisfied, time: 0.344147421s
CNF 4205 vars 16645 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1550, clauses: 5707
last 1550 length 5707
CNF 1550 vars 5707 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1550, clauses: 5707, status: Unsatisfied, time: 0.067327319s
last 7618 length 30942
CNF 7618 vars 30942 clauses
last 2536 length 10325
CNF 2536 vars 10325 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8787, clauses: 35999
last 8787 length 35999
CNF 8787 vars 35999 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8787, clauses: 35999, status: Satisfied, time: 0.10869402s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       mirror
SRS with 1 strict rules and 2 weak rules on 3 letters       context
SRS with 1 strict rules and 6 weak rules on 3 letters       mirror
SRS with 1 strict rules and 6 weak rules on 3 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, c] -> [c] {- Input 0 -}
  [] ->= [a, b] {- Input 1 -}
  [a, b] ->= [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, a, a] -> [c] {- Mirror (Input 0) -}
  [] ->= [b, a] {- Mirror (Input 1) -}
  [b, a] ->= [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
last 2260 length 9410
CNF 2260 vars 9410 clauses
for SRS
  [c, a, a] -> [c] {- Mirror (Input 0) -}
  [a] ->= [a, b, a] {- Mirror (Input 1) -}
  [b] ->= [b, b, a] {- Mirror (Input 1) -}
  [c] ->= [c, b, a] {- Mirror (Input 1) -}
  [a, b, a] ->= [a] {- Mirror (Input 2) -}
  [b, b, a] ->= [b] {- Mirror (Input 2) -}
  [c, b, a] ->= [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, c] -> [c] {- Input 0 -}
  [a] ->= [a, b, a] {- Input 1 -}
  [b] ->= [a, b, b] {- Input 1 -}
  [c] ->= [a, b, c] {- Input 1 -}
  [a, b, a] ->= [a] {- Input 2 -}
  [a, b, b] ->= [b] {- Input 2 -}
  [a, b, c] ->= [c] {- Input 2 -}
reason
  ( a
  , St  / 0A 2A 2A \
        | -  -  1A |
        \ -  0A -  / )
  ( b
  , St  / 0A 1A  2A \
        | -  -   0A |
        \ -  -1A -  / )
  ( c
  , St  / 0A  - - \
        | -1A - - |
        \ -   - - / )
   property Termination
has value Just True
for SRS
  [a] ->= [a, b, a] {- Input 1 -}
  [b] ->= [a, b, b] {- Input 1 -}
  [c] ->= [a, b, c] {- Input 1 -}
  [a, b, a] ->= [a] {- Input 2 -}
  [a, b, b] ->= [b] {- Input 2 -}
  [a, b, c] ->= [c] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: \Mirror(1/2,3)\Context\Mirror(1/6,3)\Matrix{\ArcticBZ}{3}(0/6,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.139511687000
  min duration 0.047314127000
  total durat. 2.097649114000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 54
      , alphabet_size = 9
      , total_length = 378}
    , self = 90
    , parent = Nothing
    , duration = 1.139511687000
    , status = Fail
    , start = 2025-09-04 08:27:15.071409034 UTC
    , finish = 2025-09-04 08:27:16.210920721 UTC
    , thread_cap_info = ("ThreadId 135", 1, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.686008138000
  min duration 0.195873941000
  total durat. 1.740509941000
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.177305131000
  min duration 1.177305131000
  total durat. 1.177305131000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 28}
    , self = 91
    , parent = Nothing
    , duration = 1.177305131000
    , status = Success
    , start = 2025-09-04 08:27:15.47523331 UTC
    , finish = 2025-09-04 08:27:16.652538441 UTC
    , thread_cap_info = ("ThreadId 156", 1, False)}
**************************************************
E                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                  = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                  = 4} , self = 65 , parent = Nothing , duration = 0.140478306000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-04 08:27:14.907516353 UTC ,
E                  finish = 2025-09-04 08:27:15.047994659 UTC , thread_cap_info = ("ThreadId
E                  20", 1, False)}
E                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| F                num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| F                = 8} , self = 79 , parent = Nothing , duration = 0.261136563000 , status
| F                = Fail , start = 2025-09-04 08:27:14.938929665 UTC , finish = 2025-09-04
| F                08:27:15.200066228 UTC , thread_cap_info = ("ThreadId 102", 3, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F              = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F              = 34} , self = 80 , parent = Nothing , duration = 0.425387839000 , status
| | F              = Fail , start = 2025-09-04 08:27:14.938947381 UTC , finish = 2025-09-04
| | F              08:27:15.36433522 UTC , thread_cap_info = ("ThreadId 82", 2, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F            = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F            = 34} , self = 82 , parent = Nothing , duration = 0.480360166000 , status
| | | F            = Fail , start = 2025-09-04 08:27:14.946493041 UTC , finish = 2025-09-04
| | | F            08:27:15.426853207 UTC , thread_cap_info = ("ThreadId 105", 2, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F          = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F          = 34} , self = 75 , parent = Nothing , duration = 0.195873941000 , status
| | | | F          = Fail , start = 2025-09-04 08:27:14.96489004 UTC , finish = 2025-09-04
| | | | F          08:27:15.160763981 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 10 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 4 ,
| | | | | F        alphabet_size = 4 , total_length = 34} , self = 85 , parent = Nothing ,
| | | | | F        duration = 0.692652713000 , status = Fail , start = 2025-09-04 08:27:14.971229302
| | | | | F        UTC , finish = 2025-09-04 08:27:15.663882015 UTC , thread_cap_info = ("ThreadId
| | | | | F        111", 2, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | | F      = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | | F      = 28} , self = 83 , parent = Nothing , duration = 0.430463134000 , status
| | | | | | F      = Fail , start = 2025-09-04 08:27:15.038939446 UTC , finish = 2025-09-04
| | | | | | F      08:27:15.46940258 UTC , thread_cap_info = ("ThreadId 123", 2, False)}
| | | | | | F      
E | | | | | |      
F | | | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F | | | | | |      = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
F | | | | | |      = 28} , self = 84 , parent = Nothing , duration = 0.433240023000 , status
F | | | | | |      = Fail , start = 2025-09-04 08:27:15.048029737 UTC , finish = 2025-09-04
F | | | | | |      08:27:15.48126976 UTC , thread_cap_info = ("ThreadId 124", 1, False)}
F | | | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | | F    = 9 , num_top_rules = 0 , num_weak_rules = 54 , alphabet_size = 9 , total_length
| | | | | | | F    = 378} , self = 90 , parent = Nothing , duration = 1.139511687000 , status
| | | | | | | F    = Fail , start = 2025-09-04 08:27:15.071409034 UTC , finish = 2025-09-04
| | | | | | | F    08:27:16.210920721 UTC , thread_cap_info = ("ThreadId 135", 1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | | | F  = 9 , num_top_rules = 0 , num_weak_rules = 54 , alphabet_size = 9 , total_length
| | | | | | | | F  = 378} , self = 87 , parent = Nothing , duration = 0.686008138000 , status
| | | | | | | | F  = Fail , start = 2025-09-04 08:27:15.079001792 UTC , finish = 2025-09-04
| | | | | | | | F  08:27:15.76500993 UTC , thread_cap_info = ("ThreadId 137", 2, False)}
| | | | | | | | F  
| | | | F | | | |  
| F | |   | | | |  
| S | |   | | | |  Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| S | |   | | | |  , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| S | |   | | | |  , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| S | |   | | | |  = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| S | |   | | | |  , cpf = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| S | |   | | | |  = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| S | |   | | | |  = 126} , self = 89 , parent = Nothing , duration = 0.602716263000 , status
| S | |   | | | |  = Success , start = 2025-09-04 08:27:15.311103746 UTC , finish = 2025-09-04
| S | |   | | | |  08:27:15.913820009 UTC , thread_cap_info = ("ThreadId 149", 3, False)}
| S | |   | | | |  
| | | | F | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | F | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | F | | | |  = Size { num_rules = 27 , num_strict_rules = 9 , num_top_rules = 0 , num_weak_rules
| | | | F | | | |  = 18 , alphabet_size = 9 , total_length = 126} , self = 81 , parent = Nothing
| | | | F | | | |  , duration = 0.101224257000 , status = Fail , start = 2025-09-04 08:27:15.319540045
| | | | F | | | |  UTC , finish = 2025-09-04 08:27:15.420764302 UTC , thread_cap_info = ("ThreadId
| | | | F | | | |  150", 3, False)}
| | | | F | | | |  
| | F | | | | | |  
| |   | F | | | |  
| |   F   | | | |  
| |       | F | |  
| | S     |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | S     |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S     |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S     |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | S     |   | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | S     |   | |  = 3 , total_length = 28} , self = 91 , parent = Nothing , duration = 1.177305131000
| | S     |   | |  , status = Success , start = 2025-09-04 08:27:15.47523331 UTC , finish
| | S     |   | |  = 2025-09-04 08:27:16.652538441 UTC , thread_cap_info = ("ThreadId 156",
| | S     |   | |  1, False)}
| | S     |   | |  
F | |     |   | |  
F | |     |   | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
F | |     |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F | |     |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F | |     |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | |     |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | |     |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
F | |     |   | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
F | |     |   | |  = 3 , total_length = 28} , self = 88 , parent = Nothing , duration = 0.328640240000
F | |     |   | |  , status = Fail , start = 2025-09-04 08:27:15.481303816 UTC , finish =
F | |     |   | |  2025-09-04 08:27:15.809944056 UTC , thread_cap_info = ("ThreadId 157",
F | |     |   | |  1, False)}
F | |     |   | |  
| | |     F   | |  
| | |         | F  
F | |         |    
E | |         |    Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
E | |         |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |         |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |         |    , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |         |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |         |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
E | |         |    , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
E | |         |    = 3 , total_length = 28} , self = 93 , parent = Nothing , duration = 0.831341065000
E | |         |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:15.821296417
E | |         |    UTC , finish = 2025-09-04 08:27:16.652637482 UTC , thread_cap_info = ("ThreadId
E | |         |    164", 1, False)}
E | |         |    
| S |         |    
|   |         F    
|   S              
E                  
