last 1156 length 4627
last 948 length 3855
CNF 1156 vars 4627 clauses
CNF 948 vars 3855 clauses
last 694 length 2827
CNF 694 vars 2827 clauses
last 10458 length 45774
last 826 length 3363
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8817
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3289, clauses: 11905
CNF 10458 vars 45774 clauses
last 9484 length 40397
CNF 826 vars 3363 clauses
last 2468 length 8817
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11719, clauses: 49069
last 3289 length 11905
CNF 9484 vars 40397 clauses
last 11719 length 49069
CNF 2468 vars 8817 clauses
CNF 3289 vars 11905 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9838, clauses: 41191
last 9838 length 41191
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8817, status: Satisfied, time: 0.46132025s
CNF 11719 vars 49069 clauses
CNF 9838 vars 41191 clauses
**************************************************
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       cleaner
SRS with 2 strict rules and 3 weak rules on 3 letters       strictify
SRS with 5 rules on 3 letters       DP
SRS with 10 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c] -> [b, a, a] {- Input 0 -}
  [a, b, b] -> [b, c, a] {- Input 1 -}
  [a, b, a] ->= [a, b, a] {- Input 2 -}
  [c, b, a] ->= [a, a, b] {- Input 3 -}
  [c, a, a] ->= [c, a, b] {- Input 4 -}
  [c, b, c] ->= [a, c, c] {- Input 5 -}
reason
  cleaner
   property Termination
has value Just True
for SRS
  [a, b, c] -> [b, a, a] {- Input 0 -}
  [a, b, b] -> [b, c, a] {- Input 1 -}
  [c, b, a] ->= [a, a, b] {- Input 3 -}
  [c, a, a] ->= [c, a, b] {- Input 4 -}
  [c, b, c] ->= [a, c, c] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, c] -> [b, a, a] {- Input 0 -}
  [a, b, b] -> [b, c, a] {- Input 1 -}
  [c, b, a] -> [a, a, b] {- Strictified (Input 3) -}
  [c, a, a] -> [c, a, b] {- Strictified (Input 4) -}
  [c, b, c] -> [a, c, c] {- Strictified (Input 5) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, a, a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, c, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a, a, b] {- DP Nontop (Strictified (Input 3)) -}
  [c, a, a] ->= [c, a, b] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, c] ->= [a, c, c] {- DP Nontop (Strictified (Input 5)) -}
  [a#, b, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a#, b, b] |-> [c#, a] {- DP (Top 1) (Input 1) -}
  [a#, b, c] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, b, c] |-> [a#, a] {- DP (Top 1) (Input 0) -}
  [c#, a, a] |-> [a#, b] {- DP (Top 1) (Strictified (Input 4)) -}
  [c#, a, a] |-> [c#, a, b] {- DP (Top 0) (Strictified (Input 4)) -}
  [c#, b, a] |-> [a#, a, b] {- DP (Top 0) (Strictified (Input 3)) -}
  [c#, b, a] |-> [a#, b] {- DP (Top 1) (Strictified (Input 3)) -}
  [c#, b, c] |-> [a#, c, c] {- DP (Top 0) (Strictified (Input 5)) -}
  [c#, b, c] |-> [c#, c] {- DP (Top 1) (Strictified (Input 5)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (c, 2/1)
  (a#, 1/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, a, a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, c, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a, a, b] {- DP Nontop (Strictified (Input 3)) -}
  [c, a, a] ->= [c, a, b] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, c] ->= [a, c, c] {- DP Nontop (Strictified (Input 5)) -}
  [c#, a, a] |-> [c#, a, b] {- DP (Top 0) (Strictified (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, a] |-> [c#, a, b] {- DP (Top 0) (Strictified (Input 4)) -}
  [a, b, c] ->= [b, a, a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, c, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a, a, b] {- DP Nontop (Strictified (Input 3)) -}
  [c, a, a] ->= [c, a, b] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, c] ->= [a, c, c] {- DP Nontop (Strictified (Input 5)) -}
reason
  ( a
  , Wk  / 6A 6A 9A - \
        | 6A 6A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 6A 6A 9A - \
        | 6A 6A 9A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 1A 4A 4A - \
        | 1A 4A 4A - |
        | 1A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, a, a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, c, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a, a, b] {- DP Nontop (Strictified (Input 3)) -}
  [c, a, a] ->= [c, a, b] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, c] ->= [a, c, c] {- DP Nontop (Strictified (Input 5)) -}
reason
  EDG

**************************************************
skeleton: (2/4,3)\Cleaner(2/3,3)\Strictify(5,3)\Deepee(10/5,5)\Weight\EDG(1/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.541799046000
  min duration 0.041344212000
  total durat. 1.048560372000
**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                = 30} , self = 99 , parent = Nothing , duration = 0.849896485000 , status
E                = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.34644468 UTC ,
E                finish = 2025-09-04 08:20:57.196341165 UTC , thread_cap_info = ("ThreadId
E                66", 3, False)}
E                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| F              = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 360} , self = 80 , parent = Nothing , duration = 0.723268719000 , status
| F              = Fail , start = 2025-09-04 08:20:56.368657487 UTC , finish = 2025-09-04
| F              08:20:57.091926206 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | F            = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 360} , self = 77 , parent = Nothing , duration = 0.359404611000 , status
| | F            = Fail , start = 2025-09-04 08:20:56.368669924 UTC , finish = 2025-09-04
| | F            08:20:56.728074535 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | F            
| | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E          = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
| | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E          = 30} , self = 101 , parent = Nothing , duration = 0.811961202000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.386271576 UTC ,
| | | E          finish = 2025-09-04 08:20:57.198232778 UTC , thread_cap_info = ("ThreadId
| | | E          81", 3, False)}
| | | E          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F        = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F        = 36} , self = 78 , parent = Nothing , duration = 0.313429018000 , status
| | | | F        = Fail , start = 2025-09-04 08:20:56.514092182 UTC , finish = 2025-09-04
| | | | F        08:20:56.8275212 UTC , thread_cap_info = ("ThreadId 122", 1, False)}
| | | | F        
| | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S      = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | S      = 4 , total_length = 36} , self = 92 , parent = Nothing , duration = 0.631319026000
| | | | | S      , status = Success , start = 2025-09-04 08:20:56.526272047 UTC , finish
| | | | | S      = 2025-09-04 08:20:57.157591073 UTC , thread_cap_info = ("ThreadId 125",
| | | | | S      1, False)}
| | | | | S      
| | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F    = Size { num_rules = 45 , num_strict_rules = 45 , num_top_rules = 0 , num_weak_rules
| | | | | | F    = 0 , alphabet_size = 9 , total_length = 360} , self = 79 , parent = Nothing
| | | | | | F    , duration = 0.390134389000 , status = Fail , start = 2025-09-04 08:20:56.584071946
| | | | | | F    UTC , finish = 2025-09-04 08:20:56.974206335 UTC , thread_cap_info = ("ThreadId
| | | | | | F    135", 3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F  = Size { num_rules = 45 , num_strict_rules = 45 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 0 , alphabet_size = 9 , total_length = 360} , self = 81 , parent = Nothing
| | | | | | | F  , duration = 0.541799046000 , status = Fail , start = 2025-09-04 08:20:56.584082426
| | | | | | | F  UTC , finish = 2025-09-04 08:20:57.125881472 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  137", 3, False)}
| | | | | | | F  
| | F | | | | |  
| |   | F | | |  
| | E |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | E |   | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | E |   | | |  = 4 , total_length = 36} , self = 94 , parent = Nothing , duration = 0.340915257000
| | E |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.846805116
| | E |   | | |  UTC , finish = 2025-09-04 08:20:57.187720373 UTC , thread_cap_info = ("ThreadId
| | E |   | | |  140", 1, False)}
| | E |   | | |  
| | | |   | F |  
| F | |   |   |  
|   | |   |   F  
|   | |   S      
|   E |          
E     |          
      E          
