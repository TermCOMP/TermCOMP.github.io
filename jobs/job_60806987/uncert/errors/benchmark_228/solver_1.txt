last 11367 length 48958
CNF 11367 vars 48958 clauses
last 1144 length 4611
last 1056 length 4255
CNF 1056 vars 4255 clauses
CNF 1144 vars 4611 clauses
last 1785 length 7217
CNF 1785 vars 7217 clauses
last 1569 length 6355
CNF 1569 vars 6355 clauses
last 13978 length 58594
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3119, clauses: 11409
last 3119 length 11409
CNF 13978 vars 58594 clauses
CNF 3119 vars 11409 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11434, clauses: 47967
last 11434 length 47967
CNF 11434 vars 47967 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4854, clauses: 18113
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3119, clauses: 11409, status: Satisfied, time: 0.118451068s
last 4854 length 18113
CNF 4854 vars 18113 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14948, clauses: 62669
last 14948 length 62669
last 970 length 3905
last 1026 length 4135
CNF 1026 vars 4135 clauses
CNF 970 vars 3905 clauses
CNF 14948 vars 62669 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2804, clauses: 10140
last 2804 length 10140
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4854, clauses: 18113, status: Unsatisfied, time: 0.302406038s
CNF 2804 vars 10140 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2804, clauses: 10140, status: Satisfied, time: 0.130076676s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9266, clauses: 38036
last 9266 length 38036
**************************************************
summary
**************************************************
SRS with 4 strict rules and 3 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 20 strict rules and 7 weak rules on 6 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 7 weak rules on 4 letters       EDG
SRS with 1 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, a, c] -> [b, c, a] {- Input 0 -}
  [b, a, a] -> [b, b, a] {- Input 1 -}
  [b, a, b] -> [c, b, c] {- Input 2 -}
  [a, b, a] -> [c, c, a] {- Input 3 -}
  [c, b, b] ->= [a, c, c] {- Input 4 -}
  [c, b, b] ->= [b, c, c] {- Input 5 -}
  [b, c, c] ->= [c, a, a] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, a, c] -> [b, c, a] {- Input 0 -}
  [b, a, a] -> [b, b, a] {- Input 1 -}
  [b, a, b] -> [c, b, c] {- Input 2 -}
  [a, b, a] -> [c, c, a] {- Input 3 -}
  [c, b, b] -> [a, c, c] {- Strictified (Input 4) -}
  [c, b, b] -> [b, c, c] {- Strictified (Input 5) -}
  [b, c, c] -> [c, a, a] {- Strictified (Input 6) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, a, c] -> [a, c, b] {- Mirror (Input 0) -}
  [a, a, b] -> [a, b, b] {- Mirror (Input 1) -}
  [b, a, b] -> [c, b, c] {- Mirror (Input 2) -}
  [a, b, a] -> [a, c, c] {- Mirror (Input 3) -}
  [b, b, c] -> [c, c, a] {- Mirror (Strictified (Input 4)) -}
  [b, b, c] -> [c, c, b] {- Mirror (Strictified (Input 5)) -}
  [c, c, b] -> [a, a, c] {- Mirror (Strictified (Input 6)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, a, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a, b] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, b, a] |-> [a#, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#, b, a] |-> [c#] {- DP (Top 2) (Mirror (Input 3)) -}
  [a#, b, a] |-> [c#, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [b#, a, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, a, b] |-> [c#, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, c] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 4))) -}
  [b#, b, c] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 5))) -}
  [b#, b, c] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [b#, b, c] |-> [c#, b] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [b#, b, c] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b#, b, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, a, c] |-> [a#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a, c] |-> [b#] {- DP (Top 2) (Mirror (Input 0)) -}
  [c#, a, c] |-> [c#, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, c, b] |-> [a#, a, c] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, c, b] |-> [a#, c] {- DP (Top 1) (Mirror (Strictified (Input 6))) -}
  [c#, c, b] |-> [c#] {- DP (Top 2) (Mirror (Strictified (Input 6))) -}
reason
  (a, 3/1)
  (b, 3/1)
  (c, 3/1)
  (a#, 1/1)
  (b#, 3/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, a, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, a] |-> [a#, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, a] |-> [a#, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Wk  / 6A 6A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 9A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 5A 7A 7A - \
        | 5A 7A 7A - |
        | 5A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 4A 5A 6A - \
        | 4A 5A 6A - |
        | 4A 5A 6A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c, a, c] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [c, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, a] ->= [a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, a, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  EDG

**************************************************
skeleton: (4/3,3)\Strictify\Mirror(7,3)\Deepee(20/7,6)\Weight\EDG(2/7,4)\Matrix{\Arctic}{3}\EDG(1/7,4)\Matrix{\Arctic}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let CNF 9266 vars 38036 clauses
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 3 , total_length = 42} , self = 35 , parent = Nothing
F          , duration = 0.126596904000 , status = Fail , start = 2025-09-04 08:20:55.452053038
F          UTC , finish = 2025-09-04 08:20:55.578649942 UTC , thread_cap_info = ("ThreadId
F          49", 2, False)}
F          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 3 , total_length = 42} , self = 40 , parent = Nothing
| F        , duration = 0.405916591000 , status = Fail , start = 2025-09-04 08:20:55.466216185
| F        UTC , finish = 2025-09-04 08:20:55.872132776 UTC , thread_cap_info = ("ThreadId
| F        51", 2, False)}
| F        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | F      = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 504} , self = 64 , parent = Nothing , duration = 0.741714526000 , status
| | F      = Fail , start = 2025-09-04 08:20:55.486680842 UTC , finish = 2025-09-04
| | F      08:20:56.228395368 UTC , thread_cap_info = ("ThreadId 61", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | F    = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 504} , self = 57 , parent = Nothing , duration = 0.418188617000 , status
| | | F    = Fail , start = 2025-09-04 08:20:55.506265776 UTC , finish = 2025-09-04
| | | F    08:20:55.924454393 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| | | F    
F | | |    
F | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
F | | |    { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
F | | |    = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
F | | |    = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
F | | |    = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
F | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F | | |    = 42} , self = 56 , parent = Nothing , duration = 0.175621987000 , status
F | | |    = Fail , start = 2025-09-04 08:20:55.745754532 UTC , finish = 2025-09-04
F | | |    08:20:55.921376519 UTC , thread_cap_info = ("ThreadId 78", 0, False)}
F | | |    
| F | |    
| F | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |    = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| F | |    = 7 , num_top_rules = 7 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| F | |    = 84} , self = 61 , parent = Nothing , duration = 0.109257253000 , status
| F | |    = Fail , start = 2025-09-04 08:20:55.919257045 UTC , finish = 2025-09-04
| F | |    08:20:56.028514298 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| F | |    
F | | |    
  | | F    
S | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | |      = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
S | |      = 4 , total_length = 54} , self = 66 , parent = Nothing , duration = 0.347143722000
S | |      , status = Success , start = 2025-09-04 08:20:55.92448032 UTC , finish
S | |      = 2025-09-04 08:20:56.271624042 UTC , thread_cap_info = ("ThreadId 97",
S | |      2, False)}
S | |      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | E    = 4 , total_length = 54} , self = 68 , parent = Nothing , duration = 0.370331112000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.925750295
| | | E    UTC , finish = 2025-09-04 08:20:56.296081407 UTC , thread_cap_info = ("ThreadId
| | | E    98", 2, False)}
| | | E    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | F  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | F  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | | F  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | F  = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| | | | F  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | F  = 42} , self = 62 , parent = Nothing , duration = 0.173429434000 , status
| | | | F  = Fail , start = 2025-09-04 08:20:56.005753783 UTC , finish = 2025-09-04
| | | | F  08:20:56.179183217 UTC , thread_cap_info = ("ThreadId 102", 0, False)}
| | | | F  
| F | | |  
| F | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | | |  = 14 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 7 ,
| F | | |  alphabet_size = 6 , total_length = 84} , self = 75 , parent = Nothing ,
| F | | |  duration = 0.525110635000 , status = Fail , start = 2025-09-04 08:20:56.046635656
| F | | |  UTC , finish = 2025-09-04 08:20:56.571746291 UTC , thread_cap_info = ("ThreadId
| F | | |  103", 2, False)}
| F | | |  
| | | | F  
| | F |    
S |   |    
  |   E    
F |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F |        = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size = 4 , total_length
F |        = 48} , self = 74 , parent = Nothing , duration = 0.103269084000 , status
F |        = Fail , start = 2025-09-04 08:20:56.310413584 UTC , finish = 2025-09-04
F |        08:20:56.413682668 UTC , thread_cap_info = ("ThreadId 117", 2, False)}
F |        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | S      = 4 , total_length = 48} , self = 76 , parent = Nothing , duration = 0.245954165000
| | S      , status = Success , start = 2025-09-04 08:20:56.387895191 UTC , finish
| | S      = 2025-09-04 08:20:56.633849356 UTC , thread_cap_info = ("ThreadId 121",
| | S      2, False)}
| | S      
F | |      
E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
E | |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
E | |      = 4 , total_length = 48} , self = 78 , parent = Nothing , duration = 0.300498106000
E | |      , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.425782446
E | |      UTC , finish = 2025-09-04 08:20:56.726280552 UTC , thread_cap_info = ("ThreadId
E | |      122", 2, False)}
E | |      
| F |      
|   S      
E          
