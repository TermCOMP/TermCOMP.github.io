[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 277 length 1248
last 673 length 3100
CNF 277 vars 1248 clauses
CNF 673 vars 3100 clauses
last 245 length 1121
CNF 245 vars 1121 clauses
last 460 length 2113
last 275 length 1259
CNF 275 vars 1259 clauses
last 290 length 1303
CNF 290 vars 1303 clauses
last 368 length 1555
last 427 length 1837
CNF 427 vars 1837 clauses
CNF 368 vars 1555 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1926, clauses: 6986
last 1926 length 6986
CNF 1926 vars 6986 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3527, clauses: 14330
last 3527 length 14330
CNF 3527 vars 14330 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1926, clauses: 6986, status: Unsatisfied, time: 0.017569215s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3527, clauses: 14330, status: Unsatisfied, time: 0.010408149s
last 1489 length 6449
last 1189 length 5202
CNF 1489 vars 6449 clauses
CNF 1189 vars 5202 clauses
last 807 length 3678
last 689 length 3066
CNF 689 vars 3066 clauses
last 689 length 3066
last 807 length 3678
CNF 689 vars 3066 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1474, clauses: 5711
CNF 807 vars 3678 clauses
CNF 807 vars 3678 clauses
last 1474 length 5711
CNF 1474 vars 5711 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1474, clauses: 5711, status: Unsatisfied, time: 0.361893258s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2488, clauses: 9740
last 2488 length 9740
CNF 2488 vars 9740 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2488, clauses: 9740, status: Satisfied, time: 0.277130739s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9684, clauses: 40219
last 9684 length 40219
CNF 9684 vars 40219 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 8 weak rules on 4 letters       weights
SRS with 1 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, a] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [a] ->= [a, a, b, a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 2 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 1 \
                | 0 4 1 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,2)\TileAllAll{2}(4/8,4)\Weight(1/7,4)\Matrix{\Natural}{3}(0/7,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9684, clauses: 40219, status: Satisfied, time: 0.439276302s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.743265225000
  min duration 0.027628369000
  total durat. 1.717408895000
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 2.221840145000
  min duration 2.221840145000
  total durat. 2.221840145000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 43}
    , self = 107
    , parent = Nothing
    , duration = 2.221840145000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:23:51.15685379 UTC
    , finish = 2025-09-04 08:23:53.378693935 UTC
    , thread_cap_info = ("ThreadId 188", 0, False)}
Success : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.258648230000
  min duration 1.258648230000
  total durat. 1.258648230000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 43}
    , self = 105
    , parent = Nothing
    , duration = 1.258648230000
    , status = Success
    , start = 2025-09-04 08:23:51.277160282 UTC
    , finish = 2025-09-04 08:23:52.535808512 UTC
    , thread_cap_info = ("ThreadId 191", 0, False)}
**************************************************
E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                = 6} , self = 72 , parent = Nothing , duration = 0.332194170000 , status
E                = Except "AsyncCancelled" , start = 2025-09-04 08:23:50.045320747 UTC ,
E                finish = 2025-09-04 08:23:50.377514917 UTC , thread_cap_info = ("ThreadId
E                20", 0, False)}
E                
| F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| F              num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 2 , total_length
| F              = 10} , self = 97 , parent = Nothing , duration = 0.519404817000 , status
| F              = Fail , start = 2025-09-04 08:23:50.057595659 UTC , finish = 2025-09-04
| F              08:23:50.577000476 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| F              
| | F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| | F            num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 2 , total_length
| | F            = 10} , self = 87 , parent = Nothing , duration = 0.335986546000 , status
| | F            = Fail , start = 2025-09-04 08:23:50.077897061 UTC , finish = 2025-09-04
| | F            08:23:50.413883607 UTC , thread_cap_info = ("ThreadId 95", 2, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F          = 7 , num_top_rules = 7 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | F          = 33} , self = 71 , parent = Nothing , duration = 0.284605147000 , status
| | | F          = Fail , start = 2025-09-04 08:23:50.092735272 UTC , finish = 2025-09-04
| | | F          08:23:50.377340419 UTC , thread_cap_info = ("ThreadId 111", 1, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F        = 7 , num_top_rules = 7 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | F        = 33} , self = 75 , parent = Nothing , duration = 0.275636543000 , status
| | | | F        = Fail , start = 2025-09-04 08:23:50.105799732 UTC , finish = 2025-09-04
| | | | F        08:23:50.381436275 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
| | | | F        
| | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F      = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | | F      = 4 , total_length = 30} , self = 88 , parent = Nothing , duration = 0.312234242000
| | | | | F      , status = Fail , start = 2025-09-04 08:23:50.111453923 UTC , finish =
| | | | | F      2025-09-04 08:23:50.423688165 UTC , thread_cap_info = ("ThreadId 118",
| | | | | F      1, False)}
| | | | | F      
| | | | | | F    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | F    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | F    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | F    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | F    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | | | F    = 4 , total_length = 30} , self = 89 , parent = Nothing , duration = 0.303230475000
| | | | | | F    , status = Fail , start = 2025-09-04 08:23:50.122879883 UTC , finish =
| | | | | | F    2025-09-04 08:23:50.426110358 UTC , thread_cap_info = ("ThreadId 119",
| | | | | | F    1, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | | | F  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | | | F  = Size { num_rules = 8 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 7 , alphabet_size = 4 , total_length = 43} , self = 73 , parent = Nothing
| | | | | | | F  , duration = 0.141001437000 , status = Fail , start = 2025-09-04 08:23:50.23659781
| | | | | | | F  UTC , finish = 2025-09-04 08:23:50.377599247 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  130", 2, False)}
| | | | | | | F  
| | | F | | | |  
E | |   | | | |  
  | |   | | | F  
  | |   F | |    
  | F     | |    
  |       F |    
  |         F    
F |              Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
F |              = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
F |              , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size
F |              = 2 , total_length = 23} , self = 104 , parent = Nothing , duration = 0.778595744000
F |              , status = Fail , start = 2025-09-04 08:23:50.431651689 UTC , finish =
F |              2025-09-04 08:23:51.210247433 UTC , thread_cap_info = ("ThreadId 159",
F |              1, False)}
F |              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F            = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F            = 43} , self = 102 , parent = Nothing , duration = 0.512056582000 , status
| | F            = Fail , start = 2025-09-04 08:23:50.431677934 UTC , finish = 2025-09-04
| | F            08:23:50.943734516 UTC , thread_cap_info = ("ThreadId 168", 0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F          = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | F          = 43} , self = 101 , parent = Nothing , duration = 0.428329177000 , status
| | | F          = Fail , start = 2025-09-04 08:23:50.436475093 UTC , finish = 2025-09-04
| | | F          08:23:50.86480427 UTC , thread_cap_info = ("ThreadId 169", 0, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F        = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | F        = 43} , self = 103 , parent = Nothing , duration = 0.743265225000 , status
| | | | F        = Fail , start = 2025-09-04 08:23:50.436484963 UTC , finish = 2025-09-04
| | | | F        08:23:51.179750188 UTC , thread_cap_info = ("ThreadId 171", 1, False)}
| | | | F        
| F | | |        
|   | F |        
|   F   |        
| E     |        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E     |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E     |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E     |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E     |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E     |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E     |        , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size
| E     |        = 4 , total_length = 43} , self = 107 , parent = Nothing , duration = 2.221840145000
| E     |        , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:51.15685379
| E     |        UTC , finish = 2025-09-04 08:23:53.378693935 UTC , thread_cap_info = ("ThreadId
| E     |        188", 0, False)}
| E     |        
| |     F        
F |              
S |              Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
S |              = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
S |              , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size
S |              = 4 , total_length = 43} , self = 105 , parent = Nothing , duration = 1.258648230000
S |              , status = Success , start = 2025-09-04 08:23:51.277160282 UTC , finish
S |              = 2025-09-04 08:23:52.535808512 UTC , thread_cap_info = ("ThreadId 191",
S |              0, False)}
S |              
S |              
  E              
