[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 188 length 853
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 228 length 977
CNF 188 vars 853 clauses
CNF 228 vars 977 clauses
last 363 length 1560
CNF 363 vars 1560 clauses
last 254 length 1068
last 622 length 2775
CNF 622 vars 2775 clauses
last 860 length 3656
CNF 860 vars 3656 clauses
last 650 length 2931
CNF 650 vars 2931 clauses
last 993 length 4232
CNF 993 vars 4232 clauses
CNF 254 vars 1068 clauses
last 564 length 2545
CNF 564 vars 2545 clauses
last 558 length 2535
CNF 558 vars 2535 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7219
last 1940 length 7219
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4350, clauses: 15767
last 860 length 3656
CNF 1940 vars 7219 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12567, clauses: 51893
last 993 length 4232
last 3510 length 15294
last 4555 length 19081
last 4350 length 15767
CNF 860 vars 3656 clauses
last 12567 length 51893
CNF 993 vars 4232 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7219, status: Unsatisfied, time: 0.153265429s
CNF 3510 vars 15294 clauses
CNF 4555 vars 19081 clauses
CNF 4350 vars 15767 clauses
CNF 12567 vars 51893 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4897, clauses: 18255
last 4897 length 18255
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4350, clauses: 15767, status: Unsatisfied, time: 0.356308012s
CNF 4897 vars 18255 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4897, clauses: 18255, status: Satisfied, time: 0.088573808s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12567, clauses: 51893, status: Satisfied, time: 0.41737366s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 18 weak rules on 9 letters       weights
SRS with 3 strict rules and 14 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 14 weak rules on 7 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, b, a] -> [c] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [a, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, b], [b, a], [a, c]] -> [ [c, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, b], [b, a], [a, b]] -> [ [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, b], [b, a], [a, a]] -> [ [c, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, b], [b, a], [a, c]] -> [ [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, b], [b, a], [a, b]] -> [ [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, b], [b, a], [a, a]] -> [ [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, a], [a, c]] -> [ [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, a], [a, b]] -> [ [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, a], [a, a]] -> [ [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, b], [b, c]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [[c, a], [a, b], [b, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a]] ->= [[c, a], [a, b], [b, a]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c]] ->= [[b, a], [a, b], [b, c]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [[b, a], [a, b], [b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a]] ->= [[b, a], [a, b], [b, a]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, c]] ->= [[a, a], [a, b], [b, c]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [[a, a], [a, b], [b, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a]] ->= [[a, a], [a, b], [b, a]] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 2/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, b], [b, a], [a, b]] -> [ [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, b], [b, a], [a, b]] -> [ [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, b], [b, a], [a, b]] -> [ [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, b], [b, a]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c]] ->= [[b, a], [a, b], [b, c]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [[b, a], [a, b], [b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a]] ->= [[b, a], [a, b], [b, a]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, c]] ->= [[a, a], [a, b], [b, c]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [[a, a], [a, b], [b, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a]] ->= [[a, a], [a, b], [b, a]] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [a, c]
  , St (Corner  / 1 0 2 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 0 0 \
                | 0 4 1 |
                \ 0 0 1 /) )
  ( [b, c]
  , St (Corner  / 1 0 2 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( [c, a]
  , St (Corner  / 1 0 7 \
                | 0 2 0 |
                \ 0 0 1 /) )
  ( [c, b]
  , St (Corner  / 1 1 0 \
                | 0 6 1 |
                \ 0 0 1 /) )
  ( [c, c]
  , St (Corner  / 1 0 6 \
                | 0 0 3 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, b], [b, a]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c]] ->= [[b, a], [a, b], [b, c]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [[b, a], [a, b], [b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a]] ->= [[b, a], [a, b], [b, a]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, c]] ->= [[a, a], [a, b], [b, c]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [[a, a], [a, b], [b, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a]] ->= [[a, a], [a, b], [b, a]] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\TileAllAll{2}(9/18,9)\Weight(3/14,9)\Matrix{\Natural}{3}(0/14,7)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S                Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
S                = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S                = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S                , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S                \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S                , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
S                , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
S                = 3 , total_length = 26} , self = 116 , parent = Nothing , duration = 0.755337231000
S                , status = Success , start = 2025-09-04 08:27:34.406215081 UTC , finish
S                = 2025-09-04 08:27:35.161552312 UTC , thread_cap_info = ("ThreadId 152",
S                0, False)}
S                
| F              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F              = 22 , num_strict_rules = 14 , num_top_rules = 14 , num_weak_rules = 8
| F              , alphabet_size = 8 , total_length = 70} , self = 113 , parent = Nothing
| F              , duration = 0.526685983000 , status = Fail , start = 2025-09-04 08:27:34.436993982
| F              UTC , finish = 2025-09-04 08:27:34.963679965 UTC , thread_cap_info = ("ThreadId
| F              162", 1, False)}
| F              
| | F            Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | F            = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | F            , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | F            = 3 , total_length = 26} , self = 109 , parent = Nothing , duration = 0.276192099000
| | F            , status = Fail , start = 2025-09-04 08:27:34.464245026 UTC , finish =
| | F            2025-09-04 08:27:34.740437125 UTC , thread_cap_info = ("ThreadId 167",
| | F            0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | F          = 3 , num_top_rules = 0 , num_weak_rules = 42 , alphabet_size = 9 , total_length
| | | F          = 252} , self = 112 , parent = Nothing , duration = 0.464742558000 , status
| | | F          = Fail , start = 2025-09-04 08:27:34.480440926 UTC , finish = 2025-09-04
| | | F          08:27:34.945183484 UTC , thread_cap_info = ("ThreadId 168", 1, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | | F        = 3 , num_top_rules = 0 , num_weak_rules = 42 , alphabet_size = 9 , total_length
| | | | F        = 252} , self = 111 , parent = Nothing , duration = 0.432908476000 , status
| | | | F        = Fail , start = 2025-09-04 08:27:34.480454685 UTC , finish = 2025-09-04
| | | | F        08:27:34.913363161 UTC , thread_cap_info = ("ThreadId 170", 1, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | F      = 3 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size = 9 , total_length
| | | | | F      = 70} , self = 108 , parent = Nothing , duration = 0.200172211000 , status
| | | | | F      = Fail , start = 2025-09-04 08:27:34.500866434 UTC , finish = 2025-09-04
| | | | | F      08:27:34.701038645 UTC , thread_cap_info = ("ThreadId 178", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | F    = 3 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size = 9 , total_length
| | | | | | F    = 70} , self = 110 , parent = Nothing , duration = 0.232768699000 , status
| | | | | | F    = Fail , start = 2025-09-04 08:27:34.509408633 UTC , finish = 2025-09-04
| | | | | | F    08:27:34.742177332 UTC , thread_cap_info = ("ThreadId 179", 3, False)}
| | | | | | F    
| | | | | | | E  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 549 , num_strict_rules
| | | | | | | E  = 27 , num_top_rules = 0 , num_weak_rules = 522 , alphabet_size = 75 ,
| | | | | | | E  total_length = 3114} , self = 123 , parent = Nothing , duration = 0.633713297000
| | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:34.68685446
| | | | | | | E  UTC , finish = 2025-09-04 08:27:35.320567757 UTC , thread_cap_info = ("ThreadId
| | | | | | | E  191", 0, False)}
| | | | | | | E  
| | | | | F | |  
| | | | | E | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | E | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | | | | E | |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size
| | | | | E | |  = 9 , total_length = 70} , self = 118 , parent = Nothing , duration = 0.479894520000
| | | | | E | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:34.720559097
| | | | | E | |  UTC , finish = 2025-09-04 08:27:35.200453617 UTC , thread_cap_info = ("ThreadId
| | | | | E | |  195", 3, False)}
| | | | | E | |  
| | F | | | | |  
| |   | | | F |  
| | E | | |   |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | E | | |   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | |   |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E | | |   |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | E | | |   |  = 3 , total_length = 26} , self = 120 , parent = Nothing , duration = 0.519029352000
| | E | | |   |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:34.781420483
| | E | | |   |  UTC , finish = 2025-09-04 08:27:35.300449835 UTC , thread_cap_info = ("ThreadId
| | E | | |   |  197", 0, False)}
| | E | | |   |  
| | | | | | S |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | | S |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | | | | | S |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size
| | | | | | S |  = 9 , total_length = 70} , self = 114 , parent = Nothing , duration = 0.321364914000
| | | | | | S |  , status = Success , start = 2025-09-04 08:27:34.8004491 UTC , finish =
| | | | | | S |  2025-09-04 08:27:35.121814014 UTC , thread_cap_info = ("ThreadId 198",
| | | | | | S |  3, False)}
| | | | | | S |  
| | | | F | | |  
| | | F   | | |  
| F |     | | |  
|   |     | S |  
S   |     |   |  
    |     E   |  
    E         |  
              E  
