last 1019 length 4123
CNF 1019 vars 4123 clauses
last 1190 length 4701
last 731 length 2925
last 1714 length 6967
CNF 1190 vars 4701 clauses
CNF 731 vars 2925 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2243, clauses: 8181
last 2243 length 8181
CNF 1714 vars 6967 clauses
CNF 2243 vars 8181 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2243, clauses: 8181, status: Satisfied, time: 0.083093474s
last 7701 length 31728
CNF 7701 vars 31728 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3677, clauses: 13830
last 3677 length 13830
CNF 3677 vars 13830 clauses
last 13838 length 59478
CNF 13838 vars 59478 clauses
last 1265 length 5143
CNF 1265 vars 5143 clauses
last 977 length 3877
CNF 977 vars 3877 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10764, clauses: 44893
last 10764 length 44893
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3677, clauses: 13830, status: Unsatisfied, time: 0.207856295s
CNF 10764 vars 44893 clauses
**************************************************
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       split
2 sub-proofs
  1 SRS with 5 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 45 strict rules and 9 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 18 strict rules and 6 weak rules on 8 letters       weights
  SRS with 0 strict rules and 4 weak rules on 4 letters       no strict rules

  2 SRS with 1 rules on 2 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height -1 and with 2 epsilon transitions
  SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] ->= [a, a, c] {- Input 2 -}
  [c, c, b] ->= [b, b, c] {- Input 3 -}
  [b, b, a] ->= [a, b, b] {- Input 4 -}
  [a, b, a] ->= [c, b, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] -> [a, a, c] {- Strictified (Input 2) -}
  [c, c, b] -> [b, b, c] {- Strictified (Input 3) -}
  [b, b, a] -> [a, b, b] {- Strictified (Input 4) -}
  [a, b, a] -> [c, b, a] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] -> [a, a, c] {- Strictified (Input 2) -}
  [c, c, b] -> [b, b, c] {- Strictified (Input 3) -}
  [b, b, a] ->= [a, b, b] {- Strictified (Input 4) -}
  [a, b, a] -> [c, b, a] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, c]] -> [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, c]] -> [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, c]] -> [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, c]] ->= [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, c]] ->= [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 3/1)
  ([a, b], 3/1)
  ([a, c], 0/1)
  ([b, a], 4/1)
  ([b, b], 4/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 4/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b, b, a] -> [a, b, b] {- Strictified (Input 4) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1)], epsilons = [((0, 0, 1), (0, 0, 0)), ((0, 0, 2), (0, 0, 0))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Split[(5/1,3)\TileAllAll{2}(45/9,9)\Matrix{\Natural}{2}(18/6,8)\Weight(0/4,4)[],(1,2)\RelRFCmb{-1}(0,0)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2944, clauses: 10840
last 2944 length 10840
CNF 2944 vars 10840 clauses


**************************************************
E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E            , closure = Backward\n , start_strict_only = True\n , max_closure_length
E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E            = 24} , self = 40 , parent = Nothing , duration = 0.147576934000 , status
E            = Except "AsyncCancelled" , start = 2025-09-04 08:23:50.516245875 UTC ,
E            finish = 2025-09-04 08:23:50.663822809 UTC , thread_cap_info = ("ThreadId
E            35", 0, False)}
E            
| E          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| E          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| E          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| E          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| E          = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| E          = 0 , alphabet_size = 9 , total_length = 288} , self = 75 , parent = Nothing
| E          , duration = 0.225384583000 , status = Except "AsyncCancelled" , start
| E          = 2025-09-04 08:23:50.522843095 UTC , finish = 2025-09-04 08:23:50.748227678
| E          UTC , thread_cap_info = ("ThreadId 51", 3, False)}
| E          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 9 , total_length = 288} , self = 33 , parent = Nothing
| | F        , duration = 0.112264557000 , status = Fail , start = 2025-09-04 08:23:50.523823891
| | F        UTC , finish = 2025-09-04 08:23:50.636088448 UTC , thread_cap_info = ("ThreadId
| | F        53", 3, False)}
| | F        
| | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E      = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E      = 24} , self = 39 , parent = Nothing , duration = 0.120418239000 , status
| | | E      = Except "AsyncCancelled" , start = 2025-09-04 08:23:50.524103624 UTC ,
| | | E      finish = 2025-09-04 08:23:50.644521863 UTC , thread_cap_info = ("ThreadId
| | | E      57", 1, False)}
| | | E      
| | F |      
| |   E      
E |          
S |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S |          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
S |          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S |          = 432} , self = 101 , parent = Nothing , duration = 0.474399194000 , status
S |          = Success , start = 2025-09-04 08:23:50.678486027 UTC , finish = 2025-09-04
S |          08:23:51.152885221 UTC , thread_cap_info = ("ThreadId 108", 2, False)}
S |          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | F        = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 432} , self = 93 , parent = Nothing , duration = 0.286306125000 , status
| | F        = Fail , start = 2025-09-04 08:23:50.684563849 UTC , finish = 2025-09-04
| | F        08:23:50.970869974 UTC , thread_cap_info = ("ThreadId 110", 2, False)}
| | F        
| E |        
| F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F |        = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| F |        = 72} , self = 88 , parent = Nothing , duration = 0.136772557000 , status
| F |        = Fail , start = 2025-09-04 08:23:50.748236631 UTC , finish = 2025-09-04
| F |        08:23:50.885009188 UTC , thread_cap_info = ("ThreadId 136", 0, False)}
| F |        
| | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S      = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | S      = 4 , total_length = 42} , self = 90 , parent = Nothing , duration = 0.148909438000
| | | S      , status = Success , start = 2025-09-04 08:23:50.780793868 UTC , finish
| | | S      = 2025-09-04 08:23:50.929703306 UTC , thread_cap_info = ("ThreadId 143",
| | | S      0, False)}
| | | S      
| | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | | E    = 4 , total_length = 42} , self = 95 , parent = Nothing , duration = 0.187154539000
| | | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:50.826064759
| | | | E    UTC , finish = 2025-09-04 08:23:51.013219298 UTC , thread_cap_info = ("ThreadId
| | | | E    149", 0, False)}
| | | | E    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | | | | F  alphabet_size = 6 , total_length = 72} , self = 106 , parent = Nothing
| | | | | F  , duration = 0.338058424000 , status = Fail , start = 2025-09-04 08:23:50.849575193
| | | | | F  UTC , finish = 2025-09-04 08:23:51.187633617 UTC , thread_cap_info = ("ThreadId
| | | | | F  152", 0, False)}
| | | | | F  
| F | | | |  
|   | S | |  
|   F   | |  
|       E |  
S         |  
          F  
