last 12758 length 53867
CNF 12758 vars 53867 clauses
last 13200 length 56492
last 1657 length 6799
last 1049 length 4265
CNF 1657 vars 6799 clauses
last 929 length 3785
CNF 1049 vars 4265 clauses
last 1925 length 7747
CNF 929 vars 3785 clauses
CNF 13200 vars 56492 clauses
CNF 1925 vars 7747 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5346, clauses: 19742
last 5346 length 19742
CNF 5346 vars 19742 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3107, clauses: 11157
last 3107 length 11157
CNF 3107 vars 11157 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3107, clauses: 11157, status: Satisfied, time: 0.055305992s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5346, clauses: 19742, status: Unsatisfied, time: 0.323309859s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17578, clauses: 73841
last 17578 length 73841
last 1055 length 4271
last 931 length 3789
CNF 17578 vars 73841 clauses
**************************************************CNF 1055 vars 4271 clauses

Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10803, clauses: 44341
CNF 931 vars 3789 clauses
summarylast 10803 length 44341

**************************************************
SRS with 4 strict rules and 3 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       split
2 sub-proofs
  1 SRS with 7 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 63 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 14 rules on 8 letters       weights
  SRS with 0 rules on 0 letters       no strict rules

  2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b] -> [c, b, a] {- Input 0 -}
  [b, a, a] -> [a, c, c] {- Input 1 -}
  [c, a, c] -> [c, c, b] {- Input 2 -}
  [b, c, a] -> [b, b, a] {- Input 3 -}
  [b, c, c] ->= [a, a, a] {- Input 4 -}
  [a, b, c] ->= [a, a, b] {- Input 5 -}
  [b, c, b] ->= [c, a, b] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, b] -> [c, b, a] {- Input 0 -}
  [b, a, a] -> [a, c, c] {- Input 1 -}
  [c, a, c] -> [c, c, b] {- Input 2 -}
  [b, c, a] -> [b, b, a] {- Input 3 -}
  [b, c, c] -> [a, a, a] {- Strictified (Input 4) -}
  [a, b, c] -> [a, a, b] {- Strictified (Input 5) -}
  [b, c, b] -> [c, a, b] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, b, b] -> [c, b, a] {- Input 0 -}
  [b, a, a] -> [a, c, c] {- Input 1 -}
  [c, a, c] -> [c, c, b] {- Input 2 -}
  [b, c, a] -> [b, b, a] {- Input 3 -}
  [b, c, c] -> [a, a, a] {- Strictified (Input 4) -}
  [a, b, c] -> [a, a, b] {- Strictified (Input 5) -}
  [b, c, b] -> [c, a, b] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, a], [a, a], [a, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b], [b, a], [a, a], [a, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, b], [b, a], [a, a], [a, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, c], [c, a]] -> [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, c], [c, b]] -> [ [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, c], [c, c]] -> [ [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, a]] -> [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, b]] -> [ [b, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, c]] -> [ [b, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, c], [c, a]] -> [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, c], [c, b]] -> [ [c, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, c], [c, c]] -> [ [c, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, b], [b, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, b], [b, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, b], [b, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, b], [b, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, b], [b, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, b], [b, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, b], [b, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 0 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[b, b], [b, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, b], [b, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 2/1)
  ([b, c], 3/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (4/3,3)\Strictify(7,3)\Split[(7,3)\TileAllAll{2}(63,9)\Matrix{\Natural}{2}(14,8)\Weight(0,0)[],(0,0)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 3 , total_length = 42} , self = 40 , parent = Nothing
F        , duration = 0.668873596000 , status = Fail , start = 2025-09-04 08:20:47.274390462
F        UTC , finish = 2025-09-04 08:20:47.943264058 UTC , thread_cap_info = ("ThreadId
F        43", 2, False)}
F        
| F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| F      = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F      = 504} , self = 57 , parent = Nothing , duration = 0.624135180000 , status
| F      = Fail , start = 2025-09-04 08:20:47.378603239 UTC , finish = 2025-09-04
| F      08:20:48.002738419 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| F      
| | S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S    = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | S    = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | S    = 504} , self = 62 , parent = Nothing , duration = 0.705572104000 , status
| | S    = Success , start = 2025-09-04 08:20:47.398605647 UTC , finish = 2025-09-04
| | S    08:20:48.104177751 UTC , thread_cap_info = ("ThreadId 73", 0, False)}
| | S    
| | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | F  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | F  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
| | | F  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | F  = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| | | F  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F  = 42} , self = 54 , parent = Nothing , duration = 0.205198214000 , status
| | | F  = Fail , start = 2025-09-04 08:20:47.779260149 UTC , finish = 2025-09-04
| | | F  08:20:47.984458363 UTC , thread_cap_info = ("ThreadId 78", 0, False)}
| | | F  
F | | |  
  | | F  
F | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |    = 14 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 7 ,
F | |    alphabet_size = 6 , total_length = 84} , self = 71 , parent = Nothing ,
F | |    duration = 0.382997643000 , status = Fail , start = 2025-09-04 08:20:47.99920652
F | |    UTC , finish = 2025-09-04 08:20:48.382204163 UTC , thread_cap_info = ("ThreadId
F | |    100", 2, False)}
F | |    
| F |    
| S |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |    = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| S |    = 4 , total_length = 48} , self = 64 , parent = Nothing , duration = 0.120781542000
| S |    , status = Success , start = 2025-09-04 08:20:48.024942265 UTC , finish
| S |    = 2025-09-04 08:20:48.145723807 UTC , thread_cap_info = ("ThreadId 102",
| S |    2, False)}
| S |    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | E  = 4 , total_length = 48} , self = 69 , parent = Nothing , duration = 0.304077607000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:48.056557317
| | | E  UTC , finish = 2025-09-04 08:20:48.360634924 UTC , thread_cap_info = ("ThreadId
| | | E  103", 2, False)}
| | | E  
| | S |  
| | F |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | F |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | F |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | F |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | F |  = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| | F |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F |  = 42} , self = 66 , parent = Nothing , duration = 0.187756208000 , status
| | F |  = Fail , start = 2025-09-04 08:20:48.118599864 UTC , finish = 2025-09-04
| | F |  08:20:48.306356072 UTC , thread_cap_info = ("ThreadId 108", 0, False)}
| | F |  
| S | |  
|   F |  
| F   |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| F   |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| F   |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| F   |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| F   |  = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| F   |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F   |  = 42} , self = 75 , parent = Nothing , duration = 0.125604785000 , status
| F   |  = Fail , start = 2025-09-04 08:20:48.338614207 UTC , finish = 2025-09-04
| F   |  08:20:48.464218992 UTC , thread_cap_info = ("ThreadId 112", 0, False)}
| F   |  
| |   E  
F |      
  F      
