[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 328 length 1277
CNF 328 vars 1277 clauses
last 285 length 1176
last 467 length 1900
last 680 length 2733
CNF 285 vars 1176 clauses
CNF 467 vars 1900 clauses
last 300 length 1237
CNF 300 vars 1237 clauses
last 460 length 1875
CNF 460 vars 1875 clauses
last 259 length 1002
last 549 length 2196
last 1427 length 5544
CNF 549 vars 2196 clauses
CNF 259 vars 1002 clauses
CNF 1427 vars 5544 clauses
last 2207 length 8733
last 1427 length 5544
CNF 2207 vars 8733 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 6709
last 1835 length 6709
CNF 1427 vars 5544 clauses
last 2207 length 8733
CNF 1835 vars 6709 clauses
CNF 2207 vars 8733 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 6709, status: Unsatisfied, time: 0.457732559s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8429, clauses: 31905
last 8429 length 31905
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9195, clauses: 37526
last 9195 length 37526
CNF 8429 vars 31905 clauses
CNF 9195 vars 37526 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9195, clauses: 37526, status: Satisfied, time: 0.370775192s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 3 weak rules on 3 letters       mirror
SRS with 1 strict rules and 3 weak rules on 3 letters       context
SRS with 1 strict rules and 9 weak rules on 3 letters       mirror
SRS with 1 strict rules and 9 weak rules on 3 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c] -> [c] {- Input 0 -}
  [a] ->= [] {- Input 1 -}
  [] ->= [a, b] {- Input 2 -}
  [a, b] ->= [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, a] -> [c] {- Mirror (Input 0) -}
  [a] ->= [] {- Mirror (Input 1) -}
  [] ->= [b, a] {- Mirror (Input 2) -}
  [b, a] ->= [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [c, a] -> [c] {- Mirror (Input 0) -}
  [a, a] ->= [a] {- Mirror (Input 1) -}
  [b, a] ->= [b] {- Mirror (Input 1) -}
  [c, a] ->= [c] {- Mirror (Input 1) -}
  [a] ->= [a, b, a] {- Mirror (Input 2) -}
  [b] ->= [b, b, a] {- Mirror (Input 2) -}
  [c] ->= [c, b, a] {- Mirror (Input 2) -}
  [a, b, a] ->= [a] {- Mirror (Input 3) -}
  [b, b, a] ->= [b] {- Mirror (Input 3) -}
  [c, b, a] ->= [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, c] -> [c] {- Input 0 -}
  [a, a] ->= [a] {- Input 1 -}
  [a, b] ->= [b] {- Input 1 -}
  [a, c] ->= [c] {- Input 1 -}
  [a] ->= [a, b, a] {- Input 2 -}
  [b] ->= [a, b, b] {- Input 2 -}
  [c] ->= [a, b, c] {- Input 2 -}
  [a, b, a] ->= [a] {- Input 3 -}
  [a, b, b] ->= [b] {- Input 3 -}
  [a, b, c] ->= [c] {- Input 3 -}
reason
  ( a
  , St  / 0A 0A 1A \
        | -  -  -  |
        \ -  -  1A / )
  ( b
  , St  / 0A - 0A  \
        | -  - -   |
        \ -  - -1A / )
  ( c
  , St  / 1A 1A - \
        | -  -  - |
        \ 1A 1A - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- Input 1 -}
  [a, b] ->= [b] {- Input 1 -}
  [a] ->= [a, b, a] {- Input 2 -}
  [b] ->= [a, b, b] {- Input 2 -}
  [c] ->= [a, b, c] {- Input 2 -}
  [a, b, a] ->= [a] {- Input 3 -}
  [a, b, b] ->= [b] {- Input 3 -}
  [a, b, c] ->= [c] {- Input 3 -}
reason
  no strict rules

**************************************************
skeleton: \Mirror(1/3,3)\Context\Mirror(1/9,3)\Matrix{\ArcticBZ}{3}(0/8,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.828032384000
  min duration 0.023464449000
  total durat. 1.640906995000
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.158203940000
  min duration 0.042168326000
  total durat. 3.200372266000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 90
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 81
      , alphabet_size = 9
      , total_length = 504}
    , self = 96
    , parent = Nothing
    , duration = 3.158203940000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:25:41.302826059 UTC
    , finish = 2025-09-04 08:25:44.461029999 UTC
    , thread_cap_info = ("ThreadId 163", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.225373296000
  min duration 3.225373296000
  total durat. 3.225373296000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 90
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 81
      , alphabet_size = 9
      , total_length = 504}
    , self = 97
    , parent = Nothing
    , duration = 3.225373296000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:25:41.318737082 UTC
    , finish = 2025-09-04 08:25:44.544110378 UTC
    , thread_cap_info = ("ThreadId 165", 3, False)}
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 3.601955036000
  min duration 3.601955036000
  total durat. 3.601955036000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 3
      , total_length = 36}
    , self = 98
    , parent = Nothing
    , duration = 3.601955036000
    , status = Success
    , start = 2025-09-04 08:25:41.00110176 UTC
    , finish = 2025-09-04 08:25:44.603056796 UTC
    , thread_cap_info = ("ThreadId 159", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 2.700005967000
  min duration 2.700005967000
  total durat. 2.700005967000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 3
      , total_length = 36}
    , self = 100
    , parent = Nothing
    , duration = 2.700005967000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:25:41.959470179 UTC
    , finish = 2025-09-04 08:25:44.659476146 UTC
    , thread_cap_info = ("ThreadId 175", 3, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 3.595295718000
  min duration 3.595295718000
  total durat. 3.595295718000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 3
      , alphabet_size = 3
      , total_length = 8}
    , self = 95
    , parent = Nothing
    , duration = 3.595295718000
    , status = Fail
    , start = 2025-09-04 08:25:40.723565929 UTC
    , finish = 2025-09-04 08:25:44.318861647 UTC
    , thread_cap_info = ("ThreadId 102", 3, False)}
Fail : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 19
  max duration 2.372740764000
  min duration 0.000006687000
  total durat. 2.602881575000
  Info
    { what = "Weight\n  { modus = Pre (Or_Else Count (GLPK   { goal = Optimize, epsilon_digits = 6}))\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 2916
      , num_strict_rules = 729
      , num_top_rules = 0
      , num_weak_rules = 2187
      , alphabet_size = 81
      , total_length = 17496}
    , self = 93
    , parent = Nothing
    , duration = 2.372740764000
    , status = Fail
    , start = 2025-09-04 08:25:41.721635576 UTC
    , finish = 2025-09-04 08:25:44.09437634 UTC
    , thread_cap_info = ("ThreadId 173", 0, False)}
**************************************************
F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 1 ,
F                  num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F                  = 8} , self = 95 , parent = Nothing , duration = 3.595295718000 , status
F                  = Fail , start = 2025-09-04 08:25:40.723565929 UTC , finish = 2025-09-04
F                  08:25:44.318861647 UTC , thread_cap_info = ("ThreadId 102", 3, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F                = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| F                = 144} , self = 88 , parent = Nothing , duration = 0.623727851000 , status
| F                = Fail , start = 2025-09-04 08:25:40.780946701 UTC , finish = 2025-09-04
| F                08:25:41.404674552 UTC , thread_cap_info = ("ThreadId 134", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F              = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | F              = 144} , self = 86 , parent = Nothing , duration = 0.280105529000 , status
| | F              = Fail , start = 2025-09-04 08:25:40.804633021 UTC , finish = 2025-09-04
| | F              08:25:41.08473855 UTC , thread_cap_info = ("ThreadId 136", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F            = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 3 , total_length
| | | F            = 36} , self = 82 , parent = Nothing , duration = 0.102369722000 , status
| | | F            = Fail , start = 2025-09-04 08:25:40.821147082 UTC , finish = 2025-09-04
| | | F            08:25:40.923516804 UTC , thread_cap_info = ("ThreadId 143", 3, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F          = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | | F          = 144} , self = 91 , parent = Nothing , duration = 0.828032384000 , status
| | | | F          = Fail , start = 2025-09-04 08:25:40.898413065 UTC , finish = 2025-09-04
| | | | F          08:25:41.726445449 UTC , thread_cap_info = ("ThreadId 155", 0, False)}
| | | | F          
| | | F |          
| | | F |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F |          = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | F |          = 144} , self = 89 , parent = Nothing , duration = 0.421326563000 , status
| | | F |          = Fail , start = 2025-09-04 08:25:40.983872474 UTC , finish = 2025-09-04
| | | F |          08:25:41.405199037 UTC , thread_cap_info = ("ThreadId 156", 0, False)}
| | | F |          
| | | | | S        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | S        , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | | | S        = 3 , total_length = 36} , self = 98 , parent = Nothing , duration = 3.601955036000
| | | | | S        , status = Success , start = 2025-09-04 08:25:41.00110176 UTC , finish
| | | | | S        = 2025-09-04 08:25:44.603056796 UTC , thread_cap_info = ("ThreadId 159",
| | | | | S        3, False)}
| | | | | S        
| | | | | | F      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | | F      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | F      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | F      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | F      , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | | | | F      = 3 , total_length = 36} , self = 92 , parent = Nothing , duration = 0.810289214000
| | | | | | F      , status = Fail , start = 2025-09-04 08:25:41.02230799 UTC , finish = 2025-09-04
| | | | | | F      08:25:41.832597204 UTC , thread_cap_info = ("ThreadId 160", 3, False)}
| | | | | | F      
| | | | | | | S    Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | | | | S    , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | | | | S    , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | | | | S    = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | | | | S    , cpf = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | | | S    = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | | | | | S    = 144} , self = 90 , parent = Nothing , duration = 0.683612107000 , status
| | | | | | | S    = Success , start = 2025-09-04 08:25:41.037964165 UTC , finish = 2025-09-04
| | | | | | | S    08:25:41.721576272 UTC , thread_cap_info = ("ThreadId 161", 0, False)}
| | | | | | | S    
| | F | | | | |    
| | E | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 90 , num_strict_rules
| | E | | | | |    = 9 , num_top_rules = 0 , num_weak_rules = 81 , alphabet_size = 9 , total_length
| | E | | | | |    = 504} , self = 96 , parent = Nothing , duration = 3.158203940000 , status
| | E | | | | |    = Except "AsyncCancelled" , start = 2025-09-04 08:25:41.302826059 UTC ,
| | E | | | | |    finish = 2025-09-04 08:25:44.461029999 UTC , thread_cap_info = ("ThreadId
| | E | | | | |    163", 3, False)}
| | E | | | | |    
| | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 90 , num_strict_rules
| | | | | | | | E  = 9 , num_top_rules = 0 , num_weak_rules = 81 , alphabet_size = 9 , total_length
| | | | | | | | E  = 504} , self = 97 , parent = Nothing , duration = 3.225373296000 , status
| | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-04 08:25:41.318737082 UTC ,
| | | | | | | | E  finish = 2025-09-04 08:25:44.544110378 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  165", 3, False)}
| | | | | | | | E  
| F | | | | | | |  
|   | F | | | | |  
|   |   | | | S |  
| F |   | | |   |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| F |   | | |   |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| F |   | | |   |  = Size { num_rules = 2916 , num_strict_rules = 729 , num_top_rules = 0
| F |   | | |   |  , num_weak_rules = 2187 , alphabet_size = 81 , total_length = 17496} ,
| F |   | | |   |  self = 93 , parent = Nothing , duration = 2.372740764000 , status = Fail
| F |   | | |   |  , start = 2025-09-04 08:25:41.721635576 UTC , finish = 2025-09-04 08:25:44.09437634
| F |   | | |   |  UTC , thread_cap_info = ("ThreadId 173", 0, False)}
| F |   | | |   |  
| | |   F | |   |  
| | |     | F   |  
| | | E   |     |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | E   |     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   |     |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E   |     |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size
| | | E   |     |  = 3 , total_length = 36} , self = 100 , parent = Nothing , duration = 2.700005967000
| | | E   |     |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:25:41.959470179
| | | E   |     |  UTC , finish = 2025-09-04 08:25:44.659476146 UTC , thread_cap_info = ("ThreadId
| | | E   |     |  175", 3, False)}
| | | E   |     |  
| F | |   |     |  
F   | |   |     |  
    E |   |     |  
      |   |     E  
      |   S        
      E            
