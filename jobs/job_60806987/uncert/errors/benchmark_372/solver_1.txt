[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 466 length 2086
CNF 466 vars 2086 clauses
last 625 length 2648
CNF 625 vars 2648 clauses
last 2790 length 13551
CNF 2790 vars 13551 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2536, clauses: 9800
last 2536 length 9800
last 3553 length 19528
CNF 3553 vars 19528 clauses
CNF 2536 vars 9800 clauses
last 2790 length 13551
CNF 2790 vars 13551 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2536, clauses: 9800, status: Unsatisfied, time: 0.075119342s
last 3552 length 19525
CNF 3552 vars 19525 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16619, clauses: 68970
last 16619 length 68970
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7334, clauses: 28306
last 7334 length 28306
CNF 16619 vars 68970 clauses
last 17984 length 92541
CNF 7334 vars 28306 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7334, clauses: 28306, status: Satisfied, time: 0.358693754s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16619, clauses: 68970, status: Satisfied, time: 0.403155147s
CNF 17984 vars 92541 clauses
last 20408 length 129372
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 18 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 16 weak rules on 8 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, c] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [b, a, a, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, a], [a, c], [c, b]] -> [[b, b]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [[b, a]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [[b, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, c], [c, b]] -> [[a, b]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, a], [a, c], [c, a]] -> [[a, a]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, b], [b, a], [a, c], [c, c]] -> [[a, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, b], [b, a], [a, c], [c, b]] -> [[c, b]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, b], [b, a], [a, c], [c, a]] -> [[c, a]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, b], [b, a], [a, c], [c, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, c]] ->= [ [b, b] , [b, a] , [a, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [a, c]
  , St (Corner  / 1 0 0 \
                | 0 1 1 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 2 0 \
                | 0 6 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 2 0 \
                | 0 7 0 |
                \ 0 0 1 /) )
  ( [b, c]
  , St (Corner  / 1 6 6 \
                | 0 6 6 |
                \ 0 0 1 /) )
  ( [c, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [c, b]
  , St (Corner  / 1 0 0 \
                | 0 3 0 |
                \ 0 0 1 /) )
  ( [c, c]
  , St (Corner  / 1 0 0 \
                | 0 1 1 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\TileAllAll{2}(9/18,9)\Matrix{\Natural}{3}(0/16,8)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 20408 vars 129372 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.126769409000
  min duration 0.006514083000
  total durat. 1.339173258000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 81
      , num_strict_rules = 27
      , num_top_rules = 0
      , num_weak_rules = 54
      , alphabet_size = 9
      , total_length = 540}
    , self = 97
    , parent = Nothing
    , duration = 1.126769409000
    , status = Fail
    , start = 2025-09-04 08:27:35.510198939 UTC
    , finish = 2025-09-04 08:27:36.636968348 UTC
    , thread_cap_info = ("ThreadId 128", 1, False)}
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.000864121000
  min duration 1.000864121000
  total durat. 1.000864121000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 42}
    , self = 89
    , parent = Nothing
    , duration = 1.000864121000
    , status = Success
    , start = 2025-09-04 08:27:35.519108535 UTC
    , finish = 2025-09-04 08:27:36.519972656 UTC
    , thread_cap_info = ("ThreadId 134", 3, False)}
**************************************************
F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F              = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
F              = 126} , self = 81 , parent = Nothing , duration = 0.104638370000 , status
F              = Fail , start = 2025-09-04 08:27:35.505557889 UTC , finish = 2025-09-04
F              08:27:35.610196259 UTC , thread_cap_info = ("ThreadId 120", 2, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 54 , alphabet_size = 9 , total_length
| F            = 540} , self = 97 , parent = Nothing , duration = 1.126769409000 , status
| F            = Fail , start = 2025-09-04 08:27:35.510198939 UTC , finish = 2025-09-04
| F            08:27:36.636968348 UTC , thread_cap_info = ("ThreadId 128", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F          = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | F          = 126} , self = 82 , parent = Nothing , duration = 0.108428897000 , status
| | F          = Fail , start = 2025-09-04 08:27:35.510201231 UTC , finish = 2025-09-04
| | F          08:27:35.618630128 UTC , thread_cap_info = ("ThreadId 122", 2, False)}
| | F          
| | | S        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S        , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | S        = 3 , total_length = 42} , self = 89 , parent = Nothing , duration = 1.000864121000
| | | S        , status = Success , start = 2025-09-04 08:27:35.519108535 UTC , finish
| | | S        = 2025-09-04 08:27:36.519972656 UTC , thread_cap_info = ("ThreadId 134",
| | | S        3, False)}
| | | S        
| | | | F      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | F      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | F      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | F      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | F      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | F      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | F      , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | F      = 3 , total_length = 42} , self = 85 , parent = Nothing , duration = 0.144694465000
| | | | F      , status = Fail , start = 2025-09-04 08:27:35.530226592 UTC , finish =
| | | | F      2025-09-04 08:27:35.674921057 UTC , thread_cap_info = ("ThreadId 135",
| | | | F      3, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | F    = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | F    = 126} , self = 84 , parent = Nothing , duration = 0.101251396000 , status
| | | | | F    = Fail , start = 2025-09-04 08:27:35.554952285 UTC , finish = 2025-09-04
| | | | | F    08:27:35.656203681 UTC , thread_cap_info = ("ThreadId 144", 0, False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | F  = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | F  = 126} , self = 86 , parent = Nothing , duration = 0.221945815000 , status
| | | | | | F  = Fail , start = 2025-09-04 08:27:35.570209923 UTC , finish = 2025-09-04
| | | | | | F  08:27:35.792155738 UTC , thread_cap_info = ("ThreadId 145", 0, False)}
| | | | | | F  
F | | | | | |  
  | F | | | |  
S |   | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S |   | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S |   | | | |  = Size { num_rules = 2187 , num_strict_rules = 729 , num_top_rules = 0
S |   | | | |  , num_weak_rules = 1458 , alphabet_size = 81 , total_length = 14580} ,
S |   | | | |  self = 91 , parent = Nothing , duration = 0.924915391000 , status = Success
S |   | | | |  , start = 2025-09-04 08:27:35.654100373 UTC , finish = 2025-09-04 08:27:36.579015764
S |   | | | |  UTC , thread_cap_info = ("ThreadId 154", 0, False)}
S |   | | | |  
| |   | | F |  
| |   | F   |  
| | E |     |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | E |     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 27
| | E |     |  , num_strict_rules = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size
| | E |     |  = 9 , total_length = 126} , self = 92 , parent = Nothing , duration = 0.869023761000
| | E |     |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:35.710017045
| | E |     |  UTC , finish = 2025-09-04 08:27:36.579040806 UTC , thread_cap_info = ("ThreadId
| | E |     |  155", 0, False)}
| | E |     |  
| | | | E   |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | E   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E   |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E   |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | E   |  = 3 , total_length = 42} , self = 95 , parent = Nothing , duration = 0.882148931000
| | | | E   |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:35.750216516
| | | | E   |  UTC , finish = 2025-09-04 08:27:36.632365447 UTC , thread_cap_info = ("ThreadId
| | | | E   |  156", 3, False)}
| | | | E   |  
| | | | |   F  
| | | | | S    Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | S    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 27
| | | | | S    , num_strict_rules = 9 , num_top_rules = 0 , num_weak_rules = 18 , alphabet_size
| | | | | S    = 9 , total_length = 126} , self = 87 , parent = Nothing , duration = 0.610079219000
| | | | | S    , status = Success , start = 2025-09-04 08:27:35.889487618 UTC , finish
| | | | | S    = 2025-09-04 08:27:36.499566837 UTC , thread_cap_info = ("ThreadId 158",
| | | | | S    0, False)}
| | | | | S    
| | | | | S    
| | | S |      
S | |   |      
  | E   |      
  |     E      
  F            
