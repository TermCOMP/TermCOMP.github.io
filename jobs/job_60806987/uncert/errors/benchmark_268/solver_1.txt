last 1167 length 4751
last 1354 length 5457
CNF 1167 vars 4751 clauses
CNF 1354 vars 5457 clauses
last 1095 length 4423
CNF 1095 vars 4423 clauses
last 1554 length 6257
CNF 1554 vars 6257 clauses
last 10238 length 44553
CNF 10238 vars 44553 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3265, clauses: 11971
last 3265 length 11971
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4178, clauses: 15534
last 4178 length 15534
CNF 3265 vars 11971 clauses
CNF 4178 vars 15534 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3265, clauses: 11971, status: Satisfied, time: 0.101872644s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10889, clauses: 45553
last 10889 length 45553
CNF 10889 vars 45553 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4178, clauses: 15534, status: Satisfied, time: 0.1653441s
last 803 length 3237
last 905 length 3615
CNF 803 vars 3237 clauses
last 1370 length 5527
last 1370 length 5563
CNF 905 vars 3615 clauses
CNF 1370 vars 5563 clauses
CNF 1370 vars 5527 clauses
last 13771 length 58440
CNF 13771 vars 58440 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2564, clauses: 9282
last 2564 length 9282
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4060, clauses: 14953
CNF 2564 vars 9282 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9592, clauses: 40143
last 4060 length 14953
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12766, clauses: 53421
last 12766 length 53421
last 9592 length 40143
CNF 4060 vars 14953 clauses
CNF 12766 vars 53421 clauses
CNF 9592 vars 40143 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4060, clauses: 14953, status: Satisfied, time: 0.197495105s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2564, clauses: 9282, status: Unsatisfied, time: 0.329763209s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5835, clauses: 23809
last 5835 length 23809
CNF 5835 vars 23809 clauses
last 1081 length 4359
CNF 1081 vars 4359 clauses
last 1137 length 4579
CNF 1137 vars 4579 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3256, clauses: 11926
last 3256 length 11926
CNF 3256 vars 11926 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3256, clauses: 11926, status: Satisfied, time: 0.117739372s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10887, clauses: 45547
**************************************************
summary
**************************************************
SRS with 3 strict rules and 3 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 14 strict rules and 6 weak rules on 6 letters       weights
SRS with 6 strict rules and 6 weak rules on 6 letters       EDG
SRS with 6 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 6 weak rules on 6 letters       EDG
SRS with 5 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 6 weak rules on 6 letters       weights
SRS with 3 strict rules and 6 weak rules on 5 letters       EDG
SRS with 3 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 6 weak rules on 5 letters       weights
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, c] -> [b, b, a] {- Input 0 -}
  [c, c, a] -> [b, b, c] {- Input 1 -}
  [c, a, b] -> [a, b, a] {- Input 2 -}
  [a, b, b] ->= [b, a, b] {- Input 3 -}
  [b, c, b] ->= [a, c, c] {- Input 4 -}
  [c, c, a] ->= [c, c, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [b, b, c] -> [b, b, a] {- Input 0 -}
  [c, c, a] -> [b, b, c] {- Input 1 -}
  [c, a, b] -> [a, b, a] {- Input 2 -}
  [a, b, b] -> [b, a, b] {- Strictified (Input 3) -}
  [b, c, b] -> [a, c, c] {- Strictified (Input 4) -}
  [c, c, a] -> [c, c, b] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, b, b] -> [a, b, b] {- Mirror (Input 0) -}
  [a, c, c] -> [c, b, b] {- Mirror (Input 1) -}
  [b, a, c] -> [a, b, a] {- Mirror (Input 2) -}
  [b, b, a] -> [b, a, b] {- Mirror (Strictified (Input 3)) -}
  [b, c, b] -> [c, c, a] {- Mirror (Strictified (Input 4)) -}
  [a, c, c] -> [b, c, c] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, c, c] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, c, c] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a#, c, c] |-> [c#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, c] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, b, a] |-> [a#, b] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [b#, b, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 4))) -}
  [b#, c, b] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [b#, c, b] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a#, c, c] |-> [c#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, c, c] |-> [c#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 1A 2A 3A - \
        | 1A 2A 3A - |
        | 1A 2A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 14A 15A 17A - \
        | 14A 15A 17A - |
        | 14A 15A 17A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 15A 16A - \
        | 14A 15A 16A - |
        | 14A 15A 16A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 14A 14A 17A - \
        | 14A 14A 17A - |
        | 14A 14A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c#, b, b] |-> [a#, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 6A 6A 9A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 9A - \
        | 6A 6A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (3/3,3)\Strictify\Mirror(6,3)\Deepee(14/6,6)\Weight\EDG(6/6,6)\Matrix{\Arctic}{3}\EDG(5/6,6)\Matrix{\Arctic}{3}(4/6,6)\Weight\EDG(3/6,5)\Matrix{\Arctic}{3}(1/6,5)\Weight(0/6,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.395329677000
  min duration 0.185469033000
  total durat. 1.045760616000
**************************************************
F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F              = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 36} , self = 118 , parent = Nothing , duration = 0.972506494000 , status
F              = Fail , start = 2025-09-04 08:20:47.377113547 UTC , finish = 2025-09-04
F              08:20:48.349620041 UTC , thread_cap_info = ("ThreadId 68", 0, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F            = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 432} , self = 112 , parent = Nothing , duration = 0.521378044000 , status
| F            = Fail , start = 2025-09-04 08:20:47.448841686 UTC , finish = 2025-09-04
| F            08:20:47.97021973 UTC , thread_cap_info = ("ThreadId 114", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 432} , self = 87 , parent = Nothing , duration = 0.216012413000 , status
| | F          = Fail , start = 2025-09-04 08:20:47.455320468 UTC , finish = 2025-09-04
| | F          08:20:47.671332881 UTC , thread_cap_info = ("ThreadId 116", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F        = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | F        = 72} , self = 88 , parent = Nothing , duration = 0.204485738000 , status
| | | F        = Fail , start = 2025-09-04 08:20:47.487770401 UTC , finish = 2025-09-04
| | | F        08:20:47.692256139 UTC , thread_cap_info = ("ThreadId 133", 0, False)}
| | | F        
| | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S      = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | S      = 5 , total_length = 54} , self = 92 , parent = Nothing , duration = 0.185469033000
| | | | S      , status = Success , start = 2025-09-04 08:20:47.574813528 UTC , finish
| | | | S      = 2025-09-04 08:20:47.760282561 UTC , thread_cap_info = ("ThreadId 144",
| | | | S      0, False)}
| | | | S      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | | | | S    alphabet_size = 6 , total_length = 72} , self = 96 , parent = Nothing ,
| | | | | S    duration = 0.265952123000 , status = Success , start = 2025-09-04 08:20:47.594812685
| | | | | S    UTC , finish = 2025-09-04 08:20:47.860764808 UTC , thread_cap_info = ("ThreadId
| | | | | S    145", 0, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | | | E  = 5 , total_length = 54} , self = 98 , parent = Nothing , duration = 0.202334517000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.660746195
| | | | | | E  UTC , finish = 2025-09-04 08:20:47.863080712 UTC , thread_cap_info = ("ThreadId
| | | | | | E  151", 0, False)}
| | | | | | E  
| | F | | | |  
| |   F | | |  
| | E   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E   | | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
| | E   | | |  = 6 , total_length = 72} , self = 99 , parent = Nothing , duration = 0.170845283000
| | E   | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.692279551
| | E   | | |  UTC , finish = 2025-09-04 08:20:47.863124834 UTC , thread_cap_info = ("ThreadId
| | E   | | |  154", 0, False)}
| | E   | | |  
| | | F | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | F | | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | F | | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | F | | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | F | | |  = False}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | F | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F | | |  = 36} , self = 95 , parent = Nothing , duration = 0.107960630000 , status
| | | F | | |  = Fail , start = 2025-09-04 08:20:47.71675938 UTC , finish = 2025-09-04
| | | F | | |  08:20:47.82472001 UTC , thread_cap_info = ("ThreadId 155", 1, False)}
| | | F | | |  
| | | | S | |  
| | | | F | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F | |  = Size { num_rules = 54 , num_strict_rules = 54 , num_top_rules = 0 , num_weak_rules
| | | | F | |  = 0 , alphabet_size = 9 , total_length = 432} , self = 113 , parent = Nothing
| | | | F | |  , duration = 0.303046047000 , status = Fail , start = 2025-09-04 08:20:47.775597484
| | | | F | |  UTC , finish = 2025-09-04 08:20:48.078643531 UTC , thread_cap_info = ("ThreadId
| | | | F | |  157", 2, False)}
| | | | F | |  
| | | F | | |  
| | |   | S |  
| | |   |   E  
| | E   |      
| | F   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   |      = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | F   |      = 4 , total_length = 42} , self = 115 , parent = Nothing , duration = 0.398970260000
| | F   |      , status = Fail , start = 2025-09-04 08:20:47.894803718 UTC , finish =
| | F   |      2025-09-04 08:20:48.293773978 UTC , thread_cap_info = ("ThreadId 178",
| | F   |      3, False)}
| | F   |      
| | | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S |      = 11 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 6 ,
| | | S |      alphabet_size = 6 , total_length = 66} , self = 114 , parent = Nothing
| | | S |      , duration = 0.395329677000 , status = Success , start = 2025-09-04 08:20:47.898378002
| | | S |      UTC , finish = 2025-09-04 08:20:48.293707679 UTC , thread_cap_info = ("ThreadId
| | | S |      180", 0, False)}
| | | S |      
| | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | | | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 6 , alphabet_size
| | | | | E    = 6 , total_length = 66} , self = 117 , parent = Nothing , duration = 0.404461503000
| | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.934920199
| | | | | E    UTC , finish = 2025-09-04 08:20:48.339381702 UTC , thread_cap_info = ("ThreadId
| | | | | E    182", 0, False)}
| | | | | E    
| F | | | |    
|   | | F |    
|   | S   |    
|   F     |    
|         E    
F              
S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S              = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
S              = 5 , total_length = 54} , self = 125 , parent = Nothing , duration = 0.199009783000
S              , status = Success , start = 2025-09-04 08:20:48.418248069 UTC , finish
S              = 2025-09-04 08:20:48.617257852 UTC , thread_cap_info = ("ThreadId 200",
S              3, False)}
S              
| E            Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E            = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E            , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| E            = 5 , total_length = 54} , self = 127 , parent = Nothing , duration = 0.166306764000
| E            , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:48.475544274
| E            UTC , finish = 2025-09-04 08:20:48.641851038 UTC , thread_cap_info = ("ThreadId
| E            201", 3, False)}
| E            
S |            
  E            
