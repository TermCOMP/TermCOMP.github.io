last 12071 length 51315
last 14474 length 62073
CNF 12071 vars 51315 clauses
CNF 14474 vars 62073 clauses
last 1535 length 6305
CNF 1535 vars 6305 clauses
last 1475 length 5923
CNF 1475 vars 5923 clauses
last 1012 length 4129
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4242, clauses: 15674
last 4242 length 15674
CNF 1012 vars 4129 clauses
last 984 length 3939
CNF 4242 vars 15674 clauses
CNF 984 vars 3939 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2909, clauses: 10506
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4242, clauses: 15674, status: Satisfied, time: 0.304660102s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14527, clauses: 60969
last 2909 length 10506
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11678, clauses: 48995
last 11678 length 48995
CNF 2909 vars 10506 clauses
CNF 11678 vars 48995 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2909, clauses: 10506, status: Satisfied, time: 0.44158648s
last 1393 length 5683
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11678, clauses: 48995, status: Satisfied, time: 0.13989754s
last 1339 length 5359
CNF 1339 vars 5359 clauses
CNF 1393 vars 5683 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3938, clauses: 14469
last 3938 length 14469
CNF 3938 vars 14469 clauses
last 1293 length 5281
CNF 1293 vars 5281 clauses
last 1169 length 4675
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3938, clauses: 14469, status: Satisfied, time: 0.103409963s
CNF 1169 vars 4675 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3529, clauses: 12928
last 3529 length 12928
CNF 3529 vars 12928 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3529, clauses: 12928, status: Satisfied, time: 0.231708469s
last 1267 length 5087
CNF 1267 vars 5087 clauses
last 1249 length 5105
CNF 1249 vars 5105 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3727, clauses: 13576
last 3727 length 13576
CNF 3727 vars 13576 clauses
**************************************************
summary
**************************************************
SRS with 3 strict rules and 4 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 16 strict rules and 7 weak rules on 6 letters       weights
SRS with 4 strict rules and 7 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

  2 SRS with 3 strict rules and 7 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 7 weak rules on 5 letters       weights
  SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, a] -> [a, b, b] {- Input 0 -}
  [b, a, c] -> [b, b, b] {- Input 1 -}
  [a, c, c] -> [a, b, b] {- Input 2 -}
  [c, c, a] ->= [c, a, c] {- Input 3 -}
  [a, a, a] ->= [a, a, b] {- Input 4 -}
  [a, b, a] ->= [b, b, a] {- Input 5 -}
  [b, b, b] ->= [a, b, c] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, b, a] -> [a, b, b] {- Input 0 -}
  [b, a, c] -> [b, b, b] {- Input 1 -}
  [a, c, c] -> [a, b, b] {- Input 2 -}
  [c, c, a] -> [c, a, c] {- Strictified (Input 3) -}
  [a, a, a] -> [a, a, b] {- Strictified (Input 4) -}
  [a, b, a] -> [b, b, a] {- Strictified (Input 5) -}
  [b, b, b] -> [a, b, c] {- Strictified (Input 6) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, c] -> [b, b, a] {- Mirror (Input 0) -}
  [c, a, b] -> [b, b, b] {- Mirror (Input 1) -}
  [c, c, a] -> [b, b, a] {- Mirror (Input 2) -}
  [a, c, c] -> [c, a, c] {- Mirror (Strictified (Input 3)) -}
  [a, a, a] -> [b, a, a] {- Mirror (Strictified (Input 4)) -}
  [a, b, a] -> [a, b, b] {- Mirror (Strictified (Input 5)) -}
  [b, b, b] -> [c, b, a] {- Mirror (Strictified (Input 6)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, a, a] |-> [b#, a, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [a#, b, a] |-> [a#, b, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a#, b, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 5))) -}
  [a#, b, a] |-> [b#, b] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [a#, b, c] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, b, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, b, c] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, c, c] |-> [a#, c] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [a#, c, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b#, b, b] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 6))) -}
  [b#, b, b] |-> [b#, a] {- DP (Top 1) (Mirror (Strictified (Input 6))) -}
  [b#, b, b] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, a, b] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, b, a] |-> [a#, b, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, b, b] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, a, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [a#, b, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Wk  / -   1A 2A \
        | -2A -  0A |
        \ -   -  0A / )
  ( b
  , Wk  / -   - 0A  \
        | -2A - -2A |
        \ -   - 0A  / )
  ( c
  , Wk  / 0A  - -  \
        | -2A - -  |
        \ -   - 0A / )
  ( a#
  , Wk  / -2A 2A 1A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, b, b] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, a, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 13A 16A 16A - \
        | 13A 16A 16A - |
        | 13A 16A 16A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 10A 13A 13A - \
        | 10A 13A 13A - |
        | 10A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a, b, a] ->= [a, b, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b, b, b] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  EDG

**************************************************
skeleton: (3/4,3)\Strictify\Mirror(7,3)\Deepee(16/7,6)\Weight(4/7,6)\EDG[(1/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[],(3/7,5)\Matrix{\Arctic}{3}(2/7,5)\Weight(0/7,3)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 5
  max duration 1.817120530000
  min duration 0.018650376000
  total durat. 1.973864475000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 63
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 504}
    , self = 115
    , parent = Nothing
    , duration = 1.817120530000
    , status = Fail
    , start = 2025-09-04 08:20:43.23991256 UTC
    , finish = 2025-09-04 08:20:45.05703309 UTC
    , thread_cap_info = ("ThreadId 127", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 0.741013148000
  min duration 0.179975949000
  total durat. 1.190415697000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.802792939000
  min duration 0.156182439000
  total durat. 1.964595932000
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 42} , self = 59 , parent = Nothing , duration = 0.297110942000 , status
F          = Fail , start = 2025-09-04 08:20:42.93423123 UTC , finish = 2025-09-04
F          08:20:43.231342172 UTC , thread_cap_info = ("ThreadId 59", 3, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| F        = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 504} , self = 60 , parent = Nothing , duration = 0.293419214000 , status
| F        = Fail , start = 2025-09-04 08:20:42.938075155 UTC , finish = 2025-09-04
| F        08:20:43.231494369 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | F      = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 504} , self = 57 , parent = Nothing , duration = 0.288172051000 , status
| | F      = Fail , start = 2025-09-04 08:20:42.938082049 UTC , finish = 2025-09-04
| | F      08:20:43.2262541 UTC , thread_cap_info = ("ThreadId 84", 1, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | F    { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | F    = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | F    = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | F    = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| | | F    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F    = 42} , self = 61 , parent = Nothing , duration = 0.101220297000 , status
| | | F    = Fail , start = 2025-09-04 08:20:43.13035901 UTC , finish = 2025-09-04
| | | F    08:20:43.231579307 UTC , thread_cap_info = ("ThreadId 111", 2, False)}
| | | F    
| | F |    
F |   |    
  F   |    
      F    
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 63 , num_strict_rules = 63 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 9 , total_length = 504} , self = 115 , parent = Nothing
F          , duration = 1.817120530000 , status = Fail , start = 2025-09-04 08:20:43.23991256
F          UTC , finish = 2025-09-04 08:20:45.05703309 UTC , thread_cap_info = ("ThreadId
F          127", 3, False)}
F          
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 12 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 7 ,
| S        alphabet_size = 5 , total_length = 72} , self = 88 , parent = Nothing ,
| S        duration = 0.720666342000 , status = Success , start = 2025-09-04 08:20:43.498415498
| S        UTC , finish = 2025-09-04 08:20:44.21908184 UTC , thread_cap_info = ("ThreadId
| S        147", 3, False)}
| S        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F      = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F      = 48} , self = 87 , parent = Nothing , duration = 0.424660929000 , status
| | F      = Fail , start = 2025-09-04 08:20:43.536925431 UTC , finish = 2025-09-04
| | F      08:20:43.96158636 UTC , thread_cap_info = ("ThreadId 151", 3, False)}
| | F      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 7 , alphabet_size
| | | E    = 5 , total_length = 72} , self = 90 , parent = Nothing , duration = 0.741013148000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:43.54047831
| | | E    UTC , finish = 2025-09-04 08:20:44.281491458 UTC , thread_cap_info = ("ThreadId
| | | E    150", 3, False)}
| | | E    
| | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S  = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | S  = 4 , total_length = 48} , self = 95 , parent = Nothing , duration = 0.802792939000
| | | | S  , status = Success , start = 2025-09-04 08:20:43.62106488 UTC , finish
| | | | S  = 2025-09-04 08:20:44.423857819 UTC , thread_cap_info = ("ThreadId 154",
| | | | S  3, False)}
| | | | S  
| | F | |  
| | S | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | S | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | S | |  = 4 , total_length = 48} , self = 96 , parent = Nothing , duration = 0.480119900000
| | S | |  , status = Success , start = 2025-09-04 08:20:43.981249644 UTC , finish
| | S | |  = 2025-09-04 08:20:44.461369544 UTC , thread_cap_info = ("ThreadId 156",
| | S | |  3, False)}
| | S | |  
| S | | |  
|   | E |  
|   |   S  
|   S      
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| F        = 4 , num_top_rules = 4 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| F        = 66} , self = 102 , parent = Nothing , duration = 0.100679342000 , status
| F        = Fail , start = 2025-09-04 08:20:44.461395846 UTC , finish = 2025-09-04
| F        08:20:44.562075188 UTC , thread_cap_info = ("ThreadId 166", 3, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 11 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 7 ,
| | S      alphabet_size = 5 , total_length = 66} , self = 105 , parent = Nothing
| | S      , duration = 0.156182439000 , status = Success , start = 2025-09-04 08:20:44.521805831
| | S      UTC , finish = 2025-09-04 08:20:44.67798827 UTC , thread_cap_info = ("ThreadId
| | S      170", 3, False)}
| | S      
| F |      
| E |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| E |      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 7 , alphabet_size
| E |      = 5 , total_length = 66} , self = 109 , parent = Nothing , duration = 0.179975949000
| E |      , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:44.579894367
| E |      UTC , finish = 2025-09-04 08:20:44.759870316 UTC , thread_cap_info = ("ThreadId
| E |      174", 3, False)}
| E |      
| | S      
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| | S      alphabet_size = 5 , total_length = 60} , self = 112 , parent = Nothing
| | S      , duration = 0.284954212000 , status = Success , start = 2025-09-04 08:20:44.739884354
| | S      UTC , finish = 2025-09-04 08:20:45.024838566 UTC , thread_cap_info = ("ThreadId
| | S      180", 3, False)}
| | S      
| E |      
| E |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E |      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| E |      = 5 , total_length = 60} , self = 116 , parent = Nothing , duration = 0.269426600000
| E |      , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:44.788712369
| E |      UTC , finish = 2025-09-04 08:20:45.058138969 UTC , thread_cap_info = ("ThreadId
| E |      181", 3, False)}
| E |      
| | S      
F |        
  E        
