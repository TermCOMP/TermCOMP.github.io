last 8813 length 37903
last 968 length 3869
last 881 length 3545
last 833 length 3363
last 868 length 3589
CNF 968 vars 3869 clauses
CNF 881 vars 3545 clauses
CNF 833 vars 3363 clauses
CNF 868 vars 3589 clauses
last 7850 length 33311
CNF 8813 vars 37903 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2627, clauses: 9444
last 8012 length 33882
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2654, clauses: 9552
last 7612 length 32171
last 1394 length 5994
last 1311 length 5502
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10462, clauses: 43847
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10468, clauses: 43865
last 2627 length 9444
last 2654 length 9552
CNF 8012 vars 33882 clauses
CNF 7612 vars 32171 clauses
CNF 1311 vars 5502 clauses
CNF 1394 vars 5994 clauses
last 10462 length 43847
last 10468 length 43865
last 5356 length 22457
CNF 2627 vars 9444 clauses
last 5768 length 24805
CNF 2654 vars 9552 clauses
CNF 5356 vars 22457 clauses
CNF 10468 vars 43865 clauses
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2627, clauses: 9444, status: Satisfied, time: 0.156672506s

CNF 10462 vars 43847 clauses
CNF 5768 vars 24805 clauses
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 150 epsilon transitions
SRS with 4 rules on 3 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 18 strict rules and 18 weak rules on 9 letters       weights
  SRS with 0 strict rules and 6 weak rules on 5 letters       no strict rules

  2 SRS with 2 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 2 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 18 rules on 9 letters       weights
    SRS with 6 rules on 5 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 3 rules on 5 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, a] -> [c, c, c] {- Input 0 -}
  [b, c, c] -> [a, c, c] {- Input 1 -}
  [b, a, c] ->= [b, c, b] {- Input 2 -}
  [a, a, c] ->= [c, c, c] {- Input 3 -}
  [c, a, c] ->= [c, c, b] {- Input 4 -}
  [b, c, a] ->= [a, a, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, b, a] -> [c, c, c] {- Input 0 -}
  [b, c, c] -> [a, c, c] {- Input 1 -}
  [b, a, c] -> [b, c, b] {- Strictified (Input 2) -}
  [a, a, c] -> [c, c, c] {- Strictified (Input 3) -}
  [c, a, c] -> [c, c, b] {- Strictified (Input 4) -}
  [b, c, a] -> [a, a, b] {- Strictified (Input 5) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, 2), (2, -1), (3, 2), (4, 2), (5, 2)], epsilons = [((0, 2, 0), (1, 1, 0)), ((0, 2, 0), (1, 5, 0)), ((0, 2, 1), (0, 0, 0)), ((0, 2, 1), (1, 4, 0)), ((0, 4, 1), (0, 0, 0)), ((0, 4, 1), (1, 4, 0)), ((1, 4, 1), (1, 4, 0)), ((1, 4, 1), (2, 4, 0)), ((2, 4, 1), (1, 4, 0)), ((2, 4, 1), (2, 4, 0)), ((0, 5, 1), (1, 3, 0)), ((1, 5, 1), (2, 3, 0)), ((2, 5, 1), (2, 3, 0)), ((0, 0, 2), (0, 0, 0)), ((0, 0, 2), (0, 4, 0)), ((0, 1, 2), (0, 0, 0)), ((0, 1, 2), (0, 4, 0)), ((1, 1, 2), (0, 0, 0)), ((1, 1, 2), (0, 4, 0)), ((1, 1, 2), (1, 4, 0)), ((1, 1, 2), (2, 4, 0)), ((2, 1, 2), (0, 0, 0)), ((2, 1, 2), (0, 4, 0)), ((2, 1, 2), (1, 4, 0)), ((2, 1, 2), (2, 4, 0)), ((0, 2, 2), (0, 1, 0)), ((0, 2, 2), (1, 1, 0)), ((0, 2, 2), (0, 2, 0)), ((0, 2, 2), (0, 5, 0)), ((0, 2, 2), (1, 5, 0)), ((0, 3, 2), (0, 0, 0)), ((0, 3, 2), (0, 4, 0)), ((0, 4, 2), (0, 1, 0)), ((0, 4, 2), (1, 1, 0)), ((0, 4, 2), (0, 2, 0)), ((0, 4, 2), (0, 5, 0)), ((0, 4, 2), (1, 5, 0)), ((1, 4, 2), (0, 1, 0)), ((1, 4, 2), (1, 1, 0)), ((1, 4, 2), (2, 1, 0)), ((1, 4, 2), (0, 5, 0)), ((1, 4, 2), (1, 5, 0)), ((1, 4, 2), (2, 5, 0)), ((2, 4, 2), (0, 1, 0)), ((2, 4, 2), (1, 1, 0)), ((2, 4, 2), (2, 1, 0)), ((2, 4, 2), (0, 5, 0)), ((2, 4, 2), (1, 5, 0)), ((2, 4, 2), (2, 5, 0)), ((0, 5, 2), (0, 1, 0)), ((0, 5, 2), (1, 1, 0)), ((0, 5, 2), (0, 2, 0)), ((0, 5, 2), (0, 5, 0)), ((0, 5, 2), (1, 5, 0)), ((1, 5, 2), (1, 1, 0)), ((1, 5, 2), (2, 1, 0)), ((2, 5, 2), (1, 1, 0)), ((2, 5, 2), (2, 1, 0)), ((1, 1, 3), (0, 0, 0)), ((1, 1, 3), (0, 1, 0)), ((1, 1, 3), (1, 1, 0)), ((1, 1, 3), (2, 1, 0)), ((1, 1, 3), (0, 2, 0)), ((1, 1, 3), (0, 4, 0)), ((1, 1, 3), (1, 4, 0)), ((1, 1, 3), (2, 4, 0)), ((1, 1, 3), (0, 5, 0)), ((1, 1, 3), (1, 5, 0)), ((1, 1, 3), (2, 5, 0)), ((1, 1, 3), (0, 0, 1)), ((1, 1, 3), (0, 4, 1)), ((1, 1, 3), (1, 4, 1)), ((1, 1, 3), (2, 4, 1)), ((1, 1, 3), (0, 0, 2)), ((1, 1, 3), (0, 4, 2)), ((1, 1, 3), (1, 4, 2)), ((1, 1, 3), (0, 0, 3)), ((1, 1, 3), (0, 1, 3)), ((2, 1, 3), (0, 0, 0)), ((2, 1, 3), (0, 1, 0)), ((2, 1, 3), (1, 1, 0)), ((2, 1, 3), (2, 1, 0)), ((2, 1, 3), (0, 2, 0)), ((2, 1, 3), (0, 4, 0)), ((2, 1, 3), (1, 4, 0)), ((2, 1, 3), (2, 4, 0)), ((2, 1, 3), (0, 5, 0)), ((2, 1, 3), (1, 5, 0)), ((2, 1, 3), (2, 5, 0)), ((2, 1, 3), (0, 0, 1)), ((2, 1, 3), (1, 3, 1)), ((2, 1, 3), (2, 3, 1)), ((2, 1, 3), (0, 4, 1)), ((2, 1, 3), (1, 4, 1)), ((2, 1, 3), (2, 4, 1)), ((2, 1, 3), (0, 0, 2)), ((2, 1, 3), (0, 1, 2)), ((2, 1, 3), (1, 1, 2)), ((2, 1, 3), (2, 1, 2)), ((2, 1, 3), (1, 3, 2)), ((2, 1, 3), (2, 3, 2)), ((2, 1, 3), (0, 4, 2)), ((2, 1, 3), (1, 4, 2)), ((2, 1, 3), (2, 4, 2)), ((2, 1, 3), (0, 0, 3)), ((2, 1, 3), (0, 1, 3)), ((2, 1, 3), (1, 1, 3)), ((2, 1, 3), (2, 1, 3)), ((2, 1, 3), (1, 3, 3)), ((2, 1, 3), (2, 3, 3)), ((1, 3, 3), (0, 0, 0)), ((1, 3, 3), (0, 4, 0)), ((1, 3, 3), (1, 4, 0)), ((1, 3, 3), (2, 4, 0)), ((1, 3, 3), (1, 3, 1)), ((1, 3, 3), (2, 3, 1)), ((1, 3, 3), (0, 1, 2)), ((1, 3, 3), (1, 1, 2)), ((2, 3, 3), (0, 0, 0)), ((2, 3, 3), (0, 4, 0)), ((2, 3, 3), (1, 4, 0)), ((2, 3, 3), (2, 4, 0)), ((2, 3, 3), (1, 1, 2)), ((2, 3, 3), (2, 1, 2)), ((1, 4, 3), (0, 0, 0)), ((1, 4, 3), (0, 4, 0)), ((1, 4, 3), (1, 4, 0)), ((1, 4, 3), (2, 4, 0)), ((1, 4, 3), (1, 3, 1)), ((1, 4, 3), (2, 3, 1)), ((1, 4, 3), (0, 1, 2)), ((1, 4, 3), (1, 1, 2)), ((2, 4, 3), (0, 0, 0)), ((2, 4, 3), (0, 4, 0)), ((2, 4, 3), (1, 4, 0)), ((2, 4, 3), (2, 4, 0)), ((2, 4, 3), (2, 3, 1)), ((2, 4, 3), (1, 1, 2)), ((2, 4, 3), (2, 1, 2)), ((1, 5, 3), (1, 3, 0)), ((1, 5, 3), (2, 3, 0)), ((1, 5, 3), (0, 1, 1)), ((1, 5, 3), (1, 1, 1)), ((1, 5, 3), (0, 5, 1)), ((1, 5, 3), (1, 5, 1)), ((2, 5, 3), (2, 3, 0)), ((2, 5, 3), (1, 1, 1)), ((2, 5, 3), (2, 1, 1)), ((2, 5, 3), (1, 5, 1)), ((2, 5, 3), (2, 5, 1))]}
   property Termination
has value Just True
for SRS
  [b, c, c] -> [a, c, c] {- Input 1 -}
  [a, a, c] -> [c, c, c] {- Strictified (Input 3) -}
  [c, a, c] -> [c, c, b] {- Strictified (Input 4) -}
  [b, c, a] -> [a, a, b] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, c] ->= [a, c, c] {- Input 1 -}
  [a, a, c] -> [c, c, c] {- Strictified (Input 3) -}
  [c, a, c] ->= [c, c, b] {- Strictified (Input 4) -}
  [b, c, a] -> [a, a, b] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b], [b, c], [c, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, c], [c, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[b, c], [c, a], [a, c], [c, b]] ->= [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, c], [c, c]] ->= [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, c], [c, a]] ->= [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, b]] ->= [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, c]] ->= [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, a]] ->= [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, a]] ->= [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 1/1)
  ([a, b], 2/1)
  ([a, c], 2/1)
  ([b, a], 1/1)
  ([b, b], 2/1)
  ([b, c], 2/1)
  ([c, a], 2/1)
  ([c, b], 2/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, c]] ->= [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, c]] ->= [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b, c, c] -> [a, c, c] {- Input 1 -}
  [c, a, c] -> [c, c, b] {- Strictified (Input 4) -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, c] -> [a, c, c] {- Input 1 -}
  [c, a, c] -> [c, c, b] {- Strictified (Input 4) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
reason
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
reason
  ([a, c], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\RelRFCmb{2}(4,3)\Split[(2/2,3)\TileAllAll{2}(18/18,9)\Weight(0/6,5)[],(2,3)\Split[(2,3)\TileAllAll{2}(18,9)\Weight(6,5)\Matrix{\Natural}{2}(3,5)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                = False}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                = 36} , self = 43 , parent = Nothing , duration = 0.121320938000 , status
F                = Fail , start = 2025-09-04 08:20:47.323321781 UTC , finish = 2025-09-04
F                08:20:47.444642719 UTC , thread_cap_info = ("ThreadId 56", 0, False)}
F                
| E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E              = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E              = 36} , self = 125 , parent = Nothing , duration = 0.846892008000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.329003524 UTC ,
| E              finish = 2025-09-04 08:20:48.175895532 UTC , thread_cap_info = ("ThreadId
| E              72", 0, False)}
| E              
| | E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E            = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E            = 36} , self = 127 , parent = Nothing , duration = 0.847347125000 , status
| | E            = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.329012829 UTC ,
| | E            finish = 2025-09-04 08:20:48.176359954 UTC , thread_cap_info = ("ThreadId
| | E            73", 2, False)}
| | E            
| | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F          = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | F          = 0 , alphabet_size = 9 , total_length = 288} , self = 46 , parent = Nothing
| | | F          , duration = 0.105631470000 , status = Fail , start = 2025-09-04 08:20:47.353295818
| | | F          UTC , finish = 2025-09-04 08:20:47.458927288 UTC , thread_cap_info = ("ThreadId
| | | F          87", 2, False)}
| | | F          
F | | |          
F | | |          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | |          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | |          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | |          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | |          = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules = 0 , num_weak_rules
F | | |          = 0 , alphabet_size = 3 , total_length = 36} , self = 75 , parent = Nothing
F | | |          , duration = 0.307241729000 , status = Fail , start = 2025-09-04 08:20:47.444673179
F | | |          UTC , finish = 2025-09-04 08:20:47.751914908 UTC , thread_cap_info = ("ThreadId
F | | |          100", 0, False)}
F | | |          
| | | F          
| | | E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 38 , num_strict_rules
| | | E          = 2 , num_top_rules = 2 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | E          = 304} , self = 114 , parent = Nothing , duration = 0.572151901000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.498783598 UTC ,
| | | E          finish = 2025-09-04 08:20:48.070935499 UTC , thread_cap_info = ("ThreadId
| | | E          128", 2, False)}
| | | E          
| | | | S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 38 , num_strict_rules
| | | | S        = 2 , num_top_rules = 2 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | | S        = 304} , self = 112 , parent = Nothing , duration = 0.565698741000 , status
| | | | S        = Success , start = 2025-09-04 08:20:47.498790674 UTC , finish = 2025-09-04
| | | | S        08:20:48.064489415 UTC , thread_cap_info = ("ThreadId 129", 2, False)}
| | | | S        
| | | | | S      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | | S      = 3 , num_top_rules = 3 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | | | S      = 312} , self = 126 , parent = Nothing , duration = 0.643827111000 , status
| | | | | S      = Success , start = 2025-09-04 08:20:47.532509218 UTC , finish = 2025-09-04
| | | | | S      08:20:48.176336329 UTC , thread_cap_info = ("ThreadId 133", 2, False)}
| | | | | S      
F | | | | |      
F | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F | | | | |      = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
F | | | | |      = 42} , self = 111 , parent = Nothing , duration = 0.197979631000 , status
F | | | | |      = Fail , start = 2025-09-04 08:20:47.753857558 UTC , finish = 2025-09-04
F | | | | |      08:20:47.951837189 UTC , thread_cap_info = ("ThreadId 155", 0, False)}
F | | | | |      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | | F    = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | F    = 42} , self = 101 , parent = Nothing , duration = 0.153844629000 , status
| | | | | | F    = Fail , start = 2025-09-04 08:20:47.762120514 UTC , finish = 2025-09-04
| | | | | | F    08:20:47.915965143 UTC , thread_cap_info = ("ThreadId 154", 0, False)}
| | | | | | F    
| | | | | | F    
| | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | S    = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| | | | | | S    = 48} , self = 119 , parent = Nothing , duration = 0.246137446000 , status
| | | | | | S    = Success , start = 2025-09-04 08:20:47.924007531 UTC , finish = 2025-09-04
| | | | | | S    08:20:48.170144977 UTC , thread_cap_info = ("ThreadId 172", 0, False)}
| | | | | | S    
| | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | E  = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| | | | | | | E  = 48} , self = 123 , parent = Nothing , duration = 0.243910475000 , status
| | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.928977425 UTC ,
| | | | | | | E  finish = 2025-09-04 08:20:48.1728879 UTC , thread_cap_info = ("ThreadId
| | | | | | | E  174", 0, False)}
| | | | | | | E  
F | | | | | | |  
  | | | S | | |  
  | | E   | | |  
  | |     | S |  
  | |     |   E  
  E |     |      
    |     S      
    E            
