[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 507 length 2426
CNF 507 vars 2426 clauses
last 689 length 3169
CNF 689 vars 3169 clauses
last 641 length 2959
last 564 length 2687
last 522 length 2319
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4175, clauses: 15225
last 4175 length 15225
CNF 4175 vars 15225 clauses
CNF 522 vars 2319 clauses
CNF 641 vars 2959 clauses
CNF 564 vars 2687 clauses
last 874 length 3804
last 2116 length 10937
last 2146 length 9959
CNF 2146 vars 9959 clauses
CNF 2116 vars 10937 clauses
last 2242 length 10339
CNF 2242 vars 10339 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4175, clauses: 15225, status: Unsatisfied, time: 0.077761594s
last 944 length 4381
last 1207 length 6062
CNF 1207 vars 6062 clauses
CNF 944 vars 4381 clauses
last 1207 length 6062
CNF 874 vars 3804 clauses
last 944 length 4381
CNF 1207 vars 6062 clauses
CNF 944 vars 4381 clauses
last 4464 length 19963
CNF 4464 vars 19963 clauses
last 5996 length 26660
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4907, clauses: 18331
last 4907 length 18331
CNF 5996 vars 26660 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2541, clauses: 9847
CNF 4907 vars 18331 clauses
last 2541 length 9847
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16619, clauses: 69015
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4907, clauses: 18331, status: Satisfied, time: 0.258320579s
CNF 2541 vars 9847 clauses
last 16619 length 69015
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2541, clauses: 9847, status: Unsatisfied, time: 0.304029666s
CNF 16619 vars 69015 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 18 weak rules on 9 letters       weights
SRS with 1 strict rules and 16 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 16 weak rules on 8 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, a] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [a, b, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a], [a, c]] -> [ [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, c]] -> [ [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a], [a, c]] -> [ [ c , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a]] ->= [ [c, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a]] ->= [ [c, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 2 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [a, c]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 0 7 \
                | 0 0 2 |
                \ 0 0 1 /) )
  ( [b, c]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [c, a]
  , St (Corner  / 1 0 0 \
                | 0 0 1 |
                \ 0 0 1 /) )
  ( [c, b]
  , St (Corner  / 1 2 0 \
                | 0 0 4 |
                \ 0 0 1 /) )
  ( [c, c]
  , St (Corner  / 1 0 0 \
                | 0 0 1 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a]] ->= [ [c, a] , [a, b] , [b, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, a] , [a, b] , [b, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\TileAllAll{2}(9/18,9)\Weight(1/16,9)\Matrix{\Natural}{3}(0/16,8)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16619, clauses: 69015, status: Satisfied, time: 0.284545016s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 0.406160130000
  min duration 0.025174308000
  total durat. 1.109726365000
**************************************************
F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
F                num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
F                = 8} , self = 105 , parent = Nothing , duration = 0.665893184000 , status
F                = Fail , start = 2025-09-04 08:27:35.505998834 UTC , finish = 2025-09-04
F                08:27:36.171892018 UTC , thread_cap_info = ("ThreadId 95", 3, False)}
F                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F              = 12 , num_top_rules = 12 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| F              = 66} , self = 85 , parent = Nothing , duration = 0.109320087000 , status
| F              = Fail , start = 2025-09-04 08:27:35.506035432 UTC , finish = 2025-09-04
| F              08:27:35.615355519 UTC , thread_cap_info = ("ThreadId 104", 1, False)}
| F              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | F            = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | F            total_length = 216} , self = 90 , parent = Nothing , duration = 0.121249149000
| | F            , status = Fail , start = 2025-09-04 08:27:35.518145809 UTC , finish =
| | F            2025-09-04 08:27:35.639394958 UTC , thread_cap_info = ("ThreadId 119",
| | F            0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | F          = 38 , num_top_rules = 38 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | F          total_length = 194} , self = 87 , parent = Nothing , duration = 0.107050664000
| | | F          , status = Fail , start = 2025-09-04 08:27:35.518165601 UTC , finish =
| | | F          2025-09-04 08:27:35.625216265 UTC , thread_cap_info = ("ThreadId 121",
| | | F          0, False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 18 , num_strict_rules = 12 , num_top_rules = 12 , num_weak_rules = 6
| | | | F        , alphabet_size = 6 , total_length = 66} , self = 89 , parent = Nothing
| | | | F        , duration = 0.116622707000 , status = Fail , start = 2025-09-04 08:27:35.520197004
| | | | F        UTC , finish = 2025-09-04 08:27:35.636819711 UTC , thread_cap_info = ("ThreadId
| | | | F        124", 1, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | F      = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | F      = 42} , self = 98 , parent = Nothing , duration = 0.179471530000 , status
| | | | | F      = Fail , start = 2025-09-04 08:27:35.55130792 UTC , finish = 2025-09-04
| | | | | F      08:27:35.73077945 UTC , thread_cap_info = ("ThreadId 140", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | F    = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | F    = 70} , self = 96 , parent = Nothing , duration = 0.101512810000 , status
| | | | | | F    = Fail , start = 2025-09-04 08:27:35.600111558 UTC , finish = 2025-09-04
| | | | | | F    08:27:35.701624368 UTC , thread_cap_info = ("ThreadId 156", 3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | F  = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | F  = 70} , self = 97 , parent = Nothing , duration = 0.102599002000 , status
| | | | | | | F  = Fail , start = 2025-09-04 08:27:35.610163112 UTC , finish = 2025-09-04
| | | | | | | F  08:27:35.712762114 UTC , thread_cap_info = ("ThreadId 157", 3, False)}
| | | | | | | F  
| F | | | | | |  
|   | F | | | |  
|   |   F | | |  
|   F     | | |  
| F       | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F       | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F       | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| F       | | |  = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| F       | | |  = 312} , self = 104 , parent = Nothing , duration = 0.406160130000 , status
| F       | | |  = Fail , start = 2025-09-04 08:27:35.646297245 UTC , finish = 2025-09-04
| F       | | |  08:27:36.052457375 UTC , thread_cap_info = ("ThreadId 170", 3, False)}
| F       | | |  
| | S     | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S     | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S     | | |  = Size { num_rules = 1377 , num_strict_rules = 81 , num_top_rules = 0 ,
| | S     | | |  num_weak_rules = 1296 , alphabet_size = 81 , total_length = 8424} , self
| | S     | | |  = 99 , parent = Nothing , duration = 0.165854047000 , status = Success
| | S     | | |  , start = 2025-09-04 08:27:35.666096813 UTC , finish = 2025-09-04 08:27:35.83195086
| | S     | | |  UTC , thread_cap_info = ("ThreadId 175", 2, False)}
| | S     | | |  
| | | F   | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | F   | | |  = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | F   | | |  = 312} , self = 100 , parent = Nothing , duration = 0.183979585000 , status
| | | F   | | |  = Fail , start = 2025-09-04 08:27:35.669539983 UTC , finish = 2025-09-04
| | | F   | | |  08:27:35.853519568 UTC , thread_cap_info = ("ThreadId 172", 3, False)}
| | | F   | | |  
| | | |   | F |  
| | | |   |   F  
| | | |   F      
| | | | E        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | | | E        , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
| | | | E        = 9 , total_length = 70} , self = 108 , parent = Nothing , duration = 0.591788925000
| | | | E        , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:35.737936027
| | | | E        UTC , finish = 2025-09-04 08:27:36.329724952 UTC , thread_cap_info = ("ThreadId
| | | | E        177", 3, False)}
| | | | E        
| | | | | S      Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | S      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | | | | S      , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
| | | | | S      = 9 , total_length = 70} , self = 106 , parent = Nothing , duration = 0.531294071000
| | | | | S      , status = Success , start = 2025-09-04 08:27:35.741053355 UTC , finish
| | | | | S      = 2025-09-04 08:27:36.272347426 UTC , thread_cap_info = ("ThreadId 178",
| | | | | S      3, False)}
| | | | | S      
| | | | | | F    Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | | F    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | F    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | F    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | F    , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | | | F    = 3 , total_length = 42} , self = 110 , parent = Nothing , duration = 0.533402547000
| | | | | | F    , status = Fail , start = 2025-09-04 08:27:35.823178378 UTC , finish =
| | | | | | F    2025-09-04 08:27:36.356580925 UTC , thread_cap_info = ("ThreadId 180",
| | | | | | F    3, False)}
| | | | | | F    
| | S | | | |    
| |   F | | |    
| | E   | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E   | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E   | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 616 , num_strict_rules
| | E   | | |    = 4 , num_top_rules = 0 , num_weak_rules = 612 , alphabet_size = 68 , total_length
| | E   | | |    = 3704} , self = 112 , parent = Nothing , duration = 0.555264766000 , status
| | E   | | |    = Except "AsyncCancelled" , start = 2025-09-04 08:27:35.894313862 UTC ,
| | E   | | |    finish = 2025-09-04 08:27:36.449578628 UTC , thread_cap_info = ("ThreadId
| | E   | | |    185", 2, False)}
| | E   | | |    
| | | E | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 616 , num_strict_rules
| | | E | | |    = 4 , num_top_rules = 0 , num_weak_rules = 612 , alphabet_size = 68 , total_length
| | | E | | |    = 3704} , self = 113 , parent = Nothing , duration = 0.576106471000 , status
| | | E | | |    = Except "AsyncCancelled" , start = 2025-09-04 08:27:35.894320998 UTC ,
| | | E | | |    finish = 2025-09-04 08:27:36.470427469 UTC , thread_cap_info = ("ThreadId
| | | E | | |    187", 2, False)}
| | | E | | |    
| F | | | | |    
F   | | | | |    
    | | | S |    
    | | E   |    
    | |     F    
    E |          
      E          
