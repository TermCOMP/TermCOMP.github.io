[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 380 length 1841
last 409 length 1948
last 530 length 2517
CNF 530 vars 2517 clauses
last 616 length 2787
CNF 616 vars 2787 clauses
last 632 length 2881
CNF 632 vars 2881 clauses
last 504 length 2195
CNF 504 vars 2195 clauses
last 1187 length 7067
last 1083 length 5547
CNF 1187 vars 7067 clauses
last 755 length 3630
CNF 1083 vars 5547 clauses
CNF 755 vars 3630 clauses
last 819 length 3972
CNF 819 vars 3972 clauses
last 2514 length 11443
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3664, clauses: 13525
last 3664 length 13525
CNF 3664 vars 13525 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2161, clauses: 8440
last 2161 length 8440
CNF 2514 vars 11443 clauses
last 1164 length 5957
last 2354 length 12001
last 1287 length 6136
CNF 2161 vars 8440 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3664, clauses: 13525, status: Unsatisfied, time: 0.033225713s
last 1509 length 7659
last 530 length 2517
last 632 length 2881
last 1535 length 8701
CNF 1164 vars 5957 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13872, clauses: 57775
CNF 2354 vars 12001 clauses
last 9655 length 44614
CNF 1287 vars 6136 clauses
last 8667 length 45783
CNF 1535 vars 8701 clauses
CNF 1509 vars 7659 clauses
CNF 530 vars 2517 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2161, clauses: 8440, status: Unsatisfied, time: 0.328866207s
CNF 632 vars 2881 clauses
last 13872 length 57775
CNF 8667 vars 45783 clauses
CNF 9655 vars 44614 clauses
CNF 13872 vars 57775 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2480, clauses: 9488
last 2480 length 9488
CNF 2480 vars 9488 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2480, clauses: 9488, status: Satisfied, time: 0.086877236s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13872, clauses: 57775, status: Satisfied, time: 0.433670783s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16574, clauses: 68686
**************************************************
summary
**************************************************
SRS with 1 strict rules and 3 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 12 weak rules on 4 letters       weights
SRS with 1 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, a] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [b] ->= [] {- Input 2 -}
  [] ->= [a, a, b, a] {- Input 3 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, b], [b, a]] ->= [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b]] ->= [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b]] ->= [[b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, b], [b, a]] ->= [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 4 1 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 6 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, b], [b, a]] ->= [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
reason
  no strict rules

**************************************************
skeleton: (1/3,2)\TileAllAll{2}(4/12,4)\Weight(1/7,4)\Matrix{\Natural}{3}(0/7,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 9
  max duration 0.624916304000
  min duration 0.018723175000
  total durat. 2.215960522000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 9
  max duration 0.548715373000
  min duration 0.015989006000
  total durat. 2.374986597000
**************************************************
F                          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                          = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 1 ,
F                          num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 2 , total_length
F                          = 10} , self = 101 , parent = Nothing , duration = 0.131665193000 , status
F                          = Fail , start = 2025-09-04 08:23:46.870027938 UTC , finish = 2025-09-04
F                          08:23:47.001693131 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
F                          
| S                        Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| S                        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S                        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S                        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S                        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S                        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| S                        , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| S                        = 2 , total_length = 36} , self = 126 , parent = Nothing , duration = 0.973706147000
| S                        , status = Success , start = 2025-09-04 08:23:46.893522251 UTC , finish
| S                        = 2025-09-04 08:23:47.867228398 UTC , thread_cap_info = ("ThreadId 148",
| S                        1, False)}
| S                        
| | F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | F                      = 2 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size = 4 , total_length
| | F                      = 104} , self = 112 , parent = Nothing , duration = 0.187919930000 , status
| | F                      = Fail , start = 2025-09-04 08:23:46.895943321 UTC , finish = 2025-09-04
| | F                      08:23:47.083863251 UTC , thread_cap_info = ("ThreadId 150", 1, False)}
| | F                      
| | | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | F                    = 2 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size = 4 , total_length
| | | F                    = 104} , self = 115 , parent = Nothing , duration = 0.497900087000 , status
| | | F                    = Fail , start = 2025-09-04 08:23:46.895948851 UTC , finish = 2025-09-04
| | | F                    08:23:47.393848938 UTC , thread_cap_info = ("ThreadId 152", 1, False)}
| | | F                    
| | | | F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 1 ,
| | | | F                  num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 2 , total_length
| | | | F                  = 10} , self = 106 , parent = Nothing , duration = 0.140740072000 , status
| | | | F                  = Fail , start = 2025-09-04 08:23:46.930490737 UTC , finish = 2025-09-04
| | | | F                  08:23:47.071230809 UTC , thread_cap_info = ("ThreadId 154", 3, False)}
| | | | F                  
| | | | | F                Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F                , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F                = 16 , num_strict_rules = 10 , num_top_rules = 10 , num_weak_rules = 6
| | | | | F                , alphabet_size = 4 , total_length = 64} , self = 113 , parent = Nothing
| | | | | F                , duration = 0.381360850000 , status = Fail , start = 2025-09-04 08:23:46.940353932
| | | | | F                UTC , finish = 2025-09-04 08:23:47.321714782 UTC , thread_cap_info = ("ThreadId
| | | | | F                165", 0, False)}
| | | | | F                
| | | | | | F              Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | | F              = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | F              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | F              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | F              , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| | | | | | F              = 2 , total_length = 36} , self = 119 , parent = Nothing , duration = 0.491260709000
| | | | | | F              , status = Fail , start = 2025-09-04 08:23:46.95163188 UTC , finish = 2025-09-04
| | | | | | F              08:23:47.442892589 UTC , thread_cap_info = ("ThreadId 170", 1, False)}
| | | | | | F              
| | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
| | | | | | | F            = 18 , num_top_rules = 18 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | | | | | | F            = 99} , self = 116 , parent = Nothing , duration = 0.426953332000 , status
| | | | | | | F            = Fail , start = 2025-09-04 08:23:46.972290698 UTC , finish = 2025-09-04
| | | | | | | F            08:23:47.39924403 UTC , thread_cap_info = ("ThreadId 168", 3, False)}
| | | | | | | F            
| | | | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
| | | | | | | | F          = 18 , num_top_rules = 18 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | | | | | | | F          = 99} , self = 114 , parent = Nothing , duration = 0.346235999000 , status
| | | | | | | | F          = Fail , start = 2025-09-04 08:23:46.985116096 UTC , finish = 2025-09-04
| | | | | | | | F          08:23:47.331352095 UTC , thread_cap_info = ("ThreadId 169", 3, False)}
| | | | | | | | F          
F | | | | | | | |          
F | | | | | | | |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | | |          = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
F | | | | | | | |          = 17 , num_top_rules = 17 , num_weak_rules = 7 , alphabet_size = 6 , total_length
F | | | | | | | |          = 96} , self = 118 , parent = Nothing , duration = 0.430667977000 , status
F | | | | | | | |          = Fail , start = 2025-09-04 08:23:47.002793665 UTC , finish = 2025-09-04
F | | | | | | | |          08:23:47.433461642 UTC , thread_cap_info = ("ThreadId 177", 3, False)}
F | | | | | | | |          
| | | | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | | | | | | F        = 17 , num_top_rules = 17 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | | | | | | | | F        = 96} , self = 117 , parent = Nothing , duration = 0.430651386000 , status
| | | | | | | | | F        = Fail , start = 2025-09-04 08:23:47.002795979 UTC , finish = 2025-09-04
| | | | | | | | | F        08:23:47.433447365 UTC , thread_cap_info = ("ThreadId 178", 3, False)}
| | | | | | | | | F        
| | | | | | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | | F      = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | | | | | | F      = 36} , self = 120 , parent = Nothing , duration = 0.402037567000 , status
| | | | | | | | | | F      = Fail , start = 2025-09-04 08:23:47.044486824 UTC , finish = 2025-09-04
| | | | | | | | | | F      08:23:47.446524391 UTC , thread_cap_info = ("ThreadId 186", 0, False)}
| | | | | | | | | | F      
| | | | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | | | F    = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | | | | | | | F    = 36} , self = 121 , parent = Nothing , duration = 0.394529444000 , status
| | | | | | | | | | | F    = Fail , start = 2025-09-04 08:23:47.052023903 UTC , finish = 2025-09-04
| | | | | | | | | | | F    08:23:47.446553347 UTC , thread_cap_info = ("ThreadId 187", 0, False)}
| | | | | | | | | | | F    
| | | | F | | | | | | |    
| | | | F | | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | | | F | | | | | | |    = 1 , num_top_rules = 0 , num_weak_rules = 68 , alphabet_size = 13 , total_length
| | | | F | | | | | | |    = 444} , self = 123 , parent = Nothing , duration = 0.624916304000 , status
| | | | F | | | | | | |    = Fail , start = 2025-09-04 08:23:47.078911351 UTC , finish = 2025-09-04
| | | | F | | | | | | |    08:23:47.703827655 UTC , thread_cap_info = ("ThreadId 193", 0, False)}
| | | | F | | | | | | |    
| | | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | | | | | | | | | | | F  = 1 , num_top_rules = 0 , num_weak_rules = 68 , alphabet_size = 13 , total_length
| | | | | | | | | | | | F  = 444} , self = 122 , parent = Nothing , duration = 0.548715373000 , status
| | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:23:47.078916305 UTC , finish = 2025-09-04
| | | | | | | | | | | | F  08:23:47.627631678 UTC , thread_cap_info = ("ThreadId 195", 0, False)}
| | | | | | | | | | | | F  
| | F | | | | | | | | | |  
| |   | | F | | | | | | |  
| |   | |   | | F | | | |  
| |   F |   | |   | | | |  
| |     |   | F   | | | |  
| |     |   |     F | | |  
F |     |   |       | | |  
  |     |   F       | | |  
  |     |           F | |  
  |     |             F |  
S |     |               |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
S |     |               |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S |     |               |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S |     |               |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S |     |               |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S |     |               |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
S |     |               |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size
S |     |               |  = 4 , total_length = 36} , self = 124 , parent = Nothing , duration = 0.400716491000
S |     |               |  , status = Success , start = 2025-09-04 08:23:47.446577733 UTC , finish
S |     |               |  = 2025-09-04 08:23:47.847294224 UTC , thread_cap_info = ("ThreadId 210",
S |     |               |  0, False)}
S |     |               |  
| | E   |               |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | E   |               |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |               |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |               |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |               |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |               |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E   |               |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 7 , alphabet_size
| | E   |               |  = 4 , total_length = 36} , self = 127 , parent = Nothing , duration = 0.416968871000
| | E   |               |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:23:47.466916141
| | E   |               |  UTC , finish = 2025-09-04 08:23:47.883885012 UTC , thread_cap_info = ("ThreadId
| | E   |               |  209", 0, False)}
| | E   |               |  
| | |   |               F  
| | |   F                  
S | |                      
  S |                      
    E                      
