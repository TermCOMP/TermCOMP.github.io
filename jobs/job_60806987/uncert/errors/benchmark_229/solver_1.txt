last 1616 length 6669
CNF 1616 vars 6669 clauses
last 1472 length 5897
CNF 1472 vars 5897 clauses
last 1544 length 6295
last 1378 length 5521
last 9966 length 42013
last 13336 length 57109
CNF 9966 vars 42013 clauses
CNF 1378 vars 5521 clauses
CNF 1544 vars 6295 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4157, clauses: 15438
CNF 13336 vars 57109 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13100, clauses: 54825
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4178, clauses: 15534
last 4157 length 15438
last 13100 length 54825
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12812, clauses: 53603
last 4178 length 15534
CNF 4157 vars 15438 clauses
last 12812 length 53603
CNF 13100 vars 54825 clauses
CNF 4178 vars 15534 clauses
CNF 12812 vars 53603 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4178, clauses: 15534, status: Satisfied, time: 0.319629258s
last 847 length 3403
last 907 length 3707
CNF 907 vars 3707 clauses
CNF 847 vars 3403 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2438, clauses: 8817
last 2438 length 8817
CNF 2438 vars 8817 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2438, clauses: 8817, status: Satisfied, time: 0.066768071s
last 832 length 3325
last 886 length 3607
CNF 832 vars 3325 clauses
CNF 886 vars 3607 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2438, clauses: 8808
last 2438 length 8808
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4157, clauses: 15438, status: Unsatisfied, time: 0.825035524s
CNF 2438 vars 8808 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2438, clauses: 8808, status: Satisfied, time: 0.12562639s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9296, clauses: 38897
last 9296 length 38897
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8085, clauses: 33060
last 8085 length 33060
CNF 8085 vars 33060 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 5 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 16 strict rules and 6 weak rules on 6 letters       weights
SRS with 6 strict rules and 6 weak rules on 6 letters       EDG
SRS with 6 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 6 weak rules on 6 letters       weights
SRS with 2 strict rules and 6 weak rules on 5 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

  2 SRS with 1 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, a] -> [c, a, b] {- Input 0 -}
  [b, c, b] ->= [b, c, c] {- Input 1 -}
  [a, a, c] ->= [b, a, b] {- Input 2 -}
  [c, a, c] ->= [a, b, a] {- Input 3 -}
  [a, c, a] ->= [b, c, a] {- Input 4 -}
  [c, a, c] ->= [b, c, c] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [b, b, a] -> [c, a, b] {- Input 0 -}
  [b, c, b] -> [b, c, c] {- Strictified (Input 1) -}
  [a, a, c] -> [b, a, b] {- Strictified (Input 2) -}
  [c, a, c] -> [a, b, a] {- Strictified (Input 3) -}
  [a, c, a] -> [b, c, a] {- Strictified (Input 4) -}
  [c, a, c] -> [b, c, c] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, b] -> [b, a, c] {- Mirror (Input 0) -}
  [b, c, b] -> [c, c, b] {- Mirror (Strictified (Input 1)) -}
  [c, a, a] -> [b, a, b] {- Mirror (Strictified (Input 2)) -}
  [c, a, c] -> [a, b, a] {- Mirror (Strictified (Input 3)) -}
  [a, c, a] -> [a, c, b] {- Mirror (Strictified (Input 4)) -}
  [c, a, c] -> [c, c, b] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, b, b] |-> [a#, c] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, b, b] |-> [b#, a, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b] |-> [c#] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [a#, c, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 4))) -}
  [a#, c, a] |-> [c#, b] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [b#, c, b] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 1))) -}
  [c#, a, a] |-> [a#, b] {- DP (Top 1) (Mirror (Strictified (Input 2))) -}
  [c#, a, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 2))) -}
  [c#, a, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [c#, a, c] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [c#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c#, a, c] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 5))) -}
  [c#, a, c] |-> [b#, a] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [c#, a, c] |-> [c#, b] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, b, b] |-> [b#, a, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b#, c, b] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 1))) -}
  [c#, a, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [c#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, a, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, c, b] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 1))) -}
  [c#, a, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [c#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 3A 6A 6A - \
        | 3A 6A 6A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 9A - \
        | 3A 6A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 7A 10A 10A - \
        | 7A 10A 10A - |
        | 7A 10A 10A - |
        \ -  -   -   - / )
  ( b#
  , Wk  / 10A 10A 11A - \
        | 10A 10A 11A - |
        | 10A 10A 11A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, a, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a, a] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [c#, a, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 4A 5A 6A - \
        | 4A 5A 6A - |
        | 4A 5A 6A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, a, c] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 6A 6A 9A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 6A 6A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [b, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, b] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 1))) -}
  [c, a, a] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, a, c] ->= [a, b, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, c, a] ->= [a, c, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (1/5,3)\Strictify\Mirror(6,3)\Deepee(16/6,6)\Weight\EDG(6/6,6)\Matrix{\Arctic}{3}(5/6,6)\Weight(2/6,5)\EDG[(1/6,4)\Matrix{\Arctic}{3}(0/6,3)\EDG[],(1/6,4)\Matrix{\Arctic}{3}(0/6,3)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.965468020000
  min duration 0.028163331000
  total durat. 1.632604585000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.762795843000
  min duration 0.036832320000
  total durat. 1.344590824000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.321986772000
  min duration 1.321986772000
  total durat. 1.321986772000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 6
      , alphabet_size = 6
      , total_length = 72}
    , self = 101
    , parent = Nothing
    , duration = 1.321986772000
    , status = Fail
    , start = 2025-09-04 08:20:56.03021288 UTC
    , finish = 2025-09-04 08:20:57.352199652 UTC
    , thread_cap_info = ("ThreadId 132", 0, False)}
**************************************************
F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F            = Size { num_rules = 54 , num_strict_rules = 54 , num_top_rules = 0 , num_weak_rules
F            = 0 , alphabet_size = 9 , total_length = 432} , self = 78 , parent = Nothing
F            , duration = 0.768089357000 , status = Fail , start = 2025-09-04 08:20:55.5835836
F            UTC , finish = 2025-09-04 08:20:56.351672957 UTC , thread_cap_info = ("ThreadId
F            92", 2, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 432} , self = 82 , parent = Nothing , duration = 0.965468020000 , status
| F          = Fail , start = 2025-09-04 08:20:55.631068045 UTC , finish = 2025-09-04
| F          08:20:56.596536065 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | F        = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 432} , self = 79 , parent = Nothing , duration = 0.762795843000 , status
| | F        = Fail , start = 2025-09-04 08:20:55.65107691 UTC , finish = 2025-09-04
| | F        08:20:56.413872753 UTC , thread_cap_info = ("ThreadId 102", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F      = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | F      = 72} , self = 81 , parent = Nothing , duration = 0.474504321000 , status
| | | F      = Fail , start = 2025-09-04 08:20:56.013287368 UTC , finish = 2025-09-04
| | | F      08:20:56.487791689 UTC , thread_cap_info = ("ThreadId 131", 0, False)}
| | | F      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | | | F    alphabet_size = 6 , total_length = 72} , self = 101 , parent = Nothing
| | | | F    , duration = 1.321986772000 , status = Fail , start = 2025-09-04 08:20:56.03021288
| | | | F    UTC , finish = 2025-09-04 08:20:57.352199652 UTC , thread_cap_info = ("ThreadId
| | | | F    132", 0, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F  = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | | | F  = 72} , self = 80 , parent = Nothing , duration = 0.404323120000 , status
| | | | | F  = Fail , start = 2025-09-04 08:20:56.03109877 UTC , finish = 2025-09-04
| | | | | F  08:20:56.43542189 UTC , thread_cap_info = ("ThreadId 133", 0, False)}
| | | | | F  
F | | | | |  
  | F | | |  
  |   | | F  
S |   | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   | |    = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
S |   | |    alphabet_size = 6 , total_length = 72} , self = 83 , parent = Nothing ,
S |   | |    duration = 0.542408834000 , status = Success , start = 2025-09-04 08:20:56.435452606
S |   | |    UTC , finish = 2025-09-04 08:20:56.97786144 UTC , thread_cap_info = ("ThreadId
S |   | |    139", 0, False)}
S |   | |    
| |   F |    
| | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E   |    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
| | E   |    = 6 , total_length = 72} , self = 85 , parent = Nothing , duration = 0.524821335000
| | E   |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.487821396
| | E   |    UTC , finish = 2025-09-04 08:20:57.012642731 UTC , thread_cap_info = ("ThreadId
| | E   |    140", 0, False)}
| | E   |    
| F |   |    
S   |   |    
    E   |    
S       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S       |    = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
S       |    = 4 , total_length = 42} , self = 92 , parent = Nothing , duration = 0.132999121000
S       |    , status = Success , start = 2025-09-04 08:20:57.063770966 UTC , finish
S       |    = 2025-09-04 08:20:57.196770087 UTC , thread_cap_info = ("ThreadId 155",
S       |    0, False)}
S       |    
| E     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E     |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| E     |    = 4 , total_length = 42} , self = 94 , parent = Nothing , duration = 0.139017305000
| E     |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:57.09274934
| E     |    UTC , finish = 2025-09-04 08:20:57.231766645 UTC , thread_cap_info = ("ThreadId
| E     |    156", 0, False)}
| E     |    
S |     |    
  E     |    
S       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S       |    = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
S       |    = 4 , total_length = 42} , self = 102 , parent = Nothing , duration = 0.171224150000
S       |    , status = Success , start = 2025-09-04 08:20:57.268951322 UTC , finish
S       |    = 2025-09-04 08:20:57.440175472 UTC , thread_cap_info = ("ThreadId 166",
S       |    0, False)}
S       |    
| E     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E     |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| E     |    = 4 , total_length = 42} , self = 104 , parent = Nothing , duration = 0.203115192000
| E     |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:57.310702039
| E     |    UTC , finish = 2025-09-04 08:20:57.513817231 UTC , thread_cap_info = ("ThreadId
| E     |    167", 0, False)}
| E     |    
| |     F    
S |          
  E          
