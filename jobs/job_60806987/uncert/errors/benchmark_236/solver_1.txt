last 1537 length 6345
CNF 1537 vars 6345 clauses
last 1591 length 6423
last 12329 length 52362
last 1210 length 4871
last 10990 length 47619
last 1194 length 4845
CNF 1591 vars 6423 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4460, clauses: 16491
CNF 1210 vars 4871 clauses
CNF 12329 vars 52362 clauses
CNF 10990 vars 47619 clauses
CNF 1194 vars 4845 clauses
last 4460 length 16491
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3797, clauses: 13947
CNF 4460 vars 16491 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14271, clauses: 59800
last 3797 length 13947
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12692, clauses: 53194
last 14271 length 59800
last 12692 length 53194
CNF 12692 vars 53194 clauses
CNF 14271 vars 59800 clauses
CNF 3797 vars 13947 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4460, clauses: 16491, status: Satisfied, time: 0.439430319s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3797, clauses: 13947, status: Satisfied, time: 0.194940574s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12692, clauses: 53194, status: Satisfied, time: 0.163435256s
**************************************************
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       DP
SRS with 14 strict rules and 6 weak rules on 6 letters       weights
SRS with 6 strict rules and 6 weak rules on 6 letters       EDG
SRS with 6 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 6 weak rules on 6 letters       weights
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c] -> [c, c, c] {- Input 0 -}
  [b, c, a] -> [a, a, a] {- Input 1 -}
  [a, b, a] ->= [c, c, b] {- Input 2 -}
  [b, a, b] ->= [a, c, a] {- Input 3 -}
  [c, c, b] ->= [b, c, c] {- Input 4 -}
  [c, b, a] ->= [b, b, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, c] -> [c, c, c] {- Input 0 -}
  [b, c, a] -> [a, a, a] {- Input 1 -}
  [a, b, a] -> [c, c, b] {- Strictified (Input 2) -}
  [b, a, b] -> [a, c, a] {- Strictified (Input 3) -}
  [c, c, b] -> [b, c, c] {- Strictified (Input 4) -}
  [c, b, a] -> [b, b, a] {- Strictified (Input 5) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, c, c] {- DP Nontop (Input 0) -}
  [b, c, a] ->= [a, a, a] {- DP Nontop (Input 1) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Strictified (Input 2)) -}
  [b, a, b] ->= [a, c, a] {- DP Nontop (Strictified (Input 3)) -}
  [c, c, b] ->= [b, c, c] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, a] ->= [b, b, a] {- DP Nontop (Strictified (Input 5)) -}
  [a#, b, a] |-> [b#] {- DP (Top 2) (Strictified (Input 2)) -}
  [a#, b, a] |-> [c#, b] {- DP (Top 1) (Strictified (Input 2)) -}
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 2)) -}
  [a#, b, c] |-> [c#, c] {- DP (Top 1) (Input 0) -}
  [a#, b, c] |-> [c#, c, c] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Strictified (Input 3)) -}
  [b#, a, b] |-> [a#, c, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [b#, a, b] |-> [c#, a] {- DP (Top 1) (Strictified (Input 3)) -}
  [b#, c, a] |-> [a#, a] {- DP (Top 1) (Input 1) -}
  [b#, c, a] |-> [a#, a, a] {- DP (Top 0) (Input 1) -}
  [c#, b, a] |-> [b#, b, a] {- DP (Top 0) (Strictified (Input 5)) -}
  [c#, c, b] |-> [b#, c, c] {- DP (Top 0) (Strictified (Input 4)) -}
  [c#, c, b] |-> [c#] {- DP (Top 2) (Strictified (Input 4)) -}
  [c#, c, b] |-> [c#, c] {- DP (Top 1) (Strictified (Input 4)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, c, c] {- DP Nontop (Input 0) -}
  [b, c, a] ->= [a, a, a] {- DP Nontop (Input 1) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Strictified (Input 2)) -}
  [b, a, b] ->= [a, c, a] {- DP Nontop (Strictified (Input 3)) -}
  [c, c, b] ->= [b, c, c] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, a] ->= [b, b, a] {- DP Nontop (Strictified (Input 5)) -}
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 2)) -}
  [a#, b, c] |-> [c#, c, c] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#, c, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [b#, c, a] |-> [a#, a, a] {- DP (Top 0) (Input 1) -}
  [c#, b, a] |-> [b#, b, a] {- DP (Top 0) (Strictified (Input 5)) -}
  [c#, c, b] |-> [b#, c, c] {- DP (Top 0) (Strictified (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 2)) -}
  [c#, b, a] |-> [b#, b, a] {- DP (Top 0) (Strictified (Input 5)) -}
  [b#, a, b] |-> [a#, c, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [a#, b, c] |-> [c#, c, c] {- DP (Top 0) (Input 0) -}
  [c#, c, b] |-> [b#, c, c] {- DP (Top 0) (Strictified (Input 4)) -}
  [b#, c, a] |-> [a#, a, a] {- DP (Top 0) (Input 1) -}
  [a, b, c] ->= [c, c, c] {- DP Nontop (Input 0) -}
  [b, c, a] ->= [a, a, a] {- DP Nontop (Input 1) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Strictified (Input 2)) -}
  [b, a, b] ->= [a, c, a] {- DP Nontop (Strictified (Input 3)) -}
  [c, c, b] ->= [b, c, c] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, a] ->= [b, b, a] {- DP Nontop (Strictified (Input 5)) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 9A 9A 11A - \
        | 9A 9A 11A - |
        | 9A 9A 11A - |
        \ -  -  -   - / )
  ( b#
  , Wk  / 9A 11A 12A - \
        | 9A 11A 12A - |
        | 9A 11A 12A - |
        \ -  -   -   - / )
  ( c#
  , Wk  / 9A 9A 9A - \
        | 9A 9A 9A - |
        | 9A 9A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 2)) -}
  [c#, b, a] |-> [b#, b, a] {- DP (Top 0) (Strictified (Input 5)) -}
  [a#, b, c] |-> [c#, c, c] {- DP (Top 0) (Input 0) -}
  [c#, c, b] |-> [b#, c, c] {- DP (Top 0) (Strictified (Input 4)) -}
  [a, b, c] ->= [c, c, c] {- DP Nontop (Input 0) -}
  [b, c, a] ->= [a, a, a] {- DP Nontop (Input 1) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Strictified (Input 2)) -}
  [b, a, b] ->= [a, c, a] {- DP Nontop (Strictified (Input 3)) -}
  [c, c, b] ->= [b, c, c] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, a] ->= [b, b, a] {- DP Nontop (Strictified (Input 5)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, c, c] {- DP Nontop (Input 0) -}
  [b, c, a] ->= [a, a, a] {- DP Nontop (Input 1) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Strictified (Input 2)) -}
  [b, a, b] ->= [a, c, a] {- DP Nontop (Strictified (Input 3)) -}
  [c, c, b] ->= [b, c, c] {- DP Nontop (Strictified (Input 4)) -}
  [c, b, a] ->= [b, b, a] {- DP Nontop (Strictified (Input 5)) -}
reason
  EDG

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Deepee(14/6,6)\Weight\EDG(6/6,6)\Matrix{\Arctic}{3}(4/6,6)\Weight(0/6,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.814499819000
  min duration 0.040982339000
  total durat. 1.388117429000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.773847242000
  min duration 0.313583722000
  total durat. 1.466126892000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.787848839000
  min duration 0.417019517000
  total durat. 1.204868356000
**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                  = 24} , self = 68 , parent = Nothing , duration = 0.224951672000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.521255625 UTC ,
E                  finish = 2025-09-04 08:20:55.746207297 UTC , thread_cap_info = ("ThreadId
E                  35", 0, False)}
E                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 36} , self = 97 , parent = Nothing , duration = 0.653972518000 , status
| F                = Fail , start = 2025-09-04 08:20:55.565354732 UTC , finish = 2025-09-04
| F                08:20:56.21932725 UTC , thread_cap_info = ("ThreadId 86", 3, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F              = 36} , self = 98 , parent = Nothing , duration = 0.684450519000 , status
| | F              = Fail , start = 2025-09-04 08:20:55.575523228 UTC , finish = 2025-09-04
| | F              08:20:56.259973747 UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | F              
| | | E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | E            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E            = 24} , self = 78 , parent = Nothing , duration = 0.220006108000 , status
| | | E            = Except "AsyncCancelled" , start = 2025-09-04 08:20:55.595533945 UTC ,
| | | E            finish = 2025-09-04 08:20:55.815540053 UTC , thread_cap_info = ("ThreadId
| | | E            104", 3, False)}
| | | E            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F          = 432} , self = 104 , parent = Nothing , duration = 0.814499819000 , status
| | | | F          = Fail , start = 2025-09-04 08:20:55.742854287 UTC , finish = 2025-09-04
| | | | F          08:20:56.557354106 UTC , thread_cap_info = ("ThreadId 127", 2, False)}
| | | | F          
E | | | |          
F | | | |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | |          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
F | | | |          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F | | | |          = 432} , self = 102 , parent = Nothing , duration = 0.773847242000 , status
F | | | |          = Fail , start = 2025-09-04 08:20:55.755813366 UTC , finish = 2025-09-04
F | | | |          08:20:56.529660608 UTC , thread_cap_info = ("ThreadId 129", 2, False)}
F | | | |          
| | | E |          
| | | F |          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F |          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F |          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F |          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F |          = Size { num_rules = 54 , num_strict_rules = 54 , num_top_rules = 0 , num_weak_rules
| | | F |          = 0 , alphabet_size = 9 , total_length = 432} , self = 99 , parent = Nothing
| | | F |          , duration = 0.408477955000 , status = Fail , start = 2025-09-04 08:20:55.876885463
| | | F |          UTC , finish = 2025-09-04 08:20:56.285363418 UTC , thread_cap_info = ("ThreadId
| | | F |          141", 3, False)}
| | | F |          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F        = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | | | F        = 72} , self = 100 , parent = Nothing , duration = 0.313583722000 , status
| | | | | F        = Fail , start = 2025-09-04 08:20:55.982043323 UTC , finish = 2025-09-04
| | | | | F        08:20:56.295627045 UTC , thread_cap_info = ("ThreadId 155", 1, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | F      = 60} , self = 103 , parent = Nothing , duration = 0.532635271000 , status
| | | | | | F      = Fail , start = 2025-09-04 08:20:55.997037164 UTC , finish = 2025-09-04
| | | | | | F      08:20:56.529672435 UTC , thread_cap_info = ("ThreadId 158", 1, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | | F    = 60} , self = 101 , parent = Nothing , duration = 0.378695928000 , status
| | | | | | | F    = Fail , start = 2025-09-04 08:20:55.997041503 UTC , finish = 2025-09-04
| | | | | | | F    08:20:56.375737431 UTC , thread_cap_info = ("ThreadId 159", 1, False)}
| | | | | | | F    
| | | | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | S  = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | | | | | | | S  alphabet_size = 6 , total_length = 72} , self = 105 , parent = Nothing
| | | | | | | | S  , duration = 0.787848839000 , status = Success , start = 2025-09-04 08:20:56.008782803
| | | | | | | | S  UTC , finish = 2025-09-04 08:20:56.796631642 UTC , thread_cap_info = ("ThreadId
| | | | | | | | S  160", 1, False)}
| | | | | | | | S  
| F | | | | | | |  
|   F | | | | | |  
| E   | | | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E   | | | | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E   | | | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E   | | | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E   | | | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E   | | | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E   | | | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E   | | | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E   | | | | | |  = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| E   | | | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E   | | | | | |  = 36} , self = 114 , parent = Nothing , duration = 0.559160484000 , status
| E   | | | | | |  = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.27639508 UTC ,
| E   | | | | | |  finish = 2025-09-04 08:20:56.835555564 UTC , thread_cap_info = ("ThreadId
| E   | | | | | |  167", 2, False)}
| E   | | | | | |  
| |   F | | | | |  
| |     | F | | |  
| | E   |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E   |   | | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
| | E   |   | | |  = 6 , total_length = 72} , self = 107 , parent = Nothing , duration = 0.508615315000
| | E   |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:56.295678944
| | E   |   | | |  UTC , finish = 2025-09-04 08:20:56.804294259 UTC , thread_cap_info = ("ThreadId
| | E   |   | | |  168", 1, False)}
| | E   |   | | |  
| | |   |   | F |  
| | | S |   |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S |   |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S |   |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S |   |   |  = 10 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 ,
| | | S |   |   |  alphabet_size = 5 , total_length = 60} , self = 110 , parent = Nothing
| | | S |   |   |  , duration = 0.417019517000 , status = Success , start = 2025-09-04 08:20:56.395806362
| | | S |   |   |  UTC , finish = 2025-09-04 08:20:56.812825879 UTC , thread_cap_info = ("ThreadId
| | | S |   |   |  169", 1, False)}
| | | S |   |   |  
F | | | |   |   |  
  | | | |   F   |  
S | | | |       |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | | | |       |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | | |       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | | |       |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | |       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | |       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
S | | | |       |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size
S | | | |       |  = 5 , total_length = 60} , self = 112 , parent = Nothing , duration = 0.287866290000
S | | | |       |  , status = Success , start = 2025-09-04 08:20:56.529765678 UTC , finish
S | | | |       |  = 2025-09-04 08:20:56.817631968 UTC , thread_cap_info = ("ThreadId 171",
S | | | |       |  1, False)}
S | | | |       |  
| | | | F       |  
| | | |         S  
| | E |            
| |   S            
S |                
  E                
