YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/CsgvW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 45 ms]
        (7) RelADPP
        (8) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) RelADPP
        (11) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
        (12) RelADPP
        (13) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE
    (15) RelADPP
        (16) RelADPReductionPairProof [EQUIVALENT, 27 ms]
        (17) RelADPP
        (18) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) RelADPP
        (21) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
        (22) RelADPP
        (23) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) RelADPP
        (26) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
        (27) RelADPP
        (28) RelADPReductionPairProof [EQUIVALENT, 9 ms]
        (29) RelADPP
        (30) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (31) YES
    (32) RelADPP
        (33) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
        (34) RelADPP
        (35) RelADPReductionPairProof [EQUIVALENT, 5 ms]
        (36) RelADPP
        (37) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES
    (39) RelADPP
        (40) RelADPReductionPairProof [EQUIVALENT, 44 ms]
        (41) RelADPP
        (42) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) RelADPP
        (45) RelADPReductionPairProof [EQUIVALENT, 40 ms]
        (46) RelADPP
        (47) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) RelADPP
        (50) RelADPReductionPairProof [EQUIVALENT, 37 ms]
        (51) RelADPP
        (52) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (53) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   o(l(x1)) -> r(x1)
   n(l(o(x1))) -> r(o(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   r(o(x1)) -> l(x1)
   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))

The relative TRS consists of the following S rules:

   R(x1) -> n(R(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   o(l(x1)) -> R^1(x1)
   n(l(o(x1))) -> R^1(o(x1))
   n(l(o(x1))) -> r(O(x1))
   L(l(o(x1))) -> L^1(r(o(x1)))
   L(l(o(x1))) -> L(R^1(o(x1)))
   L(l(o(x1))) -> L(r(O(x1)))
   r(o(x1)) -> l(x1)
   o(r(n(x1))) -> O(l(x1))
   o(r(R(x1))) -> O(l(R(x1)))
   o(r(R(x1))) -> o(l(R^2(x1)))

and relative ADPs:

   R(x1) -> N(R^2(x1))
   L(x1) -> L^1(N(x1))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  7 Lassos,
Result: This relative DT problem is equivalent to 9 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   o(r(R(x1))) -> o(l(R^2(x1)))
   n(l(o(x1))) -> r(O(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   o(r(R(x1))) -> o(l(R^2(x1)))
   n(l(o(x1))) -> r(O(x1))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 3
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 2
   POL(n(x_1)) = 2*x_1
   POL(o(x_1)) = 2
   POL(r(x_1)) = 2

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   o(l(x1)) -> r(x1)
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(8) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L^1(r(o(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(11) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)

c:

   L(l(o(x1))) -> L^1(r(o(x1)))

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 2*x_1
   POL(L^1(x_1)) = x_1
   POL(N(x_1)) = x_1
   POL(R(x_1)) = 1 + x_1
   POL(l(x_1)) = 2*x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + x_1
   POL(r(x_1)) = 2*x_1

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L^1(r(o(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(13) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(14)
TRUE

----------------------------------------

(15)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L(r(O(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(16) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   L(l(o(x1))) -> L(r(O(x1)))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   n(l(o(x1))) -> r(o(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 2 + 2*x_1
   POL(N(x_1)) = 0
   POL(O(x_1)) = 1
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 2
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2*x_1
   POL(r(x_1)) = 2

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(18) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L^1(r(o(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(21) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)

c:

   L(l(o(x1))) -> L^1(r(o(x1)))

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 2*x_1
   POL(L^1(x_1)) = x_1
   POL(N(x_1)) = x_1
   POL(R(x_1)) = 1 + x_1
   POL(l(x_1)) = 2*x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + x_1
   POL(r(x_1)) = 2*x_1

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L^1(r(o(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(23) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> R^1(o(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(26) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)

c:

   n(l(o(x1))) -> R^1(o(x1))

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 2*x_1
   POL(L^1(x_1)) = x_1
   POL(N(x_1)) = x_1
   POL(R(x_1)) = 2*x_1
   POL(R^1(x_1)) = x_1
   POL(l(x_1)) = 2 + 2*x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + x_1
   POL(r(x_1)) = 2 + 2*x_1

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> R^1(o(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(28) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(l(o(x1))) -> R^1(o(x1))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   n(l(o(x1))) -> r(o(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 3 + 2*x_1
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 1
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 2 + 2*x_1
   POL(n(x_1)) = 0
   POL(o(x_1)) = 1
   POL(r(x_1)) = 0

----------------------------------------

(29)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(30) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> r(O(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(33) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)

c:

   n(l(o(x1))) -> r(O(x1))

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 2*x_1
   POL(L^1(x_1)) = x_1
   POL(N(x_1)) = x_1
   POL(O(x_1)) = x_1
   POL(R(x_1)) = 2*x_1
   POL(l(x_1)) = 1 + 2*x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + 2*x_1
   POL(r(x_1)) = 1 + 2*x_1

----------------------------------------

(34)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> r(O(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(35) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(l(o(x1))) -> r(O(x1))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   n(l(o(x1))) -> r(o(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = x_1
   POL(L^1(x_1)) = 3 + 2*x_1
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 0
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 0
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 1
   POL(n(x_1)) = 0
   POL(o(x_1)) = 0
   POL(r(x_1)) = 0

----------------------------------------

(36)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(37) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
absolute ADPs:

   L(l(o(x1))) -> L(R^1(o(x1)))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(40) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   L(l(o(x1))) -> L(R^1(o(x1)))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   n(l(o(x1))) -> r(o(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 3*x_1
   POL(N(x_1)) = 0
   POL(O(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 2*x_1
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 3*x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + x_1
   POL(r(x_1)) = 3*x_1

----------------------------------------

(41)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   R(x1) -> n(R(x1))
   L(x1) -> L^1(N(x1))
   n(l(o(x1))) -> r(o(x1))


----------------------------------------

(42) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> R^1(o(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(45) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(l(o(x1))) -> R^1(o(x1))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 3 + 2*x_1 + 3*x_1^2
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 2 + 2*x_1
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 2 + 3*x_1
   POL(n(x_1)) = 3*x_1
   POL(o(x_1)) = 3 + x_1
   POL(r(x_1)) = 2 + 3*x_1

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(47) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(l(o(x1))) -> r(O(x1))

and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(50) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(l(o(x1))) -> r(O(x1))

Relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(L(x_1)) = 0
   POL(L^1(x_1)) = 3 + x_1 + 3*x_1^2
   POL(N(x_1)) = 3*x_1
   POL(O(x_1)) = 3 + 2*x_1
   POL(R(x_1)) = 0
   POL(R^1(x_1)) = 1 + 2*x_1 + 3*x_1^2
   POL(R^2(x_1)) = 0
   POL(l(x_1)) = 3 + 3*x_1
   POL(n(x_1)) = 3*x_1
   POL(o(x_1)) = 3 + 3*x_1
   POL(r(x_1)) = 3 + x_1

----------------------------------------

(51)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   o(r(n(x1))) -> o(l(x1))
   r(o(x1)) -> l(x1)
   o(l(x1)) -> r(x1)
   o(r(R(x1))) -> o(l(R(x1)))
   R(x1) -> N(R^2(x1))
   L(l(o(x1))) -> L(r(o(x1)))
   n(l(o(x1))) -> r(o(x1))
   L(x1) -> L(n(x1))


----------------------------------------

(52) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(53)
YES
