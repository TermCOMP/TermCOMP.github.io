YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oQEPy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(6) RelADPP
(7) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) RelADPP
        (10) RelADPReductionPairProof [EQUIVALENT, 2 ms]
        (11) RelADPP
        (12) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (13) RelADPP
        (14) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (15) TRUE
    (16) RelADPP
        (17) RelADPReductionPairProof [EQUIVALENT, 2 ms]
        (18) RelADPP
        (19) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE
    (21) RelADPP
        (22) RelADPReductionPairProof [EQUIVALENT, 3 ms]
        (23) RelADPP
        (24) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (25) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(c(a(x1))) -> a(b(b(x1)))
   a(c(a(x1))) -> a(c(b(x1)))
   a(c(c(x1))) -> b(b(c(x1)))
   b(c(a(x1))) -> c(b(a(x1)))

The relative TRS consists of the following S rules:

   c(b(c(x1))) -> b(c(c(x1)))
   b(b(b(x1))) -> c(a(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))
   a(c(a(x1))) -> a(B(b(x1)))
   a(c(a(x1))) -> a(b(B(x1)))
   a(c(a(x1))) -> A(c(b(x1)))
   a(c(a(x1))) -> a(C(b(x1)))
   a(c(a(x1))) -> a(c(B(x1)))
   a(c(c(x1))) -> B(b(c(x1)))
   a(c(c(x1))) -> b(B(c(x1)))
   a(c(c(x1))) -> b(b(C(x1)))
   b(c(a(x1))) -> C(b(a(x1)))
   b(c(a(x1))) -> c(B(a(x1)))
   b(c(a(x1))) -> c(b(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> B(C(c(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> b(C(C(x1)))
   b(b(b(x1))) -> C(A(c(x1)))
   b(b(b(x1))) -> C(a(C(x1)))
   b(b(b(x1))) -> c(A(C(x1)))


----------------------------------------

(3) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   a(c(a(x1))) -> A(c(b(x1)))
   a(c(a(x1))) -> a(C(b(x1)))
   a(c(a(x1))) -> a(c(B(x1)))

   b(b(b(x1))) -> C(a(C(x1)))
   b(b(b(x1))) -> c(A(C(x1)))
   b(b(b(x1))) -> C(A(c(x1)))

c:

   a(c(a(x1))) -> a(B(b(x1)))
   a(c(c(x1))) -> b(B(c(x1)))
   b(c(a(x1))) -> c(B(a(x1)))
   a(c(c(x1))) -> b(b(C(x1)))
   a(c(c(x1))) -> B(b(c(x1)))
   b(c(a(x1))) -> c(b(A(x1)))
   a(c(a(x1))) -> a(b(B(x1)))
   a(c(a(x1))) -> A(b(b(x1)))
   b(c(a(x1))) -> C(b(a(x1)))

   c(b(c(x1))) -> b(C(C(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> a(B(b(x1)))
   a(c(c(x1))) -> b(B(c(x1)))
   b(c(a(x1))) -> c(B(a(x1)))
   a(c(c(x1))) -> b(b(C(x1)))
   a(c(c(x1))) -> B(b(c(x1)))
   b(c(a(x1))) -> c(b(A(x1)))
   a(c(a(x1))) -> a(b(B(x1)))
   a(c(a(x1))) -> A(b(b(x1)))
   b(c(a(x1))) -> C(b(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(5) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   a(c(a(x1))) -> a(B(b(x1)))
   a(c(c(x1))) -> b(B(c(x1)))
   a(c(c(x1))) -> b(b(C(x1)))
   a(c(c(x1))) -> B(b(c(x1)))
   a(c(a(x1))) -> a(b(B(x1)))
   a(c(a(x1))) -> A(b(b(x1)))

c:

   b(c(a(x1))) -> c(B(a(x1)))
   b(c(a(x1))) -> c(b(A(x1)))
   b(c(a(x1))) -> C(b(a(x1)))

   c(b(c(x1))) -> b(C(C(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> c(B(a(x1)))
   b(c(a(x1))) -> c(b(A(x1)))
   b(c(a(x1))) -> C(b(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(7) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> C(b(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(10) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(a(x1))) -> C(b(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 2
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = x_1

----------------------------------------

(11)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> C(b(a(x1)))

and relative ADPs:

   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(12) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(a(x1))) -> C(b(a(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(13)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> C(b(a(x1)))

and relative ADPs:

   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> b(c(c(x1)))


----------------------------------------

(14) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(15)
TRUE

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> c(B(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(17) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(a(x1))) -> c(B(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = x_1

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> c(B(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> b(c(c(x1)))


----------------------------------------

(19) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(20)
TRUE

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(a(x1))) -> c(b(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(22) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(a(x1))) -> c(b(A(x1)))

Relative ADPs:

   b(c(a(x1))) -> c(b(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 3*x_1
   POL(b(x_1)) = 2*x_1
   POL(c(x_1)) = 2*x_1

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> b(C(C(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   c(b(c(x1))) -> B(c(C(x1)))
   c(b(c(x1))) -> B(C(c(x1)))


----------------------------------------

(24) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(25)
YES
