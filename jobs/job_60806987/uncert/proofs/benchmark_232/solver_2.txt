YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rSEOP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(a(c(x1))) -> a(c(c(x1)))
   a(a(c(x1))) -> b(a(c(x1)))
   a(a(c(x1))) -> a(b(c(x1)))
   c(c(c(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> c(b(c(x1)))

The relative TRS consists of the following S rules:

   b(b(a(x1))) -> c(c(a(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> A(c(c(x1)))
   a(a(c(x1))) -> a(C(c(x1)))
   a(a(c(x1))) -> a(c(C(x1)))
   a(a(c(x1))) -> B(a(c(x1)))
   a(a(c(x1))) -> b(A(c(x1)))
   a(a(c(x1))) -> b(a(C(x1)))
   a(a(c(x1))) -> A(b(c(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   a(a(c(x1))) -> a(b(C(x1)))
   c(c(c(x1))) -> B(b(b(x1)))
   c(c(c(x1))) -> b(B(b(x1)))
   c(c(c(x1))) -> b(b(B(x1)))
   c(a(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> c(B(b(x1)))
   c(a(a(x1))) -> c(b(B(x1)))
   c(a(c(x1))) -> C(b(c(x1)))
   c(a(c(x1))) -> c(B(c(x1)))
   c(a(c(x1))) -> c(b(C(x1)))

and relative ADPs:

   b(b(a(x1))) -> C(C(a(x1)))
   b(b(a(x1))) -> C(c(A(x1)))
   b(b(a(x1))) -> c(C(A(x1)))


----------------------------------------

(3) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   a(a(c(x1))) -> a(C(c(x1)))
   c(a(c(x1))) -> C(b(c(x1)))
   a(a(c(x1))) -> A(b(c(x1)))
   c(a(a(x1))) -> C(b(b(x1)))
   a(a(c(x1))) -> A(c(c(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   a(a(c(x1))) -> B(a(c(x1)))
   c(a(c(x1))) -> c(B(c(x1)))
   a(a(c(x1))) -> b(A(c(x1)))
   a(a(c(x1))) -> a(b(C(x1)))
   c(a(a(x1))) -> c(b(B(x1)))
   c(a(c(x1))) -> c(b(C(x1)))
   a(a(c(x1))) -> a(c(C(x1)))
   a(a(c(x1))) -> b(a(C(x1)))
   c(a(a(x1))) -> c(B(b(x1)))

c:

   c(c(c(x1))) -> b(B(b(x1)))
   c(c(c(x1))) -> B(b(b(x1)))
   c(c(c(x1))) -> b(b(B(x1)))

   b(b(a(x1))) -> C(c(A(x1)))
   b(b(a(x1))) -> c(C(A(x1)))
   b(b(a(x1))) -> C(C(a(x1)))

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> b(B(b(x1)))
   c(c(c(x1))) -> B(b(b(x1)))
   c(c(c(x1))) -> b(b(B(x1)))

and relative ADPs:

   b(b(a(x1))) -> C(c(A(x1)))
   b(b(a(x1))) -> c(C(A(x1)))
   b(b(a(x1))) -> C(C(a(x1)))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(6)
TRUE
