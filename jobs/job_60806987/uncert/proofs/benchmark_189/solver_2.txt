YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XNzfB.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
(6) QDP
(7) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(a(x1))) -> c(c(c(x1)))
   c(c(c(x1))) -> a(c(a(x1)))

The relative TRS consists of the following S rules:

   a(x1) -> b(c(b(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> C(c(c(x1)))
   a(b(a(x1))) -> c(C(c(x1)))
   a(b(a(x1))) -> c(c(C(x1)))
   c(c(c(x1))) -> A(c(a(x1)))
   c(c(c(x1))) -> a(C(a(x1)))
   c(c(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   a(x1) -> b(C(b(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> C(c(c(x1)))
   c(c(c(x1))) -> a(c(A(x1)))
   a(b(a(x1))) -> c(c(C(x1)))
   c(c(c(x1))) -> A(c(a(x1)))
   c(c(c(x1))) -> a(C(a(x1)))
   a(b(a(x1))) -> c(C(c(x1)))

and relative ADPs:

   a(x1) -> b(c(b(x1)))


----------------------------------------

(5) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(x1))) -> A(c(a(x1)))
   C(c(c(x1))) -> C(a(x1))
   A(b(a(x1))) -> C(x1)
   A(b(a(x1))) -> C(c(x1))
   A(b(a(x1))) -> C(c(c(x1)))
   C(c(c(x1))) -> A(x1)

The TRS R consists of the following rules:

   a(x1) -> b(c(b(x1)))
   a(b(a(x1))) -> c(c(c(x1)))
   c(c(c(x1))) -> a(c(a(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 3. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   a(x1) -> b(c(b(x1)))
   a(b(a(x1))) -> c(c(c(x1)))
   c(c(c(x1))) -> a(c(a(x1)))
   C(c(c(x1))) -> A(c(a(x1)))
   C(c(c(x1))) -> C(a(x1))
   A(b(a(x1))) -> C(x1)
   A(b(a(x1))) -> C(c(x1))
   A(b(a(x1))) -> C(c(c(x1)))
   C(c(c(x1))) -> A(x1)

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81

Node 58 is start node and node 59 is final node.

Those nodes are connected through the following edges:

* 58 to 60 labelled b_1(0)* 58 to 62 labelled c_1(0), C_1(0)* 58 to 64 labelled a_1(0), A_1(0)* 58 to 65 labelled C_1(0)* 58 to 59 labelled C_1(0), A_1(0), A_1(1), C_1(1), A_1(2)* 58 to 63 labelled C_1(0)* 58 to 66 labelled b_1(1)* 58 to 70 labelled A_1(1), a_1(1)* 58 to 71 labelled C_1(1)* 58 to 72 labelled b_1(2)* 58 to 76 labelled A_1(2)* 58 to 77 labelled C_1(2)* 59 to 59 labelled #_1(0), c_1(1)* 59 to 70 labelled a_1(1)* 59 to 76 labelled a_1(2)* 59 to 72 labelled b_1(2)* 59 to 78 labelled b_1(3)* 60 to 61 labelled c_1(0)* 61 to 59 labelled b_1(0)* 62 to 63 labelled c_1(0)* 62 to 70 labelled a_1(1)* 62 to 72 labelled b_1(2)* 63 to 59 labelled c_1(0)* 63 to 70 labelled a_1(1)* 63 to 72 labelled b_1(2)* 64 to 65 labelled c_1(0)* 64 to 70 labelled a_1(1)* 64 to 72 labelled b_1(2)* 65 to 59 labelled a_1(0), c_1(1)* 65 to 68 labelled b_1(1)* 65 to 70 labelled a_1(1)* 65 to 76 labelled a_1(2)* 65 to 72 labelled b_1(2)* 65 to 78 labelled b_1(3)* 66 to 67 labelled c_1(1)* 67 to 64 labelled b_1(1)* 68 to 69 labelled c_1(1)* 69 to 59 labelled b_1(1)* 70 to 71 labelled c_1(1)* 70 to 70 labelled a_1(1)* 70 to 76 labelled a_1(2)* 70 to 72 labelled b_1(2)* 70 to 78 labelled b_1(3)* 71 to 59 labelled a_1(1), c_1(1)* 71 to 74 labelled b_1(2)* 71 to 70 labelled a_1(1)* 71 to 76 labelled a_1(2)* 71 to 72 labelled b_1(2)* 71 to 78 labelled b_1(3)* 72 to 73 labelled c_1(2)* 73 to 70 labelled b_1(2)* 74 to 75 labelled c_1(2)* 75 to 59 labelled b_1(2)* 76 to 77 labelled c_1(2)* 76 to 70 labelled a_1(1)* 76 to 76 labelled a_1(2)* 76 to 72 labelled b_1(2)* 76 to 78 labelled b_1(3)* 77 to 59 labelled a_1(2), c_1(1)* 77 to 80 labelled b_1(3)* 77 to 70 labelled a_1(1)* 77 to 76 labelled a_1(2)* 77 to 72 labelled b_1(2)* 77 to 78 labelled b_1(3)* 78 to 79 labelled c_1(3)* 79 to 76 labelled b_1(3)* 80 to 81 labelled c_1(3)* 81 to 59 labelled b_1(3)


----------------------------------------

(8)
YES
