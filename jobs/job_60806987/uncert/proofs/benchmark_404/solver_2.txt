YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TjBcv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDerelatifying2Proof [SOUND, 0 ms]
(6) OR
    (7) RelADPP
        (8) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (9) RelADPP
        (10) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (11) RelADPP
        (12) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (13) RelADPP
        (14) RelADPCleverAfsProof [SOUND, 0 ms]
        (15) QDP
    (16) RelADPP
        (17) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (18) RelADPP
        (19) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (20) RelADPP
        (21) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (22) RelADPP
        (23) RelADPCleverAfsProof [SOUND, 0 ms]
        (24) QDP
        (25) QDPBoundsTAProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) DependencyGraphProof [EQUIVALENT, 0 ms]
        (28) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(x)) -> b(b(c(a(x))))

The relative TRS consists of the following S rules:

   a(c(x)) -> c(c(a(b(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(C(a(x))))
   a(b(x)) -> b(b(c(A(x))))

and relative ADPs:

   a(c(x)) -> C(C(a(b(x))))
   a(c(x)) -> C(c(A(b(x))))
   a(c(x)) -> c(C(A(b(x))))
   c(c(x)) -> C(C(b(c(x))))
   c(c(x)) -> C(c(b(C(x))))
   c(c(x)) -> c(C(b(C(x))))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(c(A(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   a(c(x)) -> C(c(A(b(x))))
   c(c(x)) -> c(c(b(c(x))))
   a(c(x)) -> c(C(A(b(x))))


----------------------------------------

(5) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6)
Complex Obligation (OR)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(x)) -> C(c(a(b(x))))
   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))
   a(c(x)) -> c(C(A(b(x))))


----------------------------------------

(8) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))
   a(c(x)) -> c(C(A(b(x))))


----------------------------------------

(10) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(11)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(x)) -> c(C(a(b(x))))
   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(12) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(13)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(14) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  x1

b(x1)  =  b(x1)

c(x1)  =  c(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [b_1, c_1]

Status: b_1: multiset status
c_1: multiset status


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(b0(x)) -> A0(x)
   A0(c0(x)) -> A0(b0(x))

The TRS R consists of the following rules:

   a0(c0(x)) -> c0(c0(a0(b0(x))))
   a0(b0(x)) -> b0(b0(c0(a0(x))))
   c0(c0(x)) -> c0(c0(b0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(x)) -> c(C(a(b(x))))
   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   a(c(x)) -> C(c(A(b(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(17) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   a(c(x)) -> C(c(A(b(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(19) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(x)) -> C(c(a(b(x))))
   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(21) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(b(c(A(x))))
   a(c(x)) -> c(c(A(b(x))))

and relative ADPs:

   a(c(x)) -> c(c(a(b(x))))
   a(b(x)) -> b(b(c(a(x))))
   c(c(x)) -> c(c(b(c(x))))


----------------------------------------

(23) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  x1

b(x1)  =  b(x1)

c(x1)  =  c(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [b_1, c_1]

Status: b_1: multiset status
c_1: multiset status


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(b0(x)) -> A0(x)
   A0(c0(x)) -> A0(b0(x))

The TRS R consists of the following rules:

   a0(c0(x)) -> c0(c0(a0(b0(x))))
   a0(b0(x)) -> b0(b0(c0(a0(x))))
   c0(c0(x)) -> c0(c0(b0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 1 for the Rule: 
   A0(b0(x)) -> A0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
A00(1) -> 0
#0() -> 3
b00(3) -> 2
A00(2) -> 0
A00(3) -> 0
A01(3) -> 0

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(c0(x)) -> A0(b0(x))

The TRS R consists of the following rules:

   a0(c0(x)) -> c0(c0(a0(b0(x))))
   a0(b0(x)) -> b0(b0(c0(a0(x))))
   c0(c0(x)) -> c0(c0(b0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(28)
TRUE
