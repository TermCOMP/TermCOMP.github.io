YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3yvHB.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 35 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 8 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   c(b(x)) -> b(a(a(c(x))))
   c(a(x)) -> a(c(c(c(x))))

The relative TRS consists of the following S rules:

   a(b(x)) -> a(b(a(a(x))))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(x)) -> b(A(a(c(x))))
   c(b(x)) -> b(a(A(c(x))))
   c(b(x)) -> b(a(a(C(x))))
   c(a(x)) -> A(c(c(c(x))))
   c(a(x)) -> a(C(c(c(x))))
   c(a(x)) -> a(c(C(c(x))))
   c(a(x)) -> a(c(c(C(x))))

and relative ADPs:

   a(b(x)) -> A(b(A(a(x))))
   a(b(x)) -> A(b(a(A(x))))
   a(b(x)) -> a(b(A(A(x))))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(x)) -> a(c(c(C(x))))
   c(a(x)) -> a(C(c(c(x))))
   c(b(x)) -> b(a(a(C(x))))
   c(a(x)) -> a(c(C(c(x))))

and relative ADPs:

   c(b(x)) -> b(a(a(c(x))))
   a(b(x)) -> a(b(a(a(x))))
   c(a(x)) -> a(c(c(c(x))))


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  C(x1)

a(x1)  =  x1

c(x1)  =  x1

b(x1)  =  b(x1)


Recursive path order with status [RPO].
Quasi-Precedence: C_1 > b_1

Status: C_1: multiset status
b_1: multiset status


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(a0(x)) -> C0(c0(x))
   C0(a0(x)) -> C0(x)
   C0(b0(x)) -> C0(x)
   C0(a0(x)) -> C0(c0(c0(x)))

The TRS R consists of the following rules:

   c0(b0(x)) -> b0(a0(a0(c0(x))))
   a0(b0(x)) -> a0(b0(a0(a0(x))))
   c0(a0(x)) -> a0(c0(c0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(b0(x)) -> C0(x)


Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = x_1
   POL(a0(x_1)) = x_1
   POL(b0(x_1)) = 2 + x_1
   POL(c0(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(a0(x)) -> C0(c0(x))
   C0(a0(x)) -> C0(x)
   C0(a0(x)) -> C0(c0(c0(x)))

The TRS R consists of the following rules:

   c0(b0(x)) -> b0(a0(a0(c0(x))))
   a0(b0(x)) -> a0(b0(a0(a0(x))))
   c0(a0(x)) -> a0(c0(c0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C0(a0(x)) -> C0(c0(x))
   C0(a0(x)) -> C0(x)
   C0(a0(x)) -> C0(c0(c0(x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
C0(x1)  =  x1

a0(x1)  =  a0(x1)

c0(x1)  =  x1

b0(x1)  =  b0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a0_1=1
   b0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c0(b0(x)) -> b0(a0(a0(c0(x))))
   a0(b0(x)) -> a0(b0(a0(a0(x))))
   c0(a0(x)) -> a0(c0(c0(c0(x))))


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(b0(x)) -> b0(a0(a0(c0(x))))
   a0(b0(x)) -> a0(b0(a0(a0(x))))
   c0(a0(x)) -> a0(c0(c0(c0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
