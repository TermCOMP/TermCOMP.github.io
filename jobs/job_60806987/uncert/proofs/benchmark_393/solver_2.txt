YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PBPNT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 36 ms]
(6) QDP
(7) QDPBoundsTAProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 0 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(x)) -> b(c(c(a(x))))
   a(c(x)) -> c(c(c(a(x))))

The relative TRS consists of the following S rules:

   b(c(x)) -> b(c(b(b(x))))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> B(c(c(a(x))))
   a(b(x)) -> b(c(c(A(x))))
   a(c(x)) -> c(c(c(A(x))))

and relative ADPs:

   b(c(x)) -> B(c(B(b(x))))
   b(c(x)) -> B(c(b(B(x))))
   b(c(x)) -> b(c(B(B(x))))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x)) -> b(c(c(A(x))))
   a(c(x)) -> c(c(c(A(x))))

and relative ADPs:

   a(b(x)) -> b(c(c(a(x))))
   b(c(x)) -> b(c(b(b(x))))


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  A(x1)

b(x1)  =  b(x1)

c(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [A_1, b_1]

Status: A_1: multiset status
b_1: [1]


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(b0(x)) -> A0(x)
   A0(c0(x)) -> A0(x)

The TRS R consists of the following rules:

   a0(b0(x)) -> b0(c0(c0(a0(x))))
   a0(c0(x)) -> c0(c0(c0(a0(x))))
   b0(c0(x)) -> b0(c0(b0(b0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   A0(b0(x)) -> A0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
A00(1) -> 0

----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(c0(x)) -> A0(x)

The TRS R consists of the following rules:

   a0(b0(x)) -> b0(c0(c0(a0(x))))
   a0(c0(x)) -> c0(c0(c0(a0(x))))
   b0(c0(x)) -> b0(c0(b0(b0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A0(c0(x)) -> A0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
A0(x1)  =  A0(x1)

c0(x1)  =  c0(x1)

a0(x1)  =  a0(x1)

b0(x1)  =  b0


Recursive path order with status [RPO].
Quasi-Precedence: a0_1 > [c0_1, b0] > A0_1

Status: A0_1: multiset status
c0_1: multiset status
a0_1: [1]
b0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a0(b0(x)) -> b0(c0(c0(a0(x))))
   a0(c0(x)) -> c0(c0(c0(a0(x))))
   b0(c0(x)) -> b0(c0(b0(b0(x))))


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a0(b0(x)) -> b0(c0(c0(a0(x))))
   a0(c0(x)) -> c0(c0(c0(a0(x))))
   b0(c0(x)) -> b0(c0(b0(b0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
