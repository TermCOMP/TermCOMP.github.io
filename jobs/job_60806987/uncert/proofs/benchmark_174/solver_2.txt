YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FZpGT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPOrderProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 0 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))

The relative TRS consists of the following S rules:

   b(x1) -> b(c(x1))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> B(a(b(a(x1))))
   a(c(b(x1))) -> b(A(b(a(x1))))
   a(c(b(x1))) -> b(a(B(a(x1))))
   a(c(b(x1))) -> b(a(b(A(x1))))
   a(a(x1)) -> A(b(a(x1)))
   a(a(x1)) -> a(B(a(x1)))
   a(a(x1)) -> a(b(A(x1)))

and relative ADPs:

   b(x1) -> B(c(x1))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> b(a(b(A(x1))))
   a(c(b(x1))) -> b(A(b(a(x1))))
   a(a(x1)) -> a(b(A(x1)))
   a(a(x1)) -> A(b(a(x1)))

and relative ADPs:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))


----------------------------------------

(5) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(x1)
   A(c(b(x1))) -> A(b(a(x1)))
   A(a(x1)) -> A(b(a(x1)))
   A(a(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(c(b(x1))) -> A(x1)
   A(c(b(x1))) -> A(b(a(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(A(x_1)) =  	[[0]] 	 +  	[[0, 1]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1], [0]] 	 +  	[[1, 1], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0], [0]] 	 +  	[[0, 1], [0, 1]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(x1)) -> A(b(a(x1)))
   A(a(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(a(x1)) -> A(b(a(x1)))
   A(a(x1)) -> A(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
A(x1)  =  x1

a(x1)  =  a(x1)

b(x1)  =  b

c(x1)  =  c


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a_1=1
   b=1
   c=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a(c(b(x1))) -> b(a(b(a(x1))))
   a(a(x1)) -> a(b(a(x1)))
   b(x1) -> b(c(x1))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
