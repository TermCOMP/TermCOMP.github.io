YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2GJBV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 18 ms]
        (7) RelADPP
        (8) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) RelADPP
        (11) RelADPReductionPairProof [EQUIVALENT, 17 ms]
        (12) RelADPP
        (13) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) RelADPP
        (16) RelADPReductionPairProof [EQUIVALENT, 9 ms]
        (17) RelADPP
        (18) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) RelADPP
        (21) RelADPReductionPairProof [EQUIVALENT, 24 ms]
        (22) RelADPP
        (23) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)
   d(c(x1)) -> c(x1)

The relative TRS consists of the following S rules:

   a(x1) -> d(a(x1))
   c(x1) -> c(b(x1))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x1)) -> A(x1)
   d(b(x1)) -> b(x1)
   d(c(x1)) -> C(x1)

and relative ADPs:

   a(x1) -> D(A(x1))
   c(x1) -> C(b(x1))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x1)) -> A(x1)

and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   d(b(x1)) -> b(x1)


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(b(x1)) -> A(x1)

Relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   d(b(x1)) -> b(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(C(x_1)) = 0
   POL(D(x_1)) = 3*x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 0
   POL(d(x_1)) = x_1

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


----------------------------------------

(8) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(x1)) -> A(x1)

and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   d(b(x1)) -> b(x1)


----------------------------------------

(11) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(b(x1)) -> A(x1)

Relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   d(b(x1)) -> b(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(C(x_1)) = 0
   POL(D(x_1)) = 3*x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 0
   POL(d(x_1)) = x_1

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


----------------------------------------

(13) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(c(x1)) -> C(x1)

and relative ADPs:

   c(x1) -> c(b(x1))
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


----------------------------------------

(16) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   d(c(x1)) -> C(x1)

Relative ADPs:

   c(x1) -> c(b(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1
   POL(C(x_1)) = 3
   POL(D(x_1)) = 3*x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 3*x_1
   POL(c(x_1)) = 3
   POL(d(x_1)) = x_1

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


----------------------------------------

(18) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(b(x1)) -> b(x1)

and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)


----------------------------------------

(21) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   d(b(x1)) -> b(x1)

Relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(b(x1)) -> a(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1
   POL(C(x_1)) = 0
   POL(D(x_1)) = x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 0
   POL(d(x_1)) = x_1

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(x1) -> c(b(x1))
   d(c(x1)) -> c(x1)
   a(x1) -> D(A(x1))
   a(b(x1)) -> a(x1)
   d(b(x1)) -> b(x1)


----------------------------------------

(23) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(24)
YES
