YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vhISk.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(6) RelADPP
(7) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   b(b(x1)) -> c(d(x1))
   c(c(x1)) -> d(d(d(x1)))
   d(d(d(x1))) -> a(c(x1))

The relative TRS consists of the following S rules:

   b(c(x1)) -> a(a(x1))
   a(a(x1)) -> b(c(x1))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(x1)) -> C(d(x1))
   b(b(x1)) -> c(D(x1))
   c(c(x1)) -> D(d(d(x1)))
   c(c(x1)) -> d(D(d(x1)))
   c(c(x1)) -> d(d(D(x1)))
   d(d(d(x1))) -> A(c(x1))
   d(d(d(x1))) -> a(C(x1))

and relative ADPs:

   b(c(x1)) -> A(A(x1))
   a(a(x1)) -> B(C(x1))


----------------------------------------

(3) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   b(b(x1)) -> c(D(x1))
   b(b(x1)) -> C(d(x1))

c:

   c(c(x1)) -> D(d(d(x1)))
   d(d(d(x1))) -> a(C(x1))
   c(c(x1)) -> d(d(D(x1)))
   d(d(d(x1))) -> A(c(x1))
   c(c(x1)) -> d(D(d(x1)))

   a(a(x1)) -> B(C(x1))
   b(c(x1)) -> A(A(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(D(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1
   POL(d(x_1)) = 2 + x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(x1)) -> D(d(d(x1)))
   d(d(d(x1))) -> a(C(x1))
   c(c(x1)) -> d(d(D(x1)))
   d(d(d(x1))) -> A(c(x1))
   c(c(x1)) -> d(D(d(x1)))

and relative ADPs:

   a(a(x1)) -> B(C(x1))
   b(c(x1)) -> A(A(x1))


----------------------------------------

(5) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   c(c(x1)) -> D(d(d(x1)))
   c(c(x1)) -> d(d(D(x1)))
   c(c(x1)) -> d(D(d(x1)))

c:

   d(d(d(x1))) -> a(C(x1))
   d(d(d(x1))) -> A(c(x1))

   a(a(x1)) -> B(C(x1))
   b(c(x1)) -> A(A(x1))

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 3*x_1
   POL(D(x_1)) = x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 2 + x_1
   POL(d(x_1)) = 1 + x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(d(d(x1))) -> a(C(x1))
   d(d(d(x1))) -> A(c(x1))

and relative ADPs:

   a(a(x1)) -> B(C(x1))
   b(c(x1)) -> A(A(x1))


----------------------------------------

(7) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(8)
TRUE
