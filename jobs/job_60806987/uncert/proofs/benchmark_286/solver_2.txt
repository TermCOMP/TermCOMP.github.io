YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/A4WnV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDerelatifying2Proof [SOUND, 0 ms]
(4) OR
    (5) RelADPP
        (6) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (7) OR
            (8) RelADPP
                (9) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                (10) RelADPP
                (11) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (12) RelADPP
            (13) RelADPP
    (14) RelADPP
        (15) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (16) OR
            (17) RelADPP
            (18) RelADPP
    (19) RelADPP
        (20) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (21) RelADPP
        (22) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (23) RelADPP
        (24) RelADPCleverAfsProof [SOUND, 7 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 5 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(a(x1))) -> b(c(c(x1)))
   b(a(c(x1))) -> a(a(c(x1)))
   a(b(a(x1))) -> a(c(c(x1)))
   b(b(a(x1))) -> a(b(a(x1)))

The relative TRS consists of the following S rules:

   b(c(c(x1))) -> c(c(a(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   a(a(c(x1))) -> a(b(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(b(a(x1))) -> A(b(a(x1)))
   b(b(a(x1))) -> a(B(a(x1)))
   b(b(a(x1))) -> a(b(A(x1)))

and relative ADPs:

   b(c(c(x1))) -> c(c(A(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   a(a(c(x1))) -> A(B(c(x1)))


----------------------------------------

(3) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4)
Complex Obligation (OR)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(c(c(x1))) -> c(c(A(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(a(c(x1))) -> A(B(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))


----------------------------------------

(6) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7)
Complex Obligation (OR)

----------------------------------------

(8)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(c(c(x1))) -> c(c(A(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(B(A(x1)))


----------------------------------------

(9) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   b(c(c(x1))) -> c(c(A(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(B(A(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(B(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   b(c(c(x1))) -> c(c(a(x1)))
   b(b(a(x1))) -> a(b(a(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   a(a(c(x1))) -> a(b(c(x1)))
   b(a(c(x1))) -> a(a(c(x1)))


----------------------------------------

(11) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))

and relative ADPs:

   a(b(a(x1))) -> a(c(c(x1)))
   b(c(c(x1))) -> c(c(a(x1)))
   b(b(a(x1))) -> a(b(a(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(c(c(x1)))
   b(a(c(x1))) -> a(a(c(x1)))
   a(a(c(x1))) -> a(b(c(x1)))


----------------------------------------

(13)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(c(c(x1))) -> c(B(a(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(c(c(x1))) -> c(c(A(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   a(c(c(x1))) -> c(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(a(c(x1))) -> A(B(c(x1)))


----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(c(c(x1))) -> c(B(a(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   a(c(c(x1))) -> c(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(a(c(x1))) -> A(B(c(x1)))
   b(c(c(x1))) -> c(c(A(x1)))


----------------------------------------

(15) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(16)
Complex Obligation (OR)

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(c(c(x1))) -> c(B(a(x1)))
   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   a(c(c(x1))) -> c(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   b(c(c(x1))) -> c(c(A(x1)))


----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(c(c(x1))) -> c(B(a(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(c(c(x1))) -> c(c(A(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   a(c(c(x1))) -> c(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(a(c(x1))) -> A(B(c(x1)))


----------------------------------------

(19)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(B(A(x1)))
   b(c(c(x1))) -> c(c(A(x1)))


----------------------------------------

(20) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> a(B(a(x1)))
   a(a(c(x1))) -> a(B(c(x1)))
   b(a(c(x1))) -> a(A(c(x1)))
   b(b(a(x1))) -> a(b(A(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(B(A(x1)))
   b(c(c(x1))) -> c(c(A(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(B(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))
   a(b(a(x1))) -> B(c(c(x1)))
   b(a(c(x1))) -> A(a(c(x1)))
   a(b(a(x1))) -> A(c(c(x1)))
   b(b(a(x1))) -> A(b(a(x1)))

and relative ADPs:

   b(c(c(x1))) -> c(c(a(x1)))
   b(b(a(x1))) -> a(b(a(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   a(a(c(x1))) -> a(b(c(x1)))
   b(a(c(x1))) -> a(a(c(x1)))


----------------------------------------

(22) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> A(b(c(x1)))

and relative ADPs:

   a(b(a(x1))) -> a(c(c(x1)))
   b(c(c(x1))) -> c(c(a(x1)))
   b(b(a(x1))) -> a(b(a(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(c(c(x1)))
   b(a(c(x1))) -> a(a(c(x1)))
   a(a(c(x1))) -> a(b(c(x1)))


----------------------------------------

(24) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 0
b_1 = 
c_1 = 0
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  x1

a(x1)  =  a

c(x1)  =  c

b(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: a > c

Status: a: multiset status
c: multiset status


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(a) -> A0(b0(c))

The TRS R consists of the following rules:

   a -> a
   b0(c) -> c
   b0(b0(a)) -> a
   a -> c
   a -> b0(c)
   b0(a) -> a

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A0(a) -> A0(b0(c))

Strictly oriented rules of the TRS R:

   b0(c) -> c
   b0(b0(a)) -> a
   a -> c
   a -> b0(c)
   b0(a) -> a

Used ordering: Knuth-Bendix order [KBO] with precedence:a > A0_1 > c > b0_1

and weight map:

   a=2
   c=1
   b0_1=1
   A0_1=1

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a -> a

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
