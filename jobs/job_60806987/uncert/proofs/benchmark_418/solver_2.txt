YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/23hza.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPReductionPairProof [EQUIVALENT, 48 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) RelADPP
        (8) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) TransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) TransformationProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 8923 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) RelADPP
        (19) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) TransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 288 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   d(d(x)) -> a(b(x))
   a(a(x)) -> d(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))

The relative TRS consists of the following S rules:

   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(d(x)) -> A(b(x))
   d(d(x)) -> a(B(x))
   a(a(x)) -> D(b(x))
   a(a(x)) -> d(B(x))
   b(b(x)) -> A(c(x))
   b(b(x)) -> a(C(x))
   c(d(x)) -> C(b(x))
   c(d(x)) -> c(B(x))

and relative ADPs:

   c(d(x)) -> B(D(x))
   c(c(x)) -> A(B(x))


----------------------------------------

(3) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(x)) -> A(c(x))
   a(a(x)) -> d(B(x))
   d(d(x)) -> a(B(x))
   b(b(x)) -> a(C(x))
   c(d(x)) -> c(B(x))

Relative ADPs:

   c(c(x)) -> A(B(x))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   d(d(x)) -> A(b(x))
   c(d(x)) -> C(b(x))
   a(a(x)) -> D(b(x))

Relative ADPs:

   c(d(x)) -> B(D(x))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(B(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 3*x_1
   POL(D(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1
   POL(d(x_1)) = 2 + 2*x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(d(x)) -> A(b(x))
   c(d(x)) -> C(b(x))
   a(a(x)) -> D(b(x))

and relative ADPs:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> B(D(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   d(d(x)) -> A(b(x))
   a(a(x)) -> D(b(x))

and relative ADPs:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(8) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(x)) -> D(b(x))
   D(d(x)) -> A(b(x))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule A(a(x)) -> D(b(x)) at position [0] we obtained the following new rules [LPAR04]:

   (A(a(b(x0))) -> D(a(c(x0))),A(a(b(x0))) -> D(a(c(x0))))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(d(x)) -> A(b(x))
   A(a(b(x0))) -> D(a(c(x0)))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule D(d(x)) -> A(b(x)) at position [0] we obtained the following new rules [LPAR04]:

   (D(d(b(x0))) -> A(a(c(x0))),D(d(b(x0))) -> A(a(c(x0))))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(b(x0))) -> D(a(c(x0)))
   D(d(b(x0))) -> A(a(c(x0)))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(a(b(x0))) -> D(a(c(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(A(x_1)) =  	[[-I]] 	 +  	[[1A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 2A, 0A], [1A, 0A, 0A], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[-I], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 1A, 1A], [2A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(D(x_1)) =  	[[-I]] 	 +  	[[0A, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [-I], [-I]] 	 +  	[[2A, 1A, 1A], [0A, -I, -I], [2A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[2A, 1A, 1A], [0A, 0A, -I], [0A, -I, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(d(b(x0))) -> A(a(c(x0)))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(d(x)) -> C(b(x))

and relative ADPs:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(19) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(d(x)) -> C(b(x))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule C(d(x)) -> C(b(x)) at position [0] we obtained the following new rules [LPAR04]:

   (C(d(b(x0))) -> C(a(c(x0))),C(d(b(x0))) -> C(a(c(x0))))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(d(b(x0))) -> C(a(c(x0)))

The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(d(b(x0))) -> C(a(c(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[0A], [1A], [-I]] 	 +  	[[-I, 0A, -I], [-I, 1A, 0A], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0A], [0A], [1A]] 	 +  	[[-I, 0A, 1A], [-I, 0A, -I], [-I, 1A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[1A], [0A], [-I]] 	 +  	[[-I, 1A, 0A], [0A, -I, -I], [-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [1A], [0A]] 	 +  	[[-I, 0A, -I], [-I, 1A, 0A], [-I, 1A, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   d(d(x)) -> a(b(x))
   b(b(x)) -> a(c(x))
   c(d(x)) -> c(b(x))
   a(a(x)) -> d(b(x))
   c(d(x)) -> b(d(x))
   c(c(x)) -> a(b(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES
