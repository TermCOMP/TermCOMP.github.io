YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4M1gv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 51 ms]
        (7) RelADPP
        (8) RelADPReductionPairProof [EQUIVALENT, 23 ms]
        (9) RelADPP
        (10) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) RelADPP
        (12) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) MRRProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) TransformationProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) TransformationProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPOrderProof [EQUIVALENT, 423 ms]
        (23) QDP
        (24) QDPOrderProof [EQUIVALENT, 616 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 436 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) TRUE
    (30) RelADPP
        (31) RelADPCleverAfsProof [SOUND, 40 ms]
        (32) QDP
        (33) MRRProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) PisEmptyProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) RelADPP
        (38) RelADPReductionPairProof [EQUIVALENT, 59 ms]
        (39) RelADPP
        (40) RelADPCleverAfsProof [SOUND, 7 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 3 ms]
        (43) QDP
        (44) PisEmptyProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) RelADPP
        (47) RelADPReductionPairProof [EQUIVALENT, 44 ms]
        (48) RelADPP
        (49) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (50) YES
    (51) RelADPP
        (52) RelADPReductionPairProof [EQUIVALENT, 43 ms]
        (53) RelADPP
        (54) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (55) YES
    (56) RelADPP
        (57) RelADPReductionPairProof [EQUIVALENT, 72 ms]
        (58) RelADPP
        (59) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (60) YES
    (61) RelADPP
        (62) RelADPReductionPairProof [EQUIVALENT, 53 ms]
        (63) RelADPP
        (64) RelADPReductionPairProof [EQUIVALENT, 5 ms]
        (65) RelADPP
        (66) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (67) TRUE
    (68) RelADPP
        (69) RelADPReductionPairProof [EQUIVALENT, 41 ms]
        (70) RelADPP
        (71) RelADPCleverAfsProof [SOUND, 4 ms]
        (72) QDP
        (73) MRRProof [EQUIVALENT, 2 ms]
        (74) QDP
        (75) PisEmptyProof [EQUIVALENT, 0 ms]
        (76) YES
    (77) RelADPP
        (78) RelADPReductionPairProof [EQUIVALENT, 42 ms]
        (79) RelADPP
        (80) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (81) YES
    (82) RelADPP
        (83) RelADPReductionPairProof [EQUIVALENT, 42 ms]
        (84) RelADPP
        (85) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (86) YES
    (87) RelADPP
        (88) RelADPReductionPairProof [EQUIVALENT, 39 ms]
        (89) RelADPP
        (90) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (91) YES
    (92) RelADPP
        (93) RelADPReductionPairProof [EQUIVALENT, 57 ms]
        (94) RelADPP
        (95) RelADPCleverAfsProof [SOUND, 2 ms]
        (96) QDP
        (97) MRRProof [EQUIVALENT, 3 ms]
        (98) QDP
        (99) PisEmptyProof [EQUIVALENT, 0 ms]
        (100) YES
    (101) RelADPP
        (102) RelADPReductionPairProof [EQUIVALENT, 71 ms]
        (103) RelADPP
        (104) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (105) YES
    (106) RelADPP
        (107) RelADPReductionPairProof [EQUIVALENT, 56 ms]
        (108) RelADPP
        (109) RelADPReductionPairProof [EQUIVALENT, 9 ms]
        (110) RelADPP
        (111) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (112) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))
   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

The relative TRS consists of the following S rules:

   b(b(a(x1))) -> c(b(b(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> C(b(b(x1)))
   c(b(a(x1))) -> c(B(b(x1)))
   c(b(a(x1))) -> c(b(B(x1)))
   b(a(c(x1))) -> B(b(c(x1)))
   b(a(c(x1))) -> b(B(c(x1)))
   b(a(c(x1))) -> b(b(C(x1)))
   c(c(c(x1))) -> B(c(c(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))
   a(c(a(x1))) -> B(c(b(x1)))
   a(c(a(x1))) -> b(C(b(x1)))
   a(c(a(x1))) -> b(c(B(x1)))
   b(c(b(x1))) -> C(b(c(x1)))
   b(c(b(x1))) -> c(B(c(x1)))
   b(c(b(x1))) -> c(b(C(x1)))
   a(c(b(x1))) -> B(a(c(x1)))
   a(c(b(x1))) -> b(A(c(x1)))
   a(c(b(x1))) -> b(a(C(x1)))

and relative ADPs:

   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   b(b(a(x1))) -> c(B(B(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  12 Lassos,
Result: This relative DT problem is equivalent to 14 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> c(b(B(x1)))
   b(a(c(x1))) -> b(b(C(x1)))
   b(c(b(x1))) -> c(b(C(x1)))
   c(b(a(x1))) -> C(b(b(x1)))
   b(a(c(x1))) -> B(b(c(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))
   b(c(b(x1))) -> c(B(c(x1)))
   c(b(a(x1))) -> c(B(b(x1)))
   b(a(c(x1))) -> b(B(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

and relative ADPs:

   a(c(a(x1))) -> b(c(b(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(a(x1))) -> c(b(B(x1)))
   b(a(c(x1))) -> b(b(C(x1)))
   c(b(a(x1))) -> C(b(b(x1)))
   b(a(c(x1))) -> B(b(c(x1)))
   c(b(a(x1))) -> c(B(b(x1)))
   b(a(c(x1))) -> b(B(c(x1)))

Relative ADPs:

   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(b(x1))) -> c(b(C(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))
   b(c(b(x1))) -> c(B(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(B(B(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 1 + x_1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> c(b(C(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))
   b(c(b(x1))) -> c(B(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

and relative ADPs:

   a(c(a(x1))) -> b(c(b(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(8) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(b(x1))) -> c(b(C(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   b(c(b(x1))) -> c(B(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

Relative ADPs:

   a(c(a(x1))) -> b(c(b(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))

Relative ADPs:

   b(b(a(x1))) -> C(B(b(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(10) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 0
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 0

----------------------------------------

(11)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))
   b(c(b(x1))) -> C(b(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(12) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(x1))) -> C(b(c(x1)))
   C(c(c(x1))) -> B(c(c(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(c(a(x1))) -> b(c(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(x1))) -> C(b(c(x1)))
   C(c(c(x1))) -> B(c(c(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(c(b(x1))) -> b(a(c(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(x1))) -> C(b(c(x1)))
   C(c(c(x1))) -> B(c(c(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(18) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule B(c(b(x1))) -> C(b(c(x1))) at position [0] we obtained the following new rules [LPAR04]:

   (B(c(b(b(x0)))) -> C(c(b(c(x0)))),B(c(b(b(x0)))) -> C(c(b(c(x0)))))
   (B(c(b(c(c(x0))))) -> C(b(b(c(c(x0))))),B(c(b(c(c(x0))))) -> C(b(b(c(c(x0))))))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(x1))) -> B(c(c(x1)))
   B(c(b(b(x0)))) -> C(c(b(c(x0))))
   B(c(b(c(c(x0))))) -> C(b(b(c(c(x0)))))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule C(c(c(x1))) -> B(c(c(x1))) at position [0] we obtained the following new rules [LPAR04]:

   (C(c(c(c(x0)))) -> B(b(c(c(x0)))),C(c(c(c(x0)))) -> B(b(c(c(x0)))))
   (C(c(c(c(c(x0))))) -> B(c(b(c(c(x0))))),C(c(c(c(c(x0))))) -> B(c(b(c(c(x0))))))


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(b(x0)))) -> C(c(b(c(x0))))
   B(c(b(c(c(x0))))) -> C(b(b(c(c(x0)))))
   C(c(c(c(x0)))) -> B(b(c(c(x0))))
   C(c(c(c(c(x0))))) -> B(c(b(c(c(x0)))))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(22) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(c(c(c(c(x0))))) -> B(c(b(c(c(x0)))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[1A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [1A], [-I]] 	 +  	[[-I, 0A, -I], [-I, 1A, 0A], [0A, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[1A, 0A, 0A], [-I, -I, 0A], [0A, -I, 1A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(b(x0)))) -> C(c(b(c(x0))))
   B(c(b(c(c(x0))))) -> C(b(b(c(c(x0)))))
   C(c(c(c(x0)))) -> B(b(c(c(x0))))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(c(b(b(x0)))) -> C(c(b(c(x0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [0A], [-I]] 	 +  	[[1A, -I, -I], [-I, -I, 1A], [0A, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, 0A, 0A], [-I, 1A, -I], [0A, 0A, 1A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, -I, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(c(c(x0))))) -> C(b(b(c(c(x0)))))
   C(c(c(c(x0)))) -> B(b(c(c(x0))))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(c(b(c(c(x0))))) -> C(b(b(c(c(x0)))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[3A]] 	 +  	[[-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [0A], [1A]] 	 +  	[[-I, -I, 0A], [0A, -I, -I], [-I, 0A, 1A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[1A, 0A, 0A], [0A, 1A, -I], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, -I, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(c(x0)))) -> B(b(c(c(x0))))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(29)
TRUE

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> b(A(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(31) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: A_1 > [c_1, b_1, a_1]

Status: A_1: [1]
c_1: multiset status
b_1: multiset status
a_1: multiset status


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(c0(b0(x1))) -> A0(c0(x1))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A0(c0(b0(x1))) -> A0(c0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(A0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = 1 + 2*x_1
   POL(c0(x_1)) = 1 + 2*x_1


----------------------------------------

(34)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(38) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(b(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 2
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(40) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: [C_1, a_1] > [b_1, c_1]

Status: C_1: [1]
b_1: multiset status
a_1: multiset status
c_1: multiset status


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(b0(a0(x1))) -> C0(b0(b0(x1)))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(b0(a0(x1))) -> C0(b0(b0(x1)))

Strictly oriented rules of the TRS R:

   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = x_1
   POL(c0(x_1)) = x_1


----------------------------------------

(43)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> C(b(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(47) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(b(x1))) -> C(b(c(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2 + 3*x_1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(48)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(49) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(50)
YES

----------------------------------------

(51)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> c(b(B(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(52) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(a(x1))) -> c(b(B(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(53)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(54) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> B(b(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(57) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(c(x1))) -> B(b(c(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 1

----------------------------------------

(58)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))
   c(b(a(x1))) -> c(b(b(x1)))


----------------------------------------

(59) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(60)
YES

----------------------------------------

(61)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(62) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))

Relative ADPs:

   b(b(a(x1))) -> C(B(b(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 3*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(63)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(64) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2*x_1
   POL(C(x_1)) = 0
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 0

----------------------------------------

(65)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> B(c(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(66) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(67)
TRUE

----------------------------------------

(68)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> b(C(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(69) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> b(C(c(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 3*x_1
   POL(C(x_1)) = 3
   POL(a(x_1)) = 3 + 3*x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(70)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> b(C(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(71) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

c(x1)  =  c(x1)

b(x1)  =  b(x1)

a(x1)  =  a(x1)


Recursive path order with status [RPO].
Quasi-Precedence: a_1 > [c_1, b_1]

Status: c_1: multiset status
b_1: multiset status
a_1: multiset status


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(c0(c0(x1))) -> C0(c0(x1))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(c0(c0(x1))) -> C0(c0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = 2*x_1
   POL(a0(x_1)) = 2 + 2*x_1
   POL(b0(x_1)) = 2 + 2*x_1
   POL(c0(x_1)) = 2 + 2*x_1


----------------------------------------

(74)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(75) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(76)
YES

----------------------------------------

(77)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> b(B(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(78) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(c(x1))) -> b(B(c(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 1 + 2*x_1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(79)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))
   c(b(a(x1))) -> c(b(b(x1)))


----------------------------------------

(80) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(81)
YES

----------------------------------------

(82)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> c(b(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(83) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(b(x1))) -> c(b(C(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 1 + 3*x_1
   POL(C(x_1)) = 2
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(84)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(85) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(86)
YES

----------------------------------------

(87)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> c(B(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(88) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(b(x1))) -> c(B(c(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 0
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(89)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(90) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(91)
YES

----------------------------------------

(92)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> b(c(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(93) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> b(c(C(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 3 + 2*x_1
   POL(C(x_1)) = 0
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(94)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> b(c(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(95) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

c(x1)  =  c(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: c_1: multiset status


----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(c0(c0(x1))) -> C0(x1)

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(97) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(c0(c0(x1))) -> C0(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = 2*x_1
   POL(a0(x_1)) = 2 + 2*x_1
   POL(b0(x_1)) = 2 + 2*x_1
   POL(c0(x_1)) = 2 + 2*x_1


----------------------------------------

(98)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(a0(x1))) -> b0(c0(b0(x1)))
   b0(c0(b0(x1))) -> c0(b0(c0(x1)))
   a0(c0(b0(x1))) -> b0(a0(c0(x1)))
   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   c0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(99) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(100)
YES

----------------------------------------

(101)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(102) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(a(x1))) -> c(B(b(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(103)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(104) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(105)
YES

----------------------------------------

(106)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> b(b(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(107) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> c(B(B(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(a(c(x1))) -> b(b(C(x1)))

Relative ADPs:

   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 0

----------------------------------------

(108)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> b(b(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(109) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(c(x1))) -> b(b(C(x1)))

Relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> C(B(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(a(x1))) -> C(b(B(x1)))
   c(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(110)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> b(c(b(x1)))
   b(c(b(x1))) -> c(b(c(x1)))
   a(c(b(x1))) -> b(a(c(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(c(x1))) -> b(b(c(x1)))
   c(b(a(x1))) -> c(b(b(x1)))


----------------------------------------

(111) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(112)
YES
