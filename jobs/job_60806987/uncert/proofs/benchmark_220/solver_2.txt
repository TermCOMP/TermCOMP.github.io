YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Nos22.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPReductionPairProof [EQUIVALENT, 77 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) RelADPP
        (8) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 22 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(a(a(x1))) -> c(b(b(x1)))
   a(a(a(x1))) -> a(c(a(x1)))
   c(c(b(x1))) -> c(a(b(x1)))

The relative TRS consists of the following S rules:

   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   a(c(c(x1))) -> a(b(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(a(x1))) -> C(b(b(x1)))
   a(a(a(x1))) -> c(B(b(x1)))
   a(a(a(x1))) -> c(b(B(x1)))
   a(a(a(x1))) -> A(c(a(x1)))
   a(a(a(x1))) -> a(C(a(x1)))
   a(a(a(x1))) -> a(c(A(x1)))
   c(c(b(x1))) -> C(a(b(x1)))
   c(c(b(x1))) -> c(A(b(x1)))
   c(c(b(x1))) -> c(a(B(x1)))

and relative ADPs:

   b(c(a(x1))) -> C(B(a(x1)))
   b(c(a(x1))) -> C(b(A(x1)))
   b(c(a(x1))) -> c(B(A(x1)))
   a(b(a(x1))) -> B(A(a(x1)))
   a(b(a(x1))) -> B(a(A(x1)))
   a(b(a(x1))) -> b(A(A(x1)))
   a(c(c(x1))) -> A(B(c(x1)))
   a(c(c(x1))) -> A(b(C(x1)))
   a(c(c(x1))) -> a(B(C(x1)))


----------------------------------------

(3) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(c(b(x1))) -> c(A(b(x1)))
   a(a(a(x1))) -> a(C(a(x1)))
   a(a(a(x1))) -> c(b(B(x1)))
   c(c(b(x1))) -> c(a(B(x1)))
   a(a(a(x1))) -> C(b(b(x1)))
   a(a(a(x1))) -> a(c(A(x1)))
   a(a(a(x1))) -> c(B(b(x1)))

Relative ADPs:

   b(c(a(x1))) -> C(b(A(x1)))
   a(c(c(x1))) -> A(B(c(x1)))
   a(b(a(x1))) -> B(A(a(x1)))
   b(c(a(x1))) -> C(B(a(x1)))
   a(b(a(x1))) -> B(a(A(x1)))
   a(c(c(x1))) -> A(b(C(x1)))
   a(b(a(x1))) -> b(A(A(x1)))
   a(c(c(x1))) -> a(B(C(x1)))
   b(c(a(x1))) -> c(B(A(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(b(x1))) -> C(a(b(x1)))
   a(a(a(x1))) -> A(c(a(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(b(x1))) -> C(a(b(x1)))
   a(a(a(x1))) -> A(c(a(x1)))

and relative ADPs:

   a(a(a(x1))) -> a(c(a(x1)))
   a(a(a(x1))) -> c(b(b(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   a(c(c(x1))) -> a(b(c(x1)))
   c(c(b(x1))) -> c(a(b(x1)))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(b(x1))) -> C(a(b(x1)))

and relative ADPs:

   a(a(a(x1))) -> a(c(a(x1)))
   a(a(a(x1))) -> c(b(b(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   a(c(c(x1))) -> a(b(c(x1)))
   c(c(b(x1))) -> c(a(b(x1)))


----------------------------------------

(8) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(b(x1))) -> C(a(b(x1)))

The TRS R consists of the following rules:

   a(a(a(x1))) -> a(c(a(x1)))
   a(a(a(x1))) -> c(b(b(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   a(c(c(x1))) -> a(b(c(x1)))
   c(c(b(x1))) -> c(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> a(b(c(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 2 + 2*x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(b(x1))) -> C(a(b(x1)))

The TRS R consists of the following rules:

   a(a(a(x1))) -> a(c(a(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   c(c(b(x1))) -> c(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(c(b(x1))) -> C(a(b(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
C(x1)  =  x1

c(x1)  =  c

a(x1)  =  a

b(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a=1
   c=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(a(a(x1))) -> a(c(a(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   c(c(b(x1))) -> c(a(b(x1)))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a(a(a(x1))) -> a(c(a(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   c(c(b(x1))) -> c(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(a(x1))) -> A(c(a(x1)))

and relative ADPs:

   a(a(a(x1))) -> a(c(a(x1)))
   a(a(a(x1))) -> c(b(b(x1)))
   b(c(a(x1))) -> c(b(a(x1)))
   a(b(a(x1))) -> b(a(a(x1)))
   a(c(c(x1))) -> a(b(c(x1)))
   c(c(b(x1))) -> c(a(b(x1)))


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 0
b_1 = 0
c_1 = 0
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  A(x1)

a(x1)  =  a

c(x1)  =  c

b(x1)  =  b


Recursive path order with status [RPO].
Quasi-Precedence: [A_1, a, b] > c

Status: A_1: [1]
a: multiset status
c: multiset status
b: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(a) -> A0(c)

The TRS R consists of the following rules:

   a -> a
   a -> c
   b -> c
   a -> b
   c -> c

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A0(a) -> A0(c)

Strictly oriented rules of the TRS R:

   a -> c
   b -> c

Used ordering: Polynomial interpretation [POLO]:

   POL(A0(x_1)) = 2*x_1
   POL(a) = 1
   POL(b) = 1
   POL(c) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a -> a
   a -> b
   c -> c

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
