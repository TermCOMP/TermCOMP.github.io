YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jJE5p.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPRuleRemovalProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) RelADPP
(7) RelADPCleverAfsProof [SOUND, 0 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 6 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(b(x1))) -> c(a(c(x1)))
   b(a(c(x1))) -> b(b(a(x1)))
   a(a(b(x1))) -> c(a(c(x1)))

The relative TRS consists of the following S rules:

   c(b(b(x1))) -> a(c(b(x1)))
   b(c(b(x1))) -> c(b(a(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(b(x1))) -> C(a(c(x1)))
   a(b(b(x1))) -> c(A(c(x1)))
   a(b(b(x1))) -> c(a(C(x1)))
   b(a(c(x1))) -> B(b(a(x1)))
   b(a(c(x1))) -> b(B(a(x1)))
   b(a(c(x1))) -> b(b(A(x1)))
   a(a(b(x1))) -> C(a(c(x1)))
   a(a(b(x1))) -> c(A(c(x1)))
   a(a(b(x1))) -> c(a(C(x1)))

and relative ADPs:

   c(b(b(x1))) -> A(C(b(x1)))
   c(b(b(x1))) -> A(c(B(x1)))
   c(b(b(x1))) -> a(C(B(x1)))
   b(c(b(x1))) -> C(B(a(x1)))
   b(c(b(x1))) -> C(b(A(x1)))
   b(c(b(x1))) -> c(B(A(x1)))
   b(c(b(x1))) -> B(A(b(x1)))
   b(c(b(x1))) -> B(a(B(x1)))
   b(c(b(x1))) -> b(A(B(x1)))


----------------------------------------

(3) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   a(a(b(x1))) -> c(a(C(x1)))
   a(b(b(x1))) -> c(A(c(x1)))
   a(a(b(x1))) -> c(A(c(x1)))
   a(b(b(x1))) -> c(a(C(x1)))
   a(a(b(x1))) -> C(a(c(x1)))
   a(b(b(x1))) -> C(a(c(x1)))

   b(c(b(x1))) -> B(a(B(x1)))
   c(b(b(x1))) -> A(c(B(x1)))
   c(b(b(x1))) -> a(C(B(x1)))
   b(c(b(x1))) -> C(b(A(x1)))
   b(c(b(x1))) -> B(A(b(x1)))
   c(b(b(x1))) -> A(C(b(x1)))
   b(c(b(x1))) -> b(A(B(x1)))
   b(c(b(x1))) -> c(B(A(x1)))
   b(c(b(x1))) -> C(B(a(x1)))

c:

   b(a(c(x1))) -> b(B(a(x1)))
   b(a(c(x1))) -> b(b(A(x1)))
   b(a(c(x1))) -> B(b(a(x1)))
none

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> b(B(a(x1)))
   b(a(c(x1))) -> b(b(A(x1)))
   b(a(c(x1))) -> B(b(a(x1)))

and no relative ADPs.
----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(c(x1))) -> b(B(a(x1)))

and relative ADPs:

   b(a(c(x1))) -> b(b(a(x1)))


----------------------------------------

(7) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
B(x1)  =  x1

a(x1)  =  x1

c(x1)  =  c(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: c_1: multiset status


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(a0(c0(x1))) -> B0(a0(x1))

The TRS R consists of the following rules:

   b0(a0(c0(x1))) -> b0(b0(a0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(a0(c0(x1))) -> B0(a0(x1))

Strictly oriented rules of the TRS R:

   b0(a0(c0(x1))) -> b0(b0(a0(x1)))

Used ordering: Knuth-Bendix order [KBO] with precedence:B0_1 > c0_1 > a0_1 > b0_1

and weight map:

   b0_1=1
   a0_1=3
   c0_1=2
   B0_1=1

The variable weight is 1

----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
