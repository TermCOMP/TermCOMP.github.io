YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/scpZS.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDerelatifying2Proof [SOUND, 0 ms]
(4) OR
    (5) RelADPP
        (6) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (7) RelADPP
        (8) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (9) AND
            (10) RelADPP
                (11) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
                (12) QDP
                (13) TransformationProof [EQUIVALENT, 0 ms]
                (14) QDP
                (15) TransformationProof [EQUIVALENT, 0 ms]
                (16) QDP
            (17) RelADPP
                (18) RelADPCleverAfsProof [SOUND, 2 ms]
                (19) QDP
                (20) QDPBoundsTAProof [EQUIVALENT, 0 ms]
                (21) QDP
                (22) PisEmptyProof [EQUIVALENT, 0 ms]
                (23) YES
    (24) RelADPP
        (25) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (26) RelADPP
        (27) RelADPCleverAfsProof [SOUND, 0 ms]
        (28) QDP
        (29) QDPBoundsTAProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) PisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(x) -> x

The relative TRS consists of the following S rules:

   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(x) -> x

and relative ADPs:

   a(x) -> A(b(x))
   c(b(x)) -> A(C(x))


----------------------------------------

(3) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4)
Complex Obligation (OR)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(x) -> x
   a(x) -> A(b(x))

and relative ADPs:

   c(b(x)) -> A(C(x))


----------------------------------------

(6) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(x) -> x
   a(x) -> A(b(x))
   c(b(x)) -> A(c(x))
   c(b(x)) -> a(C(x))

and no relative ADPs.
----------------------------------------

(8) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(9)
Complex Obligation (AND)

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(x) -> A(b(x))

and relative ADPs:

   a(x) -> x
   c(b(x)) -> a(c(x))


----------------------------------------

(11) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(x) -> A(b(x))

The TRS R consists of the following rules:

   a(x) -> x
   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule A(x) -> A(b(x)) we obtained the following new rules [LPAR04]:

   (A(b(y_0)) -> A(b(b(y_0))),A(b(y_0)) -> A(b(b(y_0))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(y_0)) -> A(b(b(y_0)))

The TRS R consists of the following rules:

   a(x) -> x
   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule A(b(y_0)) -> A(b(b(y_0))) we obtained the following new rules [LPAR04]:

   (A(b(b(y_0))) -> A(b(b(b(y_0)))),A(b(b(y_0))) -> A(b(b(b(y_0)))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(b(y_0))) -> A(b(b(b(y_0))))

The TRS R consists of the following rules:

   a(x) -> x
   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(x)) -> a(C(x))

and relative ADPs:

   a(x) -> x
   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))


----------------------------------------

(18) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

b(x1)  =  b(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: b_1: [1]


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(b0(x)) -> C0(x)

The TRS R consists of the following rules:

   a0(x) -> x
   a0(x) -> a0(b0(x))
   c0(b0(x)) -> a0(c0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   C0(b0(x)) -> C0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
C00(1) -> 0

----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a0(x) -> x
   a0(x) -> a0(b0(x))
   c0(b0(x)) -> a0(c0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(x) -> x
   c(b(x)) -> A(c(x))
   c(b(x)) -> a(C(x))

and relative ADPs:

   a(x) -> A(b(x))


----------------------------------------

(25) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(26)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(x)) -> a(C(x))

and relative ADPs:

   a(x) -> x
   a(x) -> a(b(x))
   c(b(x)) -> a(c(x))


----------------------------------------

(27) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

b(x1)  =  b(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: b_1: [1]


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(b0(x)) -> C0(x)

The TRS R consists of the following rules:

   a0(x) -> x
   a0(x) -> a0(b0(x))
   c0(b0(x)) -> a0(c0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   C0(b0(x)) -> C0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
C00(1) -> 0

----------------------------------------

(30)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a0(x) -> x
   a0(x) -> a0(b0(x))
   c0(b0(x)) -> a0(c0(x))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(32)
YES
