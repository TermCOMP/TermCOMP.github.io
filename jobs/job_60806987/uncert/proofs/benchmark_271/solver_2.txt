YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1UKkU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPCleverAfsProof [SOUND, 21 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 9 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPReductionPairProof [EQUIVALENT, 28 ms]
        (16) RelADPP
        (17) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   c(a(b(x1))) -> a(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))
   c(c(c(x1))) -> b(c(c(x1)))
   b(b(a(x1))) -> b(b(b(x1)))

The relative TRS consists of the following S rules:

   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> c(b(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(b(x1))) -> A(b(c(x1)))
   c(a(b(x1))) -> a(B(c(x1)))
   c(a(b(x1))) -> a(b(C(x1)))
   a(b(a(x1))) -> C(a(a(x1)))
   a(b(a(x1))) -> c(A(a(x1)))
   a(b(a(x1))) -> c(a(A(x1)))
   c(c(c(x1))) -> B(c(c(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))
   b(b(a(x1))) -> B(b(b(x1)))
   b(b(a(x1))) -> b(B(b(x1)))
   b(b(a(x1))) -> b(b(B(x1)))

and relative ADPs:

   a(c(b(x1))) -> B(B(c(x1)))
   a(c(b(x1))) -> B(b(C(x1)))
   a(c(b(x1))) -> b(B(C(x1)))
   a(c(b(x1))) -> C(B(c(x1)))
   a(c(b(x1))) -> C(b(C(x1)))
   a(c(b(x1))) -> c(B(C(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 2 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> b(b(B(x1)))
   b(b(a(x1))) -> B(b(b(x1)))
   b(b(a(x1))) -> b(B(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> c(b(c(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))


----------------------------------------

(6) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
B(x1)  =  x1

b(x1)  =  x1

a(x1)  =  a(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: a_1: multiset status


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(b0(a0(x1))) -> B0(b0(b0(x1)))
   B0(b0(a0(x1))) -> B0(x1)
   B0(b0(a0(x1))) -> B0(b0(x1))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(b0(x1))) -> b0(b0(c0(x1)))
   a0(c0(b0(x1))) -> c0(b0(c0(x1)))
   c0(a0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(a0(x1))) -> c0(a0(a0(x1)))
   b0(b0(a0(x1))) -> b0(b0(b0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(b0(a0(x1))) -> B0(x1)
   B0(b0(a0(x1))) -> B0(b0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(B0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = 1 + 2*x_1
   POL(c0(x_1)) = 1 + 2*x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(b0(a0(x1))) -> B0(b0(b0(x1)))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   a0(c0(b0(x1))) -> b0(b0(c0(x1)))
   a0(c0(b0(x1))) -> c0(b0(c0(x1)))
   c0(a0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(a0(x1))) -> c0(a0(a0(x1)))
   b0(b0(a0(x1))) -> b0(b0(b0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(b0(a0(x1))) -> B0(b0(b0(x1)))

Strictly oriented rules of the TRS R:

   a0(c0(b0(x1))) -> b0(b0(c0(x1)))
   a0(c0(b0(x1))) -> c0(b0(c0(x1)))
   b0(b0(a0(x1))) -> b0(b0(b0(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(B0(x_1)) = x_1
   POL(a0(x_1)) = 1 + x_1
   POL(b0(x_1)) = x_1
   POL(c0(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> b0(c0(c0(x1)))
   c0(a0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(a0(x1))) -> c0(a0(a0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> c(A(a(x1)))
   a(b(a(x1))) -> C(a(a(x1)))
   a(b(a(x1))) -> c(a(A(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(a(b(x1))) -> a(b(C(x1)))
   c(a(b(x1))) -> A(b(c(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> C(B(c(x1)))
   a(c(b(x1))) -> b(B(C(x1)))
   a(c(b(x1))) -> c(B(C(x1)))
   a(c(b(x1))) -> C(b(C(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   b(b(a(x1))) -> b(b(b(x1)))
   a(c(b(x1))) -> B(b(C(x1)))


----------------------------------------

(15) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(b(a(x1))) -> c(A(a(x1)))
   a(b(a(x1))) -> c(a(A(x1)))
   c(c(c(x1))) -> b(C(c(x1)))
   c(a(b(x1))) -> a(b(C(x1)))
   c(c(c(x1))) -> b(c(C(x1)))

Relative ADPs:

   a(c(b(x1))) -> C(B(c(x1)))
   c(c(c(x1))) -> b(c(c(x1)))
   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> b(B(C(x1)))
   a(c(b(x1))) -> c(B(C(x1)))
   a(c(b(x1))) -> C(b(C(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   b(b(a(x1))) -> b(b(b(x1)))
   a(c(b(x1))) -> B(b(C(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(b(a(x1))) -> C(a(a(x1)))
   c(a(b(x1))) -> A(b(c(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 3*x_1
   POL(B(x_1)) = 3
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> C(a(a(x1)))
   c(a(b(x1))) -> A(b(c(x1)))

and relative ADPs:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> c(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   b(b(a(x1))) -> b(b(b(x1)))


----------------------------------------

(17) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(a(x1))) -> C(a(a(x1)))
   C(a(b(x1))) -> A(b(c(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> c(b(c(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))
   b(b(a(x1))) -> b(b(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(c(b(x1))) -> b(b(c(x1)))
   a(c(b(x1))) -> c(b(c(x1)))
   b(b(a(x1))) -> b(b(b(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(a(x1))) -> C(a(a(x1)))
   C(a(b(x1))) -> A(b(c(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> b(c(c(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 3. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   c(c(c(x1))) -> b(c(c(x1)))
   c(a(b(x1))) -> a(b(c(x1)))
   a(b(a(x1))) -> c(a(a(x1)))
   A(b(a(x1))) -> C(a(a(x1)))
   C(a(b(x1))) -> A(b(c(x1)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203

Node 178 is start node and node 179 is final node.

Those nodes are connected through the following edges:

* 178 to 180 labelled b_1(0)* 178 to 182 labelled a_1(0), A_1(0)* 178 to 184 labelled c_1(0), C_1(0)* 178 to 192 labelled c_1(1), C_1(1)* 179 to 179 labelled #_1(0)* 180 to 181 labelled c_1(0)* 180 to 186 labelled b_1(1)* 180 to 194 labelled a_1(1)* 180 to 200 labelled c_1(2)* 181 to 179 labelled c_1(0)* 181 to 186 labelled b_1(1)* 181 to 188 labelled a_1(1)* 181 to 198 labelled c_1(2)* 182 to 183 labelled b_1(0)* 183 to 179 labelled c_1(0)* 183 to 186 labelled b_1(1)* 183 to 188 labelled a_1(1)* 183 to 198 labelled c_1(2)* 184 to 185 labelled a_1(0)* 185 to 179 labelled a_1(0)* 185 to 190 labelled c_1(1)* 186 to 187 labelled c_1(1)* 186 to 186 labelled b_1(1)* 186 to 196 labelled a_1(2)* 186 to 202 labelled c_1(3)* 187 to 179 labelled c_1(1)* 187 to 186 labelled b_1(1)* 187 to 188 labelled a_1(1)* 187 to 198 labelled c_1(2)* 188 to 189 labelled b_1(1)* 189 to 179 labelled c_1(1)* 189 to 186 labelled b_1(1)* 189 to 188 labelled a_1(1)* 189 to 198 labelled c_1(2)* 190 to 191 labelled a_1(1)* 191 to 179 labelled a_1(1)* 191 to 190 labelled c_1(1)* 192 to 193 labelled a_1(1)* 193 to 188 labelled a_1(1)* 193 to 198 labelled c_1(2)* 194 to 195 labelled b_1(1)* 195 to 189 labelled c_1(1)* 195 to 186 labelled b_1(1)* 195 to 196 labelled a_1(2)* 195 to 202 labelled c_1(3)* 196 to 197 labelled b_1(2)* 197 to 189 labelled c_1(2)* 197 to 186 labelled b_1(1)* 197 to 196 labelled a_1(2)* 197 to 202 labelled c_1(3)* 198 to 199 labelled a_1(2)* 199 to 188 labelled a_1(2)* 199 to 198 labelled c_1(2)* 200 to 201 labelled a_1(2)* 201 to 196 labelled a_1(2)* 201 to 202 labelled c_1(3)* 202 to 203 labelled a_1(3)* 203 to 196 labelled a_1(3)* 203 to 202 labelled c_1(3)


----------------------------------------

(22)
YES
