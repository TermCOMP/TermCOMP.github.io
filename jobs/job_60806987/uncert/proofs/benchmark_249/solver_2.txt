YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/l94DD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPReductionPairProof [EQUIVALENT, 47 ms]
(6) RelADPP
(7) DAbsisEmptyProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   c(c(a(x1))) -> c(a(b(x1)))
   b(b(b(x1))) -> a(a(a(x1)))
   b(b(a(x1))) -> c(c(a(x1)))

The relative TRS consists of the following S rules:

   c(a(a(x1))) -> a(a(a(x1)))
   b(c(b(x1))) -> c(b(a(x1)))
   b(a(a(x1))) -> c(c(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(a(x1))) -> C(a(b(x1)))
   c(c(a(x1))) -> c(a(B(x1)))
   b(b(b(x1))) -> a(a(a(x1)))
   b(b(a(x1))) -> C(c(a(x1)))
   b(b(a(x1))) -> c(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(a(a(x1)))
   b(c(b(x1))) -> C(B(a(x1)))
   b(a(a(x1))) -> C(C(c(x1)))
   b(a(a(x1))) -> C(c(C(x1)))
   b(a(a(x1))) -> c(C(C(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(a(x1))) -> c(a(B(x1)))
   b(b(a(x1))) -> C(c(a(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(c(a(x1)))
   c(a(a(x1))) -> a(a(a(x1)))
   c(c(a(x1))) -> c(a(b(x1)))
   b(b(b(x1))) -> a(a(a(x1)))
   b(a(a(x1))) -> C(C(c(x1)))
   b(a(a(x1))) -> c(C(C(x1)))
   b(c(b(x1))) -> C(B(a(x1)))
   b(a(a(x1))) -> C(c(C(x1)))


----------------------------------------

(5) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(c(a(x1))) -> c(a(B(x1)))
   b(b(a(x1))) -> C(c(a(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(c(a(x1)))
   c(a(a(x1))) -> a(a(a(x1)))
   c(c(a(x1))) -> c(a(b(x1)))
   b(b(b(x1))) -> a(a(a(x1)))
   b(a(a(x1))) -> C(C(c(x1)))
   b(a(a(x1))) -> c(C(C(x1)))
   b(c(b(x1))) -> C(B(a(x1)))
   b(a(a(x1))) -> C(c(C(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(B(x_1)) = 2 + 3*x_1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(c(a(x1)))
   c(a(a(x1))) -> a(a(a(x1)))
   c(c(a(x1))) -> c(a(b(x1)))
   b(b(b(x1))) -> a(a(a(x1)))
   b(c(b(x1))) -> c(b(a(x1)))
   b(a(a(x1))) -> c(c(c(x1)))


----------------------------------------

(7) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8)
YES
