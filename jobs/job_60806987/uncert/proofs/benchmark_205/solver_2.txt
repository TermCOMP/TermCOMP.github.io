YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/w1yQY.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDerelatifying2Proof [SOUND, 0 ms]
(4) OR
    (5) RelADPP
        (6) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (7) RelADPP
        (8) RelADPCleverAfsProof [SOUND, 20 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 7 ms]
        (11) QDP
        (12) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPReductionPairProof [EQUIVALENT, 8 ms]
        (16) RelADPP
        (17) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (18) RelADPP
        (19) RelADPCleverAfsProof [SOUND, 12 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 2 ms]
        (22) QDP


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> a(a(c(x1)))
   b(c(a(x1))) -> b(a(b(x1)))
   a(b(c(x1))) -> b(a(c(x1)))

The relative TRS consists of the following S rules:

   a(c(b(x1))) -> c(c(b(x1)))
   b(c(b(x1))) -> a(b(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(c(b(x1))) -> a(A(c(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   a(b(c(x1))) -> b(A(c(x1)))

and relative ADPs:

   a(c(b(x1))) -> c(c(B(x1)))
   b(c(b(x1))) -> A(B(c(x1)))


----------------------------------------

(3) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4)
Complex Obligation (OR)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(c(b(x1))) -> c(c(B(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

and relative ADPs:

   b(c(b(x1))) -> A(B(c(x1)))


----------------------------------------

(6) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(c(b(x1))) -> c(c(B(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(b(x1))) -> a(B(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

and no relative ADPs.
----------------------------------------

(8) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: [A_1, B_1] > [c_1, b_1, a_1]

Status: A_1: multiset status
c_1: multiset status
b_1: multiset status
a_1: multiset status
B_1: multiset status


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(c0(b0(x1))) -> A0(a0(c0(x1)))
   B0(c0(a0(x1))) -> A0(b0(x1))
   B0(c0(a0(x1))) -> B0(a0(b0(x1)))
   A0(b0(c0(x1))) -> B0(a0(c0(x1)))
   B0(c0(a0(x1))) -> B0(x1)
   A0(c0(b0(x1))) -> B0(x1)
   B0(c0(b0(x1))) -> B0(c0(x1))
   B0(c0(b0(x1))) -> A0(b0(c0(x1)))
   A0(c0(b0(x1))) -> A0(c0(x1))
   A0(b0(c0(x1))) -> A0(c0(x1))

The TRS R consists of the following rules:

   a0(c0(b0(x1))) -> a0(a0(c0(x1)))
   a0(c0(b0(x1))) -> c0(c0(b0(x1)))
   a0(a0(c0(x1))) -> c0(c0(c0(x1)))
   b0(c0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(c0(x1))) -> b0(a0(c0(x1)))
   b0(c0(a0(x1))) -> b0(a0(b0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(c0(a0(x1))) -> A0(b0(x1))
   B0(c0(a0(x1))) -> B0(x1)
   A0(c0(b0(x1))) -> B0(x1)
   B0(c0(b0(x1))) -> B0(c0(x1))
   A0(c0(b0(x1))) -> A0(c0(x1))
   A0(b0(c0(x1))) -> A0(c0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(A0(x_1)) = 2*x_1
   POL(B0(x_1)) = 2*x_1
   POL(a0(x_1)) = 2 + 2*x_1
   POL(b0(x_1)) = 2 + 2*x_1
   POL(c0(x_1)) = 2 + 2*x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(c0(b0(x1))) -> A0(a0(c0(x1)))
   B0(c0(a0(x1))) -> B0(a0(b0(x1)))
   A0(b0(c0(x1))) -> B0(a0(c0(x1)))
   B0(c0(b0(x1))) -> A0(b0(c0(x1)))

The TRS R consists of the following rules:

   a0(c0(b0(x1))) -> a0(a0(c0(x1)))
   a0(c0(b0(x1))) -> c0(c0(b0(x1)))
   a0(a0(c0(x1))) -> c0(c0(c0(x1)))
   b0(c0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(c0(x1))) -> b0(a0(c0(x1)))
   b0(c0(a0(x1))) -> b0(a0(b0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   a0(c0(b0(x1))) -> a0(a0(c0(x1)))
   a0(c0(b0(x1))) -> c0(c0(b0(x1)))
   a0(a0(c0(x1))) -> c0(c0(c0(x1)))
   b0(c0(b0(x1))) -> a0(b0(c0(x1)))
   a0(b0(c0(x1))) -> b0(a0(c0(x1)))
   b0(c0(a0(x1))) -> b0(a0(b0(x1)))
   A0(c0(b0(x1))) -> A0(a0(c0(x1)))
   B0(c0(a0(x1))) -> B0(a0(b0(x1)))
   A0(b0(c0(x1))) -> B0(a0(c0(x1)))
   B0(c0(b0(x1))) -> A0(b0(c0(x1)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378

Node 357 is start node and node 358 is final node.

Those nodes are connected through the following edges:

* 357 to 359 labelled a0_1(0), b0_1(0), A0_1(0), B0_1(0), b0_1(1), B0_1(1)* 357 to 361 labelled c0_1(0)* 357 to 363 labelled a0_1(0), A0_1(0)* 357 to 369 labelled c0_1(1)* 357 to 371 labelled b0_1(1), B0_1(1)* 358 to 358 labelled #_1(0)* 359 to 360 labelled a0_1(0)* 359 to 371 labelled a0_1(1), b0_1(1)* 359 to 373 labelled c0_1(1)* 359 to 375 labelled c0_1(2)* 359 to 359 labelled b0_1(1)* 360 to 358 labelled c0_1(0), b0_1(0)* 360 to 365 labelled a0_1(1)* 360 to 367 labelled b0_1(1)* 360 to 377 labelled b0_1(2)* 361 to 362 labelled c0_1(0)* 362 to 358 labelled b0_1(0), c0_1(0)* 362 to 365 labelled a0_1(1)* 362 to 367 labelled b0_1(1)* 362 to 377 labelled b0_1(2)* 363 to 364 labelled b0_1(0)* 363 to 365 labelled a0_1(1)* 363 to 367 labelled b0_1(1)* 363 to 377 labelled b0_1(2)* 364 to 358 labelled c0_1(0)* 365 to 366 labelled b0_1(1)* 365 to 365 labelled a0_1(1)* 365 to 367 labelled b0_1(1)* 365 to 377 labelled b0_1(2)* 366 to 358 labelled c0_1(1)* 367 to 368 labelled a0_1(1)* 367 to 371 labelled b0_1(1)* 367 to 377 labelled b0_1(2)* 368 to 358 labelled b0_1(1)* 368 to 365 labelled a0_1(1)* 368 to 367 labelled b0_1(1)* 368 to 377 labelled b0_1(2)* 369 to 370 labelled c0_1(1)* 370 to 358 labelled c0_1(1)* 370 to 373 labelled c0_1(1)* 370 to 375 labelled c0_1(1)* 371 to 372 labelled a0_1(1)* 371 to 371 labelled a0_1(1)* 371 to 373 labelled c0_1(1)* 371 to 375 labelled c0_1(2), c0_1(1)* 372 to 358 labelled c0_1(1)* 373 to 374 labelled c0_1(1)* 374 to 358 labelled b0_1(1)* 374 to 365 labelled a0_1(1)* 374 to 367 labelled b0_1(1)* 374 to 377 labelled b0_1(2)* 375 to 376 labelled c0_1(2)* 376 to 358 labelled c0_1(2)* 376 to 373 labelled c0_1(2)* 376 to 375 labelled c0_1(2)* 377 to 378 labelled a0_1(2)* 377 to 371 labelled a0_1(1)* 377 to 373 labelled c0_1(1)* 377 to 375 labelled c0_1(2)* 378 to 358 labelled c0_1(2)* 378 to 373 labelled c0_1(2)* 378 to 375 labelled c0_1(2)


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(b(x1))) -> a(B(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

and relative ADPs:

   a(c(b(x1))) -> c(c(B(x1)))


----------------------------------------

(15) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(c(x1))) -> c(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(b(x1))) -> a(B(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

Relative ADPs:

   a(c(b(x1))) -> c(c(B(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(B(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> b(a(B(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(c(b(x1))) -> A(a(c(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(b(x1))) -> a(B(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

and relative ADPs:

   a(a(c(x1))) -> c(c(c(x1)))
   a(c(b(x1))) -> c(c(B(x1)))


----------------------------------------

(17) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(c(a(x1))) -> b(a(B(x1)))
   a(b(c(x1))) -> b(A(c(x1)))
   b(c(b(x1))) -> a(B(c(x1)))
   b(c(a(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> a(A(c(x1)))

Relative ADPs:

   a(c(b(x1))) -> c(c(B(x1)))
   a(a(c(x1))) -> c(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(c(b(x1))) -> A(a(c(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> A(b(c(x1)))
   a(b(c(x1))) -> B(a(c(x1)))
   b(c(a(x1))) -> B(a(b(x1)))
   a(c(b(x1))) -> A(a(c(x1)))

and relative ADPs:

   a(c(b(x1))) -> a(a(c(x1)))
   a(c(b(x1))) -> c(c(b(x1)))
   a(a(c(x1))) -> c(c(c(x1)))
   b(c(b(x1))) -> a(b(c(x1)))
   a(b(c(x1))) -> b(a(c(x1)))
   b(c(a(x1))) -> b(a(b(x1)))


----------------------------------------

(19) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 0
c_1 = 0
B_1 = 
A_1 = 0

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  A

c(x1)  =  c

b(x1)  =  b

a(x1)  =  x1

B(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [A, c] > b

Status: A: multiset status
c: multiset status
b: multiset status


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A
   B0(c) -> B0(a0(b))
   A -> B0(a0(c))
   B0(c) -> A

The TRS R consists of the following rules:

   a0(c) -> a0(a0(c))
   a0(c) -> c
   a0(a0(c)) -> c
   b -> a0(b)
   a0(b) -> b
   b -> b

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(c) -> B0(a0(b))


Used ordering: Polynomial interpretation [POLO]:

   POL(A) = 2
   POL(B0(x_1)) = x_1
   POL(a0(x_1)) = x_1
   POL(b) = 1
   POL(c) = 2


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A -> A
   A -> B0(a0(c))
   B0(c) -> A

The TRS R consists of the following rules:

   a0(c) -> a0(a0(c))
   a0(c) -> c
   a0(a0(c)) -> c
   b -> a0(b)
   a0(b) -> b
   b -> b

Q is empty.
We have to consider all (P,Q,R)-chains.