YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/h7UCF.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPCleverAfsProof [SOUND, 39 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 0 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(a(x1))) -> a(b(b(a(x1))))

The relative TRS consists of the following S rules:

   b(x1) -> b(b(x1))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> A(b(b(a(x1))))
   a(b(a(x1))) -> a(B(b(a(x1))))
   a(b(a(x1))) -> a(b(B(a(x1))))
   a(b(a(x1))) -> a(b(b(A(x1))))

and relative ADPs:

   b(x1) -> B(B(x1))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(a(x1))) -> A(b(b(a(x1))))
   a(b(a(x1))) -> a(b(b(A(x1))))

and relative ADPs:

   b(x1) -> b(b(x1))
   a(b(a(x1))) -> a(b(b(a(x1))))


----------------------------------------

(5) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
A_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
A(x1)  =  x1

b(x1)  =  x1

a(x1)  =  a(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: a_1: multiset status


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(b0(a0(x1))) -> A0(b0(b0(a0(x1))))
   A0(b0(a0(x1))) -> A0(x1)

The TRS R consists of the following rules:

   b0(x1) -> b0(b0(x1))
   a0(b0(a0(x1))) -> a0(b0(b0(a0(x1))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A0(b0(a0(x1))) -> A0(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(A0(x_1)) = 2*x_1
   POL(a0(x_1)) = 2 + 2*x_1
   POL(b0(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A0(b0(a0(x1))) -> A0(b0(b0(a0(x1))))

The TRS R consists of the following rules:

   b0(x1) -> b0(b0(x1))
   a0(b0(a0(x1))) -> a0(b0(b0(a0(x1))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A0(b0(a0(x1))) -> A0(b0(b0(a0(x1))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(A0(x_1)) = [4]x_1
   POL(a0(x_1)) = [4]
   POL(b0(x_1)) = [1/4]x_1
The value of delta used in the strict ordering is 3.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b0(x1) -> b0(b0(x1))
   a0(b0(a0(x1))) -> a0(b0(b0(a0(x1))))


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b0(x1) -> b0(b0(x1))
   a0(b0(a0(x1))) -> a0(b0(b0(a0(x1))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
