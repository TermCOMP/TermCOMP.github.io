YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/K4lbO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPReductionPairProof [EQUIVALENT, 79 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) RelADPP
        (8) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (9) RelADPP
        (10) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) RFCMatchBoundsDPProof [EQUIVALENT, 6 ms]
        (15) YES
    (16) RelADPP
        (17) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 8 ms]
        (20) QDP
        (21) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) RelADPP
        (24) RelADPReductionPairProof [EQUIVALENT, 22 ms]
        (25) RelADPP
        (26) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) MRRProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(c(b(x1))) -> a(a(b(x1)))
   b(c(b(x1))) -> b(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))

The relative TRS consists of the following S rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   c(b(c(x1))) -> b(a(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))
   a(c(b(x1))) -> a(A(b(x1)))
   a(c(b(x1))) -> a(a(B(x1)))
   b(c(b(x1))) -> B(a(b(x1)))
   b(c(b(x1))) -> b(A(b(x1)))
   b(c(b(x1))) -> b(a(B(x1)))
   a(c(b(x1))) -> B(a(a(x1)))
   a(c(b(x1))) -> b(A(a(x1)))
   a(c(b(x1))) -> b(a(A(x1)))

and relative ADPs:

   a(b(a(x1))) -> C(A(b(x1)))
   a(b(a(x1))) -> C(a(B(x1)))
   a(b(a(x1))) -> c(A(B(x1)))
   a(b(a(x1))) -> C(C(a(x1)))
   a(b(a(x1))) -> C(c(A(x1)))
   a(b(a(x1))) -> c(C(A(x1)))
   a(b(c(x1))) -> C(C(a(x1)))
   a(b(c(x1))) -> C(c(A(x1)))
   a(b(c(x1))) -> c(C(A(x1)))
   c(b(c(x1))) -> B(A(c(x1)))
   c(b(c(x1))) -> B(a(C(x1)))
   c(b(c(x1))) -> b(A(C(x1)))


----------------------------------------

(3) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(c(b(x1))) -> b(A(a(x1)))
   a(c(b(x1))) -> a(A(b(x1)))
   a(c(b(x1))) -> b(a(A(x1)))
   b(c(b(x1))) -> b(a(B(x1)))
   a(c(b(x1))) -> B(a(a(x1)))
   a(c(b(x1))) -> a(a(B(x1)))

Relative ADPs:

   a(b(a(x1))) -> c(C(A(x1)))
   c(b(c(x1))) -> B(a(C(x1)))
   a(b(c(x1))) -> C(c(A(x1)))
   a(b(a(x1))) -> C(a(B(x1)))
   a(b(a(x1))) -> c(A(B(x1)))
   a(b(a(x1))) -> C(c(A(x1)))
   a(b(c(x1))) -> c(C(A(x1)))
   c(b(c(x1))) -> B(A(c(x1)))
   a(b(c(x1))) -> C(C(a(x1)))
   c(b(c(x1))) -> b(A(C(x1)))
   a(b(a(x1))) -> C(C(a(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(c(b(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> A(a(b(x1)))
   b(c(b(x1))) -> B(a(b(x1)))

Relative ADPs:

   a(b(a(x1))) -> C(A(b(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> b(A(b(x1)))
   a(c(b(x1))) -> A(a(b(x1)))
   b(c(b(x1))) -> B(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(b(a(x1))) -> C(A(b(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  2 SCCs with nodes from P_abs,
  1 Lasso,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(b(a(x1))) -> C(A(b(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(8) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(b(a(x1))) -> C(A(b(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 3 + 3*x_1 + x_1^2
   POL(C(x_1)) = 0
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(10) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))
   A(c(b(x1))) -> A(a(b(x1)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452

Node 435 is start node and node 436 is final node.

Those nodes are connected through the following edges:

* 435 to 437 labelled c_1(0), a_1(0), b_1(0), A_1(0)* 435 to 439 labelled b_1(0)* 436 to 436 labelled #_1(0)* 437 to 438 labelled a_1(0)* 437 to 441 labelled c_1(1)* 438 to 436 labelled b_1(0)* 438 to 441 labelled b_1(1)* 439 to 440 labelled a_1(0)* 439 to 443 labelled b_1(1)* 439 to 441 labelled a_1(1), c_1(1)* 439 to 445 labelled c_1(1)* 440 to 436 labelled a_1(0), c_1(0)* 440 to 441 labelled c_1(1), a_1(1)* 440 to 443 labelled b_1(1)* 441 to 442 labelled a_1(1)* 441 to 441 labelled c_1(1)* 441 to 447 labelled c_1(2)* 442 to 436 labelled b_1(1)* 442 to 441 labelled b_1(1)* 442 to 442 labelled b_1(1)* 443 to 444 labelled a_1(1)* 443 to 443 labelled b_1(1)* 443 to 441 labelled a_1(1)* 443 to 449 labelled c_1(2)* 444 to 436 labelled a_1(1), c_1(1)* 444 to 441 labelled c_1(1), a_1(1)* 444 to 443 labelled b_1(1)* 445 to 446 labelled a_1(1)* 445 to 451 labelled c_1(2)* 445 to 449 labelled c_1(2)* 445 to 447 labelled c_1(2)* 446 to 444 labelled b_1(1)* 446 to 441 labelled b_1(1)* 447 to 448 labelled a_1(2)* 448 to 442 labelled b_1(2)* 449 to 450 labelled a_1(2)* 449 to 447 labelled c_1(2)* 449 to 451 labelled c_1(2)* 449 to 449 labelled c_1(2)* 450 to 444 labelled b_1(2)* 450 to 441 labelled b_1(2), b_1(1)* 451 to 452 labelled a_1(2)* 451 to 441 labelled c_1(1)* 451 to 447 labelled c_1(2)* 452 to 436 labelled b_1(2)* 452 to 441 labelled b_1(1)


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(b(x1))) -> B(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(17) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(x1))) -> B(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(B(x_1)) = x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(b(x1))) -> B(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))
   B(c(b(x1))) -> B(a(b(x1)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 483, 484, 485, 486, 487, 488

Node 459 is start node and node 460 is final node.

Those nodes are connected through the following edges:

* 459 to 465 labelled c_1(0), a_1(0), b_1(0), B_1(0)* 459 to 467 labelled b_1(0)* 460 to 460 labelled #_1(0)* 465 to 466 labelled a_1(0)* 465 to 469 labelled c_1(1)* 466 to 460 labelled b_1(0)* 466 to 469 labelled b_1(1)* 467 to 468 labelled a_1(0)* 467 to 471 labelled b_1(1)* 467 to 469 labelled a_1(1), c_1(1)* 467 to 475 labelled c_1(1)* 468 to 460 labelled a_1(0), c_1(0)* 468 to 469 labelled c_1(1), a_1(1)* 468 to 471 labelled b_1(1)* 469 to 470 labelled a_1(1)* 469 to 469 labelled c_1(1)* 469 to 483 labelled c_1(2)* 470 to 460 labelled b_1(1)* 470 to 469 labelled b_1(1)* 470 to 470 labelled b_1(1)* 471 to 472 labelled a_1(1)* 471 to 471 labelled b_1(1)* 471 to 469 labelled a_1(1)* 471 to 485 labelled c_1(2)* 472 to 460 labelled a_1(1), c_1(1)* 472 to 469 labelled c_1(1), a_1(1)* 472 to 471 labelled b_1(1)* 475 to 476 labelled a_1(1)* 475 to 487 labelled c_1(2)* 475 to 485 labelled c_1(2)* 475 to 483 labelled c_1(2)* 476 to 472 labelled b_1(1)* 476 to 469 labelled b_1(1)* 483 to 484 labelled a_1(2)* 484 to 470 labelled b_1(2)* 485 to 486 labelled a_1(2)* 485 to 483 labelled c_1(2)* 485 to 487 labelled c_1(2)* 485 to 485 labelled c_1(2)* 486 to 472 labelled b_1(2)* 486 to 469 labelled b_1(2), b_1(1)* 487 to 488 labelled a_1(2)* 487 to 469 labelled c_1(1)* 487 to 483 labelled c_1(2)* 488 to 460 labelled b_1(2)* 488 to 469 labelled b_1(1)


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(b(a(x1))) -> C(A(b(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(24) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(b(a(x1))) -> C(A(b(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 3 + 3*x_1 + x_1^2
   POL(C(x_1)) = 0
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(b(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))


----------------------------------------

(26) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   a(b(a(x1))) -> c(c(a(x1)))
   a(b(c(x1))) -> c(c(a(x1)))

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = x_1


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(a(b(x1)))

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) RFCMatchBoundsDPProof (EQUIVALENT)
Termination of the TRS P cup R can be shown by a matchbound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies finiteness of the given DP problem.
The following rules (P cup R) were used to construct the certificate:

   a(b(a(x1))) -> c(a(b(x1)))
   a(c(b(x1))) -> b(a(a(x1)))
   a(c(b(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> b(a(c(x1)))
   b(c(b(x1))) -> b(a(b(x1)))
   A(c(b(x1))) -> A(a(b(x1)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 473, 474, 477, 478, 479, 480, 481, 482

Node 453 is start node and node 454 is final node.

Those nodes are connected through the following edges:

* 453 to 455 labelled c_1(0), a_1(0), b_1(0), A_1(0)* 453 to 457 labelled b_1(0)* 454 to 454 labelled #_1(0)* 455 to 456 labelled a_1(0)* 455 to 461 labelled c_1(1)* 456 to 454 labelled b_1(0)* 456 to 461 labelled b_1(1)* 457 to 458 labelled a_1(0)* 457 to 463 labelled b_1(1)* 457 to 461 labelled a_1(1), c_1(1)* 457 to 473 labelled c_1(1)* 458 to 454 labelled a_1(0), c_1(0)* 458 to 461 labelled c_1(1), a_1(1)* 458 to 463 labelled b_1(1)* 461 to 462 labelled a_1(1)* 461 to 461 labelled c_1(1)* 461 to 477 labelled c_1(2)* 462 to 454 labelled b_1(1)* 462 to 461 labelled b_1(1)* 462 to 462 labelled b_1(1)* 463 to 464 labelled a_1(1)* 463 to 463 labelled b_1(1)* 463 to 461 labelled a_1(1)* 463 to 479 labelled c_1(2)* 464 to 454 labelled a_1(1), c_1(1)* 464 to 461 labelled c_1(1), a_1(1)* 464 to 463 labelled b_1(1)* 473 to 474 labelled a_1(1)* 473 to 481 labelled c_1(2)* 473 to 479 labelled c_1(2)* 473 to 477 labelled c_1(2)* 474 to 464 labelled b_1(1)* 474 to 461 labelled b_1(1)* 477 to 478 labelled a_1(2)* 478 to 462 labelled b_1(2)* 479 to 480 labelled a_1(2)* 479 to 477 labelled c_1(2)* 479 to 481 labelled c_1(2)* 479 to 479 labelled c_1(2)* 480 to 464 labelled b_1(2)* 480 to 461 labelled b_1(2), b_1(1)* 481 to 482 labelled a_1(2)* 481 to 461 labelled c_1(1)* 481 to 477 labelled c_1(2)* 482 to 454 labelled b_1(2)* 482 to 461 labelled b_1(1)


----------------------------------------

(31)
YES
