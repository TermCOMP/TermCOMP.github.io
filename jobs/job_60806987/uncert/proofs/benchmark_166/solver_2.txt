YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8stfD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPReductionPairProof [EQUIVALENT, 30 ms]
(4) RelADPP
(5) RelADPRuleRemovalProof [EQUIVALENT, 1 ms]
(6) RelADPP
(7) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) RelADPP
        (10) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) RelADPP
        (12) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) RelADPP
        (15) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (16) RelADPP
        (17) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) RelADPP
        (20) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (21) RelADPP
        (22) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) RelADPP
        (25) RelADPReductionPairProof [EQUIVALENT, 0 ms]
        (26) RelADPP
        (27) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   n(s(x1)) -> s(x1)
   o(s(x1)) -> s(x1)

The relative TRS consists of the following S rules:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> n(c(x1))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)
   o(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> T(C(n(x1)))
   t(x1) -> T(c(N(x1)))
   t(x1) -> t(C(N(x1)))
   c(n(x1)) -> N(C(x1))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> O(x1)


----------------------------------------

(3) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   t(x1) -> t(C(N(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   o(s(x1)) -> s(x1)
   n(s(x1)) -> s(x1)

Relative ADPs:

   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> O(x1)
   t(x1) -> T(C(n(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = 0
   POL(N(x_1)) = 0
   POL(O(x_1)) = 0
   POL(T(x_1)) = 2
   POL(c(x_1)) = 0
   POL(n(x_1)) = 0
   POL(o(x_1)) = 0
   POL(s(x_1)) = 0
   POL(t(x_1)) = 0

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   o(s(x1)) -> s(x1)
   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> O(x1)
   t(x1) -> T(C(n(x1)))


----------------------------------------

(5) RelADPRuleRemovalProof (EQUIVALENT)


We use the rule removal processor [IJCAR24].
The following rules can be ordered strictly and therefore removed:

   o(s(x1)) -> s(x1)

c:

   n(s(x1)) -> s(x1)

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> O(x1)
   t(x1) -> T(C(n(x1)))

Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = x_1
   POL(N(x_1)) = 3*x_1
   POL(O(x_1)) = 3*x_1
   POL(T(x_1)) = 3*x_1
   POL(c(x_1)) = x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = 3*x_1
   POL(t(x_1)) = 2*x_1

----------------------------------------

(6)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> O(x1)
   t(x1) -> T(C(n(x1)))


----------------------------------------

(7) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(10) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(n(x1)) -> N(C(x1))
   t(x1) -> t(c(n(x1)))
   c(o(x1)) -> O(C(x1))
   c(o(x1)) -> o(x1)


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   n(s(x1)) -> s(x1)

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = 3 + 2*x_1
   POL(N(x_1)) = 0
   POL(O(x_1)) = 0
   POL(T(x_1)) = 0
   POL(c(x_1)) = 2 + 2*x_1
   POL(n(x_1)) = 3 + 2*x_1
   POL(o(x_1)) = 3 + 2*x_1
   POL(s(x_1)) = 3*x_1
   POL(t(x_1)) = 0

----------------------------------------

(11)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> n(c(x1))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(12) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(15) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(s(x1)) -> s(x1)

Relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = 0
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 0
   POL(T(x_1)) = 2*x_1
   POL(c(x_1)) = 0
   POL(n(x_1)) = 2*x_1
   POL(o(x_1)) = 0
   POL(s(x_1)) = 1
   POL(t(x_1)) = 0

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   n(s(x1)) -> s(x1)
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(17) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(x1)


----------------------------------------

(20) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(s(x1)) -> s(x1)

Relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(o(x1)) -> o(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = 0
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 0
   POL(T(x_1)) = 2*x_1
   POL(c(x_1)) = 0
   POL(n(x_1)) = 2*x_1
   POL(o(x_1)) = 0
   POL(s(x_1)) = 2
   POL(t(x_1)) = 0

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> N(C(x1))
   t(x1) -> T(c(N(x1)))
   c(o(x1)) -> O(C(x1))
   n(s(x1)) -> s(x1)
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(x1)


----------------------------------------

(22) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Relative ADP Problem with
absolute ADPs:

   n(s(x1)) -> s(x1)

and relative ADPs:

   t(x1) -> t(c(n(x1)))
   t(x1) -> T(c(N(x1)))
   c(n(x1)) -> n(c(x1))
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(25) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   n(s(x1)) -> s(x1)

Relative ADPs:

   t(x1) -> t(c(n(x1)))
   c(n(x1)) -> n(c(x1))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(C(x_1)) = 0
   POL(N(x_1)) = 2*x_1
   POL(O(x_1)) = 0
   POL(T(x_1)) = 3*x_1
   POL(c(x_1)) = 0
   POL(n(x_1)) = 3*x_1
   POL(o(x_1)) = 0
   POL(s(x_1)) = 1 + 3*x_1
   POL(t(x_1)) = 0

----------------------------------------

(26)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   t(x1) -> t(c(n(x1)))
   t(x1) -> T(c(N(x1)))
   n(s(x1)) -> s(x1)
   c(n(x1)) -> n(c(x1))
   t(x1) -> T(C(n(x1)))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)


----------------------------------------

(27) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(28)
YES
