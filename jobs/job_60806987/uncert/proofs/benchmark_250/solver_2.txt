YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Gyv6t.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 26 ms]
        (7) RelADPP
        (8) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) RelADPP
        (11) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (12) OR
            (13) RelADPP
                (14) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (15) AND
                    (16) RelADPP
                        (17) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (18) RelADPP
                        (19) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (20) YES
                    (21) RelADPP
                        (22) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (23) RelADPP
                        (24) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (25) YES
                    (26) RelADPP
                        (27) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                        (28) RelADPP
                        (29) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (30) YES
                    (31) RelADPP
                        (32) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (33) OR
                            (34) RelADPP
                                (35) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (36) AND
                                    (37) RelADPP
                                        (38) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (39) RelADPP
                                        (40) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (41) YES
                                    (42) RelADPP
                                        (43) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (44) RelADPP
                                        (45) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (46) YES
                                    (47) RelADPP
                                        (48) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (49) RelADPP
                                        (50) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (51) YES
                                    (52) RelADPP
                                        (53) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (54) OR
                                            (55) RelADPP
                                                (56) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (57) AND
                                                    (58) RelADPP
                                                        (59) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (60) RelADPP
                                                        (61) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (62) YES
                                                    (63) RelADPP
                                                        (64) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (65) RelADPP
                                                        (66) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (67) TRUE
                                                    (68) RelADPP
                                                        (69) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (70) RelADPP
                                                        (71) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (72) YES
                                                    (73) RelADPP
                                                        (74) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (75) RelADPP
                                                        (76) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (77) YES
                                            (78) RelADPP
                                                (79) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (80) AND
                                                    (81) RelADPP
                                                        (82) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (83) RelADPP
                                                        (84) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (85) YES
                                                    (86) RelADPP
                                                        (87) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (88) RelADPP
                                                        (89) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (90) YES
                                                    (91) RelADPP
                                                        (92) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (93) RelADPP
                                                        (94) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (95) YES
                                                    (96) RelADPP
                                            (97) RelADPP
                                                (98) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (99) AND
                                                    (100) RelADPP
                                                        (101) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (102) RelADPP
                                                        (103) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (104) YES
                                                    (105) RelADPP
                                                        (106) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (107) RelADPP
                                                        (108) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (109) YES
                                                    (110) RelADPP
                                                        (111) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (112) OR
                                                            (113) RelADPP
                                                            (114) RelADPP
                                                    (115) RelADPP
                                                        (116) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (117) RelADPP
                                                        (118) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (119) YES
                            (120) RelADPP
                                (121) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (122) AND
                                    (123) RelADPP
                                        (124) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (125) RelADPP
                                        (126) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (127) YES
                                    (128) RelADPP
                                        (129) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (130) OR
                                            (131) RelADPP
                                                (132) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (133) AND
                                                    (134) RelADPP
                                                        (135) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (136) RelADPP
                                                        (137) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (138) YES
                                                    (139) RelADPP
                                                        (140) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (141) RelADPP
                                                        (142) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (143) YES
                                                    (144) RelADPP
                                                        (145) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (146) RelADPP
                                                        (147) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (148) YES
                                                    (149) RelADPP
                                                        (150) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (151) RelADPP
                                                        (152) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (153) TRUE
                                            (154) RelADPP
                                                (155) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (156) AND
                                                    (157) RelADPP
                                                        (158) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (159) RelADPP
                                                        (160) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (161) YES
                                                    (162) RelADPP
                                                    (163) RelADPP
                                                        (164) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (165) RelADPP
                                                        (166) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (167) YES
                                                    (168) RelADPP
                                                        (169) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (170) RelADPP
                                                        (171) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (172) YES
                                            (173) RelADPP
                                                (174) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (175) AND
                                                    (176) RelADPP
                                                        (177) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (178) RelADPP
                                                        (179) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (180) YES
                                                    (181) RelADPP
                                                        (182) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (183) RelADPP
                                                        (184) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (185) YES
                                                    (186) RelADPP
                                                        (187) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (188) RelADPP
                                                        (189) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (190) YES
                                                    (191) RelADPP
                                                        (192) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (193) OR
                                                            (194) RelADPP
                                                            (195) RelADPP
                                    (196) RelADPP
                                        (197) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (198) RelADPP
                                        (199) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (200) YES
                                    (201) RelADPP
                                        (202) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (203) RelADPP
                                        (204) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (205) YES
                            (206) RelADPP
                                (207) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (208) AND
                                    (209) RelADPP
                                        (210) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (211) RelADPP
                                        (212) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (213) YES
                                    (214) RelADPP
                                        (215) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (216) RelADPP
                                        (217) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (218) YES
                                    (219) RelADPP
                                        (220) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (221) RelADPP
                                        (222) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (223) YES
                                    (224) RelADPP
                                        (225) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (226) OR
                                            (227) RelADPP
                                                (228) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (229) AND
                                                    (230) RelADPP
                                                        (231) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (232) RelADPP
                                                        (233) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (234) YES
                                                    (235) RelADPP
                                                        (236) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (237) RelADPP
                                                        (238) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (239) YES
                                                    (240) RelADPP
                                                        (241) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (242) RelADPP
                                                        (243) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (244) YES
                                                    (245) RelADPP
                                                        (246) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (247) OR
                                                            (248) RelADPP
                                                                (249) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (250) AND
                                                                    (251) RelADPP
                                                                        (252) RelADPReductionPairProof [EQUIVALENT, 13 ms]
                                                                        (253) RelADPP
                                                                    (254) RelADPP
                                                                        (255) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (256) RelADPP
                                                                    (257) RelADPP
                                                                        (258) RelADPReductionPairProof [EQUIVALENT, 13 ms]
                                                                        (259) RelADPP
                                                            (260) RelADPP
                                                                (261) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (262) AND
                                                                    (263) RelADPP
                                                                        (264) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (265) RelADPP
                                                                    (266) RelADPP
                                                                        (267) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (268) RelADPP
                                                                    (269) RelADPP
                                                                    (270) RelADPP
                                                                        (271) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                                        (272) RelADPP
                                            (273) RelADPP
                                                (274) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (275) AND
                                                    (276) RelADPP
                                                        (277) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (278) RelADPP
                                                        (279) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (280) YES
                                                    (281) RelADPP
                                                        (282) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (283) OR
                                                            (284) RelADPP
                                                                (285) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (286) AND
                                                                    (287) RelADPP
                                                                        (288) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (289) RelADPP
                                                                    (290) RelADPP
                                                                        (291) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (292) RelADPP
                                                                    (293) RelADPP
                                                                        (294) RelADPReductionPairProof [EQUIVALENT, 17 ms]
                                                                        (295) RelADPP
                                                            (296) RelADPP
                                                                (297) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (298) AND
                                                                    (299) RelADPP
                                                                        (300) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (301) RelADPP
                                                                    (302) RelADPP
                                                                        (303) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (304) RelADPP
                                                                    (305) RelADPP
                                                                    (306) RelADPP
                                                                        (307) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (308) RelADPP
                                                    (309) RelADPP
                                                        (310) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (311) RelADPP
                                                        (312) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (313) YES
                                                    (314) RelADPP
                                                        (315) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (316) RelADPP
                                                        (317) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (318) YES
                                            (319) RelADPP
                                                (320) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                                (321) AND
                                                    (322) RelADPP
                                                        (323) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (324) RelADPP
                                                        (325) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (326) YES
                                                    (327) RelADPP
                                                        (328) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (329) RelADPP
                                                        (330) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (331) YES
                                                    (332) RelADPP
                                                        (333) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (334) OR
                                                            (335) RelADPP
                                                            (336) RelADPP
                                                    (337) RelADPP
                                                        (338) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (339) RelADPP
                                                        (340) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (341) YES
                            (342) RelADPP
                                (343) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (344) AND
                                    (345) RelADPP
                                        (346) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (347) RelADPP
                                        (348) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (349) YES
                                    (350) RelADPP
                                        (351) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (352) OR
                                            (353) RelADPP
                                                (354) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (355) AND
                                                    (356) RelADPP
                                                        (357) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (358) RelADPP
                                                    (359) RelADPP
                                                    (360) RelADPP
                                                        (361) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (362) RelADPP
                                                    (363) RelADPP
                                                        (364) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (365) RelADPP
                                            (366) RelADPP
                                                (367) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (368) AND
                                                    (369) RelADPP
                                                        (370) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (371) RelADPP
                                                        (372) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (373) YES
                                                    (374) RelADPP
                                                        (375) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (376) RelADPP
                                                    (377) RelADPP
                                                        (378) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (379) RelADPP
                                                    (380) RelADPP
                                            (381) RelADPP
                                                (382) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (383) AND
                                                    (384) RelADPP
                                                        (385) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (386) RelADPP
                                                        (387) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (388) YES
                                                    (389) RelADPP
                                                        (390) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (391) RelADPP
                                                    (392) RelADPP
                                                    (393) RelADPP
                                                        (394) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (395) RelADPP
                                    (396) RelADPP
                                        (397) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (398) RelADPP
                                        (399) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (400) YES
                                    (401) RelADPP
                                        (402) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (403) RelADPP
                                        (404) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (405) YES
            (406) RelADPP
                (407) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (408) AND
                    (409) RelADPP
                        (410) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (411) RelADPP
                        (412) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (413) YES
                    (414) RelADPP
                        (415) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (416) RelADPP
                        (417) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (418) YES
                    (419) RelADPP
                        (420) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (421) OR
                            (422) RelADPP
                                (423) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (424) AND
                                    (425) RelADPP
                                        (426) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (427) RelADPP
                                        (428) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (429) YES
                                    (430) RelADPP
                                        (431) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (432) RelADPP
                                        (433) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (434) YES
                                    (435) RelADPP
                                        (436) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (437) OR
                                            (438) RelADPP
                                                (439) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (440) AND
                                                    (441) RelADPP
                                                        (442) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (443) RelADPP
                                                        (444) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (445) YES
                                                    (446) RelADPP
                                                        (447) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (448) RelADPP
                                                    (449) RelADPP
                                                        (450) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (451) RelADPP
                                                    (452) RelADPP
                                                        (453) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (454) RelADPP
                                                        (455) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (456) YES
                                            (457) RelADPP
                                                (458) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (459) AND
                                                    (460) RelADPP
                                                        (461) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (462) RelADPP
                                                        (463) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (464) YES
                                                    (465) RelADPP
                                                    (466) RelADPP
                                                        (467) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (468) RelADPP
                                                        (469) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (470) YES
                                                    (471) RelADPP
                                                        (472) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (473) RelADPP
                                                        (474) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (475) YES
                                            (476) RelADPP
                                                (477) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (478) AND
                                                    (479) RelADPP
                                                        (480) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (481) RelADPP
                                                        (482) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (483) YES
                                                    (484) RelADPP
                                                        (485) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (486) RelADPP
                                                        (487) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (488) YES
                                                    (489) RelADPP
                                                    (490) RelADPP
                                                        (491) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (492) RelADPP
                                                        (493) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (494) YES
                                    (495) RelADPP
                                        (496) RelADPReductionPairProof [EQUIVALENT, 15 ms]
                                        (497) RelADPP
                                        (498) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (499) YES
                            (500) RelADPP
                                (501) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (502) AND
                                    (503) RelADPP
                                        (504) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (505) RelADPP
                                        (506) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (507) YES
                                    (508) RelADPP
                                        (509) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (510) OR
                                            (511) RelADPP
                                                (512) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (513) AND
                                                    (514) RelADPP
                                                        (515) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (516) RelADPP
                                                        (517) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (518) YES
                                                    (519) RelADPP
                                                        (520) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (521) RelADPP
                                                        (522) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (523) TRUE
                                                    (524) RelADPP
                                                        (525) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (526) RelADPP
                                                        (527) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (528) YES
                                                    (529) RelADPP
                                                        (530) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (531) RelADPP
                                                        (532) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (533) YES
                                            (534) RelADPP
                                                (535) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (536) AND
                                                    (537) RelADPP
                                                        (538) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (539) RelADPP
                                                    (540) RelADPP
                                                        (541) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (542) RelADPP
                                                        (543) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (544) YES
                                                    (545) RelADPP
                                                        (546) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (547) RelADPP
                                                        (548) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (549) YES
                                                    (550) RelADPP
                                            (551) RelADPP
                                                (552) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (553) AND
                                                    (554) RelADPP
                                                        (555) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (556) RelADPP
                                                        (557) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (558) YES
                                                    (559) RelADPP
                                                    (560) RelADPP
                                                        (561) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (562) RelADPP
                                                        (563) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (564) YES
                                                    (565) RelADPP
                                                        (566) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (567) RelADPP
                                                        (568) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (569) YES
                                    (570) RelADPP
                                        (571) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (572) RelADPP
                                        (573) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (574) YES
                                    (575) RelADPP
                                        (576) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (577) RelADPP
                                        (578) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (579) YES
                            (580) RelADPP
                                (581) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (582) AND
                                    (583) RelADPP
                                        (584) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (585) RelADPP
                                        (586) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (587) YES
                                    (588) RelADPP
                                        (589) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (590) OR
                                            (591) RelADPP
                                                (592) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (593) AND
                                                    (594) RelADPP
                                                        (595) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (596) RelADPP
                                                    (597) RelADPP
                                                    (598) RelADPP
                                                        (599) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (600) RelADPP
                                                        (601) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (602) YES
                                                    (603) RelADPP
                                                        (604) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (605) RelADPP
                                            (606) RelADPP
                                                (607) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (608) AND
                                                    (609) RelADPP
                                                        (610) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (611) RelADPP
                                                        (612) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (613) YES
                                                    (614) RelADPP
                                                    (615) RelADPP
                                                        (616) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (617) RelADPP
                                                        (618) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (619) YES
                                                    (620) RelADPP
                                                        (621) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (622) RelADPP
                                                        (623) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (624) YES
                                            (625) RelADPP
                                                (626) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (627) AND
                                                    (628) RelADPP
                                                        (629) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (630) RelADPP
                                                        (631) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (632) YES
                                                    (633) RelADPP
                                                    (634) RelADPP
                                                        (635) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (636) RelADPP
                                                    (637) RelADPP
                                                        (638) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (639) RelADPP
                                    (640) RelADPP
                                        (641) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (642) RelADPP
                                        (643) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (644) YES
                                    (645) RelADPP
                                        (646) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (647) RelADPP
                                        (648) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (649) YES
                            (650) RelADPP
                                (651) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (652) AND
                                    (653) RelADPP
                                        (654) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (655) RelADPP
                                        (656) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (657) YES
                                    (658) RelADPP
                                        (659) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (660) OR
                                            (661) RelADPP
                                                (662) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (663) AND
                                                    (664) RelADPP
                                                        (665) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (666) RelADPP
                                                    (667) RelADPP
                                                    (668) RelADPP
                                                        (669) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (670) RelADPP
                                                    (671) RelADPP
                                                        (672) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (673) RelADPP
                                            (674) RelADPP
                                                (675) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (676) AND
                                                    (677) RelADPP
                                                        (678) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (679) RelADPP
                                                    (680) RelADPP
                                                        (681) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (682) RelADPP
                                                    (683) RelADPP
                                                        (684) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (685) RelADPP
                                                    (686) RelADPP
                                            (687) RelADPP
                                                (688) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (689) AND
                                                    (690) RelADPP
                                                        (691) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (692) RelADPP
                                                    (693) RelADPP
                                                    (694) RelADPP
                                                        (695) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (696) RelADPP
                                                    (697) RelADPP
                                                        (698) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (699) RelADPP
                                                        (700) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (701) YES
                                    (702) RelADPP
                                        (703) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (704) RelADPP
                                        (705) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (706) YES
                                    (707) RelADPP
                                        (708) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (709) RelADPP
                                        (710) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (711) YES
                    (712) RelADPP
                        (713) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                        (714) RelADPP
                        (715) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (716) YES
            (717) RelADPP
                (718) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (719) AND
                    (720) RelADPP
                        (721) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (722) RelADPP
                        (723) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (724) YES
                    (725) RelADPP
                        (726) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (727) OR
                            (728) RelADPP
                                (729) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (730) AND
                                    (731) RelADPP
                                        (732) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (733) RelADPP
                                        (734) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (735) YES
                                    (736) RelADPP
                                        (737) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (738) RelADPP
                                        (739) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (740) YES
                                    (741) RelADPP
                                        (742) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (743) OR
                                            (744) RelADPP
                                                (745) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (746) AND
                                                    (747) RelADPP
                                                        (748) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (749) RelADPP
                                                        (750) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (751) YES
                                                    (752) RelADPP
                                                        (753) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (754) RelADPP
                                                        (755) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (756) YES
                                                    (757) RelADPP
                                                        (758) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (759) RelADPP
                                                        (760) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (761) YES
                                                    (762) RelADPP
                                                        (763) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (764) RelADPP
                                                        (765) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (766) TRUE
                                            (767) RelADPP
                                                (768) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (769) AND
                                                    (770) RelADPP
                                                        (771) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (772) RelADPP
                                                        (773) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (774) YES
                                                    (775) RelADPP
                                                        (776) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                                        (777) RelADPP
                                                        (778) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (779) YES
                                                    (780) RelADPP
                                                        (781) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (782) RelADPP
                                                    (783) RelADPP
                                            (784) RelADPP
                                                (785) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (786) AND
                                                    (787) RelADPP
                                                        (788) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (789) RelADPP
                                                        (790) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (791) YES
                                                    (792) RelADPP
                                                        (793) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (794) RelADPP
                                                        (795) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (796) YES
                                                    (797) RelADPP
                                                        (798) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (799) RelADPP
                                                        (800) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (801) YES
                                                    (802) RelADPP
                                    (803) RelADPP
                                        (804) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (805) RelADPP
                                        (806) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (807) YES
                            (808) RelADPP
                                (809) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (810) AND
                                    (811) RelADPP
                                        (812) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (813) RelADPP
                                        (814) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (815) YES
                                    (816) RelADPP
                                        (817) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (818) RelADPP
                                        (819) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (820) YES
                                    (821) RelADPP
                                        (822) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (823) RelADPP
                                        (824) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (825) YES
                                    (826) RelADPP
                                        (827) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (828) OR
                                            (829) RelADPP
                                                (830) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (831) AND
                                                    (832) RelADPP
                                                        (833) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (834) RelADPP
                                                        (835) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (836) YES
                                                    (837) RelADPP
                                                        (838) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (839) RelADPP
                                                        (840) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (841) TRUE
                                                    (842) RelADPP
                                                        (843) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (844) RelADPP
                                                        (845) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (846) YES
                                                    (847) RelADPP
                                                        (848) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (849) RelADPP
                                                        (850) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (851) YES
                                            (852) RelADPP
                                                (853) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (854) AND
                                                    (855) RelADPP
                                                        (856) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (857) RelADPP
                                                        (858) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (859) YES
                                                    (860) RelADPP
                                                        (861) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (862) RelADPP
                                                        (863) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (864) YES
                                                    (865) RelADPP
                                                        (866) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (867) RelADPP
                                                    (868) RelADPP
                                            (869) RelADPP
                                                (870) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (871) AND
                                                    (872) RelADPP
                                                        (873) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (874) RelADPP
                                                        (875) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (876) YES
                                                    (877) RelADPP
                                                        (878) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (879) RelADPP
                                                        (880) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (881) YES
                                                    (882) RelADPP
                                                    (883) RelADPP
                                                        (884) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (885) RelADPP
                                                        (886) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (887) YES
                            (888) RelADPP
                                (889) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (890) AND
                                    (891) RelADPP
                                        (892) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (893) RelADPP
                                        (894) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (895) YES
                                    (896) RelADPP
                                        (897) RelADPDerelatifying2Proof [SOUND, 1 ms]
                                        (898) OR
                                            (899) RelADPP
                                                (900) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (901) AND
                                                    (902) RelADPP
                                                        (903) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (904) RelADPP
                                                        (905) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (906) YES
                                                    (907) RelADPP
                                                        (908) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (909) RelADPP
                                                        (910) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (911) YES
                                                    (912) RelADPP
                                                        (913) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (914) RelADPP
                                                    (915) RelADPP
                                            (916) RelADPP
                                                (917) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (918) AND
                                                    (919) RelADPP
                                                        (920) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (921) RelADPP
                                                        (922) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (923) YES
                                                    (924) RelADPP
                                                    (925) RelADPP
                                                        (926) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (927) RelADPP
                                                        (928) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (929) YES
                                                    (930) RelADPP
                                                        (931) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (932) RelADPP
                                                        (933) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (934) YES
                                            (935) RelADPP
                                                (936) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (937) AND
                                                    (938) RelADPP
                                                        (939) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (940) RelADPP
                                                    (941) RelADPP
                                                    (942) RelADPP
                                                        (943) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (944) RelADPP
                                                        (945) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (946) YES
                                                    (947) RelADPP
                                                        (948) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (949) RelADPP
                                                        (950) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (951) YES
                                    (952) RelADPP
                                        (953) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (954) RelADPP
                                        (955) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (956) YES
                                    (957) RelADPP
                                        (958) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (959) RelADPP
                                        (960) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (961) YES
                            (962) RelADPP
                                (963) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (964) AND
                                    (965) RelADPP
                                        (966) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (967) RelADPP
                                        (968) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (969) YES
                                    (970) RelADPP
                                        (971) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (972) RelADPP
                                        (973) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (974) YES
                                    (975) RelADPP
                                        (976) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (977) RelADPP
                                        (978) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (979) YES
                                    (980) RelADPP
                                        (981) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (982) OR
                                            (983) RelADPP
                                                (984) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (985) AND
                                                    (986) RelADPP
                                                        (987) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (988) RelADPP
                                                        (989) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (990) YES
                                                    (991) RelADPP
                                                    (992) RelADPP
                                                        (993) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (994) RelADPP
                                                        (995) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (996) YES
                                                    (997) RelADPP
                                                        (998) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (999) RelADPP
                                                        (1000) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1001) YES
                                            (1002) RelADPP
                                                (1003) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1004) AND
                                                    (1005) RelADPP
                                                        (1006) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1007) RelADPP
                                                        (1008) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1009) YES
                                                    (1010) RelADPP
                                                    (1011) RelADPP
                                                        (1012) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1013) RelADPP
                                                        (1014) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1015) YES
                                                    (1016) RelADPP
                                                        (1017) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1018) RelADPP
                                                        (1019) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1020) YES
                                            (1021) RelADPP
                                                (1022) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1023) AND
                                                    (1024) RelADPP
                                                        (1025) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1026) RelADPP
                                                        (1027) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1028) YES
                                                    (1029) RelADPP
                                                        (1030) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1031) RelADPP
                                                        (1032) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1033) YES
                                                    (1034) RelADPP
                                                    (1035) RelADPP
                                                        (1036) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1037) RelADPP
                                                        (1038) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1039) YES
                    (1040) RelADPP
                        (1041) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (1042) RelADPP
                        (1043) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1044) YES
                    (1045) RelADPP
                        (1046) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (1047) RelADPP
                        (1048) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1049) YES
            (1050) RelADPP
                (1051) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (1052) AND
                    (1053) RelADPP
                        (1054) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (1055) RelADPP
                        (1056) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1057) YES
                    (1058) RelADPP
                        (1059) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (1060) RelADPP
                        (1061) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1062) YES
                    (1063) RelADPP
                        (1064) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (1065) RelADPP
                        (1066) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1067) YES
                    (1068) RelADPP
                        (1069) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (1070) OR
                            (1071) RelADPP
                                (1072) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1073) AND
                                    (1074) RelADPP
                                        (1075) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1076) RelADPP
                                        (1077) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1078) YES
                                    (1079) RelADPP
                                        (1080) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1081) RelADPP
                                        (1082) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1083) YES
                                    (1084) RelADPP
                                        (1085) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1086) OR
                                            (1087) RelADPP
                                                (1088) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1089) AND
                                                    (1090) RelADPP
                                                        (1091) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1092) RelADPP
                                                        (1093) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1094) YES
                                                    (1095) RelADPP
                                                    (1096) RelADPP
                                                        (1097) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1098) RelADPP
                                                        (1099) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1100) YES
                                                    (1101) RelADPP
                                                        (1102) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1103) RelADPP
                                                        (1104) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1105) YES
                                            (1106) RelADPP
                                                (1107) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1108) AND
                                                    (1109) RelADPP
                                                        (1110) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                                        (1111) RelADPP
                                                        (1112) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1113) YES
                                                    (1114) RelADPP
                                                        (1115) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1116) RelADPP
                                                        (1117) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1118) YES
                                                    (1119) RelADPP
                                                    (1120) RelADPP
                                                        (1121) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1122) RelADPP
                                                        (1123) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1124) YES
                                            (1125) RelADPP
                                                (1126) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1127) AND
                                                    (1128) RelADPP
                                                        (1129) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1130) RelADPP
                                                        (1131) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1132) YES
                                                    (1133) RelADPP
                                                    (1134) RelADPP
                                                        (1135) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1136) RelADPP
                                                        (1137) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1138) YES
                                                    (1139) RelADPP
                                                        (1140) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1141) RelADPP
                                                        (1142) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1143) YES
                                    (1144) RelADPP
                                        (1145) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (1146) RelADPP
                                        (1147) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1148) YES
                            (1149) RelADPP
                                (1150) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1151) AND
                                    (1152) RelADPP
                                        (1153) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (1154) RelADPP
                                        (1155) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1156) YES
                                    (1157) RelADPP
                                        (1158) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (1159) RelADPP
                                        (1160) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1161) YES
                                    (1162) RelADPP
                                        (1163) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1164) OR
                                            (1165) RelADPP
                                                (1166) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1167) AND
                                                    (1168) RelADPP
                                                        (1169) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1170) RelADPP
                                                        (1171) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1172) YES
                                                    (1173) RelADPP
                                                        (1174) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1175) RelADPP
                                                        (1176) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1177) YES
                                                    (1178) RelADPP
                                                    (1179) RelADPP
                                                        (1180) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1181) RelADPP
                                                        (1182) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1183) YES
                                            (1184) RelADPP
                                                (1185) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1186) AND
                                                    (1187) RelADPP
                                                        (1188) RelADPReductionPairProof [EQUIVALENT, 17 ms]
                                                        (1189) RelADPP
                                                        (1190) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1191) YES
                                                    (1192) RelADPP
                                                        (1193) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1194) RelADPP
                                                        (1195) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1196) YES
                                                    (1197) RelADPP
                                                    (1198) RelADPP
                                                        (1199) RelADPReductionPairProof [EQUIVALENT, 12 ms]
                                                        (1200) RelADPP
                                                        (1201) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1202) YES
                                            (1203) RelADPP
                                                (1204) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1205) AND
                                                    (1206) RelADPP
                                                        (1207) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (1208) RelADPP
                                                        (1209) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1210) YES
                                                    (1211) RelADPP
                                                    (1212) RelADPP
                                                        (1213) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1214) RelADPP
                                                        (1215) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1216) YES
                                                    (1217) RelADPP
                                                        (1218) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1219) RelADPP
                                                        (1220) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1221) YES
                                    (1222) RelADPP
                                        (1223) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1224) RelADPP
                                        (1225) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1226) YES
                            (1227) RelADPP
                                (1228) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1229) AND
                                    (1230) RelADPP
                                        (1231) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1232) RelADPP
                                        (1233) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1234) YES
                                    (1235) RelADPP
                                        (1236) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (1237) RelADPP
                                        (1238) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1239) YES
                                    (1240) RelADPP
                                        (1241) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1242) RelADPP
                                        (1243) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1244) YES
                                    (1245) RelADPP
                                        (1246) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1247) OR
                                            (1248) RelADPP
                                                (1249) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1250) AND
                                                    (1251) RelADPP
                                                        (1252) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                                        (1253) RelADPP
                                                        (1254) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1255) YES
                                                    (1256) RelADPP
                                                    (1257) RelADPP
                                                        (1258) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1259) RelADPP
                                                        (1260) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1261) YES
                                                    (1262) RelADPP
                                                        (1263) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1264) RelADPP
                                                        (1265) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1266) YES
                                            (1267) RelADPP
                                                (1268) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1269) AND
                                                    (1270) RelADPP
                                                        (1271) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1272) RelADPP
                                                        (1273) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1274) YES
                                                    (1275) RelADPP
                                                        (1276) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1277) RelADPP
                                                        (1278) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1279) YES
                                                    (1280) RelADPP
                                                    (1281) RelADPP
                                                        (1282) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1283) RelADPP
                                                        (1284) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1285) YES
                                            (1286) RelADPP
                                                (1287) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1288) AND
                                                    (1289) RelADPP
                                                        (1290) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1291) RelADPP
                                                        (1292) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1293) YES
                                                    (1294) RelADPP
                                                        (1295) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (1296) RelADPP
                                                        (1297) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1298) YES
                                                    (1299) RelADPP
                                                    (1300) RelADPP
                                                        (1301) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1302) RelADPP
                                                        (1303) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1304) YES
                            (1305) RelADPP
                                (1306) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1307) AND
                                    (1308) RelADPP
                                        (1309) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1310) RelADPP
                                        (1311) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1312) YES
                                    (1313) RelADPP
                                        (1314) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1315) OR
                                            (1316) RelADPP
                                                (1317) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1318) AND
                                                    (1319) RelADPP
                                                        (1320) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1321) RelADPP
                                                        (1322) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1323) YES
                                                    (1324) RelADPP
                                                    (1325) RelADPP
                                                        (1326) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (1327) RelADPP
                                                        (1328) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1329) YES
                                                    (1330) RelADPP
                                                        (1331) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1332) RelADPP
                                                        (1333) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1334) YES
                                            (1335) RelADPP
                                                (1336) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1337) AND
                                                    (1338) RelADPP
                                                        (1339) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1340) RelADPP
                                                        (1341) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1342) YES
                                                    (1343) RelADPP
                                                        (1344) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1345) RelADPP
                                                        (1346) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1347) YES
                                                    (1348) RelADPP
                                                        (1349) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1350) RelADPP
                                                        (1351) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1352) YES
                                                    (1353) RelADPP
                                            (1354) RelADPP
                                                (1355) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1356) AND
                                                    (1357) RelADPP
                                                        (1358) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1359) RelADPP
                                                        (1360) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1361) YES
                                                    (1362) RelADPP
                                                        (1363) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1364) RelADPP
                                                        (1365) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1366) YES
                                                    (1367) RelADPP
                                                        (1368) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1369) RelADPP
                                                        (1370) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1371) YES
                                                    (1372) RelADPP
                                    (1373) RelADPP
                                        (1374) RelADPReductionPairProof [EQUIVALENT, 15 ms]
                                        (1375) RelADPP
                                        (1376) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1377) YES
                                    (1378) RelADPP
                                        (1379) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (1380) RelADPP
                                        (1381) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1382) YES
            (1383) RelADPP
                (1384) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (1385) AND
                    (1386) RelADPP
                        (1387) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (1388) RelADPP
                        (1389) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1390) YES
                    (1391) RelADPP
                        (1392) RelADPReductionPairProof [EQUIVALENT, 12 ms]
                        (1393) RelADPP
                        (1394) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1395) YES
                    (1396) RelADPP
                        (1397) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (1398) RelADPP
                        (1399) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1400) YES
                    (1401) RelADPP
                        (1402) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (1403) OR
                            (1404) RelADPP
                                (1405) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1406) AND
                                    (1407) RelADPP
                                        (1408) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (1409) RelADPP
                                        (1410) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1411) YES
                                    (1412) RelADPP
                                        (1413) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1414) OR
                                            (1415) RelADPP
                                                (1416) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1417) AND
                                                    (1418) RelADPP
                                                        (1419) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1420) RelADPP
                                                        (1421) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1422) YES
                                                    (1423) RelADPP
                                                        (1424) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1425) RelADPP
                                                        (1426) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1427) YES
                                                    (1428) RelADPP
                                                    (1429) RelADPP
                                                        (1430) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1431) RelADPP
                                                        (1432) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1433) YES
                                            (1434) RelADPP
                                                (1435) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1436) AND
                                                    (1437) RelADPP
                                                        (1438) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (1439) RelADPP
                                                        (1440) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1441) YES
                                                    (1442) RelADPP
                                                        (1443) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1444) RelADPP
                                                        (1445) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1446) YES
                                                    (1447) RelADPP
                                                    (1448) RelADPP
                                                        (1449) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1450) RelADPP
                                                        (1451) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1452) YES
                                            (1453) RelADPP
                                                (1454) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1455) AND
                                                    (1456) RelADPP
                                                        (1457) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1458) RelADPP
                                                        (1459) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1460) YES
                                                    (1461) RelADPP
                                                        (1462) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1463) RelADPP
                                                        (1464) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1465) YES
                                                    (1466) RelADPP
                                                    (1467) RelADPP
                                                        (1468) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1469) RelADPP
                                                        (1470) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1471) YES
                                    (1472) RelADPP
                                        (1473) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1474) RelADPP
                                        (1475) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1476) YES
                                    (1477) RelADPP
                                        (1478) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (1479) RelADPP
                                        (1480) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1481) YES
                            (1482) RelADPP
                                (1483) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1484) AND
                                    (1485) RelADPP
                                        (1486) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1487) RelADPP
                                        (1488) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1489) YES
                                    (1490) RelADPP
                                        (1491) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1492) RelADPP
                                        (1493) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1494) YES
                                    (1495) RelADPP
                                        (1496) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1497) OR
                                            (1498) RelADPP
                                                (1499) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1500) AND
                                                    (1501) RelADPP
                                                        (1502) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1503) RelADPP
                                                        (1504) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1505) YES
                                                    (1506) RelADPP
                                                    (1507) RelADPP
                                                        (1508) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1509) RelADPP
                                                        (1510) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1511) YES
                                                    (1512) RelADPP
                                                        (1513) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1514) RelADPP
                                                        (1515) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1516) YES
                                            (1517) RelADPP
                                                (1518) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1519) AND
                                                    (1520) RelADPP
                                                        (1521) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1522) RelADPP
                                                        (1523) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1524) YES
                                                    (1525) RelADPP
                                                        (1526) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1527) RelADPP
                                                        (1528) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1529) YES
                                                    (1530) RelADPP
                                                        (1531) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (1532) RelADPP
                                                        (1533) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1534) YES
                                                    (1535) RelADPP
                                            (1536) RelADPP
                                                (1537) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1538) AND
                                                    (1539) RelADPP
                                                        (1540) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1541) RelADPP
                                                        (1542) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1543) YES
                                                    (1544) RelADPP
                                                        (1545) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (1546) RelADPP
                                                        (1547) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1548) YES
                                                    (1549) RelADPP
                                                    (1550) RelADPP
                                                        (1551) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1552) RelADPP
                                                        (1553) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1554) YES
                                    (1555) RelADPP
                                        (1556) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (1557) RelADPP
                                        (1558) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1559) YES
                            (1560) RelADPP
                                (1561) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1562) AND
                                    (1563) RelADPP
                                        (1564) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (1565) RelADPP
                                        (1566) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1567) YES
                                    (1568) RelADPP
                                        (1569) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (1570) RelADPP
                                        (1571) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1572) YES
                                    (1573) RelADPP
                                        (1574) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1575) OR
                                            (1576) RelADPP
                                                (1577) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1578) AND
                                                    (1579) RelADPP
                                                        (1580) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1581) RelADPP
                                                        (1582) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1583) YES
                                                    (1584) RelADPP
                                                        (1585) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1586) RelADPP
                                                        (1587) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1588) YES
                                                    (1589) RelADPP
                                                        (1590) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (1591) RelADPP
                                                        (1592) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1593) YES
                                                    (1594) RelADPP
                                            (1595) RelADPP
                                                (1596) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1597) AND
                                                    (1598) RelADPP
                                                        (1599) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1600) RelADPP
                                                        (1601) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1602) YES
                                                    (1603) RelADPP
                                                        (1604) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1605) RelADPP
                                                        (1606) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1607) YES
                                                    (1608) RelADPP
                                                        (1609) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1610) RelADPP
                                                        (1611) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1612) YES
                                                    (1613) RelADPP
                                            (1614) RelADPP
                                                (1615) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1616) AND
                                                    (1617) RelADPP
                                                        (1618) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1619) RelADPP
                                                        (1620) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1621) YES
                                                    (1622) RelADPP
                                                    (1623) RelADPP
                                                        (1624) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (1625) RelADPP
                                                        (1626) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1627) YES
                                                    (1628) RelADPP
                                                        (1629) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1630) RelADPP
                                                        (1631) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1632) YES
                                    (1633) RelADPP
                                        (1634) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1635) RelADPP
                                        (1636) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1637) YES
                            (1638) RelADPP
                                (1639) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1640) AND
                                    (1641) RelADPP
                                        (1642) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1643) RelADPP
                                        (1644) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1645) YES
                                    (1646) RelADPP
                                        (1647) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1648) RelADPP
                                        (1649) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1650) YES
                                    (1651) RelADPP
                                        (1652) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (1653) RelADPP
                                        (1654) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1655) YES
                                    (1656) RelADPP
                                        (1657) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1658) OR
                                            (1659) RelADPP
                                                (1660) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1661) AND
                                                    (1662) RelADPP
                                                        (1663) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1664) RelADPP
                                                        (1665) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1666) YES
                                                    (1667) RelADPP
                                                    (1668) RelADPP
                                                        (1669) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (1670) RelADPP
                                                        (1671) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1672) YES
                                                    (1673) RelADPP
                                                        (1674) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1675) RelADPP
                                                        (1676) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1677) YES
                                            (1678) RelADPP
                                                (1679) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1680) AND
                                                    (1681) RelADPP
                                                        (1682) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1683) RelADPP
                                                        (1684) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1685) YES
                                                    (1686) RelADPP
                                                        (1687) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (1688) OR
                                                            (1689) RelADPP
                                                            (1690) RelADPP
                                                    (1691) RelADPP
                                                        (1692) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1693) RelADPP
                                                        (1694) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1695) YES
                                                    (1696) RelADPP
                                                        (1697) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1698) RelADPP
                                                        (1699) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1700) YES
                                            (1701) RelADPP
                                                (1702) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1703) AND
                                                    (1704) RelADPP
                                                        (1705) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (1706) RelADPP
                                                        (1707) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1708) YES
                                                    (1709) RelADPP
                                                        (1710) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1711) RelADPP
                                                        (1712) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1713) YES
                                                    (1714) RelADPP
                                                        (1715) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1716) RelADPP
                                                        (1717) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1718) YES
                                                    (1719) RelADPP
                                                        (1720) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (1721) OR
                                                            (1722) RelADPP
                                                            (1723) RelADPP
    (1724) RelADPP
        (1725) RelADPReductionPairProof [EQUIVALENT, 51 ms]
        (1726) RelADPP
        (1727) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (1728) TRUE
    (1729) RelADPP
        (1730) RelADPReductionPairProof [EQUIVALENT, 54 ms]
        (1731) RelADPP
        (1732) RelADPReductionPairProof [EQUIVALENT, 7 ms]
        (1733) RelADPP
        (1734) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (1735) TRUE
    (1736) RelADPP
        (1737) RelADPReductionPairProof [EQUIVALENT, 38 ms]
        (1738) RelADPP
        (1739) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (1740) YES
    (1741) RelADPP
        (1742) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (1743) OR
            (1744) RelADPP
                (1745) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (1746) AND
                    (1747) RelADPP
                        (1748) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (1749) RelADPP
                        (1750) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1751) YES
                    (1752) RelADPP
                        (1753) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                        (1754) RelADPP
                        (1755) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (1756) YES
                    (1757) RelADPP
                        (1758) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (1759) OR
                            (1760) RelADPP
                                (1761) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1762) AND
                                    (1763) RelADPP
                                        (1764) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                        (1765) RelADPP
                                        (1766) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1767) YES
                                    (1768) RelADPP
                                        (1769) RelADPReductionPairProof [EQUIVALENT, 0 ms]
                                        (1770) RelADPP
                                        (1771) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1772) YES
                                    (1773) RelADPP
                                        (1774) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                        (1775) RelADPP
                                        (1776) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1777) YES
                                    (1778) RelADPP
                                        (1779) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1780) OR
                                            (1781) RelADPP
                                                (1782) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1783) AND
                                                    (1784) RelADPP
                                                        (1785) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1786) RelADPP
                                                        (1787) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1788) YES
                                                    (1789) RelADPP
                                                        (1790) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (1791) RelADPP
                                                        (1792) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1793) YES
                                                    (1794) RelADPP
                                                        (1795) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1796) RelADPP
                                                        (1797) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (1798) TRUE
                                                    (1799) RelADPP
                                                        (1800) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (1801) RelADPP
                                                        (1802) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1803) YES
                                            (1804) RelADPP
                                                (1805) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1806) AND
                                                    (1807) RelADPP
                                                        (1808) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1809) RelADPP
                                                        (1810) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1811) YES
                                                    (1812) RelADPP
                                                        (1813) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (1814) OR
                                                            (1815) RelADPP
                                                                (1816) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1817) AND
                                                                    (1818) RelADPP
                                                                        (1819) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                                        (1820) RelADPP
                                                                        (1821) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1822) YES
                                                                    (1823) RelADPP
                                                                        (1824) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (1825) RelADPP
                                                                        (1826) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1827) YES
                                                                    (1828) RelADPP
                                                                        (1829) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                                        (1830) RelADPP
                                                                        (1831) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1832) YES
                                                            (1833) RelADPP
                                                                (1834) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1835) AND
                                                                    (1836) RelADPP
                                                                        (1837) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                                        (1838) RelADPP
                                                                        (1839) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1840) YES
                                                                    (1841) RelADPP
                                                                        (1842) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (1843) RelADPP
                                                                        (1844) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1845) YES
                                                                    (1846) RelADPP
                                                                        (1847) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                                        (1848) RelADPP
                                                                        (1849) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1850) YES
                                                                    (1851) RelADPP
                                                    (1852) RelADPP
                                                        (1853) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (1854) RelADPP
                                                        (1855) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1856) YES
                                                    (1857) RelADPP
                                                        (1858) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1859) RelADPP
                                                        (1860) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1861) YES
                                            (1862) RelADPP
                                                (1863) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1864) AND
                                                    (1865) RelADPP
                                                        (1866) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (1867) RelADPP
                                                        (1868) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1869) YES
                                                    (1870) RelADPP
                                                        (1871) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1872) RelADPP
                                                        (1873) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1874) YES
                                                    (1875) RelADPP
                                                        (1876) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (1877) OR
                                                            (1878) RelADPP
                                                                (1879) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1880) AND
                                                                    (1881) RelADPP
                                                                        (1882) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (1883) RelADPP
                                                                        (1884) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1885) YES
                                                                    (1886) RelADPP
                                                                        (1887) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (1888) RelADPP
                                                                        (1889) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1890) YES
                                                                    (1891) RelADPP
                                                                        (1892) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (1893) RelADPP
                                                                        (1894) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (1895) TRUE
                                                                    (1896) RelADPP
                                                                        (1897) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                                        (1898) RelADPP
                                                                        (1899) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1900) YES
                                                            (1901) RelADPP
                                                                (1902) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1903) AND
                                                                    (1904) RelADPP
                                                                        (1905) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (1906) RelADPP
                                                                        (1907) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1908) YES
                                                                    (1909) RelADPP
                                                                    (1910) RelADPP
                                                                        (1911) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (1912) RelADPP
                                                                        (1913) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1914) YES
                                                                    (1915) RelADPP
                                                                        (1916) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (1917) RelADPP
                                                                        (1918) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (1919) YES
                                                    (1920) RelADPP
                                                        (1921) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (1922) RelADPP
                                                        (1923) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1924) YES
                            (1925) RelADPP
                                (1926) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (1927) AND
                                    (1928) RelADPP
                                        (1929) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (1930) RelADPP
                                        (1931) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1932) YES
                                    (1933) RelADPP
                                        (1934) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (1935) RelADPP
                                        (1936) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (1937) YES
                                    (1938) RelADPP
                                        (1939) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (1940) OR
                                            (1941) RelADPP
                                                (1942) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1943) AND
                                                    (1944) RelADPP
                                                        (1945) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1946) RelADPP
                                                        (1947) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1948) YES
                                                    (1949) RelADPP
                                                        (1950) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1951) RelADPP
                                                        (1952) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (1953) TRUE
                                                    (1954) RelADPP
                                                        (1955) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1956) RelADPP
                                                        (1957) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1958) YES
                                                    (1959) RelADPP
                                                        (1960) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1961) RelADPP
                                                        (1962) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1963) YES
                                            (1964) RelADPP
                                                (1965) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (1966) AND
                                                    (1967) RelADPP
                                                        (1968) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (1969) RelADPP
                                                        (1970) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (1971) YES
                                                    (1972) RelADPP
                                                        (1973) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (1974) OR
                                                            (1975) RelADPP
                                                                (1976) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1977) AND
                                                                    (1978) RelADPP
                                                                        (1979) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (1980) RelADPP
                                                                    (1981) RelADPP
                                                                        (1982) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (1983) RelADPP
                                                                    (1984) RelADPP
                                                                        (1985) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (1986) RelADPP
                                                            (1987) RelADPP
                                                                (1988) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (1989) AND
                                                                    (1990) RelADPP
                                                                        (1991) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (1992) RelADPP
                                                                    (1993) RelADPP
                                                                        (1994) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (1995) RelADPP
                                                                    (1996) RelADPP
                                                                    (1997) RelADPP
                                                                        (1998) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (1999) RelADPP
                                                    (2000) RelADPP
                                                        (2001) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2002) RelADPP
                                                        (2003) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2004) YES
                                                    (2005) RelADPP
                                                        (2006) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2007) RelADPP
                                                        (2008) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2009) YES
                                            (2010) RelADPP
                                                (2011) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2012) AND
                                                    (2013) RelADPP
                                                        (2014) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2015) RelADPP
                                                        (2016) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2017) YES
                                                    (2018) RelADPP
                                                        (2019) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2020) RelADPP
                                                        (2021) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2022) YES
                                                    (2023) RelADPP
                                                        (2024) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2025) OR
                                                            (2026) RelADPP
                                                                (2027) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2028) AND
                                                                    (2029) RelADPP
                                                                        (2030) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                                        (2031) RelADPP
                                                                    (2032) RelADPP
                                                                        (2033) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2034) RelADPP
                                                                    (2035) RelADPP
                                                                        (2036) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2037) RelADPP
                                                                    (2038) RelADPP
                                                                        (2039) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2040) RelADPP
                                                            (2041) RelADPP
                                                                (2042) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2043) AND
                                                                    (2044) RelADPP
                                                                        (2045) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2046) RelADPP
                                                                    (2047) RelADPP
                                                                        (2048) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2049) RelADPP
                                                                    (2050) RelADPP
                                                                    (2051) RelADPP
                                                                        (2052) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2053) RelADPP
                                                    (2054) RelADPP
                                                        (2055) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2056) RelADPP
                                                        (2057) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2058) YES
                                    (2059) RelADPP
                                        (2060) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (2061) RelADPP
                                        (2062) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2063) YES
                            (2064) RelADPP
                                (2065) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2066) AND
                                    (2067) RelADPP
                                        (2068) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2069) RelADPP
                                        (2070) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2071) YES
                                    (2072) RelADPP
                                        (2073) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (2074) RelADPP
                                        (2075) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2076) YES
                                    (2077) RelADPP
                                        (2078) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (2079) RelADPP
                                        (2080) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2081) YES
                                    (2082) RelADPP
                                        (2083) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2084) OR
                                            (2085) RelADPP
                                                (2086) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2087) AND
                                                    (2088) RelADPP
                                                        (2089) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2090) RelADPP
                                                        (2091) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2092) YES
                                                    (2093) RelADPP
                                                        (2094) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2095) RelADPP
                                                        (2096) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2097) YES
                                                    (2098) RelADPP
                                                        (2099) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2100) RelADPP
                                                        (2101) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2102) YES
                                                    (2103) RelADPP
                                                        (2104) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2105) OR
                                                            (2106) RelADPP
                                                                (2107) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2108) AND
                                                                    (2109) RelADPP
                                                                        (2110) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                                                        (2111) RelADPP
                                                                    (2112) RelADPP
                                                                        (2113) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                                        (2114) RelADPP
                                                                        (2115) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (2116) YES
                                                                    (2117) RelADPP
                                                                        (2118) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                                        (2119) RelADPP
                                                            (2120) RelADPP
                                                                (2121) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2122) AND
                                                                    (2123) RelADPP
                                                                        (2124) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                                        (2125) RelADPP
                                                                    (2126) RelADPP
                                                                        (2127) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2128) RelADPP
                                                                    (2129) RelADPP
                                                                        (2130) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2131) RelADPP
                                                                    (2132) RelADPP
                                            (2133) RelADPP
                                                (2134) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2135) AND
                                                    (2136) RelADPP
                                                        (2137) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2138) RelADPP
                                                        (2139) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2140) YES
                                                    (2141) RelADPP
                                                        (2142) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2143) RelADPP
                                                        (2144) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2145) YES
                                                    (2146) RelADPP
                                                        (2147) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2148) RelADPP
                                                        (2149) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2150) YES
                                                    (2151) RelADPP
                                                        (2152) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2153) OR
                                                            (2154) RelADPP
                                                                (2155) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2156) AND
                                                                    (2157) RelADPP
                                                                        (2158) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2159) RelADPP
                                                                    (2160) RelADPP
                                                                        (2161) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (2162) RelADPP
                                                                    (2163) RelADPP
                                                                        (2164) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2165) RelADPP
                                                            (2166) RelADPP
                                                                (2167) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2168) AND
                                                                    (2169) RelADPP
                                                                        (2170) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2171) RelADPP
                                                                    (2172) RelADPP
                                                                        (2173) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2174) RelADPP
                                                                        (2175) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (2176) YES
                                                                    (2177) RelADPP
                                                                        (2178) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2179) RelADPP
                                                                    (2180) RelADPP
                                            (2181) RelADPP
                                                (2182) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2183) AND
                                                    (2184) RelADPP
                                                        (2185) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2186) RelADPP
                                                        (2187) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2188) YES
                                                    (2189) RelADPP
                                                        (2190) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2191) OR
                                                            (2192) RelADPP
                                                                (2193) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2194) AND
                                                                    (2195) RelADPP
                                                                        (2196) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2197) RelADPP
                                                                    (2198) RelADPP
                                                                    (2199) RelADPP
                                                                        (2200) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2201) RelADPP
                                                                    (2202) RelADPP
                                                                        (2203) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2204) RelADPP
                                                            (2205) RelADPP
                                                                (2206) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2207) AND
                                                                    (2208) RelADPP
                                                                        (2209) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2210) RelADPP
                                                                    (2211) RelADPP
                                                                        (2212) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2213) RelADPP
                                                                    (2214) RelADPP
                                                                    (2215) RelADPP
                                                                        (2216) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (2217) RelADPP
                                                    (2218) RelADPP
                                                        (2219) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2220) RelADPP
                                                        (2221) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2222) YES
                                                    (2223) RelADPP
                                                        (2224) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2225) RelADPP
                                                        (2226) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2227) YES
                            (2228) RelADPP
                                (2229) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2230) AND
                                    (2231) RelADPP
                                        (2232) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (2233) RelADPP
                                        (2234) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2235) YES
                                    (2236) RelADPP
                                        (2237) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2238) OR
                                            (2239) RelADPP
                                                (2240) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2241) AND
                                                    (2242) RelADPP
                                                        (2243) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2244) RelADPP
                                                        (2245) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2246) YES
                                                    (2247) RelADPP
                                                        (2248) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2249) RelADPP
                                                        (2250) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2251) YES
                                                    (2252) RelADPP
                                                        (2253) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2254) RelADPP
                                                        (2255) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2256) YES
                                                    (2257) RelADPP
                                                        (2258) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2259) OR
                                                            (2260) RelADPP
                                                            (2261) RelADPP
                                            (2262) RelADPP
                                                (2263) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                                (2264) AND
                                                    (2265) RelADPP
                                                        (2266) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2267) RelADPP
                                                        (2268) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2269) YES
                                                    (2270) RelADPP
                                                        (2271) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2272) OR
                                                            (2273) RelADPP
                                                                (2274) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2275) AND
                                                                    (2276) RelADPP
                                                                        (2277) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2278) RelADPP
                                                                    (2279) RelADPP
                                                                        (2280) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2281) RelADPP
                                                                    (2282) RelADPP
                                                                        (2283) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                                        (2284) RelADPP
                                                                    (2285) RelADPP
                                                                        (2286) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2287) RelADPP
                                                            (2288) RelADPP
                                                                (2289) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (2290) AND
                                                                    (2291) RelADPP
                                                                        (2292) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2293) RelADPP
                                                                    (2294) RelADPP
                                                                    (2295) RelADPP
                                                                        (2296) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2297) RelADPP
                                                                    (2298) RelADPP
                                                                        (2299) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (2300) RelADPP
                                                    (2301) RelADPP
                                                        (2302) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2303) RelADPP
                                                        (2304) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2305) YES
                                                    (2306) RelADPP
                                                        (2307) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2308) RelADPP
                                                        (2309) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2310) YES
                                            (2311) RelADPP
                                                (2312) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                                (2313) AND
                                                    (2314) RelADPP
                                                        (2315) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2316) RelADPP
                                                        (2317) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2318) YES
                                                    (2319) RelADPP
                                                        (2320) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2321) OR
                                                            (2322) RelADPP
                                                            (2323) RelADPP
                                                    (2324) RelADPP
                                                        (2325) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2326) RelADPP
                                                        (2327) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2328) YES
                                                    (2329) RelADPP
                                                        (2330) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2331) RelADPP
                                                        (2332) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2333) YES
                                    (2334) RelADPP
                                        (2335) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (2336) RelADPP
                                        (2337) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2338) YES
                                    (2339) RelADPP
                                        (2340) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (2341) RelADPP
                                        (2342) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2343) YES
                    (2344) RelADPP
                        (2345) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (2346) OR
                            (2347) RelADPP
                                (2348) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2349) AND
                                    (2350) RelADPP
                                        (2351) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2352) RelADPP
                                        (2353) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2354) YES
                                    (2355) RelADPP
                                        (2356) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (2357) RelADPP
                                        (2358) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2359) YES
                                    (2360) RelADPP
                                        (2361) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2362) OR
                                            (2363) RelADPP
                                                (2364) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2365) AND
                                                    (2366) RelADPP
                                                        (2367) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2368) RelADPP
                                                        (2369) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2370) YES
                                                    (2371) RelADPP
                                                        (2372) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2373) RelADPP
                                                        (2374) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (2375) TRUE
                                                    (2376) RelADPP
                                                        (2377) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2378) RelADPP
                                                        (2379) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2380) YES
                                                    (2381) RelADPP
                                                        (2382) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2383) RelADPP
                                                        (2384) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2385) YES
                                                    (2386) RelADPP
                                                        (2387) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2388) OR
                                                            (2389) RelADPP
                                                            (2390) RelADPP
                                                            (2391) RelADPP
                                            (2392) RelADPP
                                                (2393) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2394) AND
                                                    (2395) RelADPP
                                                        (2396) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2397) RelADPP
                                                        (2398) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2399) YES
                                                    (2400) RelADPP
                                                        (2401) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2402) RelADPP
                                                        (2403) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2404) YES
                                                    (2405) RelADPP
                                            (2406) RelADPP
                                                (2407) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2408) AND
                                                    (2409) RelADPP
                                                        (2410) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2411) RelADPP
                                                        (2412) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2413) YES
                                                    (2414) RelADPP
                                                    (2415) RelADPP
                                                    (2416) RelADPP
                                                        (2417) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2418) RelADPP
                                                        (2419) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2420) YES
                                                    (2421) RelADPP
                                                        (2422) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2423) RelADPP
                                                        (2424) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2425) YES
                                            (2426) RelADPP
                                                (2427) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2428) AND
                                                    (2429) RelADPP
                                                        (2430) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2431) RelADPP
                                                        (2432) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2433) YES
                                                    (2434) RelADPP
                                                    (2435) RelADPP
                                                        (2436) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2437) RelADPP
                                                        (2438) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2439) YES
                                                    (2440) RelADPP
                                                    (2441) RelADPP
                                                        (2442) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (2443) RelADPP
                                                        (2444) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2445) YES
                                    (2446) RelADPP
                                        (2447) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2448) OR
                                            (2449) RelADPP
                                                (2450) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2451) AND
                                                    (2452) RelADPP
                                                        (2453) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2454) RelADPP
                                                        (2455) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2456) YES
                                                    (2457) RelADPP
                                                        (2458) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2459) RelADPP
                                                        (2460) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (2461) TRUE
                                                    (2462) RelADPP
                                                        (2463) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2464) RelADPP
                                                        (2465) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2466) YES
                                                    (2467) RelADPP
                                                        (2468) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (2469) RelADPP
                                                        (2470) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2471) YES
                                            (2472) RelADPP
                                                (2473) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2474) AND
                                                    (2475) RelADPP
                                                        (2476) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2477) RelADPP
                                                        (2478) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2479) YES
                                                    (2480) RelADPP
                                                        (2481) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2482) RelADPP
                                                        (2483) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2484) YES
                                                    (2485) RelADPP
                                                        (2486) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2487) OR
                                                            (2488) RelADPP
                                                            (2489) RelADPP
                                                    (2490) RelADPP
                                                        (2491) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2492) RelADPP
                                                        (2493) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2494) YES
                                            (2495) RelADPP
                                                (2496) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2497) AND
                                                    (2498) RelADPP
                                                        (2499) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2500) RelADPP
                                                        (2501) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2502) YES
                                                    (2503) RelADPP
                                                    (2504) RelADPP
                                                        (2505) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2506) RelADPP
                                                        (2507) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2508) YES
                                                    (2509) RelADPP
                                                        (2510) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2511) RelADPP
                                                        (2512) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2513) YES
                                    (2514) RelADPP
                                        (2515) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (2516) RelADPP
                                        (2517) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2518) YES
                            (2519) RelADPP
                                (2520) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2521) AND
                                    (2522) RelADPP
                                        (2523) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (2524) RelADPP
                                        (2525) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2526) YES
                                    (2527) RelADPP
                                        (2528) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2529) OR
                                            (2530) RelADPP
                                                (2531) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2532) AND
                                                    (2533) RelADPP
                                                        (2534) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2535) RelADPP
                                                        (2536) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2537) YES
                                                    (2538) RelADPP
                                                        (2539) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2540) RelADPP
                                                        (2541) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2542) YES
                                                    (2543) RelADPP
                                                        (2544) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2545) RelADPP
                                                        (2546) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2547) YES
                                                    (2548) RelADPP
                                                        (2549) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2550) RelADPP
                                                        (2551) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (2552) TRUE
                                            (2553) RelADPP
                                                (2554) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2555) AND
                                                    (2556) RelADPP
                                                        (2557) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2558) RelADPP
                                                        (2559) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2560) YES
                                                    (2561) RelADPP
                                                    (2562) RelADPP
                                                        (2563) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2564) RelADPP
                                                        (2565) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2566) YES
                                                    (2567) RelADPP
                                                        (2568) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2569) RelADPP
                                                        (2570) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2571) YES
                                            (2572) RelADPP
                                                (2573) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2574) AND
                                                    (2575) RelADPP
                                                        (2576) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2577) RelADPP
                                                        (2578) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2579) YES
                                                    (2580) RelADPP
                                                    (2581) RelADPP
                                                        (2582) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2583) RelADPP
                                                        (2584) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2585) YES
                                                    (2586) RelADPP
                                                        (2587) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2588) RelADPP
                                                        (2589) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2590) YES
                                    (2591) RelADPP
                                        (2592) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2593) OR
                                            (2594) RelADPP
                                                (2595) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2596) AND
                                                    (2597) RelADPP
                                                        (2598) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2599) RelADPP
                                                        (2600) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2601) YES
                                                    (2602) RelADPP
                                                        (2603) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2604) RelADPP
                                                        (2605) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2606) YES
                                                    (2607) RelADPP
                                                        (2608) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2609) RelADPP
                                                        (2610) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2611) YES
                                                    (2612) RelADPP
                                                        (2613) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2614) RelADPP
                                                        (2615) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (2616) TRUE
                                                    (2617) RelADPP
                                                        (2618) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2619) OR
                                                            (2620) RelADPP
                                                            (2621) RelADPP
                                                            (2622) RelADPP
                                            (2623) RelADPP
                                                (2624) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2625) AND
                                                    (2626) RelADPP
                                                        (2627) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2628) RelADPP
                                                        (2629) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2630) YES
                                                    (2631) RelADPP
                                                        (2632) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2633) RelADPP
                                                        (2634) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2635) YES
                                                    (2636) RelADPP
                                            (2637) RelADPP
                                                (2638) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2639) AND
                                                    (2640) RelADPP
                                                        (2641) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2642) RelADPP
                                                        (2643) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2644) YES
                                                    (2645) RelADPP
                                                    (2646) RelADPP
                                                        (2647) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2648) RelADPP
                                                        (2649) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2650) YES
                                                    (2651) RelADPP
                                                    (2652) RelADPP
                                                        (2653) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2654) RelADPP
                                                        (2655) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2656) YES
                                            (2657) RelADPP
                                                (2658) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2659) AND
                                                    (2660) RelADPP
                                                        (2661) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2662) RelADPP
                                                        (2663) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2664) YES
                                                    (2665) RelADPP
                                                    (2666) RelADPP
                                                    (2667) RelADPP
                                                        (2668) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2669) RelADPP
                                                        (2670) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2671) YES
                                                    (2672) RelADPP
                                                        (2673) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2674) RelADPP
                                                        (2675) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2676) YES
                                    (2677) RelADPP
                                        (2678) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2679) RelADPP
                                        (2680) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2681) YES
                                    (2682) RelADPP
                                        (2683) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2684) RelADPP
                                        (2685) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2686) YES
                            (2687) RelADPP
                                (2688) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2689) AND
                                    (2690) RelADPP
                                        (2691) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (2692) RelADPP
                                        (2693) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2694) YES
                                    (2695) RelADPP
                                        (2696) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2697) OR
                                            (2698) RelADPP
                                                (2699) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2700) AND
                                                    (2701) RelADPP
                                                        (2702) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2703) RelADPP
                                                        (2704) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2705) YES
                                                    (2706) RelADPP
                                                        (2707) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2708) RelADPP
                                                        (2709) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2710) YES
                                                    (2711) RelADPP
                                                    (2712) RelADPP
                                                        (2713) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2714) RelADPP
                                                        (2715) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2716) YES
                                            (2717) RelADPP
                                                (2718) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2719) AND
                                                    (2720) RelADPP
                                                        (2721) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2722) RelADPP
                                                        (2723) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2724) YES
                                                    (2725) RelADPP
                                                    (2726) RelADPP
                                                        (2727) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2728) RelADPP
                                                        (2729) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2730) YES
                                                    (2731) RelADPP
                                                        (2732) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (2733) RelADPP
                                                        (2734) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2735) YES
                                            (2736) RelADPP
                                                (2737) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2738) AND
                                                    (2739) RelADPP
                                                        (2740) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2741) RelADPP
                                                        (2742) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2743) YES
                                                    (2744) RelADPP
                                                        (2745) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2746) RelADPP
                                                        (2747) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2748) YES
                                                    (2749) RelADPP
                                                    (2750) RelADPP
                                                        (2751) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2752) RelADPP
                                                        (2753) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2754) YES
                                            (2755) RelADPP
                                                (2756) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2757) AND
                                                    (2758) RelADPP
                                                        (2759) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2760) RelADPP
                                                        (2761) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2762) YES
                                                    (2763) RelADPP
                                                    (2764) RelADPP
                                                        (2765) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2766) RelADPP
                                                        (2767) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2768) YES
                                                    (2769) RelADPP
                                                        (2770) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2771) RelADPP
                                                        (2772) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2773) YES
                                    (2774) RelADPP
                                        (2775) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (2776) RelADPP
                                        (2777) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2778) YES
                            (2779) RelADPP
                                (2780) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2781) AND
                                    (2782) RelADPP
                                        (2783) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (2784) RelADPP
                                        (2785) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2786) YES
                                    (2787) RelADPP
                                        (2788) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2789) OR
                                            (2790) RelADPP
                                                (2791) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2792) AND
                                                    (2793) RelADPP
                                                        (2794) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (2795) RelADPP
                                                        (2796) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2797) YES
                                                    (2798) RelADPP
                                                        (2799) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2800) RelADPP
                                                        (2801) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2802) YES
                                                    (2803) RelADPP
                                                    (2804) RelADPP
                                                        (2805) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2806) OR
                                                            (2807) RelADPP
                                                            (2808) RelADPP
                                                    (2809) RelADPP
                                                        (2810) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2811) RelADPP
                                                        (2812) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2813) YES
                                            (2814) RelADPP
                                                (2815) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2816) AND
                                                    (2817) RelADPP
                                                        (2818) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2819) RelADPP
                                                        (2820) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2821) YES
                                                    (2822) RelADPP
                                                        (2823) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2824) RelADPP
                                                        (2825) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2826) YES
                                                    (2827) RelADPP
                                                        (2828) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2829) RelADPP
                                                        (2830) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2831) YES
                                                    (2832) RelADPP
                                                    (2833) RelADPP
                                                        (2834) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (2835) OR
                                                            (2836) RelADPP
                                                            (2837) RelADPP
                                            (2838) RelADPP
                                                (2839) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2840) AND
                                                    (2841) RelADPP
                                                    (2842) RelADPP
                                                        (2843) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2844) RelADPP
                                                        (2845) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2846) YES
                                                    (2847) RelADPP
                                                        (2848) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2849) RelADPP
                                                        (2850) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2851) YES
                                            (2852) RelADPP
                                                (2853) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2854) AND
                                                    (2855) RelADPP
                                                        (2856) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2857) RelADPP
                                                        (2858) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2859) YES
                                                    (2860) RelADPP
                                                        (2861) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2862) RelADPP
                                                        (2863) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2864) YES
                                                    (2865) RelADPP
                                                    (2866) RelADPP
                                                        (2867) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2868) RelADPP
                                                        (2869) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2870) YES
                                                    (2871) RelADPP
                                    (2872) RelADPP
                                        (2873) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2874) RelADPP
                                        (2875) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2876) YES
                                    (2877) RelADPP
                                        (2878) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (2879) RelADPP
                                        (2880) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2881) YES
                                    (2882) RelADPP
                                        (2883) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2884) OR
                                            (2885) RelADPP
                                                (2886) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2887) AND
                                                    (2888) RelADPP
                                                        (2889) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2890) RelADPP
                                                        (2891) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2892) YES
                                                    (2893) RelADPP
                                                        (2894) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2895) RelADPP
                                                        (2896) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2897) YES
                                                    (2898) RelADPP
                                                        (2899) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (2900) RelADPP
                                                        (2901) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2902) YES
                                                    (2903) RelADPP
                                            (2904) RelADPP
                                                (2905) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2906) AND
                                                    (2907) RelADPP
                                                        (2908) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2909) RelADPP
                                                        (2910) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2911) YES
                                                    (2912) RelADPP
                                                    (2913) RelADPP
                                                        (2914) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2915) RelADPP
                                                        (2916) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2917) YES
                                                    (2918) RelADPP
                                                        (2919) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2920) RelADPP
                                                        (2921) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2922) YES
                                            (2923) RelADPP
                                                (2924) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2925) AND
                                                    (2926) RelADPP
                                                        (2927) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2928) RelADPP
                                                        (2929) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2930) YES
                                                    (2931) RelADPP
                                                    (2932) RelADPP
                                                        (2933) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (2934) RelADPP
                                                        (2935) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2936) YES
                                                    (2937) RelADPP
                                                        (2938) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2939) RelADPP
                                                        (2940) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2941) YES
                            (2942) RelADPP
                                (2943) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (2944) AND
                                    (2945) RelADPP
                                        (2946) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (2947) RelADPP
                                        (2948) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2949) YES
                                    (2950) RelADPP
                                        (2951) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (2952) RelADPP
                                        (2953) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (2954) YES
                                    (2955) RelADPP
                                        (2956) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (2957) OR
                                            (2958) RelADPP
                                                (2959) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2960) AND
                                                    (2961) RelADPP
                                                        (2962) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (2963) RelADPP
                                                        (2964) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2965) YES
                                                    (2966) RelADPP
                                                    (2967) RelADPP
                                                        (2968) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (2969) RelADPP
                                                        (2970) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2971) YES
                                                    (2972) RelADPP
                                                        (2973) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2974) RelADPP
                                                        (2975) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2976) YES
                                            (2977) RelADPP
                                                (2978) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2979) AND
                                                    (2980) RelADPP
                                                        (2981) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (2982) RelADPP
                                                        (2983) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2984) YES
                                                    (2985) RelADPP
                                                        (2986) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (2987) RelADPP
                                                        (2988) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2989) YES
                                                    (2990) RelADPP
                                                    (2991) RelADPP
                                                        (2992) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (2993) RelADPP
                                                        (2994) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (2995) YES
                                            (2996) RelADPP
                                                (2997) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (2998) AND
                                                    (2999) RelADPP
                                                        (3000) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3001) RelADPP
                                                        (3002) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3003) YES
                                                    (3004) RelADPP
                                                    (3005) RelADPP
                                                        (3006) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3007) RelADPP
                                                        (3008) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3009) YES
                                                    (3010) RelADPP
                                                        (3011) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3012) RelADPP
                                                        (3013) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3014) YES
                                    (3015) RelADPP
                                        (3016) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3017) RelADPP
                                        (3018) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3019) YES
                                    (3020) RelADPP
                                        (3021) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3022) OR
                                            (3023) RelADPP
                                                (3024) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3025) AND
                                                    (3026) RelADPP
                                                        (3027) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (3028) RelADPP
                                                        (3029) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3030) YES
                                                    (3031) RelADPP
                                                    (3032) RelADPP
                                                        (3033) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3034) RelADPP
                                                        (3035) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3036) YES
                                                    (3037) RelADPP
                                                        (3038) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3039) RelADPP
                                                        (3040) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3041) YES
                                                    (3042) RelADPP
                                            (3043) RelADPP
                                                (3044) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3045) AND
                                                    (3046) RelADPP
                                                        (3047) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3048) RelADPP
                                                        (3049) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3050) YES
                                                    (3051) RelADPP
                                                    (3052) RelADPP
                                                        (3053) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3054) RelADPP
                                                        (3055) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3056) YES
                                                    (3057) RelADPP
                                                    (3058) RelADPP
                                                        (3059) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3060) RelADPP
                                                        (3061) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3062) YES
                                            (3063) RelADPP
                                                (3064) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3065) AND
                                                    (3066) RelADPP
                                                    (3067) RelADPP
                                                        (3068) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3069) RelADPP
                                                        (3070) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3071) YES
                                                    (3072) RelADPP
                                                        (3073) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (3074) RelADPP
                                                        (3075) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3076) YES
                                            (3077) RelADPP
                                                (3078) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3079) AND
                                                    (3080) RelADPP
                                                        (3081) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3082) RelADPP
                                                        (3083) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3084) YES
                                                    (3085) RelADPP
                                                    (3086) RelADPP
                                                        (3087) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3088) RelADPP
                                                        (3089) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3090) YES
                                                    (3091) RelADPP
                                                    (3092) RelADPP
                                                        (3093) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3094) RelADPP
                                                        (3095) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3096) YES
                    (3097) RelADPP
                        (3098) RelADPReductionPairProof [EQUIVALENT, 0 ms]
                        (3099) RelADPP
                        (3100) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (3101) YES
            (3102) RelADPP
                (3103) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (3104) AND
                    (3105) RelADPP
                        (3106) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                        (3107) RelADPP
                        (3108) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (3109) YES
                    (3110) RelADPP
                        (3111) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (3112) OR
                            (3113) RelADPP
                                (3114) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (3115) AND
                                    (3116) RelADPP
                                        (3117) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3118) RelADPP
                                        (3119) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3120) YES
                                    (3121) RelADPP
                                        (3122) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (3123) RelADPP
                                        (3124) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3125) YES
                                    (3126) RelADPP
                                        (3127) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3128) OR
                                            (3129) RelADPP
                                                (3130) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3131) AND
                                                    (3132) RelADPP
                                                        (3133) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3134) RelADPP
                                                        (3135) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3136) YES
                                                    (3137) RelADPP
                                                    (3138) RelADPP
                                                        (3139) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3140) RelADPP
                                                        (3141) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3142) YES
                                                    (3143) RelADPP
                                                        (3144) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3145) RelADPP
                                                        (3146) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3147) TRUE
                                                    (3148) RelADPP
                                                        (3149) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3150) RelADPP
                                                        (3151) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3152) YES
                                            (3153) RelADPP
                                                (3154) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3155) AND
                                                    (3156) RelADPP
                                                        (3157) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (3158) RelADPP
                                                        (3159) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3160) YES
                                                    (3161) RelADPP
                                                    (3162) RelADPP
                                                        (3163) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3164) RelADPP
                                                        (3165) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3166) YES
                                            (3167) RelADPP
                                                (3168) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3169) AND
                                                    (3170) RelADPP
                                                        (3171) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3172) RelADPP
                                                        (3173) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3174) YES
                                                    (3175) RelADPP
                                                        (3176) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (3177) OR
                                                            (3178) RelADPP
                                                            (3179) RelADPP
                                                    (3180) RelADPP
                                                        (3181) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (3182) RelADPP
                                                        (3183) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3184) YES
                                                    (3185) RelADPP
                                                        (3186) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3187) RelADPP
                                                        (3188) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3189) YES
                                                    (3190) RelADPP
                                            (3191) RelADPP
                                                (3192) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3193) AND
                                                    (3194) RelADPP
                                                        (3195) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (3196) RelADPP
                                                        (3197) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3198) YES
                                                    (3199) RelADPP
                                                    (3200) RelADPP
                                                        (3201) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3202) RelADPP
                                                        (3203) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3204) YES
                                                    (3205) RelADPP
                                                    (3206) RelADPP
                                                        (3207) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3208) RelADPP
                                                        (3209) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3210) YES
                                    (3211) RelADPP
                                        (3212) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (3213) RelADPP
                                        (3214) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3215) YES
                                    (3216) RelADPP
                                        (3217) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3218) OR
                                            (3219) RelADPP
                                                (3220) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3221) AND
                                                    (3222) RelADPP
                                                        (3223) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3224) RelADPP
                                                        (3225) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3226) YES
                                                    (3227) RelADPP
                                                        (3228) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3229) RelADPP
                                                        (3230) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3231) YES
                                                    (3232) RelADPP
                                                        (3233) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3234) RelADPP
                                                        (3235) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3236) YES
                                                    (3237) RelADPP
                                                        (3238) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3239) RelADPP
                                                        (3240) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3241) TRUE
                                            (3242) RelADPP
                                                (3243) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3244) AND
                                                    (3245) RelADPP
                                                        (3246) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3247) RelADPP
                                                        (3248) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3249) YES
                                                    (3250) RelADPP
                                                    (3251) RelADPP
                                                        (3252) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3253) RelADPP
                                                        (3254) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3255) YES
                                                    (3256) RelADPP
                                                        (3257) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3258) RelADPP
                                                        (3259) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3260) YES
                                            (3261) RelADPP
                                                (3262) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3263) AND
                                                    (3264) RelADPP
                                                        (3265) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3266) RelADPP
                                                        (3267) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3268) YES
                                                    (3269) RelADPP
                                                    (3270) RelADPP
                                                        (3271) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3272) RelADPP
                                                        (3273) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3274) YES
                                                    (3275) RelADPP
                                                        (3276) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3277) RelADPP
                                                        (3278) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3279) YES
                            (3280) RelADPP
                                (3281) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                (3282) AND
                                    (3283) RelADPP
                                        (3284) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3285) RelADPP
                                        (3286) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3287) YES
                                    (3288) RelADPP
                                        (3289) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3290) RelADPP
                                        (3291) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3292) YES
                                    (3293) RelADPP
                                        (3294) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3295) OR
                                            (3296) RelADPP
                                                (3297) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3298) AND
                                                    (3299) RelADPP
                                                        (3300) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3301) RelADPP
                                                        (3302) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3303) YES
                                                    (3304) RelADPP
                                                        (3305) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3306) RelADPP
                                                        (3307) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3308) TRUE
                                                    (3309) RelADPP
                                                        (3310) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3311) RelADPP
                                                        (3312) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3313) YES
                                                    (3314) RelADPP
                                                        (3315) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3316) RelADPP
                                                        (3317) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3318) YES
                                                    (3319) RelADPP
                                            (3320) RelADPP
                                                (3321) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3322) AND
                                                    (3323) RelADPP
                                                        (3324) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3325) RelADPP
                                                        (3326) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3327) YES
                                                    (3328) RelADPP
                                                    (3329) RelADPP
                                                        (3330) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (3331) RelADPP
                                                        (3332) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3333) YES
                                            (3334) RelADPP
                                                (3335) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3336) AND
                                                    (3337) RelADPP
                                                        (3338) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3339) RelADPP
                                                        (3340) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3341) YES
                                                    (3342) RelADPP
                                                        (3343) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3344) RelADPP
                                                        (3345) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3346) YES
                                                    (3347) RelADPP
                                                    (3348) RelADPP
                                                        (3349) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3350) RelADPP
                                                        (3351) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3352) YES
                                                    (3353) RelADPP
                                            (3354) RelADPP
                                                (3355) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3356) AND
                                                    (3357) RelADPP
                                                        (3358) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3359) RelADPP
                                                        (3360) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3361) YES
                                                    (3362) RelADPP
                                                    (3363) RelADPP
                                                    (3364) RelADPP
                                                        (3365) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3366) RelADPP
                                                        (3367) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3368) YES
                                                    (3369) RelADPP
                                                        (3370) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3371) RelADPP
                                                        (3372) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3373) YES
                                    (3374) RelADPP
                                        (3375) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3376) RelADPP
                                        (3377) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3378) YES
                                    (3379) RelADPP
                                        (3380) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3381) OR
                                            (3382) RelADPP
                                                (3383) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3384) AND
                                                    (3385) RelADPP
                                                        (3386) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3387) RelADPP
                                                        (3388) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3389) YES
                                                    (3390) RelADPP
                                                        (3391) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3392) RelADPP
                                                        (3393) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3394) YES
                                                    (3395) RelADPP
                                                        (3396) RelADPReductionPairProof [EQUIVALENT, 15 ms]
                                                        (3397) RelADPP
                                                        (3398) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3399) TRUE
                                                    (3400) RelADPP
                                                        (3401) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3402) RelADPP
                                                        (3403) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3404) YES
                                            (3405) RelADPP
                                                (3406) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3407) AND
                                                    (3408) RelADPP
                                                        (3409) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3410) RelADPP
                                                        (3411) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3412) YES
                                                    (3413) RelADPP
                                                        (3414) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3415) RelADPP
                                                        (3416) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3417) YES
                                                    (3418) RelADPP
                                                    (3419) RelADPP
                                                        (3420) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3421) RelADPP
                                                        (3422) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3423) YES
                                            (3424) RelADPP
                                                (3425) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3426) AND
                                                    (3427) RelADPP
                                                        (3428) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3429) RelADPP
                                                        (3430) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3431) YES
                                                    (3432) RelADPP
                                                        (3433) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3434) RelADPP
                                                        (3435) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3436) YES
                                                    (3437) RelADPP
                                                    (3438) RelADPP
                                                        (3439) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3440) RelADPP
                                                        (3441) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3442) YES
                            (3443) RelADPP
                                (3444) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (3445) AND
                                    (3446) RelADPP
                                        (3447) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (3448) RelADPP
                                        (3449) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3450) YES
                                    (3451) RelADPP
                                        (3452) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3453) OR
                                            (3454) RelADPP
                                                (3455) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3456) AND
                                                    (3457) RelADPP
                                                        (3458) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3459) RelADPP
                                                        (3460) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3461) YES
                                                    (3462) RelADPP
                                                    (3463) RelADPP
                                                        (3464) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3465) RelADPP
                                                        (3466) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3467) YES
                                                    (3468) RelADPP
                                                        (3469) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3470) RelADPP
                                                        (3471) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3472) YES
                                            (3473) RelADPP
                                                (3474) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3475) AND
                                                    (3476) RelADPP
                                                        (3477) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3478) RelADPP
                                                        (3479) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3480) YES
                                                    (3481) RelADPP
                                                    (3482) RelADPP
                                                        (3483) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3484) RelADPP
                                                        (3485) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3486) YES
                                                    (3487) RelADPP
                                                        (3488) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3489) RelADPP
                                                        (3490) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3491) YES
                                            (3492) RelADPP
                                                (3493) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3494) AND
                                                    (3495) RelADPP
                                                        (3496) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3497) RelADPP
                                                        (3498) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3499) YES
                                                    (3500) RelADPP
                                                        (3501) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (3502) RelADPP
                                                        (3503) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3504) YES
                                                    (3505) RelADPP
                                                        (3506) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3507) RelADPP
                                                        (3508) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3509) YES
                                                    (3510) RelADPP
                                            (3511) RelADPP
                                                (3512) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3513) AND
                                                    (3514) RelADPP
                                                        (3515) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3516) RelADPP
                                                        (3517) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3518) YES
                                                    (3519) RelADPP
                                                        (3520) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3521) RelADPP
                                                        (3522) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3523) YES
                                                    (3524) RelADPP
                                                    (3525) RelADPP
                                                        (3526) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3527) RelADPP
                                                        (3528) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3529) YES
                                    (3530) RelADPP
                                        (3531) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (3532) RelADPP
                                        (3533) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3534) YES
                            (3535) RelADPP
                                (3536) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (3537) AND
                                    (3538) RelADPP
                                        (3539) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (3540) RelADPP
                                        (3541) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3542) YES
                                    (3543) RelADPP
                                        (3544) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3545) OR
                                            (3546) RelADPP
                                                (3547) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3548) AND
                                                    (3549) RelADPP
                                                        (3550) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                                        (3551) RelADPP
                                                        (3552) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3553) YES
                                                    (3554) RelADPP
                                                        (3555) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3556) RelADPP
                                                        (3557) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3558) YES
                                                    (3559) RelADPP
                                                    (3560) RelADPP
                                                        (3561) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3562) RelADPP
                                                        (3563) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3564) YES
                                            (3565) RelADPP
                                                (3566) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3567) AND
                                                    (3568) RelADPP
                                                        (3569) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3570) RelADPP
                                                        (3571) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3572) YES
                                                    (3573) RelADPP
                                                    (3574) RelADPP
                                                        (3575) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3576) RelADPP
                                                        (3577) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3578) YES
                                                    (3579) RelADPP
                                                        (3580) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3581) RelADPP
                                                        (3582) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3583) YES
                                            (3584) RelADPP
                                                (3585) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3586) AND
                                                    (3587) RelADPP
                                                        (3588) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3589) RelADPP
                                                        (3590) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3591) YES
                                                    (3592) RelADPP
                                                        (3593) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3594) RelADPP
                                                        (3595) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3596) YES
                                                    (3597) RelADPP
                                                        (3598) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3599) RelADPP
                                                        (3600) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3601) YES
                                                    (3602) RelADPP
                                    (3603) RelADPP
                                        (3604) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3605) OR
                                            (3606) RelADPP
                                                (3607) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3608) AND
                                                    (3609) RelADPP
                                                        (3610) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (3611) RelADPP
                                                        (3612) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3613) YES
                                                    (3614) RelADPP
                                                    (3615) RelADPP
                                                    (3616) RelADPP
                                                        (3617) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3618) RelADPP
                                                        (3619) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3620) YES
                                                    (3621) RelADPP
                                                        (3622) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3623) RelADPP
                                                        (3624) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3625) YES
                                            (3626) RelADPP
                                                (3627) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3628) AND
                                                    (3629) RelADPP
                                                        (3630) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3631) RelADPP
                                                        (3632) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3633) YES
                                                    (3634) RelADPP
                                                    (3635) RelADPP
                                                        (3636) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (3637) RelADPP
                                                        (3638) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3639) YES
                                                    (3640) RelADPP
                                                    (3641) RelADPP
                                                        (3642) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3643) RelADPP
                                                        (3644) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3645) YES
                                            (3646) RelADPP
                                                (3647) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3648) AND
                                                    (3649) RelADPP
                                                        (3650) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3651) RelADPP
                                                        (3652) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3653) YES
                                                    (3654) RelADPP
                                                        (3655) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3656) RelADPP
                                                        (3657) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3658) YES
                                                    (3659) RelADPP
                                            (3660) RelADPP
                                                (3661) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3662) AND
                                                    (3663) RelADPP
                                                        (3664) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3665) RelADPP
                                                        (3666) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3667) YES
                                                    (3668) RelADPP
                                                    (3669) RelADPP
                                                    (3670) RelADPP
                                                        (3671) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3672) RelADPP
                                                        (3673) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3674) YES
                                                    (3675) RelADPP
                                                        (3676) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3677) RelADPP
                                                        (3678) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3679) YES
                                    (3680) RelADPP
                                        (3681) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3682) RelADPP
                                        (3683) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3684) YES
                                    (3685) RelADPP
                                        (3686) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (3687) RelADPP
                                        (3688) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3689) YES
                            (3690) RelADPP
                                (3691) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (3692) AND
                                    (3693) RelADPP
                                        (3694) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3695) RelADPP
                                        (3696) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3697) YES
                                    (3698) RelADPP
                                        (3699) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3700) OR
                                            (3701) RelADPP
                                                (3702) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3703) AND
                                                    (3704) RelADPP
                                                        (3705) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3706) RelADPP
                                                        (3707) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3708) YES
                                                    (3709) RelADPP
                                                    (3710) RelADPP
                                                        (3711) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3712) RelADPP
                                                        (3713) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3714) YES
                                                    (3715) RelADPP
                                                        (3716) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3717) RelADPP
                                                        (3718) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3719) YES
                                            (3720) RelADPP
                                                (3721) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3722) AND
                                                    (3723) RelADPP
                                                        (3724) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3725) RelADPP
                                                        (3726) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3727) YES
                                                    (3728) RelADPP
                                                    (3729) RelADPP
                                                        (3730) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3731) RelADPP
                                                        (3732) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3733) YES
                                                    (3734) RelADPP
                                                        (3735) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3736) RelADPP
                                                        (3737) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3738) YES
                                            (3739) RelADPP
                                                (3740) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3741) AND
                                                    (3742) RelADPP
                                                        (3743) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3744) RelADPP
                                                        (3745) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3746) YES
                                                    (3747) RelADPP
                                                    (3748) RelADPP
                                                        (3749) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3750) RelADPP
                                                        (3751) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3752) YES
                                                    (3753) RelADPP
                                                        (3754) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3755) RelADPP
                                                        (3756) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3757) YES
                                    (3758) RelADPP
                                        (3759) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3760) OR
                                            (3761) RelADPP
                                                (3762) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3763) AND
                                                    (3764) RelADPP
                                                        (3765) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3766) RelADPP
                                                        (3767) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3768) YES
                                                    (3769) RelADPP
                                                    (3770) RelADPP
                                                        (3771) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3772) RelADPP
                                                        (3773) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3774) YES
                                                    (3775) RelADPP
                                                        (3776) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3777) RelADPP
                                                        (3778) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3779) YES
                                                    (3780) RelADPP
                                            (3781) RelADPP
                                                (3782) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3783) AND
                                                    (3784) RelADPP
                                                        (3785) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3786) RelADPP
                                                        (3787) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3788) YES
                                                    (3789) RelADPP
                                                        (3790) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (3791) OR
                                                            (3792) RelADPP
                                                            (3793) RelADPP
                                                    (3794) RelADPP
                                                        (3795) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (3796) OR
                                                            (3797) RelADPP
                                                            (3798) RelADPP
                                                            (3799) RelADPP
                                                    (3800) RelADPP
                                                        (3801) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3802) RelADPP
                                                        (3803) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3804) YES
                                                    (3805) RelADPP
                                                        (3806) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3807) RelADPP
                                                        (3808) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3809) YES
                                            (3810) RelADPP
                                                (3811) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3812) AND
                                                    (3813) RelADPP
                                                    (3814) RelADPP
                                                        (3815) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (3816) RelADPP
                                                        (3817) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3818) YES
                                                    (3819) RelADPP
                                                        (3820) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3821) RelADPP
                                                        (3822) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3823) YES
                                            (3824) RelADPP
                                                (3825) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3826) AND
                                                    (3827) RelADPP
                                                        (3828) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3829) RelADPP
                                                        (3830) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3831) YES
                                                    (3832) RelADPP
                                                        (3833) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3834) RelADPP
                                                        (3835) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3836) YES
                                                    (3837) RelADPP
                                                    (3838) RelADPP
                                                        (3839) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3840) RelADPP
                                                        (3841) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3842) YES
                                                    (3843) RelADPP
                                                        (3844) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (3845) OR
                                                            (3846) RelADPP
                                                            (3847) RelADPP
                                    (3848) RelADPP
                                        (3849) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (3850) RelADPP
                                        (3851) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3852) YES
                                    (3853) RelADPP
                                        (3854) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3855) RelADPP
                                        (3856) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3857) YES
                    (3858) RelADPP
                        (3859) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                        (3860) RelADPP
                        (3861) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (3862) YES
                    (3863) RelADPP
                        (3864) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (3865) RelADPP
                        (3866) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (3867) YES
                    (3868) RelADPP
                        (3869) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (3870) OR
                            (3871) RelADPP
                                (3872) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                (3873) AND
                                    (3874) RelADPP
                                        (3875) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3876) RelADPP
                                        (3877) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3878) YES
                                    (3879) RelADPP
                                        (3880) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (3881) RelADPP
                                        (3882) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3883) YES
                                    (3884) RelADPP
                                        (3885) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3886) OR
                                            (3887) RelADPP
                                                (3888) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3889) AND
                                                    (3890) RelADPP
                                                        (3891) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (3892) RelADPP
                                                        (3893) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3894) YES
                                                    (3895) RelADPP
                                                        (3896) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3897) RelADPP
                                                        (3898) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3899) YES
                                                    (3900) RelADPP
                                                        (3901) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3902) RelADPP
                                                        (3903) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3904) YES
                                                    (3905) RelADPP
                                                        (3906) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3907) RelADPP
                                                        (3908) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3909) TRUE
                                            (3910) RelADPP
                                                (3911) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3912) AND
                                                    (3913) RelADPP
                                                        (3914) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3915) RelADPP
                                                        (3916) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3917) YES
                                                    (3918) RelADPP
                                                        (3919) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3920) RelADPP
                                                        (3921) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3922) YES
                                                    (3923) RelADPP
                                                        (3924) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (3925) OR
                                                            (3926) RelADPP
                                                            (3927) RelADPP
                                                    (3928) RelADPP
                                                        (3929) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3930) RelADPP
                                                        (3931) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3932) YES
                                            (3933) RelADPP
                                                (3934) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3935) AND
                                                    (3936) RelADPP
                                                        (3937) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (3938) RelADPP
                                                        (3939) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3940) YES
                                                    (3941) RelADPP
                                                    (3942) RelADPP
                                                        (3943) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3944) RelADPP
                                                        (3945) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3946) YES
                                                    (3947) RelADPP
                                                        (3948) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3949) RelADPP
                                                        (3950) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3951) YES
                                    (3952) RelADPP
                                        (3953) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3954) RelADPP
                                        (3955) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3956) YES
                            (3957) RelADPP
                                (3958) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (3959) AND
                                    (3960) RelADPP
                                        (3961) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (3962) RelADPP
                                        (3963) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3964) YES
                                    (3965) RelADPP
                                        (3966) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (3967) RelADPP
                                        (3968) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (3969) YES
                                    (3970) RelADPP
                                        (3971) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (3972) OR
                                            (3973) RelADPP
                                                (3974) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3975) AND
                                                    (3976) RelADPP
                                                        (3977) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (3978) RelADPP
                                                        (3979) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3980) YES
                                                    (3981) RelADPP
                                                        (3982) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3983) RelADPP
                                                        (3984) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (3985) TRUE
                                                    (3986) RelADPP
                                                        (3987) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (3988) RelADPP
                                                        (3989) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3990) YES
                                                    (3991) RelADPP
                                                        (3992) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (3993) RelADPP
                                                        (3994) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (3995) YES
                                            (3996) RelADPP
                                                (3997) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (3998) AND
                                                    (3999) RelADPP
                                                        (4000) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4001) RelADPP
                                                        (4002) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4003) YES
                                                    (4004) RelADPP
                                                    (4005) RelADPP
                                                        (4006) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4007) RelADPP
                                                        (4008) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4009) YES
                                                    (4010) RelADPP
                                                        (4011) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4012) RelADPP
                                                        (4013) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4014) YES
                                            (4015) RelADPP
                                                (4016) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4017) AND
                                                    (4018) RelADPP
                                                        (4019) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4020) RelADPP
                                                        (4021) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4022) YES
                                                    (4023) RelADPP
                                                        (4024) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4025) RelADPP
                                                        (4026) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4027) YES
                                                    (4028) RelADPP
                                                    (4029) RelADPP
                                                        (4030) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4031) RelADPP
                                                        (4032) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4033) YES
                                    (4034) RelADPP
                                        (4035) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (4036) RelADPP
                                        (4037) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4038) YES
                            (4039) RelADPP
                                (4040) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (4041) AND
                                    (4042) RelADPP
                                        (4043) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (4044) RelADPP
                                        (4045) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4046) YES
                                    (4047) RelADPP
                                        (4048) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (4049) RelADPP
                                        (4050) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4051) YES
                                    (4052) RelADPP
                                        (4053) RelADPDerelatifying2Proof [SOUND, 1 ms]
                                        (4054) OR
                                            (4055) RelADPP
                                                (4056) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4057) AND
                                                    (4058) RelADPP
                                                        (4059) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4060) RelADPP
                                                        (4061) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4062) YES
                                                    (4063) RelADPP
                                                        (4064) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4065) OR
                                                            (4066) RelADPP
                                                            (4067) RelADPP
                                                    (4068) RelADPP
                                                        (4069) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4070) RelADPP
                                                        (4071) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4072) YES
                                                    (4073) RelADPP
                                                        (4074) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4075) RelADPP
                                                        (4076) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4077) YES
                                            (4078) RelADPP
                                                (4079) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4080) AND
                                                    (4081) RelADPP
                                                        (4082) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4083) RelADPP
                                                        (4084) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4085) YES
                                                    (4086) RelADPP
                                                    (4087) RelADPP
                                                        (4088) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4089) RelADPP
                                                        (4090) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4091) YES
                                                    (4092) RelADPP
                                                        (4093) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4094) RelADPP
                                                        (4095) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4096) YES
                                            (4097) RelADPP
                                                (4098) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4099) AND
                                                    (4100) RelADPP
                                                        (4101) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4102) RelADPP
                                                        (4103) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4104) YES
                                                    (4105) RelADPP
                                                        (4106) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4107) RelADPP
                                                        (4108) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4109) YES
                                                    (4110) RelADPP
                                                        (4111) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4112) RelADPP
                                                        (4113) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4114) YES
                                                    (4115) RelADPP
                                    (4116) RelADPP
                                        (4117) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (4118) RelADPP
                                        (4119) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4120) YES
                            (4121) RelADPP
                                (4122) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (4123) AND
                                    (4124) RelADPP
                                        (4125) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (4126) RelADPP
                                        (4127) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4128) YES
                                    (4129) RelADPP
                                        (4130) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (4131) RelADPP
                                        (4132) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4133) YES
                                    (4134) RelADPP
                                        (4135) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (4136) RelADPP
                                        (4137) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4138) YES
                                    (4139) RelADPP
                                        (4140) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (4141) OR
                                            (4142) RelADPP
                                                (4143) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4144) AND
                                                    (4145) RelADPP
                                                        (4146) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4147) RelADPP
                                                        (4148) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4149) YES
                                                    (4150) RelADPP
                                                        (4151) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4152) RelADPP
                                                        (4153) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4154) YES
                                                    (4155) RelADPP
                                                        (4156) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4157) OR
                                                            (4158) RelADPP
                                                            (4159) RelADPP
                                                    (4160) RelADPP
                                                        (4161) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4162) RelADPP
                                                        (4163) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4164) YES
                                            (4165) RelADPP
                                                (4166) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4167) AND
                                                    (4168) RelADPP
                                                        (4169) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4170) RelADPP
                                                        (4171) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4172) YES
                                                    (4173) RelADPP
                                                    (4174) RelADPP
                                                        (4175) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4176) RelADPP
                                                        (4177) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4178) YES
                                                    (4179) RelADPP
                                                        (4180) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4181) RelADPP
                                                        (4182) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4183) YES
                                            (4184) RelADPP
                                                (4185) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4186) AND
                                                    (4187) RelADPP
                                                        (4188) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4189) RelADPP
                                                        (4190) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4191) YES
                                                    (4192) RelADPP
                                                        (4193) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4194) RelADPP
                                                        (4195) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4196) YES
                                                    (4197) RelADPP
                                                    (4198) RelADPP
                                                        (4199) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4200) RelADPP
                                                        (4201) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4202) YES
            (4203) RelADPP
                (4204) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (4205) AND
                    (4206) RelADPP
                        (4207) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                        (4208) RelADPP
                        (4209) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (4210) YES
                    (4211) RelADPP
                        (4212) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (4213) OR
                            (4214) RelADPP
                                (4215) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (4216) AND
                                    (4217) RelADPP
                                        (4218) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (4219) RelADPP
                                        (4220) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4221) YES
                                    (4222) RelADPP
                                        (4223) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (4224) OR
                                            (4225) RelADPP
                                                (4226) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4227) AND
                                                    (4228) RelADPP
                                                        (4229) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4230) RelADPP
                                                        (4231) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4232) YES
                                                    (4233) RelADPP
                                                        (4234) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4235) RelADPP
                                                        (4236) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (4237) TRUE
                                                    (4238) RelADPP
                                                        (4239) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4240) OR
                                                            (4241) RelADPP
                                                                (4242) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4243) AND
                                                                    (4244) RelADPP
                                                                        (4245) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4246) RelADPP
                                                                        (4247) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4248) YES
                                                                    (4249) RelADPP
                                                                        (4250) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4251) RelADPP
                                                                        (4252) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4253) YES
                                                                    (4254) RelADPP
                                                                        (4255) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4256) RelADPP
                                                                        (4257) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4258) TRUE
                                                            (4259) RelADPP
                                                                (4260) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4261) AND
                                                                    (4262) RelADPP
                                                                        (4263) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (4264) RelADPP
                                                                        (4265) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4266) YES
                                                                    (4267) RelADPP
                                                                    (4268) RelADPP
                                                                        (4269) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4270) RelADPP
                                                                        (4271) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4272) YES
                                                                    (4273) RelADPP
                                                                        (4274) RelADPReductionPairProof [EQUIVALENT, 16 ms]
                                                                        (4275) RelADPP
                                                                        (4276) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4277) YES
                                                            (4278) RelADPP
                                                                (4279) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4280) AND
                                                                    (4281) RelADPP
                                                                        (4282) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4283) RelADPP
                                                                        (4284) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4285) YES
                                                                    (4286) RelADPP
                                                                        (4287) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                                        (4288) RelADPP
                                                                        (4289) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4290) YES
                                                                    (4291) RelADPP
                                                                        (4292) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4293) RelADPP
                                                                        (4294) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4295) YES
                                                                    (4296) RelADPP
                                                                        (4297) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4298) RelADPP
                                                                        (4299) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4300) TRUE
                                                                    (4301) RelADPP
                                                    (4302) RelADPP
                                                        (4303) RelADPReductionPairProof [EQUIVALENT, 1 ms]
                                                        (4304) RelADPP
                                                        (4305) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4306) YES
                                                    (4307) RelADPP
                                                        (4308) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4309) RelADPP
                                                        (4310) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4311) YES
                                            (4312) RelADPP
                                                (4313) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4314) AND
                                                    (4315) RelADPP
                                                        (4316) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4317) RelADPP
                                                        (4318) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4319) YES
                                                    (4320) RelADPP
                                                        (4321) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4322) RelADPP
                                                        (4323) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4324) YES
                                                    (4325) RelADPP
                                                        (4326) RelADPDerelatifying2Proof [SOUND, 1 ms]
                                                        (4327) OR
                                                            (4328) RelADPP
                                                                (4329) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4330) AND
                                                                    (4331) RelADPP
                                                                        (4332) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4333) RelADPP
                                                                        (4334) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4335) YES
                                                                    (4336) RelADPP
                                                                        (4337) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4338) RelADPP
                                                                        (4339) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4340) TRUE
                                                                    (4341) RelADPP
                                                                        (4342) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4343) RelADPP
                                                                        (4344) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4345) YES
                                                                    (4346) RelADPP
                                                                        (4347) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4348) RelADPP
                                                                        (4349) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4350) YES
                                                            (4351) RelADPP
                                                                (4352) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4353) AND
                                                                    (4354) RelADPP
                                                                        (4355) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4356) RelADPP
                                                                        (4357) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4358) YES
                                                                    (4359) RelADPP
                                                                        (4360) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4361) RelADPP
                                                                        (4362) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4363) YES
                                                                    (4364) RelADPP
                                                                    (4365) RelADPP
                                                                        (4366) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4367) RelADPP
                                                                        (4368) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4369) YES
                                                            (4370) RelADPP
                                                                (4371) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4372) AND
                                                                    (4373) RelADPP
                                                                        (4374) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4375) RelADPP
                                                                        (4376) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4377) YES
                                                                    (4378) RelADPP
                                                                    (4379) RelADPP
                                                                        (4380) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (4381) RelADPP
                                                                        (4382) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4383) YES
                                                                    (4384) RelADPP
                                                                        (4385) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (4386) RelADPP
                                                                        (4387) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4388) YES
                                            (4389) RelADPP
                                                (4390) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4391) AND
                                                    (4392) RelADPP
                                                        (4393) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4394) RelADPP
                                                        (4395) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4396) YES
                                                    (4397) RelADPP
                                                        (4398) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4399) OR
                                                            (4400) RelADPP
                                                                (4401) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4402) AND
                                                                    (4403) RelADPP
                                                                        (4404) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (4405) RelADPP
                                                                        (4406) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4407) YES
                                                                    (4408) RelADPP
                                                                        (4409) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4410) RelADPP
                                                                        (4411) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4412) YES
                                                                    (4413) RelADPP
                                                                        (4414) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4415) RelADPP
                                                                        (4416) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4417) YES
                                                            (4418) RelADPP
                                                                (4419) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4420) AND
                                                                    (4421) RelADPP
                                                                        (4422) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4423) RelADPP
                                                                        (4424) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4425) YES
                                                                    (4426) RelADPP
                                                                        (4427) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4428) RelADPP
                                                                        (4429) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4430) YES
                                                                    (4431) RelADPP
                                                                    (4432) RelADPP
                                                                        (4433) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4434) RelADPP
                                                                        (4435) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4436) YES
                                                    (4437) RelADPP
                                                        (4438) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4439) RelADPP
                                                        (4440) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4441) YES
                                                    (4442) RelADPP
                                                        (4443) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4444) RelADPP
                                                        (4445) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4446) YES
                                                    (4447) RelADPP
                                                        (4448) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4449) OR
                                                            (4450) RelADPP
                                                                (4451) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4452) AND
                                                                    (4453) RelADPP
                                                                        (4454) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (4455) RelADPP
                                                                        (4456) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4457) YES
                                                                    (4458) RelADPP
                                                                    (4459) RelADPP
                                                                        (4460) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                                        (4461) RelADPP
                                                                        (4462) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4463) YES
                                                                    (4464) RelADPP
                                                                        (4465) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4466) RelADPP
                                                                        (4467) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4468) YES
                                                            (4469) RelADPP
                                                                (4470) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4471) AND
                                                                    (4472) RelADPP
                                                                        (4473) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4474) RelADPP
                                                                        (4475) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4476) YES
                                                                    (4477) RelADPP
                                                                        (4478) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4479) RelADPP
                                                                        (4480) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4481) YES
                                                                    (4482) RelADPP
                                                            (4483) RelADPP
                                                                (4484) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4485) AND
                                                                    (4486) RelADPP
                                                                        (4487) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4488) RelADPP
                                                                        (4489) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4490) YES
                                                                    (4491) RelADPP
                                                                        (4492) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4493) RelADPP
                                                                        (4494) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4495) YES
                                                                    (4496) RelADPP
                                                                        (4497) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4498) RelADPP
                                                                        (4499) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4500) YES
                                                                    (4501) RelADPP
                                                                    (4502) RelADPP
                                                                        (4503) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                                        (4504) OR
                                                                            (4505) RelADPP
                                                                            (4506) RelADPP
                                            (4507) RelADPP
                                                (4508) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4509) AND
                                                    (4510) RelADPP
                                                        (4511) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4512) RelADPP
                                                        (4513) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4514) YES
                                                    (4515) RelADPP
                                                        (4516) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4517) RelADPP
                                                        (4518) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4519) YES
                                                    (4520) RelADPP
                                                        (4521) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4522) RelADPP
                                                        (4523) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4524) YES
                                                    (4525) RelADPP
                                                        (4526) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4527) OR
                                                            (4528) RelADPP
                                                                (4529) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4530) AND
                                                                    (4531) RelADPP
                                                                        (4532) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                                        (4533) RelADPP
                                                                        (4534) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4535) YES
                                                                    (4536) RelADPP
                                                                    (4537) RelADPP
                                                                        (4538) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4539) RelADPP
                                                                        (4540) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4541) YES
                                                                    (4542) RelADPP
                                                                        (4543) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4544) RelADPP
                                                                        (4545) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4546) TRUE
                                                                    (4547) RelADPP
                                                                        (4548) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4549) RelADPP
                                                                        (4550) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4551) YES
                                                            (4552) RelADPP
                                                                (4553) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4554) AND
                                                                    (4555) RelADPP
                                                                        (4556) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4557) RelADPP
                                                                        (4558) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4559) YES
                                                                    (4560) RelADPP
                                                                        (4561) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4562) RelADPP
                                                                        (4563) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4564) YES
                                                                    (4565) RelADPP
                                                                        (4566) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                                        (4567) OR
                                                                            (4568) RelADPP
                                                                            (4569) RelADPP
                                                            (4570) RelADPP
                                                                (4571) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4572) AND
                                                                    (4573) RelADPP
                                                                        (4574) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4575) RelADPP
                                                                        (4576) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4577) YES
                                                                    (4578) RelADPP
                                                                    (4579) RelADPP
                                                                    (4580) RelADPP
                                                                        (4581) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4582) RelADPP
                                                                        (4583) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4584) YES
                                                                    (4585) RelADPP
                                                                        (4586) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4587) RelADPP
                                                                        (4588) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4589) YES
                                                    (4590) RelADPP
                                                        (4591) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4592) OR
                                                            (4593) RelADPP
                                                                (4594) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4595) AND
                                                                    (4596) RelADPP
                                                                        (4597) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4598) RelADPP
                                                                        (4599) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4600) YES
                                                                    (4601) RelADPP
                                                                        (4602) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4603) RelADPP
                                                                        (4604) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4605) TRUE
                                                                    (4606) RelADPP
                                                                        (4607) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4608) RelADPP
                                                                        (4609) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4610) YES
                                                                    (4611) RelADPP
                                                                        (4612) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4613) RelADPP
                                                                        (4614) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4615) YES
                                                            (4616) RelADPP
                                                                (4617) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4618) AND
                                                                    (4619) RelADPP
                                                                        (4620) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4621) RelADPP
                                                                        (4622) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4623) YES
                                                                    (4624) RelADPP
                                                                        (4625) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4626) RelADPP
                                                                        (4627) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4628) YES
                                                                    (4629) RelADPP
                                                                    (4630) RelADPP
                                                                        (4631) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4632) RelADPP
                                                                        (4633) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4634) YES
                                    (4635) RelADPP
                                        (4636) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (4637) RelADPP
                                        (4638) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4639) YES
                                    (4640) RelADPP
                                        (4641) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (4642) OR
                                            (4643) RelADPP
                                                (4644) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4645) AND
                                                    (4646) RelADPP
                                                        (4647) RelADPReductionPairProof [EQUIVALENT, 1 ms]
                                                        (4648) RelADPP
                                                        (4649) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4650) YES
                                                    (4651) RelADPP
                                                        (4652) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4653) RelADPP
                                                        (4654) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4655) YES
                                                    (4656) RelADPP
                                                        (4657) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4658) RelADPP
                                                        (4659) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (4660) TRUE
                                                    (4661) RelADPP
                                                        (4662) RelADPReductionPairProof [EQUIVALENT, 1 ms]
                                                        (4663) RelADPP
                                                        (4664) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4665) YES
                                            (4666) RelADPP
                                                (4667) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4668) AND
                                                    (4669) RelADPP
                                                        (4670) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4671) RelADPP
                                                        (4672) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4673) YES
                                                    (4674) RelADPP
                                                        (4675) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4676) OR
                                                            (4677) RelADPP
                                                                (4678) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4679) AND
                                                                    (4680) RelADPP
                                                                        (4681) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (4682) RelADPP
                                                                        (4683) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4684) YES
                                                                    (4685) RelADPP
                                                                        (4686) RelADPReductionPairProof [EQUIVALENT, 14 ms]
                                                                        (4687) RelADPP
                                                                        (4688) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4689) YES
                                                                    (4690) RelADPP
                                                                        (4691) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4692) RelADPP
                                                                        (4693) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4694) YES
                                                            (4695) RelADPP
                                                                (4696) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4697) AND
                                                                    (4698) RelADPP
                                                                        (4699) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4700) RelADPP
                                                                        (4701) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4702) YES
                                                                    (4703) RelADPP
                                                                        (4704) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4705) RelADPP
                                                                        (4706) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4707) YES
                                                                    (4708) RelADPP
                                                                    (4709) RelADPP
                                                                        (4710) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4711) RelADPP
                                                                        (4712) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4713) YES
                                                    (4714) RelADPP
                                                        (4715) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4716) RelADPP
                                                        (4717) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4718) YES
                                                    (4719) RelADPP
                                                        (4720) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4721) RelADPP
                                                        (4722) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4723) YES
                                            (4724) RelADPP
                                                (4725) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                                (4726) AND
                                                    (4727) RelADPP
                                                        (4728) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4729) RelADPP
                                                        (4730) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4731) YES
                                                    (4732) RelADPP
                                                        (4733) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4734) OR
                                                            (4735) RelADPP
                                                                (4736) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4737) AND
                                                                    (4738) RelADPP
                                                                        (4739) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4740) RelADPP
                                                                        (4741) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4742) YES
                                                                    (4743) RelADPP
                                                                        (4744) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (4745) RelADPP
                                                                        (4746) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4747) YES
                                                                    (4748) RelADPP
                                                                        (4749) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4750) RelADPP
                                                                        (4751) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4752) YES
                                                                    (4753) RelADPP
                                                                        (4754) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4755) RelADPP
                                                                        (4756) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                        (4757) TRUE
                                                            (4758) RelADPP
                                                                (4759) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (4760) AND
                                                                    (4761) RelADPP
                                                                        (4762) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4763) RelADPP
                                                                        (4764) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4765) YES
                                                                    (4766) RelADPP
                                                                    (4767) RelADPP
                                                                        (4768) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4769) RelADPP
                                                                        (4770) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4771) YES
                                                                    (4772) RelADPP
                                                                        (4773) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (4774) RelADPP
                                                                        (4775) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                                        (4776) YES
                                                    (4777) RelADPP
                                                        (4778) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4779) RelADPP
                                                        (4780) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4781) YES
                                                    (4782) RelADPP
                                                        (4783) RelADPReductionPairProof [EQUIVALENT, 0 ms]
                                                        (4784) RelADPP
                                                        (4785) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4786) YES
                                    (4787) RelADPP
                                        (4788) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (4789) RelADPP
                                        (4790) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4791) YES
                            (4792) RelADPP
                                (4793) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (4794) AND
                                    (4795) RelADPP
                                        (4796) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (4797) RelADPP
                                        (4798) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4799) YES
                                    (4800) RelADPP
                                        (4801) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (4802) OR
                                            (4803) RelADPP
                                                (4804) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4805) AND
                                                    (4806) RelADPP
                                                        (4807) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (4808) RelADPP
                                                        (4809) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4810) YES
                                                    (4811) RelADPP
                                                        (4812) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4813) RelADPP
                                                        (4814) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (4815) TRUE
                                                    (4816) RelADPP
                                                        (4817) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4818) RelADPP
                                                        (4819) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4820) YES
                                                    (4821) RelADPP
                                                        (4822) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4823) OR
                                                            (4824) RelADPP
                                                            (4825) RelADPP
                                                            (4826) RelADPP
                                                    (4827) RelADPP
                                                        (4828) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (4829) RelADPP
                                                        (4830) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4831) YES
                                            (4832) RelADPP
                                                (4833) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4834) AND
                                                    (4835) RelADPP
                                                        (4836) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (4837) RelADPP
                                                        (4838) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4839) YES
                                                    (4840) RelADPP
                                                        (4841) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4842) OR
                                                            (4843) RelADPP
                                                            (4844) RelADPP
                                                            (4845) RelADPP
                                                    (4846) RelADPP
                                                        (4847) RelADPReductionPairProof [EQUIVALENT, 13 ms]
                                                        (4848) RelADPP
                                                        (4849) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4850) YES
                                            (4851) RelADPP
                                                (4852) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4853) AND
                                                    (4854) RelADPP
                                                        (4855) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4856) RelADPP
                                                        (4857) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4858) YES
                                                    (4859) RelADPP
                                                        (4860) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4861) RelADPP
                                                        (4862) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4863) YES
                                                    (4864) RelADPP
                                                        (4865) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4866) OR
                                                            (4867) RelADPP
                                                            (4868) RelADPP
                                                            (4869) RelADPP
                                                    (4870) RelADPP
                                                        (4871) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4872) OR
                                                            (4873) RelADPP
                                                            (4874) RelADPP
                                                    (4875) RelADPP
                                                        (4876) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4877) RelADPP
                                                        (4878) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4879) YES
                                            (4880) RelADPP
                                                (4881) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4882) AND
                                                    (4883) RelADPP
                                                        (4884) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4885) RelADPP
                                                        (4886) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4887) YES
                                                    (4888) RelADPP
                                                        (4889) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4890) RelADPP
                                                        (4891) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4892) YES
                                                    (4893) RelADPP
                                                        (4894) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (4895) RelADPP
                                                        (4896) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4897) YES
                                                    (4898) RelADPP
                                                        (4899) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4900) OR
                                                            (4901) RelADPP
                                                            (4902) RelADPP
                                                            (4903) RelADPP
                                                    (4904) RelADPP
                                                        (4905) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4906) OR
                                                            (4907) RelADPP
                                                            (4908) RelADPP
                                    (4909) RelADPP
                                        (4910) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (4911) RelADPP
                                        (4912) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4913) YES
                                    (4914) RelADPP
                                        (4915) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (4916) RelADPP
                                        (4917) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4918) YES
                                    (4919) RelADPP
                                        (4920) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (4921) OR
                                            (4922) RelADPP
                                                (4923) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4924) AND
                                                    (4925) RelADPP
                                                        (4926) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4927) RelADPP
                                                        (4928) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4929) YES
                                                    (4930) RelADPP
                                                        (4931) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4932) RelADPP
                                                        (4933) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4934) YES
                                                    (4935) RelADPP
                                                        (4936) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4937) RelADPP
                                                        (4938) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (4939) TRUE
                                                    (4940) RelADPP
                                                        (4941) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4942) RelADPP
                                                        (4943) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4944) YES
                                            (4945) RelADPP
                                                (4946) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4947) AND
                                                    (4948) RelADPP
                                                        (4949) RelADPReductionPairProof [EQUIVALENT, 2 ms]
                                                        (4950) RelADPP
                                                        (4951) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4952) YES
                                                    (4953) RelADPP
                                                        (4954) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (4955) RelADPP
                                                        (4956) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4957) YES
                                                    (4958) RelADPP
                                                        (4959) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4960) RelADPP
                                                        (4961) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4962) YES
                                                    (4963) RelADPP
                                                        (4964) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4965) OR
                                                            (4966) RelADPP
                                                            (4967) RelADPP
                                            (4968) RelADPP
                                                (4969) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (4970) AND
                                                    (4971) RelADPP
                                                        (4972) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4973) RelADPP
                                                        (4974) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4975) YES
                                                    (4976) RelADPP
                                                        (4977) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (4978) OR
                                                            (4979) RelADPP
                                                            (4980) RelADPP
                                                    (4981) RelADPP
                                                        (4982) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (4983) RelADPP
                                                        (4984) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4985) YES
                                                    (4986) RelADPP
                                                        (4987) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (4988) RelADPP
                                                        (4989) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (4990) YES
                            (4991) RelADPP
                                (4992) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (4993) AND
                                    (4994) RelADPP
                                        (4995) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (4996) RelADPP
                                        (4997) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (4998) YES
                                    (4999) RelADPP
                                        (5000) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (5001) RelADPP
                                        (5002) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5003) YES
                                    (5004) RelADPP
                                        (5005) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5006) OR
                                            (5007) RelADPP
                                                (5008) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5009) AND
                                                    (5010) RelADPP
                                                        (5011) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5012) RelADPP
                                                        (5013) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5014) YES
                                                    (5015) RelADPP
                                                        (5016) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5017) RelADPP
                                                        (5018) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5019) YES
                                                    (5020) RelADPP
                                                        (5021) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5022) OR
                                                            (5023) RelADPP
                                                            (5024) RelADPP
                                                            (5025) RelADPP
                                                    (5026) RelADPP
                                                        (5027) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5028) RelADPP
                                                        (5029) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5030) YES
                                            (5031) RelADPP
                                                (5032) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5033) AND
                                                    (5034) RelADPP
                                                        (5035) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5036) RelADPP
                                                        (5037) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5038) YES
                                                    (5039) RelADPP
                                                        (5040) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5041) OR
                                                            (5042) RelADPP
                                                            (5043) RelADPP
                                                            (5044) RelADPP
                                                    (5045) RelADPP
                                                        (5046) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5047) RelADPP
                                                        (5048) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5049) YES
                                                    (5050) RelADPP
                                                        (5051) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5052) RelADPP
                                                        (5053) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5054) YES
                                            (5055) RelADPP
                                                (5056) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5057) AND
                                                    (5058) RelADPP
                                                        (5059) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5060) RelADPP
                                                        (5061) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5062) YES
                                                    (5063) RelADPP
                                                        (5064) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (5065) RelADPP
                                                        (5066) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5067) YES
                                                    (5068) RelADPP
                                                        (5069) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5070) OR
                                                            (5071) RelADPP
                                                            (5072) RelADPP
                                                            (5073) RelADPP
                                                    (5074) RelADPP
                                                        (5075) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5076) RelADPP
                                                        (5077) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5078) YES
                                            (5079) RelADPP
                                                (5080) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5081) AND
                                                    (5082) RelADPP
                                                        (5083) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5084) RelADPP
                                                        (5085) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5086) YES
                                                    (5087) RelADPP
                                                        (5088) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5089) RelADPP
                                                        (5090) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5091) YES
                                                    (5092) RelADPP
                                                        (5093) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5094) RelADPP
                                                        (5095) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5096) YES
                                                    (5097) RelADPP
                                                        (5098) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5099) OR
                                                            (5100) RelADPP
                                                            (5101) RelADPP
                                                            (5102) RelADPP
                            (5103) RelADPP
                                (5104) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5105) AND
                                    (5106) RelADPP
                                        (5107) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (5108) RelADPP
                                        (5109) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5110) YES
                                    (5111) RelADPP
                                        (5112) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (5113) RelADPP
                                        (5114) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5115) YES
                                    (5116) RelADPP
                                        (5117) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5118) OR
                                            (5119) RelADPP
                                                (5120) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5121) AND
                                                    (5122) RelADPP
                                                        (5123) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5124) RelADPP
                                                        (5125) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5126) YES
                                                    (5127) RelADPP
                                                        (5128) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5129) OR
                                                            (5130) RelADPP
                                                            (5131) RelADPP
                                                    (5132) RelADPP
                                                        (5133) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5134) RelADPP
                                                        (5135) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5136) YES
                                                    (5137) RelADPP
                                                        (5138) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5139) RelADPP
                                                        (5140) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5141) YES
                                            (5142) RelADPP
                                                (5143) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5144) AND
                                                    (5145) RelADPP
                                                        (5146) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5147) RelADPP
                                                        (5148) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5149) YES
                                                    (5150) RelADPP
                                                        (5151) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5152) RelADPP
                                                        (5153) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5154) YES
                                                    (5155) RelADPP
                                                        (5156) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5157) RelADPP
                                                        (5158) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5159) YES
                                                    (5160) RelADPP
                                                        (5161) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5162) OR
                                                            (5163) RelADPP
                                                            (5164) RelADPP
                                            (5165) RelADPP
                                                (5166) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5167) AND
                                                    (5168) RelADPP
                                                        (5169) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5170) RelADPP
                                                        (5171) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5172) YES
                                                    (5173) RelADPP
                                                        (5174) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5175) OR
                                                            (5176) RelADPP
                                                            (5177) RelADPP
                                                    (5178) RelADPP
                                                        (5179) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5180) RelADPP
                                                        (5181) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5182) YES
                                                    (5183) RelADPP
                                                        (5184) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5185) RelADPP
                                                        (5186) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5187) YES
                                    (5188) RelADPP
                                        (5189) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5190) RelADPP
                                        (5191) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5192) YES
                                    (5193) RelADPP
                                        (5194) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5195) OR
                                            (5196) RelADPP
                                                (5197) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5198) AND
                                                    (5199) RelADPP
                                                        (5200) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5201) RelADPP
                                                        (5202) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5203) YES
                                                    (5204) RelADPP
                                                        (5205) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5206) RelADPP
                                                        (5207) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5208) YES
                                                    (5209) RelADPP
                                                        (5210) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5211) RelADPP
                                                        (5212) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5213) YES
                                                    (5214) RelADPP
                                                        (5215) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5216) OR
                                                            (5217) RelADPP
                                                            (5218) RelADPP
                                                            (5219) RelADPP
                                                    (5220) RelADPP
                                                        (5221) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5222) OR
                                                            (5223) RelADPP
                                                            (5224) RelADPP
                                            (5225) RelADPP
                                                (5226) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5227) AND
                                                    (5228) RelADPP
                                                        (5229) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5230) RelADPP
                                                        (5231) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5232) YES
                                                    (5233) RelADPP
                                                        (5234) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5235) RelADPP
                                                        (5236) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5237) YES
                                                    (5238) RelADPP
                                                        (5239) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5240) OR
                                                            (5241) RelADPP
                                                            (5242) RelADPP
                                                    (5243) RelADPP
                                                        (5244) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5245) OR
                                                            (5246) RelADPP
                                                            (5247) RelADPP
                                                            (5248) RelADPP
                                                    (5249) RelADPP
                                                        (5250) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5251) RelADPP
                                                        (5252) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5253) YES
                                            (5254) RelADPP
                                                (5255) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5256) AND
                                                    (5257) RelADPP
                                                        (5258) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5259) OR
                                                            (5260) RelADPP
                                                            (5261) RelADPP
                                                            (5262) RelADPP
                                                    (5263) RelADPP
                                                        (5264) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5265) RelADPP
                                                        (5266) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5267) YES
                                                    (5268) RelADPP
                                                        (5269) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5270) RelADPP
                                                        (5271) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5272) YES
                                            (5273) RelADPP
                                                (5274) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5275) AND
                                                    (5276) RelADPP
                                                        (5277) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5278) RelADPP
                                                        (5279) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5280) YES
                                                    (5281) RelADPP
                                                        (5282) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5283) OR
                                                            (5284) RelADPP
                                                            (5285) RelADPP
                                                            (5286) RelADPP
                                                    (5287) RelADPP
                                                        (5288) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5289) OR
                                                            (5290) RelADPP
                                                            (5291) RelADPP
                                                    (5292) RelADPP
                                                        (5293) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5294) RelADPP
                                                        (5295) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5296) YES
                                                    (5297) RelADPP
                                                        (5298) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5299) RelADPP
                                                        (5300) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5301) YES
                            (5302) RelADPP
                                (5303) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5304) AND
                                    (5305) RelADPP
                                        (5306) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5307) RelADPP
                                        (5308) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5309) YES
                                    (5310) RelADPP
                                        (5311) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5312) RelADPP
                                        (5313) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5314) YES
                                    (5315) RelADPP
                                        (5316) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5317) OR
                                            (5318) RelADPP
                                                (5319) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5320) AND
                                                    (5321) RelADPP
                                                        (5322) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5323) RelADPP
                                                        (5324) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5325) YES
                                                    (5326) RelADPP
                                                        (5327) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5328) OR
                                                            (5329) RelADPP
                                                            (5330) RelADPP
                                                    (5331) RelADPP
                                                        (5332) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5333) RelADPP
                                                        (5334) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5335) YES
                                                    (5336) RelADPP
                                                        (5337) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5338) RelADPP
                                                        (5339) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5340) YES
                                                    (5341) RelADPP
                                                        (5342) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5343) OR
                                                            (5344) RelADPP
                                                            (5345) RelADPP
                                                            (5346) RelADPP
                                            (5347) RelADPP
                                                (5348) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5349) AND
                                                    (5350) RelADPP
                                                        (5351) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5352) RelADPP
                                                        (5353) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5354) YES
                                                    (5355) RelADPP
                                                        (5356) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5357) RelADPP
                                                        (5358) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5359) YES
                                                    (5360) RelADPP
                                                        (5361) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5362) RelADPP
                                                        (5363) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5364) YES
                                                    (5365) RelADPP
                                                        (5366) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5367) OR
                                                            (5368) RelADPP
                                                                (5369) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (5370) AND
                                                                    (5371) RelADPP
                                                                        (5372) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (5373) RelADPP
                                                                    (5374) RelADPP
                                                                        (5375) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5376) RelADPP
                                                                    (5377) RelADPP
                                                                        (5378) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (5379) RelADPP
                                                                    (5380) RelADPP
                                                                    (5381) RelADPP
                                                                        (5382) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                                        (5383) RelADPP
                                                            (5384) RelADPP
                                                                (5385) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (5386) AND
                                                                    (5387) RelADPP
                                                                        (5388) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5389) RelADPP
                                                                    (5390) RelADPP
                                                                    (5391) RelADPP
                                                                        (5392) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5393) RelADPP
                                                            (5394) RelADPP
                                                                (5395) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                                (5396) AND
                                                                    (5397) RelADPP
                                                                        (5398) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5399) RelADPP
                                                                    (5400) RelADPP
                                                                        (5401) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5402) RelADPP
                                                                    (5403) RelADPP
                                                                        (5404) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                                        (5405) RelADPP
                                                                    (5406) RelADPP
                                                                    (5407) RelADPP
                                                    (5408) RelADPP
                                                        (5409) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5410) OR
                                                            (5411) RelADPP
                                                            (5412) RelADPP
                                            (5413) RelADPP
                                                (5414) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5415) AND
                                                    (5416) RelADPP
                                                        (5417) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5418) RelADPP
                                                        (5419) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5420) YES
                                                    (5421) RelADPP
                                                        (5422) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5423) RelADPP
                                                        (5424) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5425) YES
                                                    (5426) RelADPP
                                                        (5427) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5428) OR
                                                            (5429) RelADPP
                                                            (5430) RelADPP
                                                            (5431) RelADPP
                                            (5432) RelADPP
                                                (5433) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5434) AND
                                                    (5435) RelADPP
                                                        (5436) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5437) RelADPP
                                                        (5438) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5439) YES
                                                    (5440) RelADPP
                                                        (5441) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5442) OR
                                                            (5443) RelADPP
                                                            (5444) RelADPP
                                                    (5445) RelADPP
                                                        (5446) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5447) RelADPP
                                                        (5448) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5449) YES
                                                    (5450) RelADPP
                                                        (5451) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5452) OR
                                                            (5453) RelADPP
                                                            (5454) RelADPP
                                                            (5455) RelADPP
                                                    (5456) RelADPP
                                                        (5457) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5458) RelADPP
                                                        (5459) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5460) YES
                                    (5461) RelADPP
                                        (5462) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5463) RelADPP
                                        (5464) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5465) YES
                                    (5466) RelADPP
                                        (5467) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5468) OR
                                            (5469) RelADPP
                                                (5470) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5471) AND
                                                    (5472) RelADPP
                                                        (5473) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5474) RelADPP
                                                        (5475) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5476) YES
                                                    (5477) RelADPP
                                                        (5478) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5479) RelADPP
                                                        (5480) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5481) YES
                                                    (5482) RelADPP
                                                        (5483) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5484) OR
                                                            (5485) RelADPP
                                                            (5486) RelADPP
                                                    (5487) RelADPP
                                                        (5488) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5489) RelADPP
                                                        (5490) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5491) YES
                                            (5492) RelADPP
                                                (5493) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5494) AND
                                                    (5495) RelADPP
                                                        (5496) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5497) RelADPP
                                                        (5498) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5499) YES
                                                    (5500) RelADPP
                                                        (5501) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5502) RelADPP
                                                        (5503) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5504) YES
                                                    (5505) RelADPP
                                                        (5506) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5507) OR
                                                            (5508) RelADPP
                                                            (5509) RelADPP
                                                    (5510) RelADPP
                                                        (5511) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5512) RelADPP
                                                        (5513) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5514) YES
                                            (5515) RelADPP
                                                (5516) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5517) AND
                                                    (5518) RelADPP
                                                        (5519) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5520) RelADPP
                                                        (5521) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5522) YES
                                                    (5523) RelADPP
                                                        (5524) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5525) OR
                                                            (5526) RelADPP
                                                            (5527) RelADPP
                                                    (5528) RelADPP
                                                        (5529) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5530) RelADPP
                                                        (5531) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5532) YES
                                                    (5533) RelADPP
                                                        (5534) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5535) RelADPP
                                                        (5536) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5537) YES
                    (5538) RelADPP
                        (5539) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                        (5540) RelADPP
                        (5541) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (5542) YES
                    (5543) RelADPP
                        (5544) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (5545) OR
                            (5546) RelADPP
                                (5547) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5548) AND
                                    (5549) RelADPP
                                        (5550) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (5551) RelADPP
                                        (5552) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5553) YES
                                    (5554) RelADPP
                                        (5555) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                        (5556) RelADPP
                                        (5557) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5558) YES
                                    (5559) RelADPP
                                        (5560) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5561) OR
                                            (5562) RelADPP
                                                (5563) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5564) AND
                                                    (5565) RelADPP
                                                        (5566) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5567) RelADPP
                                                        (5568) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5569) YES
                                                    (5570) RelADPP
                                                        (5571) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (5572) RelADPP
                                                        (5573) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (5574) TRUE
                                                    (5575) RelADPP
                                                        (5576) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5577) RelADPP
                                                        (5578) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5579) YES
                                                    (5580) RelADPP
                                                        (5581) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5582) RelADPP
                                                        (5583) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5584) YES
                                            (5585) RelADPP
                                                (5586) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5587) AND
                                                    (5588) RelADPP
                                                        (5589) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5590) RelADPP
                                                        (5591) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5592) YES
                                                    (5593) RelADPP
                                                        (5594) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (5595) RelADPP
                                                        (5596) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5597) YES
                                                    (5598) RelADPP
                                                        (5599) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5600) OR
                                                            (5601) RelADPP
                                                            (5602) RelADPP
                                                    (5603) RelADPP
                                                        (5604) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5605) RelADPP
                                                        (5606) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5607) YES
                                            (5608) RelADPP
                                                (5609) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5610) AND
                                                    (5611) RelADPP
                                                        (5612) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (5613) RelADPP
                                                        (5614) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5615) YES
                                                    (5616) RelADPP
                                                        (5617) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5618) RelADPP
                                                        (5619) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5620) YES
                                                    (5621) RelADPP
                                                        (5622) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5623) OR
                                                            (5624) RelADPP
                                                            (5625) RelADPP
                                                    (5626) RelADPP
                                                        (5627) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5628) RelADPP
                                                        (5629) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5630) YES
                                    (5631) RelADPP
                                        (5632) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (5633) RelADPP
                                        (5634) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5635) YES
                            (5636) RelADPP
                                (5637) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5638) AND
                                    (5639) RelADPP
                                        (5640) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5641) RelADPP
                                        (5642) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5643) YES
                                    (5644) RelADPP
                                        (5645) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5646) OR
                                            (5647) RelADPP
                                                (5648) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5649) AND
                                                    (5650) RelADPP
                                                        (5651) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5652) RelADPP
                                                        (5653) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5654) YES
                                                    (5655) RelADPP
                                                        (5656) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5657) RelADPP
                                                        (5658) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5659) YES
                                                    (5660) RelADPP
                                                        (5661) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5662) RelADPP
                                                        (5663) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5664) YES
                                                    (5665) RelADPP
                                                        (5666) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5667) RelADPP
                                                        (5668) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                        (5669) TRUE
                                            (5670) RelADPP
                                                (5671) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5672) AND
                                                    (5673) RelADPP
                                                        (5674) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5675) RelADPP
                                                        (5676) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5677) YES
                                                    (5678) RelADPP
                                                        (5679) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5680) OR
                                                            (5681) RelADPP
                                                            (5682) RelADPP
                                                    (5683) RelADPP
                                                        (5684) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5685) RelADPP
                                                        (5686) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5687) YES
                                                    (5688) RelADPP
                                                        (5689) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5690) RelADPP
                                                        (5691) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5692) YES
                                            (5693) RelADPP
                                                (5694) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5695) AND
                                                    (5696) RelADPP
                                                        (5697) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5698) RelADPP
                                                        (5699) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5700) YES
                                                    (5701) RelADPP
                                                    (5702) RelADPP
                                                        (5703) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5704) RelADPP
                                                        (5705) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5706) YES
                                                    (5707) RelADPP
                                                        (5708) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5709) RelADPP
                                                        (5710) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5711) YES
                                    (5712) RelADPP
                                        (5713) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (5714) RelADPP
                                        (5715) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5716) YES
                                    (5717) RelADPP
                                        (5718) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5719) RelADPP
                                        (5720) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5721) YES
                            (5722) RelADPP
                                (5723) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5724) AND
                                    (5725) RelADPP
                                        (5726) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (5727) RelADPP
                                        (5728) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5729) YES
                                    (5730) RelADPP
                                        (5731) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5732) OR
                                            (5733) RelADPP
                                                (5734) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5735) AND
                                                    (5736) RelADPP
                                                        (5737) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5738) RelADPP
                                                        (5739) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5740) YES
                                                    (5741) RelADPP
                                                        (5742) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5743) OR
                                                            (5744) RelADPP
                                                            (5745) RelADPP
                                                    (5746) RelADPP
                                                        (5747) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5748) RelADPP
                                                        (5749) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5750) YES
                                                    (5751) RelADPP
                                                        (5752) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5753) RelADPP
                                                        (5754) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5755) YES
                                            (5756) RelADPP
                                                (5757) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5758) AND
                                                    (5759) RelADPP
                                                        (5760) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5761) RelADPP
                                                        (5762) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5763) YES
                                                    (5764) RelADPP
                                                        (5765) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5766) RelADPP
                                                        (5767) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5768) YES
                                                    (5769) RelADPP
                                                        (5770) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5771) OR
                                                            (5772) RelADPP
                                                            (5773) RelADPP
                                                    (5774) RelADPP
                                                        (5775) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5776) RelADPP
                                                        (5777) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5778) YES
                                            (5779) RelADPP
                                                (5780) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5781) AND
                                                    (5782) RelADPP
                                                        (5783) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5784) RelADPP
                                                        (5785) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5786) YES
                                                    (5787) RelADPP
                                                        (5788) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5789) OR
                                                            (5790) RelADPP
                                                            (5791) RelADPP
                                                    (5792) RelADPP
                                                        (5793) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5794) RelADPP
                                                        (5795) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5796) YES
                                                    (5797) RelADPP
                                                        (5798) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5799) RelADPP
                                                        (5800) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5801) YES
                                    (5802) RelADPP
                                        (5803) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (5804) RelADPP
                                        (5805) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5806) YES
                                    (5807) RelADPP
                                        (5808) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5809) RelADPP
                                        (5810) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5811) YES
                            (5812) RelADPP
                                (5813) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5814) AND
                                    (5815) RelADPP
                                        (5816) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5817) RelADPP
                                        (5818) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5819) YES
                                    (5820) RelADPP
                                        (5821) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (5822) OR
                                            (5823) RelADPP
                                                (5824) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5825) AND
                                                    (5826) RelADPP
                                                        (5827) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5828) RelADPP
                                                        (5829) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5830) YES
                                                    (5831) RelADPP
                                                        (5832) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5833) RelADPP
                                                        (5834) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5835) YES
                                                    (5836) RelADPP
                                                        (5837) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (5838) RelADPP
                                                        (5839) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5840) YES
                                                    (5841) RelADPP
                                            (5842) RelADPP
                                                (5843) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5844) AND
                                                    (5845) RelADPP
                                                        (5846) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5847) RelADPP
                                                        (5848) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5849) YES
                                                    (5850) RelADPP
                                                        (5851) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5852) RelADPP
                                                        (5853) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5854) YES
                                                    (5855) RelADPP
                                                    (5856) RelADPP
                                                        (5857) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5858) RelADPP
                                                        (5859) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5860) YES
                                            (5861) RelADPP
                                                (5862) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5863) AND
                                                    (5864) RelADPP
                                                        (5865) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (5866) RelADPP
                                                        (5867) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5868) YES
                                                    (5869) RelADPP
                                                        (5870) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5871) RelADPP
                                                        (5872) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5873) YES
                                                    (5874) RelADPP
                                                        (5875) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5876) RelADPP
                                                        (5877) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5878) YES
                                                    (5879) RelADPP
                                                        (5880) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5881) OR
                                                            (5882) RelADPP
                                                            (5883) RelADPP
                                    (5884) RelADPP
                                        (5885) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5886) RelADPP
                                        (5887) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5888) YES
                                    (5889) RelADPP
                                        (5890) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (5891) RelADPP
                                        (5892) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5893) YES
                    (5894) RelADPP
                        (5895) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (5896) RelADPP
                        (5897) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (5898) YES
            (5899) RelADPP
                (5900) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (5901) AND
                    (5902) RelADPP
                        (5903) RelADPReductionPairProof [EQUIVALENT, 13 ms]
                        (5904) RelADPP
                        (5905) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (5906) YES
                    (5907) RelADPP
                        (5908) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (5909) OR
                            (5910) RelADPP
                                (5911) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (5912) AND
                                    (5913) RelADPP
                                        (5914) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (5915) RelADPP
                                        (5916) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (5917) YES
                                    (5918) RelADPP
                                        (5919) RelADPDerelatifying2Proof [SOUND, 1 ms]
                                        (5920) OR
                                            (5921) RelADPP
                                                (5922) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5923) AND
                                                    (5924) RelADPP
                                                        (5925) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5926) RelADPP
                                                        (5927) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5928) YES
                                                    (5929) RelADPP
                                                        (5930) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5931) RelADPP
                                                        (5932) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5933) YES
                                                    (5934) RelADPP
                                                        (5935) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5936) OR
                                                            (5937) RelADPP
                                                            (5938) RelADPP
                                                            (5939) RelADPP
                                                    (5940) RelADPP
                                                        (5941) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5942) RelADPP
                                                        (5943) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5944) YES
                                            (5945) RelADPP
                                                (5946) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5947) AND
                                                    (5948) RelADPP
                                                        (5949) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5950) RelADPP
                                                        (5951) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5952) YES
                                                    (5953) RelADPP
                                                        (5954) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5955) OR
                                                            (5956) RelADPP
                                                            (5957) RelADPP
                                                            (5958) RelADPP
                                                    (5959) RelADPP
                                                        (5960) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (5961) RelADPP
                                                        (5962) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5963) YES
                                                    (5964) RelADPP
                                                        (5965) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (5966) RelADPP
                                                        (5967) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5968) YES
                                            (5969) RelADPP
                                                (5970) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5971) AND
                                                    (5972) RelADPP
                                                        (5973) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5974) RelADPP
                                                        (5975) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5976) YES
                                                    (5977) RelADPP
                                                        (5978) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5979) RelADPP
                                                        (5980) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5981) YES
                                                    (5982) RelADPP
                                                        (5983) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (5984) OR
                                                            (5985) RelADPP
                                                            (5986) RelADPP
                                                            (5987) RelADPP
                                                    (5988) RelADPP
                                                        (5989) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5990) RelADPP
                                                        (5991) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (5992) YES
                                            (5993) RelADPP
                                                (5994) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (5995) AND
                                                    (5996) RelADPP
                                                        (5997) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (5998) RelADPP
                                                        (5999) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6000) YES
                                                    (6001) RelADPP
                                                        (6002) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6003) OR
                                                            (6004) RelADPP
                                                            (6005) RelADPP
                                                            (6006) RelADPP
                                                    (6007) RelADPP
                                                        (6008) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6009) RelADPP
                                                        (6010) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6011) YES
                                                    (6012) RelADPP
                                                        (6013) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6014) RelADPP
                                                        (6015) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6016) YES
                                    (6017) RelADPP
                                        (6018) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                        (6019) RelADPP
                                        (6020) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6021) YES
                                    (6022) RelADPP
                                        (6023) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (6024) RelADPP
                                        (6025) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6026) YES
                            (6027) RelADPP
                                (6028) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6029) AND
                                    (6030) RelADPP
                                        (6031) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (6032) RelADPP
                                        (6033) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6034) YES
                                    (6035) RelADPP
                                        (6036) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (6037) RelADPP
                                        (6038) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6039) YES
                                    (6040) RelADPP
                                        (6041) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (6042) RelADPP
                                        (6043) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6044) YES
                                    (6045) RelADPP
                                        (6046) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6047) OR
                                            (6048) RelADPP
                                                (6049) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6050) AND
                                                    (6051) RelADPP
                                                        (6052) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (6053) RelADPP
                                                        (6054) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6055) YES
                                                    (6056) RelADPP
                                                        (6057) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6058) OR
                                                            (6059) RelADPP
                                                            (6060) RelADPP
                                                            (6061) RelADPP
                                                    (6062) RelADPP
                                                        (6063) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6064) RelADPP
                                                        (6065) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6066) YES
                                                    (6067) RelADPP
                                                        (6068) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6069) RelADPP
                                                        (6070) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6071) YES
                                            (6072) RelADPP
                                                (6073) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6074) AND
                                                    (6075) RelADPP
                                                        (6076) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6077) RelADPP
                                                        (6078) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6079) YES
                                                    (6080) RelADPP
                                                        (6081) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6082) RelADPP
                                                        (6083) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6084) YES
                                                    (6085) RelADPP
                                                        (6086) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6087) OR
                                                            (6088) RelADPP
                                                            (6089) RelADPP
                                                            (6090) RelADPP
                                                    (6091) RelADPP
                                                        (6092) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6093) RelADPP
                                                        (6094) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6095) YES
                                            (6096) RelADPP
                                                (6097) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6098) AND
                                                    (6099) RelADPP
                                                        (6100) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6101) RelADPP
                                                        (6102) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6103) YES
                                                    (6104) RelADPP
                                                        (6105) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6106) RelADPP
                                                        (6107) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6108) YES
                                                    (6109) RelADPP
                                                        (6110) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6111) OR
                                                            (6112) RelADPP
                                                            (6113) RelADPP
                                                            (6114) RelADPP
                                                    (6115) RelADPP
                                                        (6116) RelADPReductionPairProof [EQUIVALENT, 12 ms]
                                                        (6117) RelADPP
                                                        (6118) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6119) YES
                                            (6120) RelADPP
                                                (6121) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6122) AND
                                                    (6123) RelADPP
                                                        (6124) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6125) RelADPP
                                                        (6126) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6127) YES
                                                    (6128) RelADPP
                                                        (6129) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6130) RelADPP
                                                        (6131) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6132) YES
                                                    (6133) RelADPP
                                                        (6134) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6135) OR
                                                            (6136) RelADPP
                                                            (6137) RelADPP
                                                            (6138) RelADPP
                                                    (6139) RelADPP
                                                        (6140) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6141) RelADPP
                                                        (6142) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6143) YES
                            (6144) RelADPP
                                (6145) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6146) AND
                                    (6147) RelADPP
                                        (6148) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                        (6149) RelADPP
                                        (6150) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6151) YES
                                    (6152) RelADPP
                                        (6153) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6154) OR
                                            (6155) RelADPP
                                                (6156) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6157) AND
                                                    (6158) RelADPP
                                                        (6159) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6160) RelADPP
                                                        (6161) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6162) YES
                                                    (6163) RelADPP
                                                        (6164) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (6165) RelADPP
                                                        (6166) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6167) YES
                                                    (6168) RelADPP
                                                        (6169) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6170) OR
                                                            (6171) RelADPP
                                                            (6172) RelADPP
                                                            (6173) RelADPP
                                                    (6174) RelADPP
                                                        (6175) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6176) RelADPP
                                                        (6177) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6178) YES
                                            (6179) RelADPP
                                                (6180) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6181) AND
                                                    (6182) RelADPP
                                                        (6183) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (6184) RelADPP
                                                        (6185) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6186) YES
                                                    (6187) RelADPP
                                                        (6188) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6189) RelADPP
                                                        (6190) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6191) YES
                                                    (6192) RelADPP
                                                        (6193) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6194) OR
                                                            (6195) RelADPP
                                                            (6196) RelADPP
                                                            (6197) RelADPP
                                                    (6198) RelADPP
                                                        (6199) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (6200) RelADPP
                                                        (6201) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6202) YES
                                            (6203) RelADPP
                                                (6204) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6205) AND
                                                    (6206) RelADPP
                                                        (6207) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (6208) RelADPP
                                                        (6209) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6210) YES
                                                    (6211) RelADPP
                                                        (6212) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6213) RelADPP
                                                        (6214) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6215) YES
                                                    (6216) RelADPP
                                                        (6217) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6218) OR
                                                            (6219) RelADPP
                                                            (6220) RelADPP
                                                            (6221) RelADPP
                                                    (6222) RelADPP
                                                        (6223) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6224) RelADPP
                                                        (6225) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6226) YES
                                            (6227) RelADPP
                                                (6228) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6229) AND
                                                    (6230) RelADPP
                                                        (6231) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6232) RelADPP
                                                        (6233) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6234) YES
                                                    (6235) RelADPP
                                                        (6236) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6237) RelADPP
                                                        (6238) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6239) YES
                                                    (6240) RelADPP
                                                        (6241) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6242) OR
                                                            (6243) RelADPP
                                                            (6244) RelADPP
                                                            (6245) RelADPP
                                                    (6246) RelADPP
                                                        (6247) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6248) RelADPP
                                                        (6249) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6250) YES
                                    (6251) RelADPP
                                        (6252) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6253) RelADPP
                                        (6254) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6255) YES
                                    (6256) RelADPP
                                        (6257) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (6258) RelADPP
                                        (6259) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6260) YES
                            (6261) RelADPP
                                (6262) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6263) AND
                                    (6264) RelADPP
                                        (6265) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6266) RelADPP
                                        (6267) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6268) YES
                                    (6269) RelADPP
                                        (6270) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6271) OR
                                            (6272) RelADPP
                                                (6273) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6274) AND
                                                    (6275) RelADPP
                                                        (6276) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6277) RelADPP
                                                        (6278) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6279) YES
                                                    (6280) RelADPP
                                                        (6281) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6282) OR
                                                            (6283) RelADPP
                                                            (6284) RelADPP
                                                            (6285) RelADPP
                                                    (6286) RelADPP
                                                        (6287) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (6288) RelADPP
                                                        (6289) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6290) YES
                                                    (6291) RelADPP
                                                        (6292) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6293) RelADPP
                                                        (6294) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6295) YES
                                            (6296) RelADPP
                                                (6297) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6298) AND
                                                    (6299) RelADPP
                                                        (6300) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6301) RelADPP
                                                        (6302) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6303) YES
                                                    (6304) RelADPP
                                                        (6305) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6306) RelADPP
                                                        (6307) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6308) YES
                                                    (6309) RelADPP
                                                        (6310) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6311) RelADPP
                                                        (6312) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6313) YES
                                                    (6314) RelADPP
                                                        (6315) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6316) OR
                                                            (6317) RelADPP
                                                            (6318) RelADPP
                                                            (6319) RelADPP
                                            (6320) RelADPP
                                                (6321) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6322) AND
                                                    (6323) RelADPP
                                                        (6324) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6325) RelADPP
                                                        (6326) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6327) YES
                                                    (6328) RelADPP
                                                        (6329) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6330) OR
                                                            (6331) RelADPP
                                                            (6332) RelADPP
                                                            (6333) RelADPP
                                                    (6334) RelADPP
                                                        (6335) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6336) RelADPP
                                                        (6337) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6338) YES
                                                    (6339) RelADPP
                                                        (6340) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6341) RelADPP
                                                        (6342) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6343) YES
                                            (6344) RelADPP
                                                (6345) RelADPDepGraphProof [EQUIVALENT, 1 ms]
                                                (6346) AND
                                                    (6347) RelADPP
                                                        (6348) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6349) RelADPP
                                                        (6350) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6351) YES
                                                    (6352) RelADPP
                                                        (6353) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6354) RelADPP
                                                        (6355) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6356) YES
                                                    (6357) RelADPP
                                                        (6358) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6359) OR
                                                            (6360) RelADPP
                                                            (6361) RelADPP
                                                            (6362) RelADPP
                                                    (6363) RelADPP
                                                        (6364) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6365) RelADPP
                                                        (6366) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6367) YES
                                    (6368) RelADPP
                                        (6369) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6370) RelADPP
                                        (6371) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6372) YES
                                    (6373) RelADPP
                                        (6374) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6375) RelADPP
                                        (6376) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6377) YES
                            (6378) RelADPP
                                (6379) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6380) AND
                                    (6381) RelADPP
                                        (6382) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (6383) RelADPP
                                        (6384) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6385) YES
                                    (6386) RelADPP
                                        (6387) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6388) OR
                                            (6389) RelADPP
                                                (6390) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6391) AND
                                                    (6392) RelADPP
                                                        (6393) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6394) RelADPP
                                                        (6395) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6396) YES
                                                    (6397) RelADPP
                                                        (6398) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6399) RelADPP
                                                        (6400) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6401) YES
                                                    (6402) RelADPP
                                                        (6403) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6404) OR
                                                            (6405) RelADPP
                                                            (6406) RelADPP
                                                            (6407) RelADPP
                                                    (6408) RelADPP
                                                        (6409) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6410) RelADPP
                                                        (6411) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6412) YES
                                            (6413) RelADPP
                                                (6414) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6415) AND
                                                    (6416) RelADPP
                                                        (6417) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6418) RelADPP
                                                        (6419) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6420) YES
                                                    (6421) RelADPP
                                                        (6422) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6423) RelADPP
                                                        (6424) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6425) YES
                                                    (6426) RelADPP
                                                        (6427) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6428) RelADPP
                                                        (6429) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6430) YES
                                                    (6431) RelADPP
                                                        (6432) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6433) OR
                                                            (6434) RelADPP
                                                            (6435) RelADPP
                                                            (6436) RelADPP
                                            (6437) RelADPP
                                                (6438) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6439) AND
                                                    (6440) RelADPP
                                                        (6441) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6442) RelADPP
                                                        (6443) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6444) YES
                                                    (6445) RelADPP
                                                        (6446) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6447) RelADPP
                                                        (6448) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6449) YES
                                                    (6450) RelADPP
                                                        (6451) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6452) RelADPP
                                                        (6453) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6454) YES
                                                    (6455) RelADPP
                                                        (6456) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6457) OR
                                                            (6458) RelADPP
                                                            (6459) RelADPP
                                                            (6460) RelADPP
                                            (6461) RelADPP
                                                (6462) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6463) AND
                                                    (6464) RelADPP
                                                        (6465) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6466) RelADPP
                                                        (6467) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6468) YES
                                                    (6469) RelADPP
                                                        (6470) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6471) OR
                                                            (6472) RelADPP
                                                            (6473) RelADPP
                                                            (6474) RelADPP
                                                    (6475) RelADPP
                                                        (6476) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6477) RelADPP
                                                        (6478) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6479) YES
                                                    (6480) RelADPP
                                                        (6481) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6482) RelADPP
                                                        (6483) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6484) YES
                                    (6485) RelADPP
                                        (6486) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6487) RelADPP
                                        (6488) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6489) YES
                                    (6490) RelADPP
                                        (6491) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6492) RelADPP
                                        (6493) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6494) YES
                    (6495) RelADPP
                        (6496) RelADPReductionPairProof [EQUIVALENT, 12 ms]
                        (6497) RelADPP
                        (6498) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (6499) YES
            (6500) RelADPP
                (6501) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (6502) AND
                    (6503) RelADPP
                        (6504) RelADPReductionPairProof [EQUIVALENT, 13 ms]
                        (6505) RelADPP
                        (6506) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (6507) YES
                    (6508) RelADPP
                        (6509) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (6510) OR
                            (6511) RelADPP
                                (6512) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6513) AND
                                    (6514) RelADPP
                                        (6515) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6516) RelADPP
                                        (6517) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6518) YES
                                    (6519) RelADPP
                                        (6520) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (6521) RelADPP
                                        (6522) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6523) YES
                                    (6524) RelADPP
                                        (6525) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6526) OR
                                            (6527) RelADPP
                                                (6528) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6529) AND
                                                    (6530) RelADPP
                                                        (6531) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6532) RelADPP
                                                        (6533) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6534) YES
                                                    (6535) RelADPP
                                                        (6536) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6537) RelADPP
                                                        (6538) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6539) YES
                                                    (6540) RelADPP
                                                    (6541) RelADPP
                                                        (6542) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6543) RelADPP
                                                        (6544) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6545) YES
                                            (6546) RelADPP
                                                (6547) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6548) AND
                                                    (6549) RelADPP
                                                        (6550) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6551) RelADPP
                                                        (6552) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6553) YES
                                                    (6554) RelADPP
                                                        (6555) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6556) RelADPP
                                                        (6557) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6558) YES
                                                    (6559) RelADPP
                                                        (6560) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6561) OR
                                                            (6562) RelADPP
                                                            (6563) RelADPP
                                                    (6564) RelADPP
                                                        (6565) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6566) RelADPP
                                                        (6567) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6568) YES
                                            (6569) RelADPP
                                                (6570) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6571) AND
                                                    (6572) RelADPP
                                                        (6573) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6574) RelADPP
                                                        (6575) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6576) YES
                                                    (6577) RelADPP
                                                        (6578) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (6579) RelADPP
                                                        (6580) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6581) YES
                                                    (6582) RelADPP
                                                        (6583) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6584) OR
                                                            (6585) RelADPP
                                                            (6586) RelADPP
                                                    (6587) RelADPP
                                                        (6588) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6589) RelADPP
                                                        (6590) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6591) YES
                                    (6592) RelADPP
                                        (6593) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6594) RelADPP
                                        (6595) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6596) YES
                            (6597) RelADPP
                                (6598) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6599) AND
                                    (6600) RelADPP
                                        (6601) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6602) RelADPP
                                        (6603) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6604) YES
                                    (6605) RelADPP
                                        (6606) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6607) RelADPP
                                        (6608) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6609) YES
                                    (6610) RelADPP
                                        (6611) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6612) RelADPP
                                        (6613) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6614) YES
                                    (6615) RelADPP
                                        (6616) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6617) OR
                                            (6618) RelADPP
                                                (6619) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6620) AND
                                                    (6621) RelADPP
                                                        (6622) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6623) RelADPP
                                                        (6624) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6625) YES
                                                    (6626) RelADPP
                                                        (6627) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6628) RelADPP
                                                        (6629) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6630) YES
                                                    (6631) RelADPP
                                                        (6632) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6633) OR
                                                            (6634) RelADPP
                                                            (6635) RelADPP
                                                    (6636) RelADPP
                                                        (6637) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (6638) RelADPP
                                                        (6639) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6640) YES
                                            (6641) RelADPP
                                                (6642) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6643) AND
                                                    (6644) RelADPP
                                                        (6645) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6646) RelADPP
                                                        (6647) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6648) YES
                                                    (6649) RelADPP
                                                        (6650) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6651) OR
                                                            (6652) RelADPP
                                                            (6653) RelADPP
                                                    (6654) RelADPP
                                                        (6655) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6656) RelADPP
                                                        (6657) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6658) YES
                                                    (6659) RelADPP
                                                        (6660) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6661) RelADPP
                                                        (6662) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6663) YES
                                            (6664) RelADPP
                                                (6665) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6666) AND
                                                    (6667) RelADPP
                                                        (6668) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (6669) RelADPP
                                                        (6670) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6671) YES
                                                    (6672) RelADPP
                                                        (6673) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6674) OR
                                                            (6675) RelADPP
                                                            (6676) RelADPP
                                                    (6677) RelADPP
                                                        (6678) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6679) RelADPP
                                                        (6680) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6681) YES
                                                    (6682) RelADPP
                                                        (6683) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6684) RelADPP
                                                        (6685) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6686) YES
                            (6687) RelADPP
                                (6688) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6689) AND
                                    (6690) RelADPP
                                        (6691) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6692) RelADPP
                                        (6693) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6694) YES
                                    (6695) RelADPP
                                        (6696) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6697) OR
                                            (6698) RelADPP
                                                (6699) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6700) AND
                                                    (6701) RelADPP
                                                        (6702) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6703) RelADPP
                                                        (6704) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6705) YES
                                                    (6706) RelADPP
                                                        (6707) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6708) RelADPP
                                                        (6709) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6710) YES
                                                    (6711) RelADPP
                                                        (6712) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6713) RelADPP
                                                        (6714) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6715) YES
                                                    (6716) RelADPP
                                                        (6717) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6718) OR
                                                            (6719) RelADPP
                                                            (6720) RelADPP
                                            (6721) RelADPP
                                                (6722) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6723) AND
                                                    (6724) RelADPP
                                                        (6725) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6726) RelADPP
                                                        (6727) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6728) YES
                                                    (6729) RelADPP
                                                        (6730) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6731) RelADPP
                                                        (6732) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6733) YES
                                                    (6734) RelADPP
                                                        (6735) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6736) OR
                                                            (6737) RelADPP
                                                            (6738) RelADPP
                                                    (6739) RelADPP
                                                        (6740) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (6741) RelADPP
                                                        (6742) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6743) YES
                                            (6744) RelADPP
                                                (6745) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6746) AND
                                                    (6747) RelADPP
                                                        (6748) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6749) RelADPP
                                                        (6750) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6751) YES
                                                    (6752) RelADPP
                                                        (6753) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6754) RelADPP
                                                        (6755) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6756) YES
                                                    (6757) RelADPP
                                                        (6758) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6759) RelADPP
                                                        (6760) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6761) YES
                                                    (6762) RelADPP
                                                        (6763) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6764) OR
                                                            (6765) RelADPP
                                                            (6766) RelADPP
                                    (6767) RelADPP
                                        (6768) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                        (6769) RelADPP
                                        (6770) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6771) YES
                                    (6772) RelADPP
                                        (6773) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (6774) RelADPP
                                        (6775) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6776) YES
                            (6777) RelADPP
                                (6778) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6779) AND
                                    (6780) RelADPP
                                        (6781) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                        (6782) RelADPP
                                        (6783) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6784) YES
                                    (6785) RelADPP
                                        (6786) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6787) OR
                                            (6788) RelADPP
                                                (6789) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6790) AND
                                                    (6791) RelADPP
                                                        (6792) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6793) RelADPP
                                                        (6794) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6795) YES
                                                    (6796) RelADPP
                                                        (6797) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6798) RelADPP
                                                        (6799) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6800) YES
                                                    (6801) RelADPP
                                                        (6802) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6803) OR
                                                            (6804) RelADPP
                                                            (6805) RelADPP
                                                    (6806) RelADPP
                                                        (6807) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6808) RelADPP
                                                        (6809) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6810) YES
                                            (6811) RelADPP
                                                (6812) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6813) AND
                                                    (6814) RelADPP
                                                        (6815) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6816) RelADPP
                                                        (6817) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6818) YES
                                                    (6819) RelADPP
                                                        (6820) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6821) RelADPP
                                                        (6822) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6823) YES
                                                    (6824) RelADPP
                                                        (6825) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6826) RelADPP
                                                        (6827) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6828) YES
                                                    (6829) RelADPP
                                                        (6830) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6831) OR
                                                            (6832) RelADPP
                                                            (6833) RelADPP
                                            (6834) RelADPP
                                                (6835) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6836) AND
                                                    (6837) RelADPP
                                                        (6838) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6839) RelADPP
                                                        (6840) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6841) YES
                                                    (6842) RelADPP
                                                        (6843) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6844) RelADPP
                                                        (6845) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6846) YES
                                                    (6847) RelADPP
                                                        (6848) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6849) RelADPP
                                                        (6850) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6851) YES
                                                    (6852) RelADPP
                                                        (6853) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6854) OR
                                                            (6855) RelADPP
                                                            (6856) RelADPP
                                    (6857) RelADPP
                                        (6858) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                                        (6859) RelADPP
                                        (6860) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6861) YES
                                    (6862) RelADPP
                                        (6863) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (6864) RelADPP
                                        (6865) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6866) YES
                    (6867) RelADPP
                        (6868) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (6869) RelADPP
                        (6870) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (6871) YES
                    (6872) RelADPP
                        (6873) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (6874) OR
                            (6875) RelADPP
                                (6876) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (6877) AND
                                    (6878) RelADPP
                                        (6879) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (6880) RelADPP
                                        (6881) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (6882) YES
                                    (6883) RelADPP
                                        (6884) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6885) OR
                                            (6886) RelADPP
                                                (6887) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6888) AND
                                                    (6889) RelADPP
                                                        (6890) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6891) RelADPP
                                                        (6892) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6893) YES
                                                    (6894) RelADPP
                                                        (6895) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6896) OR
                                                            (6897) RelADPP
                                                            (6898) RelADPP
                                                    (6899) RelADPP
                                                        (6900) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6901) RelADPP
                                                        (6902) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6903) YES
                                                    (6904) RelADPP
                                                        (6905) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6906) RelADPP
                                                        (6907) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6908) YES
                                            (6909) RelADPP
                                                (6910) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6911) AND
                                                    (6912) RelADPP
                                                        (6913) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6914) RelADPP
                                                        (6915) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6916) YES
                                                    (6917) RelADPP
                                                        (6918) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6919) RelADPP
                                                        (6920) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6921) YES
                                                    (6922) RelADPP
                                                        (6923) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6924) OR
                                                            (6925) RelADPP
                                                            (6926) RelADPP
                                                    (6927) RelADPP
                                                        (6928) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (6929) RelADPP
                                                        (6930) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6931) YES
                                            (6932) RelADPP
                                                (6933) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6934) AND
                                                    (6935) RelADPP
                                                        (6936) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6937) RelADPP
                                                        (6938) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6939) YES
                                                    (6940) RelADPP
                                                        (6941) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6942) OR
                                                            (6943) RelADPP
                                                            (6944) RelADPP
                                                    (6945) RelADPP
                                                        (6946) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6947) RelADPP
                                                        (6948) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6949) YES
                                                    (6950) RelADPP
                                                        (6951) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6952) RelADPP
                                                        (6953) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6954) YES
                                    (6955) RelADPP
                                        (6956) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (6957) OR
                                            (6958) RelADPP
                                                (6959) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6960) AND
                                                    (6961) RelADPP
                                                        (6962) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (6963) RelADPP
                                                        (6964) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6965) YES
                                                    (6966) RelADPP
                                                        (6967) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6968) OR
                                                            (6969) RelADPP
                                                            (6970) RelADPP
                                                    (6971) RelADPP
                                                        (6972) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6973) RelADPP
                                                        (6974) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6975) YES
                                                    (6976) RelADPP
                                                        (6977) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6978) OR
                                                            (6979) RelADPP
                                                            (6980) RelADPP
                                                            (6981) RelADPP
                                                    (6982) RelADPP
                                                        (6983) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (6984) RelADPP
                                                        (6985) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6986) YES
                                            (6987) RelADPP
                                                (6988) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (6989) AND
                                                    (6990) RelADPP
                                                        (6991) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (6992) RelADPP
                                                        (6993) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (6994) YES
                                                    (6995) RelADPP
                                                        (6996) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (6997) OR
                                                            (6998) RelADPP
                                                            (6999) RelADPP
                                                            (7000) RelADPP
                                                    (7001) RelADPP
                                                        (7002) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7003) OR
                                                            (7004) RelADPP
                                                            (7005) RelADPP
                                                    (7006) RelADPP
                                                        (7007) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7008) RelADPP
                                                        (7009) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7010) YES
                                                    (7011) RelADPP
                                                        (7012) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7013) RelADPP
                                                        (7014) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7015) YES
                                            (7016) RelADPP
                                                (7017) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7018) AND
                                                    (7019) RelADPP
                                                        (7020) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7021) RelADPP
                                                        (7022) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7023) YES
                                                    (7024) RelADPP
                                                        (7025) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7026) RelADPP
                                                        (7027) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7028) YES
                                                    (7029) RelADPP
                                                        (7030) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7031) OR
                                                            (7032) RelADPP
                                                            (7033) RelADPP
                                                            (7034) RelADPP
                                            (7035) RelADPP
                                                (7036) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7037) AND
                                                    (7038) RelADPP
                                                        (7039) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7040) RelADPP
                                                        (7041) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7042) YES
                                                    (7043) RelADPP
                                                        (7044) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7045) OR
                                                            (7046) RelADPP
                                                            (7047) RelADPP
                                                            (7048) RelADPP
                                                    (7049) RelADPP
                                                        (7050) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7051) RelADPP
                                                        (7052) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7053) YES
                                                    (7054) RelADPP
                                                        (7055) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7056) RelADPP
                                                        (7057) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7058) YES
                                                    (7059) RelADPP
                                                        (7060) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7061) OR
                                                            (7062) RelADPP
                                                            (7063) RelADPP
                                    (7064) RelADPP
                                        (7065) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                        (7066) RelADPP
                                        (7067) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7068) YES
                                    (7069) RelADPP
                                        (7070) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7071) RelADPP
                                        (7072) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7073) YES
                            (7074) RelADPP
                                (7075) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7076) AND
                                    (7077) RelADPP
                                        (7078) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (7079) RelADPP
                                        (7080) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7081) YES
                                    (7082) RelADPP
                                        (7083) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7084) OR
                                            (7085) RelADPP
                                                (7086) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7087) AND
                                                    (7088) RelADPP
                                                        (7089) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7090) RelADPP
                                                        (7091) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7092) YES
                                                    (7093) RelADPP
                                                        (7094) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7095) OR
                                                            (7096) RelADPP
                                                            (7097) RelADPP
                                                    (7098) RelADPP
                                                        (7099) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7100) RelADPP
                                                        (7101) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7102) YES
                                                    (7103) RelADPP
                                                        (7104) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7105) OR
                                                            (7106) RelADPP
                                                            (7107) RelADPP
                                                            (7108) RelADPP
                                                    (7109) RelADPP
                                                        (7110) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7111) RelADPP
                                                        (7112) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7113) YES
                                            (7114) RelADPP
                                                (7115) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7116) AND
                                                    (7117) RelADPP
                                                        (7118) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7119) RelADPP
                                                        (7120) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7121) YES
                                                    (7122) RelADPP
                                                        (7123) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7124) RelADPP
                                                        (7125) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7126) YES
                                                    (7127) RelADPP
                                                        (7128) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7129) OR
                                                            (7130) RelADPP
                                                            (7131) RelADPP
                                                            (7132) RelADPP
                                                    (7133) RelADPP
                                                        (7134) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7135) RelADPP
                                                        (7136) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7137) YES
                                                    (7138) RelADPP
                                                        (7139) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7140) OR
                                                            (7141) RelADPP
                                                            (7142) RelADPP
                                            (7143) RelADPP
                                                (7144) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7145) AND
                                                    (7146) RelADPP
                                                        (7147) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7148) RelADPP
                                                        (7149) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7150) YES
                                                    (7151) RelADPP
                                                        (7152) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7153) OR
                                                            (7154) RelADPP
                                                            (7155) RelADPP
                                                            (7156) RelADPP
                                                    (7157) RelADPP
                                                        (7158) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7159) RelADPP
                                                        (7160) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7161) YES
                                            (7162) RelADPP
                                                (7163) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7164) AND
                                                    (7165) RelADPP
                                                        (7166) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7167) RelADPP
                                                        (7168) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7169) YES
                                                    (7170) RelADPP
                                                        (7171) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7172) OR
                                                            (7173) RelADPP
                                                            (7174) RelADPP
                                                            (7175) RelADPP
                                                    (7176) RelADPP
                                                        (7177) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7178) RelADPP
                                                        (7179) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7180) YES
                                                    (7181) RelADPP
                                                        (7182) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7183) OR
                                                            (7184) RelADPP
                                                            (7185) RelADPP
                                                    (7186) RelADPP
                                                        (7187) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7188) RelADPP
                                                        (7189) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7190) YES
                                    (7191) RelADPP
                                        (7192) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7193) RelADPP
                                        (7194) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7195) YES
                                    (7196) RelADPP
                                        (7197) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7198) RelADPP
                                        (7199) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7200) YES
                                    (7201) RelADPP
                                        (7202) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7203) OR
                                            (7204) RelADPP
                                                (7205) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7206) AND
                                                    (7207) RelADPP
                                                        (7208) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7209) RelADPP
                                                        (7210) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7211) YES
                                                    (7212) RelADPP
                                                        (7213) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7214) RelADPP
                                                        (7215) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7216) YES
                                                    (7217) RelADPP
                                                    (7218) RelADPP
                                                        (7219) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7220) RelADPP
                                                        (7221) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7222) YES
                                            (7223) RelADPP
                                                (7224) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7225) AND
                                                    (7226) RelADPP
                                                        (7227) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7228) RelADPP
                                                        (7229) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7230) YES
                                                    (7231) RelADPP
                                                        (7232) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7233) RelADPP
                                                        (7234) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7235) YES
                                                    (7236) RelADPP
                                                    (7237) RelADPP
                                                        (7238) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7239) RelADPP
                                                        (7240) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7241) YES
                                            (7242) RelADPP
                                                (7243) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7244) AND
                                                    (7245) RelADPP
                                                        (7246) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7247) RelADPP
                                                        (7248) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7249) YES
                                                    (7250) RelADPP
                                                        (7251) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7252) OR
                                                            (7253) RelADPP
                                                            (7254) RelADPP
                                                    (7255) RelADPP
                                                        (7256) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7257) RelADPP
                                                        (7258) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7259) YES
                                                    (7260) RelADPP
                                                        (7261) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7262) RelADPP
                                                        (7263) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7264) YES
                            (7265) RelADPP
                                (7266) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7267) AND
                                    (7268) RelADPP
                                        (7269) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7270) RelADPP
                                        (7271) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7272) YES
                                    (7273) RelADPP
                                        (7274) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (7275) RelADPP
                                        (7276) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7277) YES
                                    (7278) RelADPP
                                        (7279) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7280) OR
                                            (7281) RelADPP
                                                (7282) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7283) AND
                                                    (7284) RelADPP
                                                        (7285) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7286) RelADPP
                                                        (7287) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7288) YES
                                                    (7289) RelADPP
                                                        (7290) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7291) OR
                                                            (7292) RelADPP
                                                            (7293) RelADPP
                                                    (7294) RelADPP
                                                        (7295) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7296) RelADPP
                                                        (7297) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7298) YES
                                                    (7299) RelADPP
                                                        (7300) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7301) RelADPP
                                                        (7302) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7303) YES
                                            (7304) RelADPP
                                                (7305) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7306) AND
                                                    (7307) RelADPP
                                                        (7308) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7309) RelADPP
                                                        (7310) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7311) YES
                                                    (7312) RelADPP
                                                    (7313) RelADPP
                                                        (7314) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7315) RelADPP
                                                        (7316) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7317) YES
                                                    (7318) RelADPP
                                                        (7319) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7320) RelADPP
                                                        (7321) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7322) YES
                                            (7323) RelADPP
                                                (7324) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7325) AND
                                                    (7326) RelADPP
                                                        (7327) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7328) RelADPP
                                                        (7329) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7330) YES
                                                    (7331) RelADPP
                                                        (7332) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7333) OR
                                                            (7334) RelADPP
                                                            (7335) RelADPP
                                                    (7336) RelADPP
                                                        (7337) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7338) RelADPP
                                                        (7339) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7340) YES
                                                    (7341) RelADPP
                                                        (7342) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7343) RelADPP
                                                        (7344) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7345) YES
                                    (7346) RelADPP
                                        (7347) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7348) OR
                                            (7349) RelADPP
                                                (7350) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7351) AND
                                                    (7352) RelADPP
                                                        (7353) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (7354) RelADPP
                                                        (7355) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7356) YES
                                                    (7357) RelADPP
                                                        (7358) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7359) RelADPP
                                                        (7360) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7361) YES
                                                    (7362) RelADPP
                                                        (7363) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7364) OR
                                                            (7365) RelADPP
                                                            (7366) RelADPP
                                                            (7367) RelADPP
                                                    (7368) RelADPP
                                                        (7369) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7370) OR
                                                            (7371) RelADPP
                                                            (7372) RelADPP
                                                    (7373) RelADPP
                                                        (7374) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7375) RelADPP
                                                        (7376) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7377) YES
                                            (7378) RelADPP
                                                (7379) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7380) AND
                                                    (7381) RelADPP
                                                        (7382) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (7383) RelADPP
                                                        (7384) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7385) YES
                                                    (7386) RelADPP
                                                        (7387) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7388) RelADPP
                                                        (7389) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7390) YES
                                                    (7391) RelADPP
                                                        (7392) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7393) OR
                                                            (7394) RelADPP
                                                            (7395) RelADPP
                                                    (7396) RelADPP
                                                        (7397) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7398) OR
                                                            (7399) RelADPP
                                                            (7400) RelADPP
                                                            (7401) RelADPP
                                                    (7402) RelADPP
                                                        (7403) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7404) RelADPP
                                                        (7405) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7406) YES
                                            (7407) RelADPP
                                                (7408) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7409) AND
                                                    (7410) RelADPP
                                                        (7411) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7412) OR
                                                            (7413) RelADPP
                                                            (7414) RelADPP
                                                            (7415) RelADPP
                                                    (7416) RelADPP
                                                        (7417) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7418) RelADPP
                                                        (7419) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7420) YES
                                                    (7421) RelADPP
                                                        (7422) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7423) RelADPP
                                                        (7424) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7425) YES
                                            (7426) RelADPP
                                                (7427) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7428) AND
                                                    (7429) RelADPP
                                                        (7430) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7431) RelADPP
                                                        (7432) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7433) YES
                                                    (7434) RelADPP
                                                        (7435) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7436) OR
                                                            (7437) RelADPP
                                                            (7438) RelADPP
                                                    (7439) RelADPP
                                                        (7440) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7441) RelADPP
                                                        (7442) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7443) YES
                                                    (7444) RelADPP
                                                        (7445) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7446) OR
                                                            (7447) RelADPP
                                                            (7448) RelADPP
                                                            (7449) RelADPP
                                                    (7450) RelADPP
                                                        (7451) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7452) RelADPP
                                                        (7453) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7454) YES
                                    (7455) RelADPP
                                        (7456) RelADPReductionPairProof [EQUIVALENT, 15 ms]
                                        (7457) RelADPP
                                        (7458) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7459) YES
                            (7460) RelADPP
                                (7461) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7462) AND
                                    (7463) RelADPP
                                        (7464) RelADPReductionPairProof [EQUIVALENT, 16 ms]
                                        (7465) RelADPP
                                        (7466) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7467) YES
                                    (7468) RelADPP
                                        (7469) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7470) RelADPP
                                        (7471) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7472) YES
                                    (7473) RelADPP
                                        (7474) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7475) OR
                                            (7476) RelADPP
                                                (7477) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7478) AND
                                                    (7479) RelADPP
                                                        (7480) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7481) RelADPP
                                                        (7482) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7483) YES
                                                    (7484) RelADPP
                                                        (7485) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7486) OR
                                                            (7487) RelADPP
                                                            (7488) RelADPP
                                                            (7489) RelADPP
                                                    (7490) RelADPP
                                                        (7491) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7492) RelADPP
                                                        (7493) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7494) YES
                                                    (7495) RelADPP
                                                        (7496) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7497) RelADPP
                                                        (7498) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7499) YES
                                            (7500) RelADPP
                                                (7501) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7502) AND
                                                    (7503) RelADPP
                                                        (7504) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7505) RelADPP
                                                        (7506) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7507) YES
                                                    (7508) RelADPP
                                                        (7509) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7510) OR
                                                            (7511) RelADPP
                                                            (7512) RelADPP
                                                            (7513) RelADPP
                                                    (7514) RelADPP
                                                        (7515) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7516) RelADPP
                                                        (7517) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7518) YES
                                                    (7519) RelADPP
                                                        (7520) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7521) RelADPP
                                                        (7522) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7523) YES
                                            (7524) RelADPP
                                                (7525) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7526) AND
                                                    (7527) RelADPP
                                                        (7528) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7529) RelADPP
                                                        (7530) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7531) YES
                                                    (7532) RelADPP
                                                        (7533) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7534) OR
                                                            (7535) RelADPP
                                                            (7536) RelADPP
                                                            (7537) RelADPP
                                                    (7538) RelADPP
                                                        (7539) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7540) RelADPP
                                                        (7541) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7542) YES
                                                    (7543) RelADPP
                                                        (7544) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7545) RelADPP
                                                        (7546) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7547) YES
                                            (7548) RelADPP
                                                (7549) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7550) AND
                                                    (7551) RelADPP
                                                        (7552) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7553) RelADPP
                                                        (7554) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7555) YES
                                                    (7556) RelADPP
                                                        (7557) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7558) OR
                                                            (7559) RelADPP
                                                            (7560) RelADPP
                                                            (7561) RelADPP
                                                    (7562) RelADPP
                                                        (7563) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7564) RelADPP
                                                        (7565) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7566) YES
                                                    (7567) RelADPP
                                                        (7568) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7569) RelADPP
                                                        (7570) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7571) YES
                            (7572) RelADPP
                                (7573) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7574) AND
                                    (7575) RelADPP
                                        (7576) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (7577) RelADPP
                                        (7578) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7579) YES
                                    (7580) RelADPP
                                        (7581) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7582) OR
                                            (7583) RelADPP
                                                (7584) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7585) AND
                                                    (7586) RelADPP
                                                        (7587) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (7588) RelADPP
                                                        (7589) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7590) YES
                                                    (7591) RelADPP
                                                        (7592) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7593) OR
                                                            (7594) RelADPP
                                                            (7595) RelADPP
                                                    (7596) RelADPP
                                                        (7597) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7598) RelADPP
                                                        (7599) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7600) YES
                                                    (7601) RelADPP
                                                        (7602) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7603) OR
                                                            (7604) RelADPP
                                                            (7605) RelADPP
                                                            (7606) RelADPP
                                                    (7607) RelADPP
                                                        (7608) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7609) RelADPP
                                                        (7610) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7611) YES
                                            (7612) RelADPP
                                                (7613) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7614) AND
                                                    (7615) RelADPP
                                                        (7616) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7617) RelADPP
                                                        (7618) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7619) YES
                                                    (7620) RelADPP
                                                        (7621) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7622) OR
                                                            (7623) RelADPP
                                                            (7624) RelADPP
                                                            (7625) RelADPP
                                                    (7626) RelADPP
                                                        (7627) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (7628) RelADPP
                                                        (7629) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7630) YES
                                                    (7631) RelADPP
                                                        (7632) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7633) OR
                                                            (7634) RelADPP
                                                            (7635) RelADPP
                                                    (7636) RelADPP
                                                        (7637) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7638) RelADPP
                                                        (7639) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7640) YES
                                            (7641) RelADPP
                                                (7642) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7643) AND
                                                    (7644) RelADPP
                                                        (7645) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7646) RelADPP
                                                        (7647) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7648) YES
                                                    (7649) RelADPP
                                                        (7650) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7651) OR
                                                            (7652) RelADPP
                                                            (7653) RelADPP
                                                            (7654) RelADPP
                                                    (7655) RelADPP
                                                    (7656) RelADPP
                                                        (7657) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (7658) RelADPP
                                                        (7659) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7660) YES
                                                    (7661) RelADPP
                                                        (7662) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7663) RelADPP
                                                        (7664) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7665) YES
                                            (7666) RelADPP
                                                (7667) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7668) AND
                                                    (7669) RelADPP
                                                        (7670) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7671) OR
                                                            (7672) RelADPP
                                                            (7673) RelADPP
                                                            (7674) RelADPP
                                                    (7675) RelADPP
                                                        (7676) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7677) RelADPP
                                                        (7678) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7679) YES
                                                    (7680) RelADPP
                                                        (7681) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7682) RelADPP
                                                        (7683) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7684) YES
                                    (7685) RelADPP
                                        (7686) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7687) OR
                                            (7688) RelADPP
                                                (7689) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7690) AND
                                                    (7691) RelADPP
                                                        (7692) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7693) RelADPP
                                                        (7694) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7695) YES
                                                    (7696) RelADPP
                                                        (7697) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7698) RelADPP
                                                        (7699) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7700) YES
                                                    (7701) RelADPP
                                                        (7702) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7703) OR
                                                            (7704) RelADPP
                                                            (7705) RelADPP
                                                    (7706) RelADPP
                                                        (7707) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7708) RelADPP
                                                        (7709) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7710) YES
                                            (7711) RelADPP
                                                (7712) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7713) AND
                                                    (7714) RelADPP
                                                        (7715) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7716) RelADPP
                                                        (7717) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7718) YES
                                                    (7719) RelADPP
                                                        (7720) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7721) OR
                                                            (7722) RelADPP
                                                            (7723) RelADPP
                                                    (7724) RelADPP
                                                        (7725) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7726) RelADPP
                                                        (7727) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7728) YES
                                                    (7729) RelADPP
                                                        (7730) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7731) RelADPP
                                                        (7732) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7733) YES
                                            (7734) RelADPP
                                                (7735) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7736) AND
                                                    (7737) RelADPP
                                                        (7738) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7739) RelADPP
                                                        (7740) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7741) YES
                                                    (7742) RelADPP
                                                        (7743) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7744) OR
                                                            (7745) RelADPP
                                                            (7746) RelADPP
                                                    (7747) RelADPP
                                                        (7748) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7749) RelADPP
                                                        (7750) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7751) YES
                                                    (7752) RelADPP
                                                        (7753) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7754) RelADPP
                                                        (7755) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7756) YES
                                    (7757) RelADPP
                                        (7758) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7759) RelADPP
                                        (7760) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7761) YES
                                    (7762) RelADPP
                                        (7763) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (7764) RelADPP
                                        (7765) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7766) YES
                    (7767) RelADPP
                        (7768) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (7769) RelADPP
                        (7770) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (7771) YES
            (7772) RelADPP
                (7773) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                (7774) AND
                    (7775) RelADPP
                        (7776) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                        (7777) RelADPP
                        (7778) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (7779) YES
                    (7780) RelADPP
                        (7781) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                        (7782) RelADPP
                        (7783) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (7784) YES
                    (7785) RelADPP
                        (7786) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (7787) OR
                            (7788) RelADPP
                                (7789) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7790) AND
                                    (7791) RelADPP
                                        (7792) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (7793) RelADPP
                                        (7794) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7795) YES
                                    (7796) RelADPP
                                        (7797) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7798) OR
                                            (7799) RelADPP
                                                (7800) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7801) AND
                                                    (7802) RelADPP
                                                        (7803) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7804) RelADPP
                                                        (7805) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7806) YES
                                                    (7807) RelADPP
                                                        (7808) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7809) RelADPP
                                                        (7810) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7811) YES
                                                    (7812) RelADPP
                                                        (7813) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7814) OR
                                                            (7815) RelADPP
                                                            (7816) RelADPP
                                                    (7817) RelADPP
                                                        (7818) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7819) RelADPP
                                                        (7820) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7821) YES
                                            (7822) RelADPP
                                                (7823) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7824) AND
                                                    (7825) RelADPP
                                                        (7826) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7827) RelADPP
                                                        (7828) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7829) YES
                                                    (7830) RelADPP
                                                    (7831) RelADPP
                                                        (7832) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7833) RelADPP
                                                        (7834) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7835) YES
                                                    (7836) RelADPP
                                                        (7837) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (7838) RelADPP
                                                        (7839) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7840) YES
                                            (7841) RelADPP
                                                (7842) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7843) AND
                                                    (7844) RelADPP
                                                        (7845) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (7846) RelADPP
                                                        (7847) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7848) YES
                                                    (7849) RelADPP
                                                        (7850) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7851) OR
                                                            (7852) RelADPP
                                                            (7853) RelADPP
                                                    (7854) RelADPP
                                                        (7855) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7856) RelADPP
                                                        (7857) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7858) YES
                                                    (7859) RelADPP
                                                        (7860) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7861) RelADPP
                                                        (7862) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7863) YES
                                    (7864) RelADPP
                                        (7865) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (7866) RelADPP
                                        (7867) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7868) YES
                                    (7869) RelADPP
                                        (7870) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7871) OR
                                            (7872) RelADPP
                                                (7873) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7874) AND
                                                    (7875) RelADPP
                                                        (7876) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (7877) RelADPP
                                                        (7878) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7879) YES
                                                    (7880) RelADPP
                                                        (7881) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7882) RelADPP
                                                        (7883) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7884) YES
                                                    (7885) RelADPP
                                                        (7886) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7887) OR
                                                            (7888) RelADPP
                                                            (7889) RelADPP
                                                            (7890) RelADPP
                                                    (7891) RelADPP
                                                        (7892) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7893) RelADPP
                                                        (7894) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7895) YES
                                                    (7896) RelADPP
                                                        (7897) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7898) OR
                                                            (7899) RelADPP
                                                            (7900) RelADPP
                                            (7901) RelADPP
                                                (7902) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7903) AND
                                                    (7904) RelADPP
                                                        (7905) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7906) RelADPP
                                                        (7907) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7908) YES
                                                    (7909) RelADPP
                                                        (7910) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7911) OR
                                                            (7912) RelADPP
                                                            (7913) RelADPP
                                                    (7914) RelADPP
                                                        (7915) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (7916) RelADPP
                                                        (7917) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7918) YES
                                                    (7919) RelADPP
                                                        (7920) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7921) OR
                                                            (7922) RelADPP
                                                            (7923) RelADPP
                                                            (7924) RelADPP
                                                    (7925) RelADPP
                                                        (7926) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (7927) RelADPP
                                                        (7928) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7929) YES
                                            (7930) RelADPP
                                                (7931) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7932) AND
                                                    (7933) RelADPP
                                                        (7934) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7935) RelADPP
                                                        (7936) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7937) YES
                                                    (7938) RelADPP
                                                        (7939) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7940) OR
                                                            (7941) RelADPP
                                                            (7942) RelADPP
                                                            (7943) RelADPP
                                                    (7944) RelADPP
                                                        (7945) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (7946) RelADPP
                                                        (7947) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7948) YES
                                            (7949) RelADPP
                                                (7950) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7951) AND
                                                    (7952) RelADPP
                                                        (7953) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (7954) RelADPP
                                                        (7955) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7956) YES
                                                    (7957) RelADPP
                                                        (7958) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7959) RelADPP
                                                        (7960) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7961) YES
                                                    (7962) RelADPP
                                                        (7963) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (7964) RelADPP
                                                        (7965) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (7966) YES
                                                    (7967) RelADPP
                                                        (7968) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7969) OR
                                                            (7970) RelADPP
                                                            (7971) RelADPP
                                                            (7972) RelADPP
                                                    (7973) RelADPP
                                                        (7974) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (7975) OR
                                                            (7976) RelADPP
                                                            (7977) RelADPP
                                    (7978) RelADPP
                                        (7979) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (7980) RelADPP
                                        (7981) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7982) YES
                            (7983) RelADPP
                                (7984) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (7985) AND
                                    (7986) RelADPP
                                        (7987) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (7988) RelADPP
                                        (7989) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (7990) YES
                                    (7991) RelADPP
                                        (7992) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (7993) OR
                                            (7994) RelADPP
                                                (7995) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (7996) AND
                                                    (7997) RelADPP
                                                        (7998) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (7999) RelADPP
                                                        (8000) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8001) YES
                                                    (8002) RelADPP
                                                        (8003) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8004) OR
                                                            (8005) RelADPP
                                                            (8006) RelADPP
                                                    (8007) RelADPP
                                                        (8008) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8009) RelADPP
                                                        (8010) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8011) YES
                                                    (8012) RelADPP
                                                        (8013) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8014) RelADPP
                                                        (8015) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8016) YES
                                                    (8017) RelADPP
                                                        (8018) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8019) OR
                                                            (8020) RelADPP
                                                            (8021) RelADPP
                                                            (8022) RelADPP
                                            (8023) RelADPP
                                                (8024) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8025) AND
                                                    (8026) RelADPP
                                                        (8027) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8028) RelADPP
                                                        (8029) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8030) YES
                                                    (8031) RelADPP
                                                        (8032) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8033) OR
                                                            (8034) RelADPP
                                                            (8035) RelADPP
                                                            (8036) RelADPP
                                                    (8037) RelADPP
                                                        (8038) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8039) RelADPP
                                                        (8040) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8041) YES
                                                    (8042) RelADPP
                                                        (8043) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8044) OR
                                                            (8045) RelADPP
                                                            (8046) RelADPP
                                                    (8047) RelADPP
                                                        (8048) RelADPReductionPairProof [EQUIVALENT, 3 ms]
                                                        (8049) RelADPP
                                                        (8050) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8051) YES
                                            (8052) RelADPP
                                                (8053) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8054) AND
                                                    (8055) RelADPP
                                                        (8056) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8057) RelADPP
                                                        (8058) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8059) YES
                                                    (8060) RelADPP
                                                        (8061) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8062) OR
                                                            (8063) RelADPP
                                                            (8064) RelADPP
                                                            (8065) RelADPP
                                                    (8066) RelADPP
                                                        (8067) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8068) RelADPP
                                                        (8069) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8070) YES
                                            (8071) RelADPP
                                                (8072) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8073) AND
                                                    (8074) RelADPP
                                                        (8075) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8076) RelADPP
                                                        (8077) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8078) YES
                                                    (8079) RelADPP
                                                        (8080) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8081) OR
                                                            (8082) RelADPP
                                                            (8083) RelADPP
                                                    (8084) RelADPP
                                                        (8085) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8086) RelADPP
                                                        (8087) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8088) YES
                                                    (8089) RelADPP
                                                        (8090) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8091) OR
                                                            (8092) RelADPP
                                                            (8093) RelADPP
                                                            (8094) RelADPP
                                                    (8095) RelADPP
                                                        (8096) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8097) RelADPP
                                                        (8098) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8099) YES
                                    (8100) RelADPP
                                        (8101) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (8102) RelADPP
                                        (8103) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8104) YES
                                    (8105) RelADPP
                                        (8106) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8107) OR
                                            (8108) RelADPP
                                                (8109) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8110) AND
                                                    (8111) RelADPP
                                                        (8112) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8113) RelADPP
                                                        (8114) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8115) YES
                                                    (8116) RelADPP
                                                        (8117) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (8118) RelADPP
                                                        (8119) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8120) YES
                                                    (8121) RelADPP
                                                        (8122) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8123) RelADPP
                                                        (8124) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8125) YES
                                                    (8126) RelADPP
                                                        (8127) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8128) OR
                                                            (8129) RelADPP
                                                            (8130) RelADPP
                                            (8131) RelADPP
                                                (8132) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8133) AND
                                                    (8134) RelADPP
                                                        (8135) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8136) RelADPP
                                                        (8137) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8138) YES
                                                    (8139) RelADPP
                                                        (8140) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8141) OR
                                                            (8142) RelADPP
                                                            (8143) RelADPP
                                                    (8144) RelADPP
                                                        (8145) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8146) RelADPP
                                                        (8147) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8148) YES
                                                    (8149) RelADPP
                                                        (8150) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8151) RelADPP
                                                        (8152) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8153) YES
                                            (8154) RelADPP
                                                (8155) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8156) AND
                                                    (8157) RelADPP
                                                        (8158) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8159) RelADPP
                                                        (8160) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8161) YES
                                                    (8162) RelADPP
                                                        (8163) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8164) RelADPP
                                                        (8165) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8166) YES
                                                    (8167) RelADPP
                                                        (8168) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8169) OR
                                                            (8170) RelADPP
                                                            (8171) RelADPP
                                                    (8172) RelADPP
                                                        (8173) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8174) RelADPP
                                                        (8175) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8176) YES
                                    (8177) RelADPP
                                        (8178) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (8179) RelADPP
                                        (8180) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8181) YES
                            (8182) RelADPP
                                (8183) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8184) AND
                                    (8185) RelADPP
                                        (8186) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (8187) RelADPP
                                        (8188) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8189) YES
                                    (8190) RelADPP
                                        (8191) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (8192) RelADPP
                                        (8193) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8194) YES
                                    (8195) RelADPP
                                        (8196) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (8197) RelADPP
                                        (8198) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8199) YES
                                    (8200) RelADPP
                                        (8201) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8202) OR
                                            (8203) RelADPP
                                                (8204) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8205) AND
                                                    (8206) RelADPP
                                                        (8207) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8208) RelADPP
                                                        (8209) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8210) YES
                                                    (8211) RelADPP
                                                        (8212) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8213) OR
                                                            (8214) RelADPP
                                                            (8215) RelADPP
                                                            (8216) RelADPP
                                                    (8217) RelADPP
                                                        (8218) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8219) RelADPP
                                                        (8220) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8221) YES
                                                    (8222) RelADPP
                                                        (8223) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8224) RelADPP
                                                        (8225) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8226) YES
                                                    (8227) RelADPP
                                                        (8228) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8229) OR
                                                            (8230) RelADPP
                                                            (8231) RelADPP
                                            (8232) RelADPP
                                                (8233) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8234) AND
                                                    (8235) RelADPP
                                                        (8236) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8237) RelADPP
                                                        (8238) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8239) YES
                                                    (8240) RelADPP
                                                        (8241) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8242) OR
                                                            (8243) RelADPP
                                                            (8244) RelADPP
                                                            (8245) RelADPP
                                                    (8246) RelADPP
                                                        (8247) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8248) RelADPP
                                                        (8249) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8250) YES
                                                    (8251) RelADPP
                                                        (8252) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8253) RelADPP
                                                        (8254) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8255) YES
                                                    (8256) RelADPP
                                                        (8257) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8258) OR
                                                            (8259) RelADPP
                                                            (8260) RelADPP
                                            (8261) RelADPP
                                                (8262) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8263) AND
                                                    (8264) RelADPP
                                                        (8265) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8266) RelADPP
                                                        (8267) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8268) YES
                                                    (8269) RelADPP
                                                        (8270) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8271) RelADPP
                                                        (8272) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8273) YES
                                                    (8274) RelADPP
                                                        (8275) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8276) OR
                                                            (8277) RelADPP
                                                            (8278) RelADPP
                                                            (8279) RelADPP
                                            (8280) RelADPP
                                                (8281) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8282) AND
                                                    (8283) RelADPP
                                                        (8284) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8285) RelADPP
                                                        (8286) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8287) YES
                                                    (8288) RelADPP
                                                        (8289) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8290) RelADPP
                                                        (8291) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8292) YES
                                                    (8293) RelADPP
                                                        (8294) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8295) OR
                                                            (8296) RelADPP
                                                            (8297) RelADPP
                                                    (8298) RelADPP
                                                        (8299) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8300) OR
                                                            (8301) RelADPP
                                                            (8302) RelADPP
                                                            (8303) RelADPP
                                                    (8304) RelADPP
                                                        (8305) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8306) RelADPP
                                                        (8307) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8308) YES
                                    (8309) RelADPP
                                        (8310) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8311) OR
                                            (8312) RelADPP
                                                (8313) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8314) AND
                                                    (8315) RelADPP
                                                        (8316) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8317) RelADPP
                                                        (8318) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8319) YES
                                                    (8320) RelADPP
                                                        (8321) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8322) OR
                                                            (8323) RelADPP
                                                            (8324) RelADPP
                                                    (8325) RelADPP
                                                        (8326) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (8327) RelADPP
                                                        (8328) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8329) YES
                                                    (8330) RelADPP
                                                        (8331) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8332) RelADPP
                                                        (8333) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8334) YES
                                            (8335) RelADPP
                                                (8336) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8337) AND
                                                    (8338) RelADPP
                                                        (8339) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8340) RelADPP
                                                        (8341) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8342) YES
                                                    (8343) RelADPP
                                                        (8344) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8345) RelADPP
                                                        (8346) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8347) YES
                                                    (8348) RelADPP
                                                        (8349) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8350) RelADPP
                                                        (8351) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8352) YES
                                                    (8353) RelADPP
                                                        (8354) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8355) OR
                                                            (8356) RelADPP
                                                            (8357) RelADPP
                                            (8358) RelADPP
                                                (8359) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8360) AND
                                                    (8361) RelADPP
                                                        (8362) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8363) RelADPP
                                                        (8364) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8365) YES
                                                    (8366) RelADPP
                                                        (8367) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8368) RelADPP
                                                        (8369) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8370) YES
                                                    (8371) RelADPP
                                                        (8372) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8373) OR
                                                            (8374) RelADPP
                                                            (8375) RelADPP
                                                    (8376) RelADPP
                                                        (8377) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (8378) RelADPP
                                                        (8379) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8380) YES
                            (8381) RelADPP
                                (8382) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8383) AND
                                    (8384) RelADPP
                                        (8385) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (8386) RelADPP
                                        (8387) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8388) YES
                                    (8389) RelADPP
                                        (8390) RelADPReductionPairProof [EQUIVALENT, 11 ms]
                                        (8391) RelADPP
                                        (8392) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8393) YES
                                    (8394) RelADPP
                                        (8395) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8396) OR
                                            (8397) RelADPP
                                                (8398) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8399) AND
                                                    (8400) RelADPP
                                                        (8401) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8402) RelADPP
                                                        (8403) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8404) YES
                                                    (8405) RelADPP
                                                        (8406) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8407) RelADPP
                                                        (8408) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8409) YES
                                                    (8410) RelADPP
                                                        (8411) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8412) OR
                                                            (8413) RelADPP
                                                            (8414) RelADPP
                                                            (8415) RelADPP
                                                    (8416) RelADPP
                                                        (8417) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8418) RelADPP
                                                        (8419) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8420) YES
                                            (8421) RelADPP
                                                (8422) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8423) AND
                                                    (8424) RelADPP
                                                        (8425) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8426) RelADPP
                                                        (8427) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8428) YES
                                                    (8429) RelADPP
                                                        (8430) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8431) RelADPP
                                                        (8432) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8433) YES
                                                    (8434) RelADPP
                                                        (8435) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8436) OR
                                                            (8437) RelADPP
                                                            (8438) RelADPP
                                                            (8439) RelADPP
                                                    (8440) RelADPP
                                                        (8441) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (8442) RelADPP
                                                        (8443) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8444) YES
                                            (8445) RelADPP
                                                (8446) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8447) AND
                                                    (8448) RelADPP
                                                        (8449) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8450) RelADPP
                                                        (8451) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8452) YES
                                                    (8453) RelADPP
                                                        (8454) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8455) RelADPP
                                                        (8456) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8457) YES
                                                    (8458) RelADPP
                                                        (8459) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8460) RelADPP
                                                        (8461) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8462) YES
                                                    (8463) RelADPP
                                                        (8464) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8465) OR
                                                            (8466) RelADPP
                                                            (8467) RelADPP
                                                            (8468) RelADPP
                                            (8469) RelADPP
                                                (8470) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8471) AND
                                                    (8472) RelADPP
                                                        (8473) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8474) RelADPP
                                                        (8475) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8476) YES
                                                    (8477) RelADPP
                                                        (8478) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8479) OR
                                                            (8480) RelADPP
                                                            (8481) RelADPP
                                                            (8482) RelADPP
                                                    (8483) RelADPP
                                                        (8484) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (8485) RelADPP
                                                        (8486) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8487) YES
                                                    (8488) RelADPP
                                                        (8489) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8490) RelADPP
                                                        (8491) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8492) YES
                            (8493) RelADPP
                                (8494) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8495) AND
                                    (8496) RelADPP
                                        (8497) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8498) RelADPP
                                        (8499) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8500) YES
                                    (8501) RelADPP
                                        (8502) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8503) OR
                                            (8504) RelADPP
                                                (8505) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8506) AND
                                                    (8507) RelADPP
                                                        (8508) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8509) RelADPP
                                                        (8510) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8511) YES
                                                    (8512) RelADPP
                                                        (8513) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8514) RelADPP
                                                        (8515) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8516) YES
                                                    (8517) RelADPP
                                                        (8518) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8519) OR
                                                            (8520) RelADPP
                                                            (8521) RelADPP
                                                    (8522) RelADPP
                                                        (8523) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8524) RelADPP
                                                        (8525) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8526) YES
                                                    (8527) RelADPP
                                                        (8528) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8529) OR
                                                            (8530) RelADPP
                                                            (8531) RelADPP
                                                            (8532) RelADPP
                                            (8533) RelADPP
                                                (8534) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8535) AND
                                                    (8536) RelADPP
                                                        (8537) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8538) RelADPP
                                                        (8539) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8540) YES
                                                    (8541) RelADPP
                                                        (8542) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8543) OR
                                                            (8544) RelADPP
                                                            (8545) RelADPP
                                                            (8546) RelADPP
                                                    (8547) RelADPP
                                                        (8548) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8549) OR
                                                            (8550) RelADPP
                                                            (8551) RelADPP
                                                    (8552) RelADPP
                                                        (8553) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8554) RelADPP
                                                        (8555) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8556) YES
                                                    (8557) RelADPP
                                                        (8558) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8559) RelADPP
                                                        (8560) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8561) YES
                                            (8562) RelADPP
                                                (8563) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8564) AND
                                                    (8565) RelADPP
                                                        (8566) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8567) RelADPP
                                                        (8568) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8569) YES
                                                    (8570) RelADPP
                                                        (8571) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8572) RelADPP
                                                        (8573) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8574) YES
                                                    (8575) RelADPP
                                                        (8576) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8577) OR
                                                            (8578) RelADPP
                                                            (8579) RelADPP
                                                            (8580) RelADPP
                                                    (8581) RelADPP
                                                        (8582) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8583) OR
                                                            (8584) RelADPP
                                                            (8585) RelADPP
                                                    (8586) RelADPP
                                                        (8587) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8588) RelADPP
                                                        (8589) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8590) YES
                                            (8591) RelADPP
                                                (8592) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8593) AND
                                                    (8594) RelADPP
                                                        (8595) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8596) RelADPP
                                                        (8597) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8598) YES
                                                    (8599) RelADPP
                                                        (8600) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8601) OR
                                                            (8602) RelADPP
                                                            (8603) RelADPP
                                                            (8604) RelADPP
                                                    (8605) RelADPP
                                                        (8606) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8607) RelADPP
                                                        (8608) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8609) YES
                                    (8610) RelADPP
                                        (8611) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8612) OR
                                            (8613) RelADPP
                                                (8614) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8615) AND
                                                    (8616) RelADPP
                                                        (8617) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8618) RelADPP
                                                        (8619) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8620) YES
                                                    (8621) RelADPP
                                                        (8622) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8623) RelADPP
                                                        (8624) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8625) YES
                                                    (8626) RelADPP
                                                        (8627) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8628) OR
                                                            (8629) RelADPP
                                                            (8630) RelADPP
                                                    (8631) RelADPP
                                                        (8632) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8633) RelADPP
                                                        (8634) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8635) YES
                                            (8636) RelADPP
                                                (8637) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8638) AND
                                                    (8639) RelADPP
                                                        (8640) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8641) RelADPP
                                                        (8642) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8643) YES
                                                    (8644) RelADPP
                                                        (8645) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8646) RelADPP
                                                        (8647) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8648) YES
                                                    (8649) RelADPP
                                                        (8650) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8651) OR
                                                            (8652) RelADPP
                                                            (8653) RelADPP
                                                    (8654) RelADPP
                                                        (8655) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8656) RelADPP
                                                        (8657) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8658) YES
                                            (8659) RelADPP
                                                (8660) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8661) AND
                                                    (8662) RelADPP
                                                        (8663) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8664) RelADPP
                                                        (8665) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8666) YES
                                                    (8667) RelADPP
                                                        (8668) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8669) OR
                                                            (8670) RelADPP
                                                            (8671) RelADPP
                                                    (8672) RelADPP
                                                        (8673) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8674) RelADPP
                                                        (8675) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8676) YES
                                                    (8677) RelADPP
                                                        (8678) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8679) RelADPP
                                                        (8680) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8681) YES
                                    (8682) RelADPP
                                        (8683) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8684) RelADPP
                                        (8685) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8686) YES
                                    (8687) RelADPP
                                        (8688) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (8689) RelADPP
                                        (8690) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8691) YES
                    (8692) RelADPP
                        (8693) RelADPReductionPairProof [EQUIVALENT, 10 ms]
                        (8694) RelADPP
                        (8695) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                        (8696) YES
                    (8697) RelADPP
                        (8698) RelADPDerelatifying2Proof [SOUND, 0 ms]
                        (8699) OR
                            (8700) RelADPP
                                (8701) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8702) AND
                                    (8703) RelADPP
                                        (8704) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8705) RelADPP
                                        (8706) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8707) YES
                                    (8708) RelADPP
                                        (8709) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8710) OR
                                            (8711) RelADPP
                                                (8712) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8713) AND
                                                    (8714) RelADPP
                                                        (8715) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8716) RelADPP
                                                        (8717) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8718) YES
                                                    (8719) RelADPP
                                                        (8720) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8721) OR
                                                            (8722) RelADPP
                                                            (8723) RelADPP
                                                    (8724) RelADPP
                                                        (8725) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8726) RelADPP
                                                        (8727) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8728) YES
                                                    (8729) RelADPP
                                                        (8730) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8731) RelADPP
                                                        (8732) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8733) YES
                                            (8734) RelADPP
                                                (8735) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8736) AND
                                                    (8737) RelADPP
                                                        (8738) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (8739) RelADPP
                                                        (8740) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8741) YES
                                                    (8742) RelADPP
                                                        (8743) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8744) OR
                                                            (8745) RelADPP
                                                            (8746) RelADPP
                                                    (8747) RelADPP
                                                        (8748) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8749) RelADPP
                                                        (8750) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8751) YES
                                                    (8752) RelADPP
                                                        (8753) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8754) RelADPP
                                                        (8755) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8756) YES
                                            (8757) RelADPP
                                                (8758) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8759) AND
                                                    (8760) RelADPP
                                                        (8761) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8762) RelADPP
                                                        (8763) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8764) YES
                                                    (8765) RelADPP
                                                        (8766) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8767) RelADPP
                                                        (8768) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8769) YES
                                                    (8770) RelADPP
                                                        (8771) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8772) OR
                                                            (8773) RelADPP
                                                            (8774) RelADPP
                                                    (8775) RelADPP
                                                        (8776) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                                        (8777) RelADPP
                                                        (8778) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8779) YES
                                    (8780) RelADPP
                                        (8781) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8782) RelADPP
                                        (8783) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8784) YES
                                    (8785) RelADPP
                                        (8786) RelADPReductionPairProof [EQUIVALENT, 4 ms]
                                        (8787) RelADPP
                                        (8788) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8789) YES
                            (8790) RelADPP
                                (8791) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8792) AND
                                    (8793) RelADPP
                                        (8794) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8795) RelADPP
                                        (8796) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8797) YES
                                    (8798) RelADPP
                                        (8799) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8800) RelADPP
                                        (8801) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8802) YES
                                    (8803) RelADPP
                                        (8804) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8805) OR
                                            (8806) RelADPP
                                                (8807) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8808) AND
                                                    (8809) RelADPP
                                                        (8810) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8811) RelADPP
                                                        (8812) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8813) YES
                                                    (8814) RelADPP
                                                        (8815) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8816) OR
                                                            (8817) RelADPP
                                                            (8818) RelADPP
                                                    (8819) RelADPP
                                                        (8820) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (8821) RelADPP
                                                        (8822) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8823) YES
                                                    (8824) RelADPP
                                                        (8825) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8826) RelADPP
                                                        (8827) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8828) YES
                                            (8829) RelADPP
                                                (8830) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8831) AND
                                                    (8832) RelADPP
                                                        (8833) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8834) RelADPP
                                                        (8835) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8836) YES
                                                    (8837) RelADPP
                                                        (8838) RelADPReductionPairProof [EQUIVALENT, 8 ms]
                                                        (8839) RelADPP
                                                        (8840) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8841) YES
                                                    (8842) RelADPP
                                                        (8843) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8844) RelADPP
                                                        (8845) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8846) YES
                                                    (8847) RelADPP
                                            (8848) RelADPP
                                                (8849) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8850) AND
                                                    (8851) RelADPP
                                                        (8852) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8853) RelADPP
                                                        (8854) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8855) YES
                                                    (8856) RelADPP
                                                        (8857) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8858) RelADPP
                                                        (8859) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8860) YES
                                                    (8861) RelADPP
                                                        (8862) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8863) RelADPP
                                                        (8864) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8865) YES
                                                    (8866) RelADPP
                                                        (8867) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8868) OR
                                                            (8869) RelADPP
                                                            (8870) RelADPP
                                    (8871) RelADPP
                                        (8872) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8873) RelADPP
                                        (8874) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8875) YES
                            (8876) RelADPP
                                (8877) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8878) AND
                                    (8879) RelADPP
                                        (8880) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8881) RelADPP
                                        (8882) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8883) YES
                                    (8884) RelADPP
                                        (8885) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8886) OR
                                            (8887) RelADPP
                                                (8888) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8889) AND
                                                    (8890) RelADPP
                                                        (8891) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (8892) RelADPP
                                                        (8893) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8894) YES
                                                    (8895) RelADPP
                                                        (8896) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8897) OR
                                                            (8898) RelADPP
                                                            (8899) RelADPP
                                                    (8900) RelADPP
                                                        (8901) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                                        (8902) RelADPP
                                                        (8903) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8904) YES
                                                    (8905) RelADPP
                                                        (8906) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8907) RelADPP
                                                        (8908) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8909) YES
                                            (8910) RelADPP
                                                (8911) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8912) AND
                                                    (8913) RelADPP
                                                        (8914) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8915) RelADPP
                                                        (8916) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8917) YES
                                                    (8918) RelADPP
                                                        (8919) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8920) OR
                                                            (8921) RelADPP
                                                            (8922) RelADPP
                                                    (8923) RelADPP
                                                        (8924) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8925) RelADPP
                                                        (8926) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8927) YES
                                                    (8928) RelADPP
                                                        (8929) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8930) RelADPP
                                                        (8931) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8932) YES
                                            (8933) RelADPP
                                                (8934) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8935) AND
                                                    (8936) RelADPP
                                                        (8937) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8938) RelADPP
                                                        (8939) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8940) YES
                                                    (8941) RelADPP
                                                        (8942) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (8943) OR
                                                            (8944) RelADPP
                                                            (8945) RelADPP
                                                    (8946) RelADPP
                                                        (8947) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8948) RelADPP
                                                        (8949) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8950) YES
                                                    (8951) RelADPP
                                                        (8952) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (8953) RelADPP
                                                        (8954) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8955) YES
                                    (8956) RelADPP
                                        (8957) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (8958) RelADPP
                                        (8959) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8960) YES
                                    (8961) RelADPP
                                        (8962) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                        (8963) RelADPP
                                        (8964) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8965) YES
                            (8966) RelADPP
                                (8967) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                (8968) AND
                                    (8969) RelADPP
                                        (8970) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                        (8971) RelADPP
                                        (8972) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8973) YES
                                    (8974) RelADPP
                                        (8975) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8976) RelADPP
                                        (8977) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8978) YES
                                    (8979) RelADPP
                                        (8980) RelADPReductionPairProof [EQUIVALENT, 5 ms]
                                        (8981) RelADPP
                                        (8982) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                        (8983) YES
                                    (8984) RelADPP
                                        (8985) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                        (8986) OR
                                            (8987) RelADPP
                                                (8988) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (8989) AND
                                                    (8990) RelADPP
                                                        (8991) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8992) RelADPP
                                                        (8993) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (8994) YES
                                                    (8995) RelADPP
                                                    (8996) RelADPP
                                                        (8997) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (8998) RelADPP
                                                        (8999) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9000) YES
                                                    (9001) RelADPP
                                                        (9002) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (9003) RelADPP
                                                        (9004) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9005) YES
                                            (9006) RelADPP
                                                (9007) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (9008) AND
                                                    (9009) RelADPP
                                                        (9010) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (9011) RelADPP
                                                        (9012) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9013) YES
                                                    (9014) RelADPP
                                                        (9015) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (9016) RelADPP
                                                        (9017) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9018) YES
                                                    (9019) RelADPP
                                                        (9020) RelADPReductionPairProof [EQUIVALENT, 9 ms]
                                                        (9021) RelADPP
                                                        (9022) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9023) YES
                                                    (9024) RelADPP
                                                        (9025) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (9026) OR
                                                            (9027) RelADPP
                                                            (9028) RelADPP
                                            (9029) RelADPP
                                                (9030) RelADPDepGraphProof [EQUIVALENT, 0 ms]
                                                (9031) AND
                                                    (9032) RelADPP
                                                        (9033) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (9034) RelADPP
                                                        (9035) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9036) YES
                                                    (9037) RelADPP
                                                        (9038) RelADPDerelatifying2Proof [SOUND, 0 ms]
                                                        (9039) OR
                                                            (9040) RelADPP
                                                            (9041) RelADPP
                                                    (9042) RelADPP
                                                        (9043) RelADPReductionPairProof [EQUIVALENT, 7 ms]
                                                        (9044) RelADPP
                                                        (9045) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9046) YES
                                                    (9047) RelADPP
                                                        (9048) RelADPReductionPairProof [EQUIVALENT, 6 ms]
                                                        (9049) RelADPP
                                                        (9050) DAbsisEmptyProof [EQUIVALENT, 0 ms]
                                                        (9051) YES
    (9052) RelADPP
        (9053) RelADPReductionPairProof [EQUIVALENT, 43 ms]
        (9054) RelADPP
        (9055) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9056) YES
    (9057) RelADPP
        (9058) RelADPReductionPairProof [EQUIVALENT, 41 ms]
        (9059) RelADPP
        (9060) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9061) YES
    (9062) RelADPP
        (9063) RelADPReductionPairProof [EQUIVALENT, 33 ms]
        (9064) RelADPP
        (9065) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (9066) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(c(a(x1))) -> c(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))

The relative TRS consists of the following S rules:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   a(a(b(x1))) -> b(C(c(x1)))
   a(a(b(x1))) -> b(c(C(x1)))
   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  8 Lassos,
Result: This relative DT problem is equivalent to 9 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))
   a(a(b(x1))) -> b(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))
   a(a(b(x1))) -> b(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(8) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(11) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(12)
Complex Obligation (OR)

----------------------------------------

(13)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(14) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(15)
Complex Obligation (AND)

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(17) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(19) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(22) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(24) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(27) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(28)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(29) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(30)
YES

----------------------------------------

(31)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(32) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(33)
Complex Obligation (OR)

----------------------------------------

(34)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(35) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(36)
Complex Obligation (AND)

----------------------------------------

(37)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(38) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(39)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(40) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(43) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(44)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(45) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(48) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(49)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(50) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(51)
YES

----------------------------------------

(52)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(53) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(54)
Complex Obligation (OR)

----------------------------------------

(55)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(56) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(57)
Complex Obligation (AND)

----------------------------------------

(58)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(59) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(60)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(61) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(62)
YES

----------------------------------------

(63)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(64) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(65)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(66) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(67)
TRUE

----------------------------------------

(68)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(69) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(70)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(71) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(72)
YES

----------------------------------------

(73)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(74) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(75)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(76) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(77)
YES

----------------------------------------

(78)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(79) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(80)
Complex Obligation (AND)

----------------------------------------

(81)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(82) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(83)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(84) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(85)
YES

----------------------------------------

(86)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(87) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(88)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(89) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(90)
YES

----------------------------------------

(91)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(92) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(93)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(94) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(95)
YES

----------------------------------------

(96)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(97)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(98) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(99)
Complex Obligation (AND)

----------------------------------------

(100)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(101) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(102)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(103) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(104)
YES

----------------------------------------

(105)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(106) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(107)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(108) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(109)
YES

----------------------------------------

(110)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(111) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(112)
Complex Obligation (OR)

----------------------------------------

(113)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(114)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(115)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(116) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(117)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(118) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(119)
YES

----------------------------------------

(120)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(121) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(122)
Complex Obligation (AND)

----------------------------------------

(123)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(124) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(125)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(126) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(127)
YES

----------------------------------------

(128)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(129) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(130)
Complex Obligation (OR)

----------------------------------------

(131)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(132) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(133)
Complex Obligation (AND)

----------------------------------------

(134)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(135) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(136)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(137) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(138)
YES

----------------------------------------

(139)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(140) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(141)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(142) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(143)
YES

----------------------------------------

(144)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(145) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(146)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(147) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(148)
YES

----------------------------------------

(149)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(150) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(151)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(152) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(153)
TRUE

----------------------------------------

(154)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(155) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(156)
Complex Obligation (AND)

----------------------------------------

(157)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(158) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(159)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(160) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(161)
YES

----------------------------------------

(162)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(163)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(164) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(165)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(166) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(167)
YES

----------------------------------------

(168)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(169) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(170)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(171) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(172)
YES

----------------------------------------

(173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(174) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(175)
Complex Obligation (AND)

----------------------------------------

(176)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(177) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(178)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(179) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(180)
YES

----------------------------------------

(181)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(182) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(183)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(184) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(185)
YES

----------------------------------------

(186)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(187) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(188)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(189) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(190)
YES

----------------------------------------

(191)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(192) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(193)
Complex Obligation (OR)

----------------------------------------

(194)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(195)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(196)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(197) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(198)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(199) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(200)
YES

----------------------------------------

(201)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(202) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(203)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(204) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(205)
YES

----------------------------------------

(206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(207) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(208)
Complex Obligation (AND)

----------------------------------------

(209)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(210) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(211)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(212) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(213)
YES

----------------------------------------

(214)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(215) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(216)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(217) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(218)
YES

----------------------------------------

(219)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(220) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(221)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(222) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(223)
YES

----------------------------------------

(224)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(225) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(226)
Complex Obligation (OR)

----------------------------------------

(227)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(228) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(229)
Complex Obligation (AND)

----------------------------------------

(230)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(231) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(232)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(233) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(234)
YES

----------------------------------------

(235)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(236) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(237)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(238) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(239)
YES

----------------------------------------

(240)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(241) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(242)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(243) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(244)
YES

----------------------------------------

(245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(246) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(247)
Complex Obligation (OR)

----------------------------------------

(248)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(249) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(250)
Complex Obligation (AND)

----------------------------------------

(251)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(252) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(253)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(254)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(255) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(256)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(257)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(258) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(259)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(260)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(261) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(262)
Complex Obligation (AND)

----------------------------------------

(263)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(264) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(265)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(266)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(267) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(268)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(269)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(270)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(271) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(272)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(273)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(274) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(275)
Complex Obligation (AND)

----------------------------------------

(276)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(277) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(278)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(279) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(280)
YES

----------------------------------------

(281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(282) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(283)
Complex Obligation (OR)

----------------------------------------

(284)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(285) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(286)
Complex Obligation (AND)

----------------------------------------

(287)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(288) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(289)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(290)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(291) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(292)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(293)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(294) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(295)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(296)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(297) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(298)
Complex Obligation (AND)

----------------------------------------

(299)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(300) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(301)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(302)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(303) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(304)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(305)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(306)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(307) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(308)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(309)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(310) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(311)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(312) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(313)
YES

----------------------------------------

(314)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(315) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(316)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(317) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(318)
YES

----------------------------------------

(319)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(320) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(321)
Complex Obligation (AND)

----------------------------------------

(322)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(323) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(324)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(325) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(326)
YES

----------------------------------------

(327)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(328) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(329)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(330) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(331)
YES

----------------------------------------

(332)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(333) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(334)
Complex Obligation (OR)

----------------------------------------

(335)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(336)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(337)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(338) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(339)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(340) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(341)
YES

----------------------------------------

(342)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(343) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(344)
Complex Obligation (AND)

----------------------------------------

(345)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(346) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(347)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(348) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(349)
YES

----------------------------------------

(350)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(351) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(352)
Complex Obligation (OR)

----------------------------------------

(353)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(354) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(355)
Complex Obligation (AND)

----------------------------------------

(356)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(357) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(358)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(359)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(360)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(361) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(362)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(363)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(364) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(365)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(366)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(367) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(368)
Complex Obligation (AND)

----------------------------------------

(369)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(370) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(371)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(372) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(373)
YES

----------------------------------------

(374)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(375) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(376)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(377)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(378) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(379)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(380)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(382) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(383)
Complex Obligation (AND)

----------------------------------------

(384)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(385) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(386)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(387) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(388)
YES

----------------------------------------

(389)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(390) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(391)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(392)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(393)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(394) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(395)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(396)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(397) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(398)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(399) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(400)
YES

----------------------------------------

(401)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(402) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(403)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(404) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(405)
YES

----------------------------------------

(406)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(407) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(408)
Complex Obligation (AND)

----------------------------------------

(409)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(410) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(411)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(412) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(413)
YES

----------------------------------------

(414)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(415) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(416)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(417) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(418)
YES

----------------------------------------

(419)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(420) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(421)
Complex Obligation (OR)

----------------------------------------

(422)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(423) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(424)
Complex Obligation (AND)

----------------------------------------

(425)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(426) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(427)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(428) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(429)
YES

----------------------------------------

(430)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(431) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(432)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(433) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(434)
YES

----------------------------------------

(435)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(436) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(437)
Complex Obligation (OR)

----------------------------------------

(438)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(439) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(440)
Complex Obligation (AND)

----------------------------------------

(441)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(442) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(443)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(444) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(445)
YES

----------------------------------------

(446)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(447) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(448)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(449)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(450) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(451)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(452)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(453) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(454)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(455) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(456)
YES

----------------------------------------

(457)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(458) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(459)
Complex Obligation (AND)

----------------------------------------

(460)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(461) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(462)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(463) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(464)
YES

----------------------------------------

(465)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(466)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(467) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(468)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(469) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(470)
YES

----------------------------------------

(471)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(472) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(473)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(474) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(475)
YES

----------------------------------------

(476)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(477) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(478)
Complex Obligation (AND)

----------------------------------------

(479)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(480) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(481)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(482) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(483)
YES

----------------------------------------

(484)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(485) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(486)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(487) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(488)
YES

----------------------------------------

(489)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(490)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(491) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(492)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(493) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(494)
YES

----------------------------------------

(495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(496) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(497)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(498) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(499)
YES

----------------------------------------

(500)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(501) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(502)
Complex Obligation (AND)

----------------------------------------

(503)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(504) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(505)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(506) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(507)
YES

----------------------------------------

(508)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(509) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(510)
Complex Obligation (OR)

----------------------------------------

(511)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(512) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(513)
Complex Obligation (AND)

----------------------------------------

(514)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(515) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(516)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(517) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(518)
YES

----------------------------------------

(519)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(520) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(521)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(522) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(523)
TRUE

----------------------------------------

(524)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(525) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(526)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(527) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(528)
YES

----------------------------------------

(529)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(530) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(531)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(532) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(533)
YES

----------------------------------------

(534)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(535) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(536)
Complex Obligation (AND)

----------------------------------------

(537)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(538) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(539)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(540)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(541) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(542)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(543) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(544)
YES

----------------------------------------

(545)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(546) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(547)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(548) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(549)
YES

----------------------------------------

(550)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(551)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(552) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(553)
Complex Obligation (AND)

----------------------------------------

(554)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(555) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(556)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(557) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(558)
YES

----------------------------------------

(559)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(560)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(561) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(562)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(563) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(564)
YES

----------------------------------------

(565)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(566) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(567)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(568) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(569)
YES

----------------------------------------

(570)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(571) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(572)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(573) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(574)
YES

----------------------------------------

(575)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(576) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(577)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(578) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(579)
YES

----------------------------------------

(580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(581) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(582)
Complex Obligation (AND)

----------------------------------------

(583)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(584) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(585)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(586) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(587)
YES

----------------------------------------

(588)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(589) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(590)
Complex Obligation (OR)

----------------------------------------

(591)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(592) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(593)
Complex Obligation (AND)

----------------------------------------

(594)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(595) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(596)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(597)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(598)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(599) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(600)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(601) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(602)
YES

----------------------------------------

(603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(604) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(605)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(606)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(607) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(608)
Complex Obligation (AND)

----------------------------------------

(609)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(610) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(611)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(612) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(613)
YES

----------------------------------------

(614)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(615)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(616) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(617)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(618) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(619)
YES

----------------------------------------

(620)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(621) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(622)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(623) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(624)
YES

----------------------------------------

(625)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(626) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(627)
Complex Obligation (AND)

----------------------------------------

(628)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(629) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(630)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(631) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(632)
YES

----------------------------------------

(633)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(634)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(635) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(636)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(637)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(638) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(639)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(640)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(641) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(642)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(643) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(644)
YES

----------------------------------------

(645)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(646) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(647)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(648) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(649)
YES

----------------------------------------

(650)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(651) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(652)
Complex Obligation (AND)

----------------------------------------

(653)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(654) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(655)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(656) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(657)
YES

----------------------------------------

(658)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(659) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(660)
Complex Obligation (OR)

----------------------------------------

(661)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(662) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(663)
Complex Obligation (AND)

----------------------------------------

(664)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(665) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(666)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(668)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(669) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(670)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(671)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(672) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(673)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(674)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(675) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(676)
Complex Obligation (AND)

----------------------------------------

(677)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(678) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(679)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(680)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(681) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(682)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(683)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(684) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(685)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(686)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(687)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(688) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(689)
Complex Obligation (AND)

----------------------------------------

(690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(691) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(692)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(693)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(694)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(695) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(696)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(697)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(698) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(699)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(700) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(701)
YES

----------------------------------------

(702)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(703) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(704)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(705) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(706)
YES

----------------------------------------

(707)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(708) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(709)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(710) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(711)
YES

----------------------------------------

(712)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(713) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(714)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(715) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(716)
YES

----------------------------------------

(717)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(718) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(719)
Complex Obligation (AND)

----------------------------------------

(720)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(721) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(722)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(723) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(724)
YES

----------------------------------------

(725)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(726) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(727)
Complex Obligation (OR)

----------------------------------------

(728)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(729) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(730)
Complex Obligation (AND)

----------------------------------------

(731)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(732) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(733)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(734) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(735)
YES

----------------------------------------

(736)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(737) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(738)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(739) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(740)
YES

----------------------------------------

(741)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(742) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(743)
Complex Obligation (OR)

----------------------------------------

(744)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(745) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(746)
Complex Obligation (AND)

----------------------------------------

(747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(748) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(749)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(750) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(751)
YES

----------------------------------------

(752)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(753) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(754)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(755) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(756)
YES

----------------------------------------

(757)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(758) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(759)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(760) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(761)
YES

----------------------------------------

(762)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(763) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(764)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(765) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(766)
TRUE

----------------------------------------

(767)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(768) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(769)
Complex Obligation (AND)

----------------------------------------

(770)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(771) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(772)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(773) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(774)
YES

----------------------------------------

(775)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(776) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(777)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(778) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(779)
YES

----------------------------------------

(780)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(781) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(782)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(783)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(784)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(785) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(786)
Complex Obligation (AND)

----------------------------------------

(787)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(788) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(789)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(790) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(791)
YES

----------------------------------------

(792)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(793) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(794)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(795) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(796)
YES

----------------------------------------

(797)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(798) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(799)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(800) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(801)
YES

----------------------------------------

(802)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(803)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(804) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(805)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(806) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(807)
YES

----------------------------------------

(808)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(809) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(810)
Complex Obligation (AND)

----------------------------------------

(811)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(812) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(813)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(814) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(815)
YES

----------------------------------------

(816)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(817) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(818)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(819) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(820)
YES

----------------------------------------

(821)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(822) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(823)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(824) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(825)
YES

----------------------------------------

(826)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(827) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(828)
Complex Obligation (OR)

----------------------------------------

(829)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(830) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(831)
Complex Obligation (AND)

----------------------------------------

(832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(833) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(834)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(835) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(836)
YES

----------------------------------------

(837)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(838) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(839)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(840) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(841)
TRUE

----------------------------------------

(842)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(843) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(844)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(845) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(846)
YES

----------------------------------------

(847)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(848) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(849)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(850) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(851)
YES

----------------------------------------

(852)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(853) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(854)
Complex Obligation (AND)

----------------------------------------

(855)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(856) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(857)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(858) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(859)
YES

----------------------------------------

(860)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(861) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(862)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(863) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(864)
YES

----------------------------------------

(865)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(866) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(867)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(868)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(869)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(870) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(871)
Complex Obligation (AND)

----------------------------------------

(872)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(873) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(874)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(875) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(876)
YES

----------------------------------------

(877)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(878) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(879)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(880) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(881)
YES

----------------------------------------

(882)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(883)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(884) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(885)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(886) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(887)
YES

----------------------------------------

(888)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(889) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(890)
Complex Obligation (AND)

----------------------------------------

(891)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(892) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(893)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(894) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(895)
YES

----------------------------------------

(896)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(897) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(898)
Complex Obligation (OR)

----------------------------------------

(899)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(900) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(901)
Complex Obligation (AND)

----------------------------------------

(902)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(903) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(904)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(905) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(906)
YES

----------------------------------------

(907)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(908) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(909)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(910) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(911)
YES

----------------------------------------

(912)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(913) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(914)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(915)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(916)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(917) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(918)
Complex Obligation (AND)

----------------------------------------

(919)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(920) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(921)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(922) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(923)
YES

----------------------------------------

(924)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(925)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(926) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(927)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(928) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(929)
YES

----------------------------------------

(930)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(931) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(932)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(933) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(934)
YES

----------------------------------------

(935)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(936) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(937)
Complex Obligation (AND)

----------------------------------------

(938)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(939) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(940)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(941)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(942)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(943) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(944)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(945) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(946)
YES

----------------------------------------

(947)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(948) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(949)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(950) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(951)
YES

----------------------------------------

(952)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(953) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(954)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(955) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(956)
YES

----------------------------------------

(957)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(958) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(959)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(960) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(961)
YES

----------------------------------------

(962)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(963) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(964)
Complex Obligation (AND)

----------------------------------------

(965)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(966) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(967)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(968) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(969)
YES

----------------------------------------

(970)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(971) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(972)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(973) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(974)
YES

----------------------------------------

(975)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(976) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(977)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(978) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(979)
YES

----------------------------------------

(980)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(981) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(982)
Complex Obligation (OR)

----------------------------------------

(983)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(984) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(985)
Complex Obligation (AND)

----------------------------------------

(986)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(987) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(988)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(989) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(990)
YES

----------------------------------------

(991)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(992)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(993) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(994)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(995) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(996)
YES

----------------------------------------

(997)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(998) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(999)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1000) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1001)
YES

----------------------------------------

(1002)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1003) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1004)
Complex Obligation (AND)

----------------------------------------

(1005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1006) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1007)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1008) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1009)
YES

----------------------------------------

(1010)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1011)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1012) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1013)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1014) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1015)
YES

----------------------------------------

(1016)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1017) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1018)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1019) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1020)
YES

----------------------------------------

(1021)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1022) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1023)
Complex Obligation (AND)

----------------------------------------

(1024)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1025) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1026)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1027) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1028)
YES

----------------------------------------

(1029)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1030) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1031)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1032) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1033)
YES

----------------------------------------

(1034)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1035)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1036) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1037)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1038) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1039)
YES

----------------------------------------

(1040)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1041) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(1042)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1043) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1044)
YES

----------------------------------------

(1045)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1046) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(1047)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1048) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1049)
YES

----------------------------------------

(1050)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1051) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1052)
Complex Obligation (AND)

----------------------------------------

(1053)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1054) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(1055)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1056) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1057)
YES

----------------------------------------

(1058)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1059) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1060)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1061) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1062)
YES

----------------------------------------

(1063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1064) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(1065)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1066) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1067)
YES

----------------------------------------

(1068)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1069) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1070)
Complex Obligation (OR)

----------------------------------------

(1071)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1072) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1073)
Complex Obligation (AND)

----------------------------------------

(1074)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1075) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1076)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1077) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1078)
YES

----------------------------------------

(1079)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1080) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1081)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1082) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1083)
YES

----------------------------------------

(1084)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1085) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1086)
Complex Obligation (OR)

----------------------------------------

(1087)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1088) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1089)
Complex Obligation (AND)

----------------------------------------

(1090)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1091) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1092)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1093) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1094)
YES

----------------------------------------

(1095)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1096)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1097) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1098)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1099) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1100)
YES

----------------------------------------

(1101)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1102) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1103)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1104) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1105)
YES

----------------------------------------

(1106)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1107) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1108)
Complex Obligation (AND)

----------------------------------------

(1109)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1110) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1111)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1112) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1113)
YES

----------------------------------------

(1114)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1115) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1116)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1117) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1118)
YES

----------------------------------------

(1119)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1120)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1121) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1122)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1123) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1124)
YES

----------------------------------------

(1125)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1126) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1127)
Complex Obligation (AND)

----------------------------------------

(1128)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1129) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1130)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1131) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1132)
YES

----------------------------------------

(1133)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1134)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1135) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1136)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1137) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1138)
YES

----------------------------------------

(1139)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1140) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1141)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1142) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1143)
YES

----------------------------------------

(1144)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1145) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1146)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1147) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1148)
YES

----------------------------------------

(1149)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1150) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1151)
Complex Obligation (AND)

----------------------------------------

(1152)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1153) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1154)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1155) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1156)
YES

----------------------------------------

(1157)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1158) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1159)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1160) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1161)
YES

----------------------------------------

(1162)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1163) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1164)
Complex Obligation (OR)

----------------------------------------

(1165)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1166) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1167)
Complex Obligation (AND)

----------------------------------------

(1168)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1169) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1170)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1171) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1172)
YES

----------------------------------------

(1173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1174) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1175)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1176) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1177)
YES

----------------------------------------

(1178)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1179)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1180) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(1181)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1182) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1183)
YES

----------------------------------------

(1184)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1185) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1186)
Complex Obligation (AND)

----------------------------------------

(1187)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1188) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1189)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1190) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1191)
YES

----------------------------------------

(1192)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1193) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1194)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1195) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1196)
YES

----------------------------------------

(1197)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1198)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1199) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1200)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1201) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1202)
YES

----------------------------------------

(1203)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1204) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1205)
Complex Obligation (AND)

----------------------------------------

(1206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1207) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1208)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1209) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1210)
YES

----------------------------------------

(1211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1212)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1213) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1214)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1215) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1216)
YES

----------------------------------------

(1217)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1218) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1219)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1220) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1221)
YES

----------------------------------------

(1222)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1223) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1224)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1225) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1226)
YES

----------------------------------------

(1227)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1228) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1229)
Complex Obligation (AND)

----------------------------------------

(1230)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1231) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1232)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1233) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1234)
YES

----------------------------------------

(1235)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1236) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1237)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1238) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1239)
YES

----------------------------------------

(1240)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1241) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1242)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1243) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1244)
YES

----------------------------------------

(1245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1246) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1247)
Complex Obligation (OR)

----------------------------------------

(1248)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1249) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1250)
Complex Obligation (AND)

----------------------------------------

(1251)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1252) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1253)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1254) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1255)
YES

----------------------------------------

(1256)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1257)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1258) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1259)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1260) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1261)
YES

----------------------------------------

(1262)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1263) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1264)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1265) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1266)
YES

----------------------------------------

(1267)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1268) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1269)
Complex Obligation (AND)

----------------------------------------

(1270)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1271) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1272)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1273) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1274)
YES

----------------------------------------

(1275)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1276) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1277)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1278) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1279)
YES

----------------------------------------

(1280)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1282) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(1283)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1284) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1285)
YES

----------------------------------------

(1286)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1287) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1288)
Complex Obligation (AND)

----------------------------------------

(1289)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1290) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1291)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1292) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1293)
YES

----------------------------------------

(1294)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1295) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1296)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1297) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1298)
YES

----------------------------------------

(1299)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1300)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1301) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1302)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1303) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1304)
YES

----------------------------------------

(1305)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1306) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1307)
Complex Obligation (AND)

----------------------------------------

(1308)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1309) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1310)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1311) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1312)
YES

----------------------------------------

(1313)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1314) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1315)
Complex Obligation (OR)

----------------------------------------

(1316)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1317) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1318)
Complex Obligation (AND)

----------------------------------------

(1319)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1320) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1321)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1322) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1323)
YES

----------------------------------------

(1324)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1325)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1326) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1327)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1328) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1329)
YES

----------------------------------------

(1330)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1331) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1332)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1333) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1334)
YES

----------------------------------------

(1335)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1336) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1337)
Complex Obligation (AND)

----------------------------------------

(1338)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1339) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1340)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1341) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1342)
YES

----------------------------------------

(1343)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1344) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1345)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1346) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1347)
YES

----------------------------------------

(1348)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1349) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1350)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1351) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1352)
YES

----------------------------------------

(1353)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1354)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1355) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1356)
Complex Obligation (AND)

----------------------------------------

(1357)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1358) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1359)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1360) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1361)
YES

----------------------------------------

(1362)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1363) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1364)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1365) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1366)
YES

----------------------------------------

(1367)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1368) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1369)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1370) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1371)
YES

----------------------------------------

(1372)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1373)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1374) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1375)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1376) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1377)
YES

----------------------------------------

(1378)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1379) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1380)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1381) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1382)
YES

----------------------------------------

(1383)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1384) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1385)
Complex Obligation (AND)

----------------------------------------

(1386)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1387) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1388)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1389) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1390)
YES

----------------------------------------

(1391)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1392) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1393)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1394) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1395)
YES

----------------------------------------

(1396)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1397) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1398)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1399) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1400)
YES

----------------------------------------

(1401)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1402) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1403)
Complex Obligation (OR)

----------------------------------------

(1404)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1405) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1406)
Complex Obligation (AND)

----------------------------------------

(1407)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1408) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1409)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1410) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1411)
YES

----------------------------------------

(1412)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1413) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1414)
Complex Obligation (OR)

----------------------------------------

(1415)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1416) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1417)
Complex Obligation (AND)

----------------------------------------

(1418)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1419) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1420)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1421) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1422)
YES

----------------------------------------

(1423)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1424) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1425)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1426) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1427)
YES

----------------------------------------

(1428)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1429)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1430) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1431)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1432) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1433)
YES

----------------------------------------

(1434)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1435) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1436)
Complex Obligation (AND)

----------------------------------------

(1437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1438) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1439)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1440) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1441)
YES

----------------------------------------

(1442)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1443) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1444)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1445) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1446)
YES

----------------------------------------

(1447)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1448)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1449) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1450)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1451) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1452)
YES

----------------------------------------

(1453)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1454) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1455)
Complex Obligation (AND)

----------------------------------------

(1456)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1457) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1458)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1459) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1460)
YES

----------------------------------------

(1461)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1462) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1463)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1464) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1465)
YES

----------------------------------------

(1466)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1467)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1468) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1469)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1470) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1471)
YES

----------------------------------------

(1472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1473) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1474)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1475) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1476)
YES

----------------------------------------

(1477)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1478) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1479)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1480) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1481)
YES

----------------------------------------

(1482)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1483) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1484)
Complex Obligation (AND)

----------------------------------------

(1485)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1486) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1487)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1488) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1489)
YES

----------------------------------------

(1490)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1491) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1492)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1493) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1494)
YES

----------------------------------------

(1495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1496) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1497)
Complex Obligation (OR)

----------------------------------------

(1498)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1499) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1500)
Complex Obligation (AND)

----------------------------------------

(1501)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1502) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1503)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1504) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1505)
YES

----------------------------------------

(1506)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1507)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1508) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1509)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1510) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1511)
YES

----------------------------------------

(1512)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1513) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1514)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1515) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1516)
YES

----------------------------------------

(1517)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1518) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1519)
Complex Obligation (AND)

----------------------------------------

(1520)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1521) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1522)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1523) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1524)
YES

----------------------------------------

(1525)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1526) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1527)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1528) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1529)
YES

----------------------------------------

(1530)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1531) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1532)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1533) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1534)
YES

----------------------------------------

(1535)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1536)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1537) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1538)
Complex Obligation (AND)

----------------------------------------

(1539)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1540) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1541)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1542) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1543)
YES

----------------------------------------

(1544)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1545) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1546)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1547) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1548)
YES

----------------------------------------

(1549)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1550)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1551) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1552)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1553) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1554)
YES

----------------------------------------

(1555)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1556) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1557)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1558) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1559)
YES

----------------------------------------

(1560)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1561) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1562)
Complex Obligation (AND)

----------------------------------------

(1563)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1564) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1565)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1566) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1567)
YES

----------------------------------------

(1568)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1569) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1570)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1571) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1572)
YES

----------------------------------------

(1573)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1574) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1575)
Complex Obligation (OR)

----------------------------------------

(1576)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1577) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1578)
Complex Obligation (AND)

----------------------------------------

(1579)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1580) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1581)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1582) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1583)
YES

----------------------------------------

(1584)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1585) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1586)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1587) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1588)
YES

----------------------------------------

(1589)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1590) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1591)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1592) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1593)
YES

----------------------------------------

(1594)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1595)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1596) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1597)
Complex Obligation (AND)

----------------------------------------

(1598)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1599) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1600)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1601) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1602)
YES

----------------------------------------

(1603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1604) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1605)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1606) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1607)
YES

----------------------------------------

(1608)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1609) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1610)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1611) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1612)
YES

----------------------------------------

(1613)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1614)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1615) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1616)
Complex Obligation (AND)

----------------------------------------

(1617)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1618) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1619)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1620) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1621)
YES

----------------------------------------

(1622)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1623)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1624) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1625)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1626) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1627)
YES

----------------------------------------

(1628)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1629) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1630)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1631) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1632)
YES

----------------------------------------

(1633)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1634) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1635)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1636) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1637)
YES

----------------------------------------

(1638)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1639) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1640)
Complex Obligation (AND)

----------------------------------------

(1641)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1642) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1643)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1644) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1645)
YES

----------------------------------------

(1646)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1647) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1648)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1649) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1650)
YES

----------------------------------------

(1651)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1652) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1653)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1654) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1655)
YES

----------------------------------------

(1656)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1657) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1658)
Complex Obligation (OR)

----------------------------------------

(1659)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1660) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1661)
Complex Obligation (AND)

----------------------------------------

(1662)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1663) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1664)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1665) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1666)
YES

----------------------------------------

(1667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1668)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1669) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1670)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1671) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1672)
YES

----------------------------------------

(1673)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1674) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1675)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1676) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1677)
YES

----------------------------------------

(1678)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1679) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1680)
Complex Obligation (AND)

----------------------------------------

(1681)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1682) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1683)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1684) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1685)
YES

----------------------------------------

(1686)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1687) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1688)
Complex Obligation (OR)

----------------------------------------

(1689)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1691)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1692) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1693)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1694) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1695)
YES

----------------------------------------

(1696)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1697) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1698)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1699) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1700)
YES

----------------------------------------

(1701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1702) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1703)
Complex Obligation (AND)

----------------------------------------

(1704)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1705) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1706)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1707) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1708)
YES

----------------------------------------

(1709)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1710) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1711)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1712) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1713)
YES

----------------------------------------

(1714)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1715) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1716)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1717) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1718)
YES

----------------------------------------

(1719)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1720) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1721)
Complex Obligation (OR)

----------------------------------------

(1722)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1723)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1724)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1725) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1726)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1727) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(1728)
TRUE

----------------------------------------

(1729)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1730) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(1731)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1732) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1733)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> A(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1734) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(1735)
TRUE

----------------------------------------

(1736)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1737) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1738)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(1739) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1740)
YES

----------------------------------------

(1741)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1742) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 6 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1743)
Complex Obligation (OR)

----------------------------------------

(1744)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1745) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(1746)
Complex Obligation (AND)

----------------------------------------

(1747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1748) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1749)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1750) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1751)
YES

----------------------------------------

(1752)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1753) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1754)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1755) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1756)
YES

----------------------------------------

(1757)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1758) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1759)
Complex Obligation (OR)

----------------------------------------

(1760)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1761) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1762)
Complex Obligation (AND)

----------------------------------------

(1763)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1764) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1765)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1766) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1767)
YES

----------------------------------------

(1768)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1769) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1770)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1771) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1772)
YES

----------------------------------------

(1773)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1774) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(1775)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1776) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1777)
YES

----------------------------------------

(1778)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1779) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1780)
Complex Obligation (OR)

----------------------------------------

(1781)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1782) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1783)
Complex Obligation (AND)

----------------------------------------

(1784)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1785) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1786)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1787) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1788)
YES

----------------------------------------

(1789)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1790) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1791)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1792) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1793)
YES

----------------------------------------

(1794)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1795) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1796)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1797) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(1798)
TRUE

----------------------------------------

(1799)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1800) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1801)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1802) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1803)
YES

----------------------------------------

(1804)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1805) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1806)
Complex Obligation (AND)

----------------------------------------

(1807)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1808) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1809)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1810) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1811)
YES

----------------------------------------

(1812)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1813) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1814)
Complex Obligation (OR)

----------------------------------------

(1815)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1816) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(1817)
Complex Obligation (AND)

----------------------------------------

(1818)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1819) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1820)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1821) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1822)
YES

----------------------------------------

(1823)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1824) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(1825)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1826) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1827)
YES

----------------------------------------

(1828)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1829) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1830)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1831) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1832)
YES

----------------------------------------

(1833)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1834) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1835)
Complex Obligation (AND)

----------------------------------------

(1836)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1837) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1838)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1839) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1840)
YES

----------------------------------------

(1841)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1842) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1843)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1844) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1845)
YES

----------------------------------------

(1846)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1847) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1848)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1849) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1850)
YES

----------------------------------------

(1851)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1852)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1853) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1854)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1855) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1856)
YES

----------------------------------------

(1857)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1858) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1859)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1860) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1861)
YES

----------------------------------------

(1862)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1863) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1864)
Complex Obligation (AND)

----------------------------------------

(1865)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1866) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1867)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1868) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1869)
YES

----------------------------------------

(1870)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1871) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1872)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1873) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1874)
YES

----------------------------------------

(1875)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1876) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1877)
Complex Obligation (OR)

----------------------------------------

(1878)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1879) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1880)
Complex Obligation (AND)

----------------------------------------

(1881)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1882) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1883)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1884) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1885)
YES

----------------------------------------

(1886)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1887) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(1888)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1889) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1890)
YES

----------------------------------------

(1891)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1892) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1893)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1894) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(1895)
TRUE

----------------------------------------

(1896)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1897) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(1898)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1899) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1900)
YES

----------------------------------------

(1901)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1902) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1903)
Complex Obligation (AND)

----------------------------------------

(1904)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1905) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1906)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1907) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1908)
YES

----------------------------------------

(1909)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1910)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1911) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1912)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1913) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1914)
YES

----------------------------------------

(1915)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1916) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(1917)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1918) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1919)
YES

----------------------------------------

(1920)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1921) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1922)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1923) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1924)
YES

----------------------------------------

(1925)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1926) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1927)
Complex Obligation (AND)

----------------------------------------

(1928)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1929) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1930)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1931) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1932)
YES

----------------------------------------

(1933)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1934) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1935)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1936) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1937)
YES

----------------------------------------

(1938)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1939) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1940)
Complex Obligation (OR)

----------------------------------------

(1941)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1942) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1943)
Complex Obligation (AND)

----------------------------------------

(1944)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1945) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1946)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1947) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1948)
YES

----------------------------------------

(1949)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1950) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1951)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1952) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(1953)
TRUE

----------------------------------------

(1954)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1955) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1956)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1957) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1958)
YES

----------------------------------------

(1959)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1960) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(1961)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1962) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1963)
YES

----------------------------------------

(1964)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1965) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1966)
Complex Obligation (AND)

----------------------------------------

(1967)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1968) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1969)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1970) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(1971)
YES

----------------------------------------

(1972)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1973) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(1974)
Complex Obligation (OR)

----------------------------------------

(1975)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1976) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(1977)
Complex Obligation (AND)

----------------------------------------

(1978)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1979) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1980)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1981)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1982) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1983)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1984)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1985) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(1986)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1987)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1988) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(1989)
Complex Obligation (AND)

----------------------------------------

(1990)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1991) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1992)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1993)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1994) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(1995)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1996)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1997)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(1998) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(1999)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2000)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2001) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2002)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2003) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2004)
YES

----------------------------------------

(2005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2006) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2007)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2008) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2009)
YES

----------------------------------------

(2010)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2011) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2012)
Complex Obligation (AND)

----------------------------------------

(2013)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2014) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2015)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2016) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2017)
YES

----------------------------------------

(2018)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2019) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2020)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2021) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2022)
YES

----------------------------------------

(2023)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2024) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2025)
Complex Obligation (OR)

----------------------------------------

(2026)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2027) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2028)
Complex Obligation (AND)

----------------------------------------

(2029)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2030) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2031)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2032)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2033) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2034)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2035)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2036) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2037)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2038)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2039) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2040)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2041)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2042) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2043)
Complex Obligation (AND)

----------------------------------------

(2044)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2045) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2046)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2047)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2048) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2049)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2050)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2051)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2052) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2053)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2054)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2055) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2056)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2057) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2058)
YES

----------------------------------------

(2059)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2060) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(2061)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2062) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2063)
YES

----------------------------------------

(2064)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2065) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2066)
Complex Obligation (AND)

----------------------------------------

(2067)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2068) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2069)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2070) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2071)
YES

----------------------------------------

(2072)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2073) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2074)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2075) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2076)
YES

----------------------------------------

(2077)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2078) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2079)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2080) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2081)
YES

----------------------------------------

(2082)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2083) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2084)
Complex Obligation (OR)

----------------------------------------

(2085)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2086) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2087)
Complex Obligation (AND)

----------------------------------------

(2088)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2089) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2090)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2091) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2092)
YES

----------------------------------------

(2093)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2094) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2095)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2096) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2097)
YES

----------------------------------------

(2098)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2099) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2100)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2101) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2102)
YES

----------------------------------------

(2103)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2104) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2105)
Complex Obligation (OR)

----------------------------------------

(2106)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2107) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2108)
Complex Obligation (AND)

----------------------------------------

(2109)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2110) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2111)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2112)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2113) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(2114)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2115) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2116)
YES

----------------------------------------

(2117)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2118) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2119)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2120)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2121) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2122)
Complex Obligation (AND)

----------------------------------------

(2123)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2124) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2125)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2126)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2127) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2128)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2129)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2130) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2131)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2132)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2133)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2134) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2135)
Complex Obligation (AND)

----------------------------------------

(2136)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2137) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2138)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2139) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2140)
YES

----------------------------------------

(2141)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2142) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2143)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2144) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2145)
YES

----------------------------------------

(2146)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2147) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2148)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2149) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2150)
YES

----------------------------------------

(2151)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2152) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2153)
Complex Obligation (OR)

----------------------------------------

(2154)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2155) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2156)
Complex Obligation (AND)

----------------------------------------

(2157)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2158) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2159)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2160)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2161) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2162)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2163)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2164) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2165)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2166)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2167) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2168)
Complex Obligation (AND)

----------------------------------------

(2169)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2170) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2171)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2172)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2173) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2174)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2175) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2176)
YES

----------------------------------------

(2177)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2178) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2179)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2180)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2181)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2182) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2183)
Complex Obligation (AND)

----------------------------------------

(2184)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2185) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2186)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2187) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2188)
YES

----------------------------------------

(2189)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2190) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2191)
Complex Obligation (OR)

----------------------------------------

(2192)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2193) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2194)
Complex Obligation (AND)

----------------------------------------

(2195)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2196) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2197)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2198)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2199)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2200) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2201)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2202)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2203) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2204)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2205)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2206) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2207)
Complex Obligation (AND)

----------------------------------------

(2208)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2209) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2210)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2212) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2213)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2214)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2215)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2216) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2217)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2218)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2219) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2220)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2221) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2222)
YES

----------------------------------------

(2223)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2224) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2225)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2226) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2227)
YES

----------------------------------------

(2228)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2229) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2230)
Complex Obligation (AND)

----------------------------------------

(2231)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2232) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2233)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2234) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2235)
YES

----------------------------------------

(2236)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2237) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2238)
Complex Obligation (OR)

----------------------------------------

(2239)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2240) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2241)
Complex Obligation (AND)

----------------------------------------

(2242)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2243) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2244)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2245) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2246)
YES

----------------------------------------

(2247)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2248) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2249)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2250) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2251)
YES

----------------------------------------

(2252)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2253) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2254)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2255) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2256)
YES

----------------------------------------

(2257)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2258) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2259)
Complex Obligation (OR)

----------------------------------------

(2260)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2261)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2262)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2263) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2264)
Complex Obligation (AND)

----------------------------------------

(2265)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2266) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2267)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2268) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2269)
YES

----------------------------------------

(2270)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2271) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2272)
Complex Obligation (OR)

----------------------------------------

(2273)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2274) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2275)
Complex Obligation (AND)

----------------------------------------

(2276)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2277) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2278)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2279)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2280) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2282)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2283) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2284)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2285)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2286) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2287)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2288)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2289) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2290)
Complex Obligation (AND)

----------------------------------------

(2291)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2292) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2293)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2294)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2295)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2296) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2297)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2298)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2299) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2300)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2301)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2302) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2303)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2304) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2305)
YES

----------------------------------------

(2306)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2307) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2308)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2309) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2310)
YES

----------------------------------------

(2311)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2312) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2313)
Complex Obligation (AND)

----------------------------------------

(2314)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2315) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2316)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2317) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2318)
YES

----------------------------------------

(2319)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2320) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2321)
Complex Obligation (OR)

----------------------------------------

(2322)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2323)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2324)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2325) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2326)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2327) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2328)
YES

----------------------------------------

(2329)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2330) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2331)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2332) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2333)
YES

----------------------------------------

(2334)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2335) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2336)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2337) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2338)
YES

----------------------------------------

(2339)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2340) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2341)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2342) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2343)
YES

----------------------------------------

(2344)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2345) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2346)
Complex Obligation (OR)

----------------------------------------

(2347)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2348) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2349)
Complex Obligation (AND)

----------------------------------------

(2350)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2351) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2352)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2353) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2354)
YES

----------------------------------------

(2355)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2356) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2357)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2358) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2359)
YES

----------------------------------------

(2360)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2361) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2362)
Complex Obligation (OR)

----------------------------------------

(2363)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2364) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2365)
Complex Obligation (AND)

----------------------------------------

(2366)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2367) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2368)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2369) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2370)
YES

----------------------------------------

(2371)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2372) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2373)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2374) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(2375)
TRUE

----------------------------------------

(2376)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2377) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2378)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2379) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2380)
YES

----------------------------------------

(2381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2382) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2383)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2384) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2385)
YES

----------------------------------------

(2386)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2387) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2388)
Complex Obligation (OR)

----------------------------------------

(2389)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2390)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2391)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2392)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2393) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2394)
Complex Obligation (AND)

----------------------------------------

(2395)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2396) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(2397)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2398) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2399)
YES

----------------------------------------

(2400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2401) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2402)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2403) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2404)
YES

----------------------------------------

(2405)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2406)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2407) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2408)
Complex Obligation (AND)

----------------------------------------

(2409)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2410) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2411)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2412) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2413)
YES

----------------------------------------

(2414)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2415)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2416)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2417) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2418)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2419) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2420)
YES

----------------------------------------

(2421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2422) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2423)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2424) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2425)
YES

----------------------------------------

(2426)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2427) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2428)
Complex Obligation (AND)

----------------------------------------

(2429)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2430) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2431)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2432) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2433)
YES

----------------------------------------

(2434)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2435)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2436) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2437)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2438) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2439)
YES

----------------------------------------

(2440)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2441)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2442) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2443)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2444) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2445)
YES

----------------------------------------

(2446)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2447) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2448)
Complex Obligation (OR)

----------------------------------------

(2449)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2450) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2451)
Complex Obligation (AND)

----------------------------------------

(2452)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2453) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2454)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2455) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2456)
YES

----------------------------------------

(2457)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2458) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2459)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2460) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(2461)
TRUE

----------------------------------------

(2462)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2463) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2464)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2465) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2466)
YES

----------------------------------------

(2467)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2468) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2469)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2470) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2471)
YES

----------------------------------------

(2472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2473) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2474)
Complex Obligation (AND)

----------------------------------------

(2475)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2476) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2477)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2478) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2479)
YES

----------------------------------------

(2480)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2481) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2482)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2483) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2484)
YES

----------------------------------------

(2485)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2486) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2487)
Complex Obligation (OR)

----------------------------------------

(2488)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2489)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2490)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2491) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2492)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2493) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2494)
YES

----------------------------------------

(2495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2496) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2497)
Complex Obligation (AND)

----------------------------------------

(2498)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2499) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2500)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2501) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2502)
YES

----------------------------------------

(2503)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2504)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2505) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2506)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2507) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2508)
YES

----------------------------------------

(2509)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2510) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2511)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2512) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2513)
YES

----------------------------------------

(2514)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2515) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(2516)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2517) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2518)
YES

----------------------------------------

(2519)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2520) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2521)
Complex Obligation (AND)

----------------------------------------

(2522)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2523) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2524)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2525) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2526)
YES

----------------------------------------

(2527)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2528) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2529)
Complex Obligation (OR)

----------------------------------------

(2530)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2531) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2532)
Complex Obligation (AND)

----------------------------------------

(2533)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2534) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2535)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2536) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2537)
YES

----------------------------------------

(2538)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2539) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2540)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2541) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2542)
YES

----------------------------------------

(2543)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2544) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(2545)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2546) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2547)
YES

----------------------------------------

(2548)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2549) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2550)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2551) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(2552)
TRUE

----------------------------------------

(2553)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2554) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2555)
Complex Obligation (AND)

----------------------------------------

(2556)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2557) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2558)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2559) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2560)
YES

----------------------------------------

(2561)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2562)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2563) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2564)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2565) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2566)
YES

----------------------------------------

(2567)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2568) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2569)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2570) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2571)
YES

----------------------------------------

(2572)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2573) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2574)
Complex Obligation (AND)

----------------------------------------

(2575)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2576) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2577)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2578) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2579)
YES

----------------------------------------

(2580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2581)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2582) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2583)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2584) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2585)
YES

----------------------------------------

(2586)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2587) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2588)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2589) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2590)
YES

----------------------------------------

(2591)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2592) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2593)
Complex Obligation (OR)

----------------------------------------

(2594)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2595) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2596)
Complex Obligation (AND)

----------------------------------------

(2597)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2598) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2599)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2600) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2601)
YES

----------------------------------------

(2602)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2603) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2604)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2605) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2606)
YES

----------------------------------------

(2607)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2608) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(2609)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2610) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2611)
YES

----------------------------------------

(2612)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2613) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2614)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2615) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(2616)
TRUE

----------------------------------------

(2617)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2618) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2619)
Complex Obligation (OR)

----------------------------------------

(2620)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2621)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2622)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2623)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2624) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2625)
Complex Obligation (AND)

----------------------------------------

(2626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2627) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2628)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2629) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2630)
YES

----------------------------------------

(2631)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2632) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(2633)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2634) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2635)
YES

----------------------------------------

(2636)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2637)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2638) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2639)
Complex Obligation (AND)

----------------------------------------

(2640)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2641) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2642)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2643) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2644)
YES

----------------------------------------

(2645)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2646)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2647) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2648)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2649) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2650)
YES

----------------------------------------

(2651)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2652)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2653) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2654)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2655) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2656)
YES

----------------------------------------

(2657)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2658) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2659)
Complex Obligation (AND)

----------------------------------------

(2660)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2661) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2662)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2663) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2664)
YES

----------------------------------------

(2665)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2666)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2668) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2669)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2670) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2671)
YES

----------------------------------------

(2672)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2673) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2674)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2675) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2676)
YES

----------------------------------------

(2677)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2678) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2679)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2680) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2681)
YES

----------------------------------------

(2682)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2683) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(2684)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2685) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2686)
YES

----------------------------------------

(2687)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2688) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2689)
Complex Obligation (AND)

----------------------------------------

(2690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2691) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2692)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2693) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2694)
YES

----------------------------------------

(2695)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2696) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2697)
Complex Obligation (OR)

----------------------------------------

(2698)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2699) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2700)
Complex Obligation (AND)

----------------------------------------

(2701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2702) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2703)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2704) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2705)
YES

----------------------------------------

(2706)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2707) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2708)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2709) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2710)
YES

----------------------------------------

(2711)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2712)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2713) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(2714)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2715) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2716)
YES

----------------------------------------

(2717)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2718) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2719)
Complex Obligation (AND)

----------------------------------------

(2720)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2721) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2722)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2723) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2724)
YES

----------------------------------------

(2725)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2726)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2727) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2728)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2729) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2730)
YES

----------------------------------------

(2731)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2732) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(2733)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2734) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2735)
YES

----------------------------------------

(2736)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2737) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2738)
Complex Obligation (AND)

----------------------------------------

(2739)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2740) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2741)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2742) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2743)
YES

----------------------------------------

(2744)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2745) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2746)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2747) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2748)
YES

----------------------------------------

(2749)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2750)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2751) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2752)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2753) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2754)
YES

----------------------------------------

(2755)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2756) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2757)
Complex Obligation (AND)

----------------------------------------

(2758)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2759) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2760)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2761) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2762)
YES

----------------------------------------

(2763)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2764)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2765) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2766)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2767) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2768)
YES

----------------------------------------

(2769)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2770) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2771)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2772) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2773)
YES

----------------------------------------

(2774)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2775) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2776)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2777) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2778)
YES

----------------------------------------

(2779)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2780) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2781)
Complex Obligation (AND)

----------------------------------------

(2782)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2783) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2784)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2785) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2786)
YES

----------------------------------------

(2787)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2788) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2789)
Complex Obligation (OR)

----------------------------------------

(2790)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2791) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2792)
Complex Obligation (AND)

----------------------------------------

(2793)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2794) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2795)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2796) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2797)
YES

----------------------------------------

(2798)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2799) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2800)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2801) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2802)
YES

----------------------------------------

(2803)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2804)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2805) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2806)
Complex Obligation (OR)

----------------------------------------

(2807)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2808)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2809)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2810) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2811)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2812) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2813)
YES

----------------------------------------

(2814)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2815) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2816)
Complex Obligation (AND)

----------------------------------------

(2817)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2818) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2819)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2820) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2821)
YES

----------------------------------------

(2822)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2823) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2824)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2825) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2826)
YES

----------------------------------------

(2827)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2828) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2829)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2830) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2831)
YES

----------------------------------------

(2832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2833)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2834) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2835)
Complex Obligation (OR)

----------------------------------------

(2836)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2837)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2838)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2839) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(2840)
Complex Obligation (AND)

----------------------------------------

(2841)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2842)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2843) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(2844)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2845) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2846)
YES

----------------------------------------

(2847)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2848) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2849)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2850) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2851)
YES

----------------------------------------

(2852)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2853) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2854)
Complex Obligation (AND)

----------------------------------------

(2855)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2856) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2857)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2858) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2859)
YES

----------------------------------------

(2860)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2861) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2862)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2863) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2864)
YES

----------------------------------------

(2865)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2866)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2867) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2868)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2869) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2870)
YES

----------------------------------------

(2871)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2872)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2873) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2874)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2875) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2876)
YES

----------------------------------------

(2877)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2878) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2879)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2880) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2881)
YES

----------------------------------------

(2882)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2883) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2884)
Complex Obligation (OR)

----------------------------------------

(2885)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2886) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2887)
Complex Obligation (AND)

----------------------------------------

(2888)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2889) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2890)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2891) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2892)
YES

----------------------------------------

(2893)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2894) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2895)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2896) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2897)
YES

----------------------------------------

(2898)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2899) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2900)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2901) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2902)
YES

----------------------------------------

(2903)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2904)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2905) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2906)
Complex Obligation (AND)

----------------------------------------

(2907)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2908) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2909)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2910) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2911)
YES

----------------------------------------

(2912)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2913)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2914) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2915)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2916) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2917)
YES

----------------------------------------

(2918)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2919) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(2920)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2921) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2922)
YES

----------------------------------------

(2923)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2924) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2925)
Complex Obligation (AND)

----------------------------------------

(2926)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2927) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(2928)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2929) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2930)
YES

----------------------------------------

(2931)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2932)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2933) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2934)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2935) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2936)
YES

----------------------------------------

(2937)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2938) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2939)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2940) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2941)
YES

----------------------------------------

(2942)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2943) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(2944)
Complex Obligation (AND)

----------------------------------------

(2945)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2946) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2947)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2948) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2949)
YES

----------------------------------------

(2950)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2951) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2952)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2953) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2954)
YES

----------------------------------------

(2955)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2956) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(2957)
Complex Obligation (OR)

----------------------------------------

(2958)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2959) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2960)
Complex Obligation (AND)

----------------------------------------

(2961)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2962) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2963)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2964) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2965)
YES

----------------------------------------

(2966)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2967)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2968) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(2969)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2970) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2971)
YES

----------------------------------------

(2972)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2973) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2974)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2975) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2976)
YES

----------------------------------------

(2977)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2978) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2979)
Complex Obligation (AND)

----------------------------------------

(2980)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2981) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2982)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2983) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2984)
YES

----------------------------------------

(2985)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2986) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(2987)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2988) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2989)
YES

----------------------------------------

(2990)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2991)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2992) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(2993)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2994) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(2995)
YES

----------------------------------------

(2996)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(2997) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(2998)
Complex Obligation (AND)

----------------------------------------

(2999)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3000) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3001)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3002) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3003)
YES

----------------------------------------

(3004)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3006) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3007)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3008) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3009)
YES

----------------------------------------

(3010)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3011) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3012)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3013) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3014)
YES

----------------------------------------

(3015)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3016) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3017)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3018) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3019)
YES

----------------------------------------

(3020)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3021) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3022)
Complex Obligation (OR)

----------------------------------------

(3023)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3024) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3025)
Complex Obligation (AND)

----------------------------------------

(3026)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3027) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3028)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3029) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3030)
YES

----------------------------------------

(3031)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3032)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3033) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3034)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3035) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3036)
YES

----------------------------------------

(3037)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3038) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3039)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3040) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3041)
YES

----------------------------------------

(3042)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3043)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3044) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3045)
Complex Obligation (AND)

----------------------------------------

(3046)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3047) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3048)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3049) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3050)
YES

----------------------------------------

(3051)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3052)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3053) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3054)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3055) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3056)
YES

----------------------------------------

(3057)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3058)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3059) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3060)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3061) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3062)
YES

----------------------------------------

(3063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3064) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3065)
Complex Obligation (AND)

----------------------------------------

(3066)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3067)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3068) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3069)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3070) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3071)
YES

----------------------------------------

(3072)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3073) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3074)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3075) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3076)
YES

----------------------------------------

(3077)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3078) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3079)
Complex Obligation (AND)

----------------------------------------

(3080)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3081) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3082)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3083) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3084)
YES

----------------------------------------

(3085)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3086)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3087) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3088)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3089) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3090)
YES

----------------------------------------

(3091)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3092)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3093) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3094)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3095) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3096)
YES

----------------------------------------

(3097)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3098) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3099)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3100) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3101)
YES

----------------------------------------

(3102)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3103) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3104)
Complex Obligation (AND)

----------------------------------------

(3105)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3106) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3107)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3108) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3109)
YES

----------------------------------------

(3110)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3111) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3112)
Complex Obligation (OR)

----------------------------------------

(3113)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3114) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3115)
Complex Obligation (AND)

----------------------------------------

(3116)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3117) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3118)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3119) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3120)
YES

----------------------------------------

(3121)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3122) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3123)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3124) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3125)
YES

----------------------------------------

(3126)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3127) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3128)
Complex Obligation (OR)

----------------------------------------

(3129)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3130) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3131)
Complex Obligation (AND)

----------------------------------------

(3132)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3133) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3134)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3135) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3136)
YES

----------------------------------------

(3137)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3138)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3139) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3140)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3141) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3142)
YES

----------------------------------------

(3143)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3144) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3145)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3146) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3147)
TRUE

----------------------------------------

(3148)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3149) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3150)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3151) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3152)
YES

----------------------------------------

(3153)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3154) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3155)
Complex Obligation (AND)

----------------------------------------

(3156)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3157) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3158)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3159) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3160)
YES

----------------------------------------

(3161)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3162)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3163) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3164)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3165) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3166)
YES

----------------------------------------

(3167)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3168) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3169)
Complex Obligation (AND)

----------------------------------------

(3170)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3171) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3172)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3173) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3174)
YES

----------------------------------------

(3175)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3176) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3177)
Complex Obligation (OR)

----------------------------------------

(3178)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3179)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3180)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3181) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3182)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3183) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3184)
YES

----------------------------------------

(3185)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3186) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3187)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3188) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3189)
YES

----------------------------------------

(3190)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3191)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3192) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3193)
Complex Obligation (AND)

----------------------------------------

(3194)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3195) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3196)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3197) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3198)
YES

----------------------------------------

(3199)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3200)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3201) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3202)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3203) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3204)
YES

----------------------------------------

(3205)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3207) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3208)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3209) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3210)
YES

----------------------------------------

(3211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3212) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3213)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3214) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3215)
YES

----------------------------------------

(3216)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3217) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3218)
Complex Obligation (OR)

----------------------------------------

(3219)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3220) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3221)
Complex Obligation (AND)

----------------------------------------

(3222)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3223) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3224)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3225) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3226)
YES

----------------------------------------

(3227)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3228) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3229)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3230) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3231)
YES

----------------------------------------

(3232)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3233) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3234)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3235) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3236)
YES

----------------------------------------

(3237)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3238) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3239)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3240) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3241)
TRUE

----------------------------------------

(3242)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3243) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3244)
Complex Obligation (AND)

----------------------------------------

(3245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3246) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3247)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3248) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3249)
YES

----------------------------------------

(3250)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3251)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3252) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3253)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3254) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3255)
YES

----------------------------------------

(3256)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3257) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3258)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3259) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3260)
YES

----------------------------------------

(3261)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3262) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3263)
Complex Obligation (AND)

----------------------------------------

(3264)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3265) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3266)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3267) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3268)
YES

----------------------------------------

(3269)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3270)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3271) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3272)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3273) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3274)
YES

----------------------------------------

(3275)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3276) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3277)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3278) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3279)
YES

----------------------------------------

(3280)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3281) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3282)
Complex Obligation (AND)

----------------------------------------

(3283)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3284) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3285)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3286) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3287)
YES

----------------------------------------

(3288)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3289) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3290)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3291) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3292)
YES

----------------------------------------

(3293)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3294) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3295)
Complex Obligation (OR)

----------------------------------------

(3296)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3297) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3298)
Complex Obligation (AND)

----------------------------------------

(3299)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3300) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3301)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3302) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3303)
YES

----------------------------------------

(3304)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3305) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3306)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3307) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3308)
TRUE

----------------------------------------

(3309)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3310) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3311)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3312) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3313)
YES

----------------------------------------

(3314)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3315) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3316)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3317) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3318)
YES

----------------------------------------

(3319)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3320)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3321) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3322)
Complex Obligation (AND)

----------------------------------------

(3323)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3324) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3325)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3326) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3327)
YES

----------------------------------------

(3328)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3329)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3330) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3331)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3332) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3333)
YES

----------------------------------------

(3334)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3335) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3336)
Complex Obligation (AND)

----------------------------------------

(3337)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3338) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3339)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3340) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3341)
YES

----------------------------------------

(3342)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3343) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3344)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3345) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3346)
YES

----------------------------------------

(3347)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3348)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3349) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3350)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3351) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3352)
YES

----------------------------------------

(3353)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3354)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3355) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3356)
Complex Obligation (AND)

----------------------------------------

(3357)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3358) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3359)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3360) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3361)
YES

----------------------------------------

(3362)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3363)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3364)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3365) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3366)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3367) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3368)
YES

----------------------------------------

(3369)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3370) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3371)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3372) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3373)
YES

----------------------------------------

(3374)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3375) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3376)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3377) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3378)
YES

----------------------------------------

(3379)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3380) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3381)
Complex Obligation (OR)

----------------------------------------

(3382)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3383) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3384)
Complex Obligation (AND)

----------------------------------------

(3385)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3386) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3387)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3388) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3389)
YES

----------------------------------------

(3390)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3391) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3392)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3393) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3394)
YES

----------------------------------------

(3395)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3396) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3397)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3398) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3399)
TRUE

----------------------------------------

(3400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3401) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3402)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3403) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3404)
YES

----------------------------------------

(3405)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3406) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3407)
Complex Obligation (AND)

----------------------------------------

(3408)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3409) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3410)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3411) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3412)
YES

----------------------------------------

(3413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3414) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3415)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3416) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3417)
YES

----------------------------------------

(3418)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3419)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3420) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3421)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3422) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3423)
YES

----------------------------------------

(3424)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3425) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3426)
Complex Obligation (AND)

----------------------------------------

(3427)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3428) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3429)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3430) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3431)
YES

----------------------------------------

(3432)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3433) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3434)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3435) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3436)
YES

----------------------------------------

(3437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3438)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3439) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3440)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3441) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3442)
YES

----------------------------------------

(3443)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3444) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3445)
Complex Obligation (AND)

----------------------------------------

(3446)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3447) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3448)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3449) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3450)
YES

----------------------------------------

(3451)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3452) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3453)
Complex Obligation (OR)

----------------------------------------

(3454)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3455) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3456)
Complex Obligation (AND)

----------------------------------------

(3457)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3458) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3459)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3460) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3461)
YES

----------------------------------------

(3462)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3463)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3464) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3465)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3466) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3467)
YES

----------------------------------------

(3468)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3469) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3470)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3471) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3472)
YES

----------------------------------------

(3473)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3474) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3475)
Complex Obligation (AND)

----------------------------------------

(3476)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3477) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3478)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3479) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3480)
YES

----------------------------------------

(3481)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3482)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3483) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3484)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3485) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3486)
YES

----------------------------------------

(3487)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3488) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3489)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3490) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3491)
YES

----------------------------------------

(3492)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3493) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3494)
Complex Obligation (AND)

----------------------------------------

(3495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3496) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3497)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3498) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3499)
YES

----------------------------------------

(3500)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3501) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3502)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3503) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3504)
YES

----------------------------------------

(3505)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3506) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3507)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3508) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3509)
YES

----------------------------------------

(3510)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3511)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3512) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3513)
Complex Obligation (AND)

----------------------------------------

(3514)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3515) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3516)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3517) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3518)
YES

----------------------------------------

(3519)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3520) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3521)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3522) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3523)
YES

----------------------------------------

(3524)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3525)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3526) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3527)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3528) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3529)
YES

----------------------------------------

(3530)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3531) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3532)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3533) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3534)
YES

----------------------------------------

(3535)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3536) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3537)
Complex Obligation (AND)

----------------------------------------

(3538)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3539) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3540)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3541) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3542)
YES

----------------------------------------

(3543)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3544) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3545)
Complex Obligation (OR)

----------------------------------------

(3546)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3547) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3548)
Complex Obligation (AND)

----------------------------------------

(3549)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3550) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3551)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3552) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3553)
YES

----------------------------------------

(3554)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3555) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3556)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3557) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3558)
YES

----------------------------------------

(3559)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3560)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3561) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3562)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3563) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3564)
YES

----------------------------------------

(3565)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3566) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3567)
Complex Obligation (AND)

----------------------------------------

(3568)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3569) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3570)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3571) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3572)
YES

----------------------------------------

(3573)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3574)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3575) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3576)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3577) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3578)
YES

----------------------------------------

(3579)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3580) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3581)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3582) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3583)
YES

----------------------------------------

(3584)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3585) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3586)
Complex Obligation (AND)

----------------------------------------

(3587)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3588) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3589)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3590) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3591)
YES

----------------------------------------

(3592)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3593) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3594)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3595) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3596)
YES

----------------------------------------

(3597)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3598) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3599)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3600) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3601)
YES

----------------------------------------

(3602)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3604) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3605)
Complex Obligation (OR)

----------------------------------------

(3606)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3607) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3608)
Complex Obligation (AND)

----------------------------------------

(3609)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3610) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3611)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3612) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3613)
YES

----------------------------------------

(3614)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3615)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3616)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3617) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3618)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3619) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3620)
YES

----------------------------------------

(3621)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3622) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3623)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3624) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3625)
YES

----------------------------------------

(3626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3627) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3628)
Complex Obligation (AND)

----------------------------------------

(3629)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3630) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3631)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3632) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3633)
YES

----------------------------------------

(3634)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3635)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3636) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3637)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3638) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3639)
YES

----------------------------------------

(3640)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3641)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3642) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3643)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3644) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3645)
YES

----------------------------------------

(3646)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3647) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3648)
Complex Obligation (AND)

----------------------------------------

(3649)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3650) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3651)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3652) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3653)
YES

----------------------------------------

(3654)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3655) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3656)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3657) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3658)
YES

----------------------------------------

(3659)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3660)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3661) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3662)
Complex Obligation (AND)

----------------------------------------

(3663)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3664) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3665)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3666) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3667)
YES

----------------------------------------

(3668)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3669)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3670)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3671) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3672)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3673) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3674)
YES

----------------------------------------

(3675)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3676) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3677)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3678) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3679)
YES

----------------------------------------

(3680)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3681) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3682)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3683) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3684)
YES

----------------------------------------

(3685)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3686) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3687)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3688) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3689)
YES

----------------------------------------

(3690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3691) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3692)
Complex Obligation (AND)

----------------------------------------

(3693)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3694) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3695)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3696) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3697)
YES

----------------------------------------

(3698)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3699) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3700)
Complex Obligation (OR)

----------------------------------------

(3701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3702) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3703)
Complex Obligation (AND)

----------------------------------------

(3704)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3705) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3706)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3707) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3708)
YES

----------------------------------------

(3709)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3710)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3711) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3712)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3713) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3714)
YES

----------------------------------------

(3715)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3716) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3717)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3718) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3719)
YES

----------------------------------------

(3720)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3721) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3722)
Complex Obligation (AND)

----------------------------------------

(3723)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3724) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3725)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3726) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3727)
YES

----------------------------------------

(3728)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3729)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3730) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3731)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3732) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3733)
YES

----------------------------------------

(3734)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3735) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3736)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3737) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3738)
YES

----------------------------------------

(3739)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3740) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3741)
Complex Obligation (AND)

----------------------------------------

(3742)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3743) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3744)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3745) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3746)
YES

----------------------------------------

(3747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3748)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3749) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3750)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3751) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3752)
YES

----------------------------------------

(3753)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3754) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3755)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3756) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3757)
YES

----------------------------------------

(3758)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3759) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3760)
Complex Obligation (OR)

----------------------------------------

(3761)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3762) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3763)
Complex Obligation (AND)

----------------------------------------

(3764)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3765) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3766)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3767) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3768)
YES

----------------------------------------

(3769)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3770)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3771) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3772)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3773) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3774)
YES

----------------------------------------

(3775)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3776) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3777)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3778) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3779)
YES

----------------------------------------

(3780)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3781)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3782) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3783)
Complex Obligation (AND)

----------------------------------------

(3784)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3785) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3786)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3787) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3788)
YES

----------------------------------------

(3789)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3790) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3791)
Complex Obligation (OR)

----------------------------------------

(3792)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3793)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3794)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3795) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3796)
Complex Obligation (OR)

----------------------------------------

(3797)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3798)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3799)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3800)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3801) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3802)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3803) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3804)
YES

----------------------------------------

(3805)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3806) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3807)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3808) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3809)
YES

----------------------------------------

(3810)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3811) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(3812)
Complex Obligation (AND)

----------------------------------------

(3813)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3814)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3815) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3816)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3817) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3818)
YES

----------------------------------------

(3819)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3820) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3821)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3822) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3823)
YES

----------------------------------------

(3824)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3825) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(3826)
Complex Obligation (AND)

----------------------------------------

(3827)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3828) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3829)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3830) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3831)
YES

----------------------------------------

(3832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3833) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(3834)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3835) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3836)
YES

----------------------------------------

(3837)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3838)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3839) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3840)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3841) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3842)
YES

----------------------------------------

(3843)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3844) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3845)
Complex Obligation (OR)

----------------------------------------

(3846)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3847)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3848)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3849) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(3850)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3851) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3852)
YES

----------------------------------------

(3853)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3854) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3855)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3856) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3857)
YES

----------------------------------------

(3858)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3859) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3860)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3861) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3862)
YES

----------------------------------------

(3863)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3864) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3865)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3866) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3867)
YES

----------------------------------------

(3868)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3869) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3870)
Complex Obligation (OR)

----------------------------------------

(3871)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3872) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3873)
Complex Obligation (AND)

----------------------------------------

(3874)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3875) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3876)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3877) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3878)
YES

----------------------------------------

(3879)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3880) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(3881)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3882) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3883)
YES

----------------------------------------

(3884)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3885) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3886)
Complex Obligation (OR)

----------------------------------------

(3887)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3888) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3889)
Complex Obligation (AND)

----------------------------------------

(3890)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3891) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3892)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3893) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3894)
YES

----------------------------------------

(3895)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3896) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3897)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3898) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3899)
YES

----------------------------------------

(3900)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3901) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3902)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3903) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3904)
YES

----------------------------------------

(3905)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3906) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3907)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3908) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3909)
TRUE

----------------------------------------

(3910)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3911) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3912)
Complex Obligation (AND)

----------------------------------------

(3913)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3914) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3915)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3916) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3917)
YES

----------------------------------------

(3918)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3919) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3920)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3921) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3922)
YES

----------------------------------------

(3923)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3924) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3925)
Complex Obligation (OR)

----------------------------------------

(3926)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3927)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3928)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3929) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3930)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3931) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3932)
YES

----------------------------------------

(3933)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3934) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3935)
Complex Obligation (AND)

----------------------------------------

(3936)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3937) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3938)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3939) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3940)
YES

----------------------------------------

(3941)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3942)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3943) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(3944)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3945) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3946)
YES

----------------------------------------

(3947)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3948) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(3949)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3950) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3951)
YES

----------------------------------------

(3952)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3953) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(3954)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3955) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3956)
YES

----------------------------------------

(3957)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3958) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3959)
Complex Obligation (AND)

----------------------------------------

(3960)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3961) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3962)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3963) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3964)
YES

----------------------------------------

(3965)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3966) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3967)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3968) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3969)
YES

----------------------------------------

(3970)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3971) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(3972)
Complex Obligation (OR)

----------------------------------------

(3973)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3974) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3975)
Complex Obligation (AND)

----------------------------------------

(3976)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3977) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3978)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3979) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3980)
YES

----------------------------------------

(3981)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3982) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3983)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3984) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(3985)
TRUE

----------------------------------------

(3986)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3987) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(3988)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3989) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3990)
YES

----------------------------------------

(3991)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3992) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(3993)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3994) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(3995)
YES

----------------------------------------

(3996)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3997) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(3998)
Complex Obligation (AND)

----------------------------------------

(3999)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4000) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4001)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4002) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4003)
YES

----------------------------------------

(4004)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4006) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4007)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4008) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4009)
YES

----------------------------------------

(4010)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4011) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4012)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4013) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4014)
YES

----------------------------------------

(4015)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4016) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4017)
Complex Obligation (AND)

----------------------------------------

(4018)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4019) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4020)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4021) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4022)
YES

----------------------------------------

(4023)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4024) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4025)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4026) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4027)
YES

----------------------------------------

(4028)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4029)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4030) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4031)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4032) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4033)
YES

----------------------------------------

(4034)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4035) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(4036)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4037) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4038)
YES

----------------------------------------

(4039)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4040) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4041)
Complex Obligation (AND)

----------------------------------------

(4042)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4043) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4044)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4045) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4046)
YES

----------------------------------------

(4047)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4048) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4049)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4050) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4051)
YES

----------------------------------------

(4052)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4053) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4054)
Complex Obligation (OR)

----------------------------------------

(4055)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4056) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4057)
Complex Obligation (AND)

----------------------------------------

(4058)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4059) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4060)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4061) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4062)
YES

----------------------------------------

(4063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4064) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4065)
Complex Obligation (OR)

----------------------------------------

(4066)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4067)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4068)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4069) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4070)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4071) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4072)
YES

----------------------------------------

(4073)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4074) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(4075)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4076) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4077)
YES

----------------------------------------

(4078)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4079) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4080)
Complex Obligation (AND)

----------------------------------------

(4081)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4082) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4083)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4084) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4085)
YES

----------------------------------------

(4086)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4087)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4088) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4089)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4090) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4091)
YES

----------------------------------------

(4092)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4093) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4094)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4095) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4096)
YES

----------------------------------------

(4097)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4098) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4099)
Complex Obligation (AND)

----------------------------------------

(4100)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4101) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4102)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4103) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4104)
YES

----------------------------------------

(4105)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4106) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4107)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4108) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4109)
YES

----------------------------------------

(4110)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4111) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4112)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4113) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4114)
YES

----------------------------------------

(4115)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4116)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4117) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4118)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4119) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4120)
YES

----------------------------------------

(4121)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4122) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4123)
Complex Obligation (AND)

----------------------------------------

(4124)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4125) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4126)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4127) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4128)
YES

----------------------------------------

(4129)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4130) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4131)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4132) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4133)
YES

----------------------------------------

(4134)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4135) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4136)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4137) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4138)
YES

----------------------------------------

(4139)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4140) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4141)
Complex Obligation (OR)

----------------------------------------

(4142)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4143) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4144)
Complex Obligation (AND)

----------------------------------------

(4145)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4146) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4147)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4148) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4149)
YES

----------------------------------------

(4150)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4151) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4152)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4153) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4154)
YES

----------------------------------------

(4155)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4156) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4157)
Complex Obligation (OR)

----------------------------------------

(4158)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4159)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4160)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4161) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4162)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4163) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4164)
YES

----------------------------------------

(4165)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4166) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4167)
Complex Obligation (AND)

----------------------------------------

(4168)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4169) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4170)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4171) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4172)
YES

----------------------------------------

(4173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4174)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4175) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4176)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4177) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4178)
YES

----------------------------------------

(4179)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4180) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4181)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4182) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4183)
YES

----------------------------------------

(4184)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4185) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4186)
Complex Obligation (AND)

----------------------------------------

(4187)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4188) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4189)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4190) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4191)
YES

----------------------------------------

(4192)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4193) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4194)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4195) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4196)
YES

----------------------------------------

(4197)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4198)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4199) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4200)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4201) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4202)
YES

----------------------------------------

(4203)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4204) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4205)
Complex Obligation (AND)

----------------------------------------

(4206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4207) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4208)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4209) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4210)
YES

----------------------------------------

(4211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4212) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4213)
Complex Obligation (OR)

----------------------------------------

(4214)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4215) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4216)
Complex Obligation (AND)

----------------------------------------

(4217)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4218) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4219)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4220) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4221)
YES

----------------------------------------

(4222)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4223) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4224)
Complex Obligation (OR)

----------------------------------------

(4225)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4226) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4227)
Complex Obligation (AND)

----------------------------------------

(4228)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4229) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4230)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4231) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4232)
YES

----------------------------------------

(4233)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4234) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4235)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4236) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4237)
TRUE

----------------------------------------

(4238)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4239) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4240)
Complex Obligation (OR)

----------------------------------------

(4241)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4242) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4243)
Complex Obligation (AND)

----------------------------------------

(4244)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4245) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(4246)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4247) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4248)
YES

----------------------------------------

(4249)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4250) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4251)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4252) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4253)
YES

----------------------------------------

(4254)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4255) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4256)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4257) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4258)
TRUE

----------------------------------------

(4259)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4260) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4261)
Complex Obligation (AND)

----------------------------------------

(4262)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4263) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4264)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4265) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4266)
YES

----------------------------------------

(4267)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4268)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4269) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4270)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4271) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4272)
YES

----------------------------------------

(4273)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4274) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4275)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4276) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4277)
YES

----------------------------------------

(4278)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4279) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4280)
Complex Obligation (AND)

----------------------------------------

(4281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4282) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4283)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4284) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4285)
YES

----------------------------------------

(4286)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4287) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4288)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4289) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4290)
YES

----------------------------------------

(4291)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4292) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4293)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4294) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4295)
YES

----------------------------------------

(4296)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4297) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4298)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4299) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4300)
TRUE

----------------------------------------

(4301)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4302)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4303) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4304)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4305) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4306)
YES

----------------------------------------

(4307)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4308) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(4309)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4310) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4311)
YES

----------------------------------------

(4312)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4313) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4314)
Complex Obligation (AND)

----------------------------------------

(4315)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4316) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4317)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4318) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4319)
YES

----------------------------------------

(4320)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4321) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(4322)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4323) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4324)
YES

----------------------------------------

(4325)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4326) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4327)
Complex Obligation (OR)

----------------------------------------

(4328)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4329) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4330)
Complex Obligation (AND)

----------------------------------------

(4331)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4332) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4333)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4334) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4335)
YES

----------------------------------------

(4336)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4337) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4338)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4339) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4340)
TRUE

----------------------------------------

(4341)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4342) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(4343)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4344) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4345)
YES

----------------------------------------

(4346)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4347) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4348)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4349) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4350)
YES

----------------------------------------

(4351)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4352) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4353)
Complex Obligation (AND)

----------------------------------------

(4354)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4355) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4356)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4357) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4358)
YES

----------------------------------------

(4359)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4360) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4361)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4362) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4363)
YES

----------------------------------------

(4364)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4365)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4366) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4367)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4368) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4369)
YES

----------------------------------------

(4370)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4371) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4372)
Complex Obligation (AND)

----------------------------------------

(4373)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4374) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4375)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4376) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4377)
YES

----------------------------------------

(4378)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4379)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4380) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4381)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4382) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4383)
YES

----------------------------------------

(4384)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4385) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4386)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4387) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4388)
YES

----------------------------------------

(4389)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4390) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4391)
Complex Obligation (AND)

----------------------------------------

(4392)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4393) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4394)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4395) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4396)
YES

----------------------------------------

(4397)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4398) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4399)
Complex Obligation (OR)

----------------------------------------

(4400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4401) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4402)
Complex Obligation (AND)

----------------------------------------

(4403)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4404) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4405)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4406) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4407)
YES

----------------------------------------

(4408)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4409) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4410)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4411) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4412)
YES

----------------------------------------

(4413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4414) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4415)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4416) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4417)
YES

----------------------------------------

(4418)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4419) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4420)
Complex Obligation (AND)

----------------------------------------

(4421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4422) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4423)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4424) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4425)
YES

----------------------------------------

(4426)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4427) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4428)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4429) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4430)
YES

----------------------------------------

(4431)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4432)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4433) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4434)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4435) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4436)
YES

----------------------------------------

(4437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4438) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4439)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4440) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4441)
YES

----------------------------------------

(4442)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4443) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4444)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4445) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4446)
YES

----------------------------------------

(4447)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4448) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4449)
Complex Obligation (OR)

----------------------------------------

(4450)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4451) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4452)
Complex Obligation (AND)

----------------------------------------

(4453)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4454) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4455)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4456) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4457)
YES

----------------------------------------

(4458)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4459)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4460) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4461)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4462) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4463)
YES

----------------------------------------

(4464)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4465) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4466)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4467) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4468)
YES

----------------------------------------

(4469)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4470) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4471)
Complex Obligation (AND)

----------------------------------------

(4472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4473) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4474)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4475) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4476)
YES

----------------------------------------

(4477)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4478) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4479)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4480) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4481)
YES

----------------------------------------

(4482)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4483)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4484) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4485)
Complex Obligation (AND)

----------------------------------------

(4486)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4487) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4488)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4489) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4490)
YES

----------------------------------------

(4491)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4492) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4493)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4494) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4495)
YES

----------------------------------------

(4496)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4497) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4498)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4499) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4500)
YES

----------------------------------------

(4501)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4502)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4503) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4504)
Complex Obligation (OR)

----------------------------------------

(4505)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4506)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4507)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4508) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4509)
Complex Obligation (AND)

----------------------------------------

(4510)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4511) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4512)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4513) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4514)
YES

----------------------------------------

(4515)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4516) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4517)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4518) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4519)
YES

----------------------------------------

(4520)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4521) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4522)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4523) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4524)
YES

----------------------------------------

(4525)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4526) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4527)
Complex Obligation (OR)

----------------------------------------

(4528)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4529) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4530)
Complex Obligation (AND)

----------------------------------------

(4531)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4532) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4533)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4534) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4535)
YES

----------------------------------------

(4536)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4537)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4538) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4539)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4540) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4541)
YES

----------------------------------------

(4542)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4543) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4544)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4545) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4546)
TRUE

----------------------------------------

(4547)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4548) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4549)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4550) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4551)
YES

----------------------------------------

(4552)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4553) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4554)
Complex Obligation (AND)

----------------------------------------

(4555)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4556) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4557)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4558) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4559)
YES

----------------------------------------

(4560)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4561) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4562)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4563) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4564)
YES

----------------------------------------

(4565)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4566) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4567)
Complex Obligation (OR)

----------------------------------------

(4568)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4569)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4570)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4571) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4572)
Complex Obligation (AND)

----------------------------------------

(4573)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4574) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4575)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4576) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4577)
YES

----------------------------------------

(4578)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4579)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4581) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4582)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4583) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4584)
YES

----------------------------------------

(4585)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4586) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4587)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4588) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4589)
YES

----------------------------------------

(4590)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4591) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4592)
Complex Obligation (OR)

----------------------------------------

(4593)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4594) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4595)
Complex Obligation (AND)

----------------------------------------

(4596)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4597) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4598)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4599) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4600)
YES

----------------------------------------

(4601)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4602) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4604) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4605)
TRUE

----------------------------------------

(4606)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4607) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4608)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4609) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4610)
YES

----------------------------------------

(4611)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4612) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4613)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4614) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4615)
YES

----------------------------------------

(4616)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4617) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4618)
Complex Obligation (AND)

----------------------------------------

(4619)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4620) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4621)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4622) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4623)
YES

----------------------------------------

(4624)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4625) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4626)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4627) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4628)
YES

----------------------------------------

(4629)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4630)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4631) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4632)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4633) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4634)
YES

----------------------------------------

(4635)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4636) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4637)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4638) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4639)
YES

----------------------------------------

(4640)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4641) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4642)
Complex Obligation (OR)

----------------------------------------

(4643)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4644) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4645)
Complex Obligation (AND)

----------------------------------------

(4646)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4647) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4648)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4649) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4650)
YES

----------------------------------------

(4651)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4652) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(4653)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4654) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4655)
YES

----------------------------------------

(4656)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4657) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4658)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4659) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4660)
TRUE

----------------------------------------

(4661)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4662) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4663)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4664) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4665)
YES

----------------------------------------

(4666)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4667) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4668)
Complex Obligation (AND)

----------------------------------------

(4669)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4670) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4671)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4672) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4673)
YES

----------------------------------------

(4674)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4675) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4676)
Complex Obligation (OR)

----------------------------------------

(4677)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4678) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  2 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4679)
Complex Obligation (AND)

----------------------------------------

(4680)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4681) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4682)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4683) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4684)
YES

----------------------------------------

(4685)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4686) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4687)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4688) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4689)
YES

----------------------------------------

(4690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4691) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4692)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4693) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4694)
YES

----------------------------------------

(4695)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4696) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4697)
Complex Obligation (AND)

----------------------------------------

(4698)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4699) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4700)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4701) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4702)
YES

----------------------------------------

(4703)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4704) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4705)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4706) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4707)
YES

----------------------------------------

(4708)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4709)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4710) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4711)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4712) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4713)
YES

----------------------------------------

(4714)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4715) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4716)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4717) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4718)
YES

----------------------------------------

(4719)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4720) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4721)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4722) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4723)
YES

----------------------------------------

(4724)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4725) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4726)
Complex Obligation (AND)

----------------------------------------

(4727)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4728) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4729)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4730) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4731)
YES

----------------------------------------

(4732)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4733) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4734)
Complex Obligation (OR)

----------------------------------------

(4735)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4736) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4737)
Complex Obligation (AND)

----------------------------------------

(4738)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4739) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4740)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4741) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4742)
YES

----------------------------------------

(4743)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4744) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4745)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4746) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4747)
YES

----------------------------------------

(4748)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4749) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4750)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4751) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4752)
YES

----------------------------------------

(4753)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4754) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4755)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4756) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4757)
TRUE

----------------------------------------

(4758)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4759) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4760)
Complex Obligation (AND)

----------------------------------------

(4761)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4762) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4763)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4764) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4765)
YES

----------------------------------------

(4766)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4767)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4768) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4769)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4770) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4771)
YES

----------------------------------------

(4772)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4773) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(4774)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4775) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4776)
YES

----------------------------------------

(4777)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4778) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(4779)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4780) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4781)
YES

----------------------------------------

(4782)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4783) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4784)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4785) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4786)
YES

----------------------------------------

(4787)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4788) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(4789)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4790) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4791)
YES

----------------------------------------

(4792)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4793) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4794)
Complex Obligation (AND)

----------------------------------------

(4795)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4796) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4797)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4798) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4799)
YES

----------------------------------------

(4800)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4801) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4802)
Complex Obligation (OR)

----------------------------------------

(4803)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4804) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4805)
Complex Obligation (AND)

----------------------------------------

(4806)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4807) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4808)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4809) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4810)
YES

----------------------------------------

(4811)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4812) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4813)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4814) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4815)
TRUE

----------------------------------------

(4816)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4817) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4818)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4819) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4820)
YES

----------------------------------------

(4821)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4822) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4823)
Complex Obligation (OR)

----------------------------------------

(4824)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4825)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4826)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4827)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4828) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4829)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4830) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4831)
YES

----------------------------------------

(4832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4833) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4834)
Complex Obligation (AND)

----------------------------------------

(4835)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4836) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(4837)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4838) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4839)
YES

----------------------------------------

(4840)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4841) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4842)
Complex Obligation (OR)

----------------------------------------

(4843)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4844)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4845)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4846)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4847) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4848)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4849) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4850)
YES

----------------------------------------

(4851)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4852) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4853)
Complex Obligation (AND)

----------------------------------------

(4854)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4855) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4856)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4857) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4858)
YES

----------------------------------------

(4859)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4860) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4861)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4862) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4863)
YES

----------------------------------------

(4864)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4865) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4866)
Complex Obligation (OR)

----------------------------------------

(4867)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4868)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4869)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4870)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4871) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4872)
Complex Obligation (OR)

----------------------------------------

(4873)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4874)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4875)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4876) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4877)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4878) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4879)
YES

----------------------------------------

(4880)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4881) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(4882)
Complex Obligation (AND)

----------------------------------------

(4883)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4884) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4885)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4886) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4887)
YES

----------------------------------------

(4888)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4889) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4890)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4891) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4892)
YES

----------------------------------------

(4893)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4894) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4895)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4896) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4897)
YES

----------------------------------------

(4898)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4899) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4900)
Complex Obligation (OR)

----------------------------------------

(4901)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4902)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4903)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4904)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4905) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4906)
Complex Obligation (OR)

----------------------------------------

(4907)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4908)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4909)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4910) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4911)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4912) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4913)
YES

----------------------------------------

(4914)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4915) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4916)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4917) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4918)
YES

----------------------------------------

(4919)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4920) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4921)
Complex Obligation (OR)

----------------------------------------

(4922)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4923) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4924)
Complex Obligation (AND)

----------------------------------------

(4925)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4926) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4927)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4928) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4929)
YES

----------------------------------------

(4930)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4931) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4932)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4933) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4934)
YES

----------------------------------------

(4935)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4936) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4937)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4938) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(4939)
TRUE

----------------------------------------

(4940)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4941) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4942)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4943) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4944)
YES

----------------------------------------

(4945)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4946) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4947)
Complex Obligation (AND)

----------------------------------------

(4948)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4949) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4950)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4951) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4952)
YES

----------------------------------------

(4953)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4954) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4955)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4956) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4957)
YES

----------------------------------------

(4958)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4959) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(4960)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4961) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4962)
YES

----------------------------------------

(4963)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4964) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4965)
Complex Obligation (OR)

----------------------------------------

(4966)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4967)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4968)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4969) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4970)
Complex Obligation (AND)

----------------------------------------

(4971)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4972) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4973)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4974) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4975)
YES

----------------------------------------

(4976)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4977) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(4978)
Complex Obligation (OR)

----------------------------------------

(4979)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4980)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4981)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4982) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(4983)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4984) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4985)
YES

----------------------------------------

(4986)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4987) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(4988)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4989) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4990)
YES

----------------------------------------

(4991)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4992) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(4993)
Complex Obligation (AND)

----------------------------------------

(4994)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4995) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(4996)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(4997) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(4998)
YES

----------------------------------------

(4999)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5000) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5001)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5002) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5003)
YES

----------------------------------------

(5004)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5005) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5006)
Complex Obligation (OR)

----------------------------------------

(5007)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5008) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5009)
Complex Obligation (AND)

----------------------------------------

(5010)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5011) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5012)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5013) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5014)
YES

----------------------------------------

(5015)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5016) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(5017)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5018) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5019)
YES

----------------------------------------

(5020)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5021) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5022)
Complex Obligation (OR)

----------------------------------------

(5023)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5024)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5025)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5026)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5027) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5028)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5029) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5030)
YES

----------------------------------------

(5031)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5032) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5033)
Complex Obligation (AND)

----------------------------------------

(5034)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5035) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5036)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5037) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5038)
YES

----------------------------------------

(5039)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5040) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5041)
Complex Obligation (OR)

----------------------------------------

(5042)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5043)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5044)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5045)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5046) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5047)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5048) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5049)
YES

----------------------------------------

(5050)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5051) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5052)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5053) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5054)
YES

----------------------------------------

(5055)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5056) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5057)
Complex Obligation (AND)

----------------------------------------

(5058)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5059) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5060)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5061) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5062)
YES

----------------------------------------

(5063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5064) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5065)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5066) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5067)
YES

----------------------------------------

(5068)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5069) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5070)
Complex Obligation (OR)

----------------------------------------

(5071)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5072)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5073)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5074)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5075) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5076)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5077) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5078)
YES

----------------------------------------

(5079)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5080) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5081)
Complex Obligation (AND)

----------------------------------------

(5082)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5083) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5084)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5085) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5086)
YES

----------------------------------------

(5087)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5088) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5089)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5090) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5091)
YES

----------------------------------------

(5092)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5093) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5094)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5095) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5096)
YES

----------------------------------------

(5097)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5098) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5099)
Complex Obligation (OR)

----------------------------------------

(5100)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5101)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5102)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5103)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5104) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5105)
Complex Obligation (AND)

----------------------------------------

(5106)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5107) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5108)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5109) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5110)
YES

----------------------------------------

(5111)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5112) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5113)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5114) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5115)
YES

----------------------------------------

(5116)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5117) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5118)
Complex Obligation (OR)

----------------------------------------

(5119)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5120) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5121)
Complex Obligation (AND)

----------------------------------------

(5122)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5123) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5124)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5125) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5126)
YES

----------------------------------------

(5127)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5128) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5129)
Complex Obligation (OR)

----------------------------------------

(5130)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5131)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5132)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5133) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5134)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5135) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5136)
YES

----------------------------------------

(5137)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5138) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5139)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5140) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5141)
YES

----------------------------------------

(5142)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5143) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5144)
Complex Obligation (AND)

----------------------------------------

(5145)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5146) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5147)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5148) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5149)
YES

----------------------------------------

(5150)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5151) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(5152)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5153) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5154)
YES

----------------------------------------

(5155)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5156) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5157)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5158) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5159)
YES

----------------------------------------

(5160)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5161) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5162)
Complex Obligation (OR)

----------------------------------------

(5163)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5164)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5165)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5166) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5167)
Complex Obligation (AND)

----------------------------------------

(5168)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5169) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5170)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5171) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5172)
YES

----------------------------------------

(5173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5174) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5175)
Complex Obligation (OR)

----------------------------------------

(5176)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5177)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5178)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5179) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(5180)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5181) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5182)
YES

----------------------------------------

(5183)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5184) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5185)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5186) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5187)
YES

----------------------------------------

(5188)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5189) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5190)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5191) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5192)
YES

----------------------------------------

(5193)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5194) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5195)
Complex Obligation (OR)

----------------------------------------

(5196)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5197) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5198)
Complex Obligation (AND)

----------------------------------------

(5199)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5200) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5201)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5202) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5203)
YES

----------------------------------------

(5204)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5205) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5206)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5207) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5208)
YES

----------------------------------------

(5209)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5210) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5211)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5212) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5213)
YES

----------------------------------------

(5214)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5215) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5216)
Complex Obligation (OR)

----------------------------------------

(5217)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5218)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5219)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5220)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5221) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5222)
Complex Obligation (OR)

----------------------------------------

(5223)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5224)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5225)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5226) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5227)
Complex Obligation (AND)

----------------------------------------

(5228)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5229) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5230)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5231) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5232)
YES

----------------------------------------

(5233)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5234) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(5235)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5236) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5237)
YES

----------------------------------------

(5238)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5239) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5240)
Complex Obligation (OR)

----------------------------------------

(5241)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5242)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5243)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5244) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5245)
Complex Obligation (OR)

----------------------------------------

(5246)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5247)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5248)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5249)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5250) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5251)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5252) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5253)
YES

----------------------------------------

(5254)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5255) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(5256)
Complex Obligation (AND)

----------------------------------------

(5257)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5258) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5259)
Complex Obligation (OR)

----------------------------------------

(5260)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5261)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5262)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5263)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5264) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5265)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5266) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5267)
YES

----------------------------------------

(5268)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5269) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5270)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5271) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5272)
YES

----------------------------------------

(5273)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5274) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5275)
Complex Obligation (AND)

----------------------------------------

(5276)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5277) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5278)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5279) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5280)
YES

----------------------------------------

(5281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5282) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5283)
Complex Obligation (OR)

----------------------------------------

(5284)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5285)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5286)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5287)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5288) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5289)
Complex Obligation (OR)

----------------------------------------

(5290)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5291)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5292)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5293) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(5294)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5295) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5296)
YES

----------------------------------------

(5297)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5298) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5299)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5300) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5301)
YES

----------------------------------------

(5302)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5303) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5304)
Complex Obligation (AND)

----------------------------------------

(5305)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5306) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5307)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5308) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5309)
YES

----------------------------------------

(5310)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5311) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5312)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5313) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5314)
YES

----------------------------------------

(5315)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5316) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5317)
Complex Obligation (OR)

----------------------------------------

(5318)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5319) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5320)
Complex Obligation (AND)

----------------------------------------

(5321)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5322) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5323)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5324) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5325)
YES

----------------------------------------

(5326)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5327) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5328)
Complex Obligation (OR)

----------------------------------------

(5329)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5330)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5331)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5332) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5333)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5334) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5335)
YES

----------------------------------------

(5336)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5337) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5338)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5339) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5340)
YES

----------------------------------------

(5341)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5342) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5343)
Complex Obligation (OR)

----------------------------------------

(5344)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5345)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5346)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5347)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5348) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5349)
Complex Obligation (AND)

----------------------------------------

(5350)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5351) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5352)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5353) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5354)
YES

----------------------------------------

(5355)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5356) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5357)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5358) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5359)
YES

----------------------------------------

(5360)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5361) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5362)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5363) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5364)
YES

----------------------------------------

(5365)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5366) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5367)
Complex Obligation (OR)

----------------------------------------

(5368)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5369) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5370)
Complex Obligation (AND)

----------------------------------------

(5371)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5372) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5373)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5374)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5375) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5376)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5377)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5378) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5379)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5380)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5382) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5383)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5384)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5385) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(5386)
Complex Obligation (AND)

----------------------------------------

(5387)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5388) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5389)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5390)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5391)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5392) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5393)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5394)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5395) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5396)
Complex Obligation (AND)

----------------------------------------

(5397)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5398) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5399)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5401) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5402)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5403)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5404) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5405)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5406)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5407)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5408)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5409) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5410)
Complex Obligation (OR)

----------------------------------------

(5411)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5412)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5414) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(5415)
Complex Obligation (AND)

----------------------------------------

(5416)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5417) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5418)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5419) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5420)
YES

----------------------------------------

(5421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5422) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5423)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5424) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5425)
YES

----------------------------------------

(5426)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5427) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5428)
Complex Obligation (OR)

----------------------------------------

(5429)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5430)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5431)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5432)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5433) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(5434)
Complex Obligation (AND)

----------------------------------------

(5435)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5436) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5437)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5438) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5439)
YES

----------------------------------------

(5440)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5441) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5442)
Complex Obligation (OR)

----------------------------------------

(5443)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5444)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5445)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5446) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5447)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5448) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5449)
YES

----------------------------------------

(5450)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5451) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5452)
Complex Obligation (OR)

----------------------------------------

(5453)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5454)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5455)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5456)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5457) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5458)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5459) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5460)
YES

----------------------------------------

(5461)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5462) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5463)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5464) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5465)
YES

----------------------------------------

(5466)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5467) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5468)
Complex Obligation (OR)

----------------------------------------

(5469)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5470) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5471)
Complex Obligation (AND)

----------------------------------------

(5472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5473) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5474)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5475) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5476)
YES

----------------------------------------

(5477)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5478) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5479)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5480) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5481)
YES

----------------------------------------

(5482)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5483) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5484)
Complex Obligation (OR)

----------------------------------------

(5485)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5486)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5487)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5488) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5489)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5490) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5491)
YES

----------------------------------------

(5492)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5493) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5494)
Complex Obligation (AND)

----------------------------------------

(5495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5496) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5497)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5498) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5499)
YES

----------------------------------------

(5500)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5501) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5502)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5503) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5504)
YES

----------------------------------------

(5505)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5506) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5507)
Complex Obligation (OR)

----------------------------------------

(5508)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5509)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5510)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5511) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5512)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5513) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5514)
YES

----------------------------------------

(5515)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5516) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5517)
Complex Obligation (AND)

----------------------------------------

(5518)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5519) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5520)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5521) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5522)
YES

----------------------------------------

(5523)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5524) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5525)
Complex Obligation (OR)

----------------------------------------

(5526)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5527)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5528)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5529) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5530)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5531) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5532)
YES

----------------------------------------

(5533)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5534) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5535)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5536) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5537)
YES

----------------------------------------

(5538)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5539) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5540)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5541) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5542)
YES

----------------------------------------

(5543)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5544) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5545)
Complex Obligation (OR)

----------------------------------------

(5546)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5547) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5548)
Complex Obligation (AND)

----------------------------------------

(5549)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5550) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5551)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5552) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5553)
YES

----------------------------------------

(5554)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5555) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5556)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5557) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5558)
YES

----------------------------------------

(5559)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5560) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5561)
Complex Obligation (OR)

----------------------------------------

(5562)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5563) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5564)
Complex Obligation (AND)

----------------------------------------

(5565)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5566) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5567)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5568) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5569)
YES

----------------------------------------

(5570)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5571) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5572)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5573) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(5574)
TRUE

----------------------------------------

(5575)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5576) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(5577)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5578) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5579)
YES

----------------------------------------

(5580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5581) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5582)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5583) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5584)
YES

----------------------------------------

(5585)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5586) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5587)
Complex Obligation (AND)

----------------------------------------

(5588)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5589) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5590)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5591) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5592)
YES

----------------------------------------

(5593)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5594) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5595)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5596) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5597)
YES

----------------------------------------

(5598)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5599) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5600)
Complex Obligation (OR)

----------------------------------------

(5601)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5602)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5604) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5605)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5606) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5607)
YES

----------------------------------------

(5608)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5609) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5610)
Complex Obligation (AND)

----------------------------------------

(5611)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5612) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5613)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5614) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5615)
YES

----------------------------------------

(5616)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5617) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5618)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5619) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5620)
YES

----------------------------------------

(5621)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5622) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5623)
Complex Obligation (OR)

----------------------------------------

(5624)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5625)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5627) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5628)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5629) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5630)
YES

----------------------------------------

(5631)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5632) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(5633)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5634) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5635)
YES

----------------------------------------

(5636)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5637) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5638)
Complex Obligation (AND)

----------------------------------------

(5639)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5640) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5641)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5642) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5643)
YES

----------------------------------------

(5644)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5645) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5646)
Complex Obligation (OR)

----------------------------------------

(5647)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5648) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5649)
Complex Obligation (AND)

----------------------------------------

(5650)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5651) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5652)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5653) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5654)
YES

----------------------------------------

(5655)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5656) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5657)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5658) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5659)
YES

----------------------------------------

(5660)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5661) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5662)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5663) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5664)
YES

----------------------------------------

(5665)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5666) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5668) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(5669)
TRUE

----------------------------------------

(5670)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5671) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5672)
Complex Obligation (AND)

----------------------------------------

(5673)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5674) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5675)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5676) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5677)
YES

----------------------------------------

(5678)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5679) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5680)
Complex Obligation (OR)

----------------------------------------

(5681)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5682)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5683)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5684) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5685)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5686) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5687)
YES

----------------------------------------

(5688)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5689) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5690)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5691) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5692)
YES

----------------------------------------

(5693)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5694) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5695)
Complex Obligation (AND)

----------------------------------------

(5696)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5697) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(5698)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5699) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5700)
YES

----------------------------------------

(5701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5702)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5703) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5704)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5705) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5706)
YES

----------------------------------------

(5707)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5708) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(5709)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5710) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5711)
YES

----------------------------------------

(5712)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5713) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5714)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5715) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5716)
YES

----------------------------------------

(5717)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5718) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5719)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5720) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5721)
YES

----------------------------------------

(5722)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5723) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5724)
Complex Obligation (AND)

----------------------------------------

(5725)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5726) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5727)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5728) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5729)
YES

----------------------------------------

(5730)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5731) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5732)
Complex Obligation (OR)

----------------------------------------

(5733)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5734) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5735)
Complex Obligation (AND)

----------------------------------------

(5736)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5737) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5738)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5739) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5740)
YES

----------------------------------------

(5741)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5742) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5743)
Complex Obligation (OR)

----------------------------------------

(5744)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5745)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5746)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5747) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5748)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5749) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5750)
YES

----------------------------------------

(5751)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5752) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5753)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5754) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5755)
YES

----------------------------------------

(5756)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5757) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5758)
Complex Obligation (AND)

----------------------------------------

(5759)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5760) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5761)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5762) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5763)
YES

----------------------------------------

(5764)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5765) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5766)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5767) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5768)
YES

----------------------------------------

(5769)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5770) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5771)
Complex Obligation (OR)

----------------------------------------

(5772)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5773)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5774)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5775) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(5776)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5777) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5778)
YES

----------------------------------------

(5779)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5780) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5781)
Complex Obligation (AND)

----------------------------------------

(5782)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5783) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5784)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5785) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5786)
YES

----------------------------------------

(5787)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5788) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5789)
Complex Obligation (OR)

----------------------------------------

(5790)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5791)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5792)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5793) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(5794)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5795) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5796)
YES

----------------------------------------

(5797)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5798) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5799)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5800) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5801)
YES

----------------------------------------

(5802)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5803) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5804)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5805) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5806)
YES

----------------------------------------

(5807)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5808) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(5809)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5810) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5811)
YES

----------------------------------------

(5812)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5813) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5814)
Complex Obligation (AND)

----------------------------------------

(5815)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5816) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5817)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5818) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5819)
YES

----------------------------------------

(5820)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5821) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5822)
Complex Obligation (OR)

----------------------------------------

(5823)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5824) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5825)
Complex Obligation (AND)

----------------------------------------

(5826)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5827) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5828)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5829) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5830)
YES

----------------------------------------

(5831)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5832) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5833)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5834) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5835)
YES

----------------------------------------

(5836)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5837) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5838)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5839) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5840)
YES

----------------------------------------

(5841)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5842)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5843) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5844)
Complex Obligation (AND)

----------------------------------------

(5845)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5846) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5847)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5848) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5849)
YES

----------------------------------------

(5850)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5851) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5852)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5853) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5854)
YES

----------------------------------------

(5855)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5856)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5857) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5858)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5859) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5860)
YES

----------------------------------------

(5861)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5862) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5863)
Complex Obligation (AND)

----------------------------------------

(5864)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5865) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5866)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5867) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5868)
YES

----------------------------------------

(5869)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5870) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(5871)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5872) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5873)
YES

----------------------------------------

(5874)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5875) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5876)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5877) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5878)
YES

----------------------------------------

(5879)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5880) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5881)
Complex Obligation (OR)

----------------------------------------

(5882)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5883)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5884)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5885) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5886)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5887) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5888)
YES

----------------------------------------

(5889)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5890) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(5891)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5892) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5893)
YES

----------------------------------------

(5894)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5895) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(5896)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5897) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5898)
YES

----------------------------------------

(5899)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5900) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(5901)
Complex Obligation (AND)

----------------------------------------

(5902)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5903) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5904)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5905) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5906)
YES

----------------------------------------

(5907)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5908) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5909)
Complex Obligation (OR)

----------------------------------------

(5910)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5911) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5912)
Complex Obligation (AND)

----------------------------------------

(5913)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5914) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5915)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5916) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5917)
YES

----------------------------------------

(5918)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5919) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5920)
Complex Obligation (OR)

----------------------------------------

(5921)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5922) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5923)
Complex Obligation (AND)

----------------------------------------

(5924)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5925) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5926)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5927) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5928)
YES

----------------------------------------

(5929)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5930) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(5931)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5932) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5933)
YES

----------------------------------------

(5934)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5935) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5936)
Complex Obligation (OR)

----------------------------------------

(5937)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5938)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5939)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5940)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5941) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5942)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5943) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5944)
YES

----------------------------------------

(5945)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5946) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5947)
Complex Obligation (AND)

----------------------------------------

(5948)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5949) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5950)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5951) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5952)
YES

----------------------------------------

(5953)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5954) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5955)
Complex Obligation (OR)

----------------------------------------

(5956)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5957)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5958)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5959)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5960) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5961)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5962) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5963)
YES

----------------------------------------

(5964)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5965) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(5966)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5967) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5968)
YES

----------------------------------------

(5969)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5970) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5971)
Complex Obligation (AND)

----------------------------------------

(5972)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5973) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5974)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5975) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5976)
YES

----------------------------------------

(5977)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5978) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5979)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5980) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5981)
YES

----------------------------------------

(5982)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5983) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(5984)
Complex Obligation (OR)

----------------------------------------

(5985)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5986)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5987)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5988)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5989) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(5990)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5991) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(5992)
YES

----------------------------------------

(5993)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5994) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(5995)
Complex Obligation (AND)

----------------------------------------

(5996)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5997) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(5998)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(5999) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6000)
YES

----------------------------------------

(6001)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6002) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6003)
Complex Obligation (OR)

----------------------------------------

(6004)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6006)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6007)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6008) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6009)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6010) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6011)
YES

----------------------------------------

(6012)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6013) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6014)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6015) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6016)
YES

----------------------------------------

(6017)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6018) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6019)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6020) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6021)
YES

----------------------------------------

(6022)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6023) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6024)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6025) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6026)
YES

----------------------------------------

(6027)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6028) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6029)
Complex Obligation (AND)

----------------------------------------

(6030)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6031) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6032)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6033) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6034)
YES

----------------------------------------

(6035)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6036) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6037)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6038) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6039)
YES

----------------------------------------

(6040)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6041) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6042)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6043) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6044)
YES

----------------------------------------

(6045)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6046) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6047)
Complex Obligation (OR)

----------------------------------------

(6048)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6049) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6050)
Complex Obligation (AND)

----------------------------------------

(6051)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6052) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6053)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6054) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6055)
YES

----------------------------------------

(6056)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6057) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6058)
Complex Obligation (OR)

----------------------------------------

(6059)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6060)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6061)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6062)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6063) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(6064)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6065) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6066)
YES

----------------------------------------

(6067)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6068) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6069)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6070) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6071)
YES

----------------------------------------

(6072)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6073) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6074)
Complex Obligation (AND)

----------------------------------------

(6075)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6076) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6077)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6078) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6079)
YES

----------------------------------------

(6080)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6081) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6082)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6083) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6084)
YES

----------------------------------------

(6085)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6086) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6087)
Complex Obligation (OR)

----------------------------------------

(6088)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6089)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6090)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6091)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6092) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6093)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6094) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6095)
YES

----------------------------------------

(6096)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6097) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6098)
Complex Obligation (AND)

----------------------------------------

(6099)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6100) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6101)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6102) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6103)
YES

----------------------------------------

(6104)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6105) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6106)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6107) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6108)
YES

----------------------------------------

(6109)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6110) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6111)
Complex Obligation (OR)

----------------------------------------

(6112)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6113)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6114)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6115)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6116) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6117)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6118) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6119)
YES

----------------------------------------

(6120)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6121) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6122)
Complex Obligation (AND)

----------------------------------------

(6123)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6124) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6125)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6126) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6127)
YES

----------------------------------------

(6128)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6129) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6130)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6131) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6132)
YES

----------------------------------------

(6133)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6134) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6135)
Complex Obligation (OR)

----------------------------------------

(6136)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6137)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6138)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6139)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6140) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6141)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6142) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6143)
YES

----------------------------------------

(6144)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6145) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6146)
Complex Obligation (AND)

----------------------------------------

(6147)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6148) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6149)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6150) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6151)
YES

----------------------------------------

(6152)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6153) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6154)
Complex Obligation (OR)

----------------------------------------

(6155)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6156) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6157)
Complex Obligation (AND)

----------------------------------------

(6158)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6159) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6160)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6161) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6162)
YES

----------------------------------------

(6163)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6164) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6165)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6166) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6167)
YES

----------------------------------------

(6168)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6169) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6170)
Complex Obligation (OR)

----------------------------------------

(6171)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6172)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6174)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6175) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(6176)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6177) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6178)
YES

----------------------------------------

(6179)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6180) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6181)
Complex Obligation (AND)

----------------------------------------

(6182)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6183) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6184)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6185) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6186)
YES

----------------------------------------

(6187)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6188) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6189)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6190) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6191)
YES

----------------------------------------

(6192)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6193) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6194)
Complex Obligation (OR)

----------------------------------------

(6195)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6196)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6197)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6198)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6199) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6200)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6201) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6202)
YES

----------------------------------------

(6203)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6204) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6205)
Complex Obligation (AND)

----------------------------------------

(6206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6207) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6208)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6209) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6210)
YES

----------------------------------------

(6211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6212) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6213)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6214) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6215)
YES

----------------------------------------

(6216)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6217) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6218)
Complex Obligation (OR)

----------------------------------------

(6219)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6220)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6221)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6222)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6223) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6224)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6225) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6226)
YES

----------------------------------------

(6227)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6228) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6229)
Complex Obligation (AND)

----------------------------------------

(6230)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6231) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6232)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6233) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6234)
YES

----------------------------------------

(6235)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6236) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6237)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6238) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6239)
YES

----------------------------------------

(6240)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6241) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6242)
Complex Obligation (OR)

----------------------------------------

(6243)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6244)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6246)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6247) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6248)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6249) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6250)
YES

----------------------------------------

(6251)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6252) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6253)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6254) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6255)
YES

----------------------------------------

(6256)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6257) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(6258)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6259) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6260)
YES

----------------------------------------

(6261)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6262) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6263)
Complex Obligation (AND)

----------------------------------------

(6264)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6265) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6266)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6267) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6268)
YES

----------------------------------------

(6269)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6270) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6271)
Complex Obligation (OR)

----------------------------------------

(6272)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6273) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6274)
Complex Obligation (AND)

----------------------------------------

(6275)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6276) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6277)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6278) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6279)
YES

----------------------------------------

(6280)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6281) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6282)
Complex Obligation (OR)

----------------------------------------

(6283)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6284)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6285)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6286)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6287) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6288)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6289) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6290)
YES

----------------------------------------

(6291)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6292) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6293)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6294) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6295)
YES

----------------------------------------

(6296)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6297) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6298)
Complex Obligation (AND)

----------------------------------------

(6299)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6300) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6301)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6302) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6303)
YES

----------------------------------------

(6304)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6305) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6306)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6307) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6308)
YES

----------------------------------------

(6309)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6310) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6311)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6312) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6313)
YES

----------------------------------------

(6314)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6315) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6316)
Complex Obligation (OR)

----------------------------------------

(6317)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6318)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6319)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6320)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6321) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6322)
Complex Obligation (AND)

----------------------------------------

(6323)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6324) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6325)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6326) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6327)
YES

----------------------------------------

(6328)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6329) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6330)
Complex Obligation (OR)

----------------------------------------

(6331)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6332)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6333)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6334)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6335) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6336)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6337) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6338)
YES

----------------------------------------

(6339)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6340) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6341)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6342) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6343)
YES

----------------------------------------

(6344)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6345) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6346)
Complex Obligation (AND)

----------------------------------------

(6347)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6348) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6349)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6350) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6351)
YES

----------------------------------------

(6352)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6353) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6354)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6355) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6356)
YES

----------------------------------------

(6357)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6358) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6359)
Complex Obligation (OR)

----------------------------------------

(6360)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6361)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6362)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6363)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6364) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6365)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6366) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6367)
YES

----------------------------------------

(6368)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6369) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6370)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6371) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6372)
YES

----------------------------------------

(6373)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6374) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6375)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6376) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6377)
YES

----------------------------------------

(6378)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6379) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6380)
Complex Obligation (AND)

----------------------------------------

(6381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6382) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6383)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6384) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6385)
YES

----------------------------------------

(6386)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6387) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6388)
Complex Obligation (OR)

----------------------------------------

(6389)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6390) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6391)
Complex Obligation (AND)

----------------------------------------

(6392)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6393) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6394)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6395) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6396)
YES

----------------------------------------

(6397)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6398) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6399)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6400) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6401)
YES

----------------------------------------

(6402)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6403) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6404)
Complex Obligation (OR)

----------------------------------------

(6405)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6406)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6407)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6408)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6409) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6410)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6411) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6412)
YES

----------------------------------------

(6413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6414) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6415)
Complex Obligation (AND)

----------------------------------------

(6416)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6417) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6418)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6419) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6420)
YES

----------------------------------------

(6421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6422) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(6423)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6424) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6425)
YES

----------------------------------------

(6426)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6427) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6428)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6429) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6430)
YES

----------------------------------------

(6431)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6432) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6433)
Complex Obligation (OR)

----------------------------------------

(6434)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6435)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6436)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6438) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6439)
Complex Obligation (AND)

----------------------------------------

(6440)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6441) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6442)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6443) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6444)
YES

----------------------------------------

(6445)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6446) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6447)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6448) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6449)
YES

----------------------------------------

(6450)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6451) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6452)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6453) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6454)
YES

----------------------------------------

(6455)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6456) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6457)
Complex Obligation (OR)

----------------------------------------

(6458)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6459)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6460)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6461)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6462) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6463)
Complex Obligation (AND)

----------------------------------------

(6464)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6465) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6466)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6467) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6468)
YES

----------------------------------------

(6469)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6470) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6471)
Complex Obligation (OR)

----------------------------------------

(6472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6473)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6474)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6475)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6476) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(6477)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6478) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6479)
YES

----------------------------------------

(6480)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6481) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6482)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6483) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6484)
YES

----------------------------------------

(6485)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6486) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6487)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6488) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6489)
YES

----------------------------------------

(6490)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6491) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6492)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6493) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6494)
YES

----------------------------------------

(6495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6496) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6497)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6498) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6499)
YES

----------------------------------------

(6500)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6501) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(6502)
Complex Obligation (AND)

----------------------------------------

(6503)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6504) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6505)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6506) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6507)
YES

----------------------------------------

(6508)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6509) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6510)
Complex Obligation (OR)

----------------------------------------

(6511)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6512) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6513)
Complex Obligation (AND)

----------------------------------------

(6514)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6515) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6516)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6517) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6518)
YES

----------------------------------------

(6519)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6520) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6521)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6522) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6523)
YES

----------------------------------------

(6524)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6525) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6526)
Complex Obligation (OR)

----------------------------------------

(6527)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6528) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6529)
Complex Obligation (AND)

----------------------------------------

(6530)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6531) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6532)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6533) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6534)
YES

----------------------------------------

(6535)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6536) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6537)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6538) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6539)
YES

----------------------------------------

(6540)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6541)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6542) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6543)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6544) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6545)
YES

----------------------------------------

(6546)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6547) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6548)
Complex Obligation (AND)

----------------------------------------

(6549)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6550) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6551)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6552) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6553)
YES

----------------------------------------

(6554)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6555) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6556)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6557) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6558)
YES

----------------------------------------

(6559)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6560) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6561)
Complex Obligation (OR)

----------------------------------------

(6562)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6563)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6564)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6565) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6566)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6567) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6568)
YES

----------------------------------------

(6569)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6570) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6571)
Complex Obligation (AND)

----------------------------------------

(6572)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6573) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6574)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6575) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6576)
YES

----------------------------------------

(6577)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6578) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6579)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6580) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6581)
YES

----------------------------------------

(6582)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6583) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6584)
Complex Obligation (OR)

----------------------------------------

(6585)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6586)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6587)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6588) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6589)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6590) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6591)
YES

----------------------------------------

(6592)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6593) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6594)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6595) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6596)
YES

----------------------------------------

(6597)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6598) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6599)
Complex Obligation (AND)

----------------------------------------

(6600)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6601) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6602)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6603) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6604)
YES

----------------------------------------

(6605)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6606) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6607)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6608) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6609)
YES

----------------------------------------

(6610)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6611) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6612)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6613) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6614)
YES

----------------------------------------

(6615)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6616) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6617)
Complex Obligation (OR)

----------------------------------------

(6618)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6619) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6620)
Complex Obligation (AND)

----------------------------------------

(6621)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6622) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6623)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6624) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6625)
YES

----------------------------------------

(6626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6627) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(6628)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6629) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6630)
YES

----------------------------------------

(6631)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6632) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6633)
Complex Obligation (OR)

----------------------------------------

(6634)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6635)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6636)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6637) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(6638)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6639) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6640)
YES

----------------------------------------

(6641)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6642) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6643)
Complex Obligation (AND)

----------------------------------------

(6644)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6645) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6646)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6647) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6648)
YES

----------------------------------------

(6649)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6650) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6651)
Complex Obligation (OR)

----------------------------------------

(6652)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6653)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6654)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6655) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6656)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6657) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6658)
YES

----------------------------------------

(6659)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6660) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6661)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6662) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6663)
YES

----------------------------------------

(6664)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6665) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6666)
Complex Obligation (AND)

----------------------------------------

(6667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6668) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6669)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6670) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6671)
YES

----------------------------------------

(6672)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6673) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6674)
Complex Obligation (OR)

----------------------------------------

(6675)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6676)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6677)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6678) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6679)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6680) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6681)
YES

----------------------------------------

(6682)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6683) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6684)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6685) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6686)
YES

----------------------------------------

(6687)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6688) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6689)
Complex Obligation (AND)

----------------------------------------

(6690)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6691) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6692)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6693) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6694)
YES

----------------------------------------

(6695)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6696) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6697)
Complex Obligation (OR)

----------------------------------------

(6698)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6699) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6700)
Complex Obligation (AND)

----------------------------------------

(6701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6702) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6703)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6704) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6705)
YES

----------------------------------------

(6706)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6707) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6708)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6709) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6710)
YES

----------------------------------------

(6711)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6712) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6713)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6714) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6715)
YES

----------------------------------------

(6716)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6717) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6718)
Complex Obligation (OR)

----------------------------------------

(6719)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6720)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6721)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6722) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6723)
Complex Obligation (AND)

----------------------------------------

(6724)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6725) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6726)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6727) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6728)
YES

----------------------------------------

(6729)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6730) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(6731)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6732) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6733)
YES

----------------------------------------

(6734)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6735) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6736)
Complex Obligation (OR)

----------------------------------------

(6737)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6738)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6739)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6740) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6741)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6742) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6743)
YES

----------------------------------------

(6744)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6745) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6746)
Complex Obligation (AND)

----------------------------------------

(6747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6748) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6749)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6750) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6751)
YES

----------------------------------------

(6752)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6753) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6754)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6755) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6756)
YES

----------------------------------------

(6757)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6758) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6759)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6760) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6761)
YES

----------------------------------------

(6762)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6763) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6764)
Complex Obligation (OR)

----------------------------------------

(6765)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6766)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6767)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6768) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6769)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6770) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6771)
YES

----------------------------------------

(6772)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6773) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6774)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6775) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6776)
YES

----------------------------------------

(6777)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6778) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6779)
Complex Obligation (AND)

----------------------------------------

(6780)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6781) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6782)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6783) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6784)
YES

----------------------------------------

(6785)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6786) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6787)
Complex Obligation (OR)

----------------------------------------

(6788)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6789) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6790)
Complex Obligation (AND)

----------------------------------------

(6791)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6792) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6793)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6794) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6795)
YES

----------------------------------------

(6796)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6797) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6798)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6799) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6800)
YES

----------------------------------------

(6801)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6802) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6803)
Complex Obligation (OR)

----------------------------------------

(6804)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6805)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6806)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6807) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6808)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6809) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6810)
YES

----------------------------------------

(6811)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6812) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6813)
Complex Obligation (AND)

----------------------------------------

(6814)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6815) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6816)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6817) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6818)
YES

----------------------------------------

(6819)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6820) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6821)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6822) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6823)
YES

----------------------------------------

(6824)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6825) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6826)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6827) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6828)
YES

----------------------------------------

(6829)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6830) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6831)
Complex Obligation (OR)

----------------------------------------

(6832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6833)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6834)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6835) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6836)
Complex Obligation (AND)

----------------------------------------

(6837)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6838) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6839)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6840) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6841)
YES

----------------------------------------

(6842)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6843) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6844)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6845) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6846)
YES

----------------------------------------

(6847)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6848) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6849)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6850) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6851)
YES

----------------------------------------

(6852)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6853) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6854)
Complex Obligation (OR)

----------------------------------------

(6855)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6856)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6857)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6858) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(6859)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6860) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6861)
YES

----------------------------------------

(6862)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6863) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6864)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6865) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6866)
YES

----------------------------------------

(6867)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6868) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(6869)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6870) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6871)
YES

----------------------------------------

(6872)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6873) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6874)
Complex Obligation (OR)

----------------------------------------

(6875)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6876) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(6877)
Complex Obligation (AND)

----------------------------------------

(6878)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6879) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6880)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6881) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6882)
YES

----------------------------------------

(6883)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6884) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6885)
Complex Obligation (OR)

----------------------------------------

(6886)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6887) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6888)
Complex Obligation (AND)

----------------------------------------

(6889)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6890) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6891)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6892) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6893)
YES

----------------------------------------

(6894)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6895) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6896)
Complex Obligation (OR)

----------------------------------------

(6897)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6898)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6899)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6900) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6901)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6902) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6903)
YES

----------------------------------------

(6904)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6905) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6906)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6907) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6908)
YES

----------------------------------------

(6909)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6910) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6911)
Complex Obligation (AND)

----------------------------------------

(6912)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6913) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6914)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6915) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6916)
YES

----------------------------------------

(6917)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6918) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6919)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6920) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6921)
YES

----------------------------------------

(6922)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6923) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6924)
Complex Obligation (OR)

----------------------------------------

(6925)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6926)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6927)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6928) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6929)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6930) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6931)
YES

----------------------------------------

(6932)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6933) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6934)
Complex Obligation (AND)

----------------------------------------

(6935)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6936) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(6937)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6938) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6939)
YES

----------------------------------------

(6940)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6941) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6942)
Complex Obligation (OR)

----------------------------------------

(6943)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6944)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6945)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6946) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6947)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6948) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6949)
YES

----------------------------------------

(6950)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6951) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(6952)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6953) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6954)
YES

----------------------------------------

(6955)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6956) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6957)
Complex Obligation (OR)

----------------------------------------

(6958)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6959) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(6960)
Complex Obligation (AND)

----------------------------------------

(6961)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6962) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6963)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6964) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6965)
YES

----------------------------------------

(6966)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6967) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6968)
Complex Obligation (OR)

----------------------------------------

(6969)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6970)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6971)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6972) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6973)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6974) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6975)
YES

----------------------------------------

(6976)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6977) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6978)
Complex Obligation (OR)

----------------------------------------

(6979)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6980)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6981)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6982)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6983) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6984)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6985) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6986)
YES

----------------------------------------

(6987)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6988) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(6989)
Complex Obligation (AND)

----------------------------------------

(6990)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6991) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(6992)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6993) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(6994)
YES

----------------------------------------

(6995)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6996) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(6997)
Complex Obligation (OR)

----------------------------------------

(6998)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(6999)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7000)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7001)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7002) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7003)
Complex Obligation (OR)

----------------------------------------

(7004)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7006)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7007) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7008)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7009) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7010)
YES

----------------------------------------

(7011)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7012) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7013)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7014) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7015)
YES

----------------------------------------

(7016)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7017) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7018)
Complex Obligation (AND)

----------------------------------------

(7019)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7020) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7021)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7022) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7023)
YES

----------------------------------------

(7024)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7025) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7026)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7027) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7028)
YES

----------------------------------------

(7029)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7030) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7031)
Complex Obligation (OR)

----------------------------------------

(7032)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7033)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7034)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7035)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7036) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7037)
Complex Obligation (AND)

----------------------------------------

(7038)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7039) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7040)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7041) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7042)
YES

----------------------------------------

(7043)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7044) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7045)
Complex Obligation (OR)

----------------------------------------

(7046)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7047)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7048)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7049)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7050) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7051)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7052) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7053)
YES

----------------------------------------

(7054)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7055) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7056)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7057) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7058)
YES

----------------------------------------

(7059)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7060) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7061)
Complex Obligation (OR)

----------------------------------------

(7062)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7064)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7065) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7066)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7067) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7068)
YES

----------------------------------------

(7069)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7070) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7071)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7072) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7073)
YES

----------------------------------------

(7074)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7075) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7076)
Complex Obligation (AND)

----------------------------------------

(7077)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7078) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7079)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7080) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7081)
YES

----------------------------------------

(7082)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7083) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7084)
Complex Obligation (OR)

----------------------------------------

(7085)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7086) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7087)
Complex Obligation (AND)

----------------------------------------

(7088)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7089) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7090)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7091) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7092)
YES

----------------------------------------

(7093)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7094) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7095)
Complex Obligation (OR)

----------------------------------------

(7096)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7097)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7098)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7099) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(7100)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7101) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7102)
YES

----------------------------------------

(7103)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7104) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7105)
Complex Obligation (OR)

----------------------------------------

(7106)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7107)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7108)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7109)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7110) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7111)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7112) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7113)
YES

----------------------------------------

(7114)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7115) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7116)
Complex Obligation (AND)

----------------------------------------

(7117)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7118) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7119)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7120) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7121)
YES

----------------------------------------

(7122)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7123) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7124)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7125) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7126)
YES

----------------------------------------

(7127)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7128) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7129)
Complex Obligation (OR)

----------------------------------------

(7130)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7131)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7132)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7133)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7134) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7135)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7136) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7137)
YES

----------------------------------------

(7138)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7139) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7140)
Complex Obligation (OR)

----------------------------------------

(7141)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7142)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7143)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7144) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7145)
Complex Obligation (AND)

----------------------------------------

(7146)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7147) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7148)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7149) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7150)
YES

----------------------------------------

(7151)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7152) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7153)
Complex Obligation (OR)

----------------------------------------

(7154)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7155)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7156)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7157)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7158) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7159)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7160) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7161)
YES

----------------------------------------

(7162)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7163) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7164)
Complex Obligation (AND)

----------------------------------------

(7165)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7166) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7167)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7168) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7169)
YES

----------------------------------------

(7170)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7171) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7172)
Complex Obligation (OR)

----------------------------------------

(7173)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7174)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7175)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7176)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7177) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7178)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7179) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7180)
YES

----------------------------------------

(7181)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7182) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7183)
Complex Obligation (OR)

----------------------------------------

(7184)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7185)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7186)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7187) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7188)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7189) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7190)
YES

----------------------------------------

(7191)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7192) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7193)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7194) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7195)
YES

----------------------------------------

(7196)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7197) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7198)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7199) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7200)
YES

----------------------------------------

(7201)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7202) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7203)
Complex Obligation (OR)

----------------------------------------

(7204)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7205) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7206)
Complex Obligation (AND)

----------------------------------------

(7207)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7208) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7209)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7210) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7211)
YES

----------------------------------------

(7212)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7213) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7214)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7215) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7216)
YES

----------------------------------------

(7217)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7218)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7219) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(7220)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7221) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7222)
YES

----------------------------------------

(7223)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7224) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7225)
Complex Obligation (AND)

----------------------------------------

(7226)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7227) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7228)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7229) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7230)
YES

----------------------------------------

(7231)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7232) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7233)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7234) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7235)
YES

----------------------------------------

(7236)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7237)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7238) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7239)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7240) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7241)
YES

----------------------------------------

(7242)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7243) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7244)
Complex Obligation (AND)

----------------------------------------

(7245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7246) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7247)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7248) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7249)
YES

----------------------------------------

(7250)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7251) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7252)
Complex Obligation (OR)

----------------------------------------

(7253)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7254)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7255)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7256) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7257)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7258) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7259)
YES

----------------------------------------

(7260)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7261) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7262)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7263) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7264)
YES

----------------------------------------

(7265)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7266) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7267)
Complex Obligation (AND)

----------------------------------------

(7268)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7269) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7270)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7271) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7272)
YES

----------------------------------------

(7273)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7274) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7275)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7276) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7277)
YES

----------------------------------------

(7278)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7279) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7280)
Complex Obligation (OR)

----------------------------------------

(7281)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7282) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7283)
Complex Obligation (AND)

----------------------------------------

(7284)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7285) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7286)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7287) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7288)
YES

----------------------------------------

(7289)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7290) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7291)
Complex Obligation (OR)

----------------------------------------

(7292)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7293)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7294)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7295) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7296)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7297) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7298)
YES

----------------------------------------

(7299)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7300) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7301)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7302) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7303)
YES

----------------------------------------

(7304)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7305) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7306)
Complex Obligation (AND)

----------------------------------------

(7307)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7308) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7309)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7310) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7311)
YES

----------------------------------------

(7312)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7313)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7314) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7315)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7316) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7317)
YES

----------------------------------------

(7318)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7319) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(7320)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7321) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7322)
YES

----------------------------------------

(7323)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7324) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7325)
Complex Obligation (AND)

----------------------------------------

(7326)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7327) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7328)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7329) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7330)
YES

----------------------------------------

(7331)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7332) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7333)
Complex Obligation (OR)

----------------------------------------

(7334)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7335)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7336)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7337) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7338)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7339) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7340)
YES

----------------------------------------

(7341)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7342) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7343)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7344) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7345)
YES

----------------------------------------

(7346)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7347) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7348)
Complex Obligation (OR)

----------------------------------------

(7349)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7350) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7351)
Complex Obligation (AND)

----------------------------------------

(7352)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7353) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7354)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7355) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7356)
YES

----------------------------------------

(7357)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7358) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7359)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7360) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7361)
YES

----------------------------------------

(7362)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7363) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7364)
Complex Obligation (OR)

----------------------------------------

(7365)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7366)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7367)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7368)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7369) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7370)
Complex Obligation (OR)

----------------------------------------

(7371)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7372)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7373)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7374) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7375)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7376) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7377)
YES

----------------------------------------

(7378)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7379) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7380)
Complex Obligation (AND)

----------------------------------------

(7381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7382) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7383)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7384) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7385)
YES

----------------------------------------

(7386)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7387) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(7388)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7389) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7390)
YES

----------------------------------------

(7391)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7392) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7393)
Complex Obligation (OR)

----------------------------------------

(7394)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7395)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7396)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7397) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7398)
Complex Obligation (OR)

----------------------------------------

(7399)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7401)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7402)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7403) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7404)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7405) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7406)
YES

----------------------------------------

(7407)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7408) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7409)
Complex Obligation (AND)

----------------------------------------

(7410)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7411) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7412)
Complex Obligation (OR)

----------------------------------------

(7413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7414)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7415)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7416)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7417) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7418)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7419) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7420)
YES

----------------------------------------

(7421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7422) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7423)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7424) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7425)
YES

----------------------------------------

(7426)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7427) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7428)
Complex Obligation (AND)

----------------------------------------

(7429)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7430) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7431)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7432) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7433)
YES

----------------------------------------

(7434)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7435) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7436)
Complex Obligation (OR)

----------------------------------------

(7437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7438)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7439)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7440) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7441)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7442) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7443)
YES

----------------------------------------

(7444)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7445) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7446)
Complex Obligation (OR)

----------------------------------------

(7447)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7448)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7449)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7450)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7451) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7452)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7453) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7454)
YES

----------------------------------------

(7455)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7456) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7457)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7458) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7459)
YES

----------------------------------------

(7460)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7461) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7462)
Complex Obligation (AND)

----------------------------------------

(7463)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7464) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 3*x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(7465)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7466) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7467)
YES

----------------------------------------

(7468)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7469) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7470)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7471) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7472)
YES

----------------------------------------

(7473)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7474) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7475)
Complex Obligation (OR)

----------------------------------------

(7476)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7477) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7478)
Complex Obligation (AND)

----------------------------------------

(7479)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7480) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7481)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7482) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7483)
YES

----------------------------------------

(7484)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7485) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7486)
Complex Obligation (OR)

----------------------------------------

(7487)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7488)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7489)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7490)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7491) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(7492)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7493) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7494)
YES

----------------------------------------

(7495)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7496) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7497)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7498) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7499)
YES

----------------------------------------

(7500)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7501) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7502)
Complex Obligation (AND)

----------------------------------------

(7503)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7504) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7505)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7506) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7507)
YES

----------------------------------------

(7508)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7509) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7510)
Complex Obligation (OR)

----------------------------------------

(7511)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7512)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7513)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7514)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7515) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7516)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7517) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7518)
YES

----------------------------------------

(7519)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7520) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7521)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7522) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7523)
YES

----------------------------------------

(7524)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7525) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7526)
Complex Obligation (AND)

----------------------------------------

(7527)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7528) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7529)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7530) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7531)
YES

----------------------------------------

(7532)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7533) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7534)
Complex Obligation (OR)

----------------------------------------

(7535)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7536)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7537)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7538)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7539) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7540)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7541) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7542)
YES

----------------------------------------

(7543)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7544) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7545)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7546) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7547)
YES

----------------------------------------

(7548)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7549) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7550)
Complex Obligation (AND)

----------------------------------------

(7551)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7552) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7553)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7554) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7555)
YES

----------------------------------------

(7556)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7557) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7558)
Complex Obligation (OR)

----------------------------------------

(7559)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7560)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7561)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7562)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7563) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7564)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7565) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7566)
YES

----------------------------------------

(7567)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7568) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7569)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7570) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7571)
YES

----------------------------------------

(7572)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7573) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7574)
Complex Obligation (AND)

----------------------------------------

(7575)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7576) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7577)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7578) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7579)
YES

----------------------------------------

(7580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7581) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7582)
Complex Obligation (OR)

----------------------------------------

(7583)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7584) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7585)
Complex Obligation (AND)

----------------------------------------

(7586)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7587) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7588)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7589) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7590)
YES

----------------------------------------

(7591)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7592) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7593)
Complex Obligation (OR)

----------------------------------------

(7594)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7595)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7596)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7597) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7598)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7599) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7600)
YES

----------------------------------------

(7601)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7602) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7603)
Complex Obligation (OR)

----------------------------------------

(7604)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7605)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7606)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7607)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7608) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7609)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7610) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7611)
YES

----------------------------------------

(7612)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7613) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7614)
Complex Obligation (AND)

----------------------------------------

(7615)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7616) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7617)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7618) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7619)
YES

----------------------------------------

(7620)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7621) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7622)
Complex Obligation (OR)

----------------------------------------

(7623)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7624)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7625)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7627) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7628)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7629) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7630)
YES

----------------------------------------

(7631)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7632) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7633)
Complex Obligation (OR)

----------------------------------------

(7634)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7635)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7636)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7637) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7638)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7639) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7640)
YES

----------------------------------------

(7641)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7642) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7643)
Complex Obligation (AND)

----------------------------------------

(7644)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7645) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7646)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7647) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7648)
YES

----------------------------------------

(7649)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7650) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7651)
Complex Obligation (OR)

----------------------------------------

(7652)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7653)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7654)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7655)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7656)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7657) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7658)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7659) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7660)
YES

----------------------------------------

(7661)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7662) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7663)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7664) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7665)
YES

----------------------------------------

(7666)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7667) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7668)
Complex Obligation (AND)

----------------------------------------

(7669)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7670) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7671)
Complex Obligation (OR)

----------------------------------------

(7672)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7673)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7674)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7675)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7676) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7677)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7678) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7679)
YES

----------------------------------------

(7680)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7681) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(7682)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7683) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7684)
YES

----------------------------------------

(7685)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7686) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7687)
Complex Obligation (OR)

----------------------------------------

(7688)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7689) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7690)
Complex Obligation (AND)

----------------------------------------

(7691)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7692) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7693)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7694) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7695)
YES

----------------------------------------

(7696)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7697) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7698)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7699) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7700)
YES

----------------------------------------

(7701)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7702) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7703)
Complex Obligation (OR)

----------------------------------------

(7704)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7705)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7706)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7707) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7708)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7709) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7710)
YES

----------------------------------------

(7711)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7712) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7713)
Complex Obligation (AND)

----------------------------------------

(7714)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7715) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7716)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7717) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7718)
YES

----------------------------------------

(7719)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7720) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7721)
Complex Obligation (OR)

----------------------------------------

(7722)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7723)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7724)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7725) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7726)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7727) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7728)
YES

----------------------------------------

(7729)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7730) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7731)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7732) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7733)
YES

----------------------------------------

(7734)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7735) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7736)
Complex Obligation (AND)

----------------------------------------

(7737)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7738) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7739)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7740) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7741)
YES

----------------------------------------

(7742)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7743) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7744)
Complex Obligation (OR)

----------------------------------------

(7745)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7746)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7748) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7749)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7750) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7751)
YES

----------------------------------------

(7752)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7753) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7754)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7755) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7756)
YES

----------------------------------------

(7757)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7758) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7759)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7760) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7761)
YES

----------------------------------------

(7762)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7763) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7764)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7765) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7766)
YES

----------------------------------------

(7767)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7768) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7769)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7770) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7771)
YES

----------------------------------------

(7772)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7773) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7774)
Complex Obligation (AND)

----------------------------------------

(7775)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7776) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7777)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7778) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7779)
YES

----------------------------------------

(7780)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7781) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7782)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7783) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7784)
YES

----------------------------------------

(7785)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7786) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 5 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7787)
Complex Obligation (OR)

----------------------------------------

(7788)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7789) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7790)
Complex Obligation (AND)

----------------------------------------

(7791)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7792) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7793)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7794) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7795)
YES

----------------------------------------

(7796)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7797) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7798)
Complex Obligation (OR)

----------------------------------------

(7799)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7800) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7801)
Complex Obligation (AND)

----------------------------------------

(7802)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7803) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7804)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7805) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7806)
YES

----------------------------------------

(7807)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7808) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7809)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7810) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7811)
YES

----------------------------------------

(7812)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7813) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7814)
Complex Obligation (OR)

----------------------------------------

(7815)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7816)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7817)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7818) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(7819)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7820) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7821)
YES

----------------------------------------

(7822)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7823) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7824)
Complex Obligation (AND)

----------------------------------------

(7825)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7826) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7827)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7828) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7829)
YES

----------------------------------------

(7830)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7831)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7832) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7833)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7834) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7835)
YES

----------------------------------------

(7836)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7837) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7838)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7839) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7840)
YES

----------------------------------------

(7841)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7842) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(7843)
Complex Obligation (AND)

----------------------------------------

(7844)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7845) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7846)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7847) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7848)
YES

----------------------------------------

(7849)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7850) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7851)
Complex Obligation (OR)

----------------------------------------

(7852)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7853)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7854)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7855) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7856)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7857) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7858)
YES

----------------------------------------

(7859)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7860) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7861)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7862) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7863)
YES

----------------------------------------

(7864)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7865) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7866)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7867) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7868)
YES

----------------------------------------

(7869)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7870) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7871)
Complex Obligation (OR)

----------------------------------------

(7872)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7873) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7874)
Complex Obligation (AND)

----------------------------------------

(7875)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7876) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7877)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7878) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7879)
YES

----------------------------------------

(7880)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7881) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7882)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7883) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7884)
YES

----------------------------------------

(7885)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7886) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7887)
Complex Obligation (OR)

----------------------------------------

(7888)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7889)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7890)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7891)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7892) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(7893)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7894) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7895)
YES

----------------------------------------

(7896)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7897) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7898)
Complex Obligation (OR)

----------------------------------------

(7899)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7900)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7901)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7902) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7903)
Complex Obligation (AND)

----------------------------------------

(7904)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7905) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7906)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7907) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7908)
YES

----------------------------------------

(7909)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7910) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7911)
Complex Obligation (OR)

----------------------------------------

(7912)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7913)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7914)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7915) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7916)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7917) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7918)
YES

----------------------------------------

(7919)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7920) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7921)
Complex Obligation (OR)

----------------------------------------

(7922)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7923)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7924)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7925)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7926) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7927)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7928) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7929)
YES

----------------------------------------

(7930)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7931) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(7932)
Complex Obligation (AND)

----------------------------------------

(7933)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7934) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(7935)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7936) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7937)
YES

----------------------------------------

(7938)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7939) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7940)
Complex Obligation (OR)

----------------------------------------

(7941)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7942)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7943)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7944)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7945) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(7946)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7947) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7948)
YES

----------------------------------------

(7949)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7950) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7951)
Complex Obligation (AND)

----------------------------------------

(7952)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7953) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7954)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7955) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7956)
YES

----------------------------------------

(7957)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7958) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7959)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7960) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7961)
YES

----------------------------------------

(7962)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7963) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(7964)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7965) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7966)
YES

----------------------------------------

(7967)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7968) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7969)
Complex Obligation (OR)

----------------------------------------

(7970)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7971)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7972)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7973)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7974) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7975)
Complex Obligation (OR)

----------------------------------------

(7976)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7977)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7978)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7979) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(7980)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7981) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7982)
YES

----------------------------------------

(7983)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7984) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7985)
Complex Obligation (AND)

----------------------------------------

(7986)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7987) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7988)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7989) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(7990)
YES

----------------------------------------

(7991)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7992) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7993)
Complex Obligation (OR)

----------------------------------------

(7994)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7995) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(7996)
Complex Obligation (AND)

----------------------------------------

(7997)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(7998) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(7999)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8000) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8001)
YES

----------------------------------------

(8002)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8003) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8004)
Complex Obligation (OR)

----------------------------------------

(8005)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8006)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8007)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8008) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8009)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8010) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8011)
YES

----------------------------------------

(8012)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8013) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8014)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8015) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8016)
YES

----------------------------------------

(8017)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8018) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8019)
Complex Obligation (OR)

----------------------------------------

(8020)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8021)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8022)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8023)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8024) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8025)
Complex Obligation (AND)

----------------------------------------

(8026)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8027) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8028)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8029) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8030)
YES

----------------------------------------

(8031)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8032) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8033)
Complex Obligation (OR)

----------------------------------------

(8034)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8035)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8036)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8037)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8038) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8039)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8040) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8041)
YES

----------------------------------------

(8042)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8043) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8044)
Complex Obligation (OR)

----------------------------------------

(8045)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8046)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8047)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8048) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8049)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8050) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8051)
YES

----------------------------------------

(8052)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8053) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(8054)
Complex Obligation (AND)

----------------------------------------

(8055)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8056) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8057)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8058) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8059)
YES

----------------------------------------

(8060)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8061) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8062)
Complex Obligation (OR)

----------------------------------------

(8063)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8064)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8065)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8066)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8067) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8068)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8069) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8070)
YES

----------------------------------------

(8071)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8072) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8073)
Complex Obligation (AND)

----------------------------------------

(8074)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8075) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8076)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8077) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8078)
YES

----------------------------------------

(8079)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8080) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8081)
Complex Obligation (OR)

----------------------------------------

(8082)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8083)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8084)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8085) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8086)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8087) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8088)
YES

----------------------------------------

(8089)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8090) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8091)
Complex Obligation (OR)

----------------------------------------

(8092)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8093)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8094)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8095)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8096) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8097)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8098) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8099)
YES

----------------------------------------

(8100)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8101) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8102)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8103) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8104)
YES

----------------------------------------

(8105)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8106) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8107)
Complex Obligation (OR)

----------------------------------------

(8108)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8109) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8110)
Complex Obligation (AND)

----------------------------------------

(8111)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8112) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8113)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8114) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8115)
YES

----------------------------------------

(8116)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8117) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8118)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8119) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8120)
YES

----------------------------------------

(8121)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8122) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8123)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8124) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8125)
YES

----------------------------------------

(8126)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8127) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8128)
Complex Obligation (OR)

----------------------------------------

(8129)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8130)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8131)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8132) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8133)
Complex Obligation (AND)

----------------------------------------

(8134)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8135) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8136)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8137) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8138)
YES

----------------------------------------

(8139)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8140) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8141)
Complex Obligation (OR)

----------------------------------------

(8142)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8143)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8144)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8145) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8146)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8147) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8148)
YES

----------------------------------------

(8149)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8150) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8151)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8152) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8153)
YES

----------------------------------------

(8154)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8155) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8156)
Complex Obligation (AND)

----------------------------------------

(8157)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8158) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8159)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8160) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8161)
YES

----------------------------------------

(8162)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8163) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8164)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8165) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8166)
YES

----------------------------------------

(8167)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8168) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8169)
Complex Obligation (OR)

----------------------------------------

(8170)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8171)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8172)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8173) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8174)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8175) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8176)
YES

----------------------------------------

(8177)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8178) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8179)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8180) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8181)
YES

----------------------------------------

(8182)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8183) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8184)
Complex Obligation (AND)

----------------------------------------

(8185)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8186) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8187)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8188) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8189)
YES

----------------------------------------

(8190)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8191) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8192)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8193) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8194)
YES

----------------------------------------

(8195)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8196) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8197)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8198) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8199)
YES

----------------------------------------

(8200)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8201) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8202)
Complex Obligation (OR)

----------------------------------------

(8203)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8204) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8205)
Complex Obligation (AND)

----------------------------------------

(8206)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8207) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8208)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8209) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8210)
YES

----------------------------------------

(8211)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8212) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8213)
Complex Obligation (OR)

----------------------------------------

(8214)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8215)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8216)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8217)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8218) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8219)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8220) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8221)
YES

----------------------------------------

(8222)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8223) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8224)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8225) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8226)
YES

----------------------------------------

(8227)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8228) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8229)
Complex Obligation (OR)

----------------------------------------

(8230)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8231)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8232)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8233) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8234)
Complex Obligation (AND)

----------------------------------------

(8235)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8236) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8237)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8238) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8239)
YES

----------------------------------------

(8240)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8241) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8242)
Complex Obligation (OR)

----------------------------------------

(8243)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8244)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8245)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8246)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8247) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8248)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8249) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8250)
YES

----------------------------------------

(8251)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8252) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8253)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8254) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8255)
YES

----------------------------------------

(8256)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8257) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8258)
Complex Obligation (OR)

----------------------------------------

(8259)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8260)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8261)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8262) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(8263)
Complex Obligation (AND)

----------------------------------------

(8264)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8265) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8266)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8267) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8268)
YES

----------------------------------------

(8269)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8270) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8271)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8272) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8273)
YES

----------------------------------------

(8274)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8275) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8276)
Complex Obligation (OR)

----------------------------------------

(8277)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8278)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8279)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8280)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8281) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8282)
Complex Obligation (AND)

----------------------------------------

(8283)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8284) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8285)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8286) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8287)
YES

----------------------------------------

(8288)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8289) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8290)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8291) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8292)
YES

----------------------------------------

(8293)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8294) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8295)
Complex Obligation (OR)

----------------------------------------

(8296)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8297)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8298)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8299) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8300)
Complex Obligation (OR)

----------------------------------------

(8301)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8302)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8303)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8304)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8305) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8306)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8307) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8308)
YES

----------------------------------------

(8309)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8310) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8311)
Complex Obligation (OR)

----------------------------------------

(8312)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8313) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8314)
Complex Obligation (AND)

----------------------------------------

(8315)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8316) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8317)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8318) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8319)
YES

----------------------------------------

(8320)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8321) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8322)
Complex Obligation (OR)

----------------------------------------

(8323)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8324)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8325)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8326) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8327)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8328) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8329)
YES

----------------------------------------

(8330)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8331) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8332)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8333) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8334)
YES

----------------------------------------

(8335)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8336) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8337)
Complex Obligation (AND)

----------------------------------------

(8338)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8339) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8340)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8341) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8342)
YES

----------------------------------------

(8343)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8344) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8345)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8346) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8347)
YES

----------------------------------------

(8348)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8349) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8350)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8351) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8352)
YES

----------------------------------------

(8353)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8354) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8355)
Complex Obligation (OR)

----------------------------------------

(8356)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8357)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8358)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8359) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8360)
Complex Obligation (AND)

----------------------------------------

(8361)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8362) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8363)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8364) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8365)
YES

----------------------------------------

(8366)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8367) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8368)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8369) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8370)
YES

----------------------------------------

(8371)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8372) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8373)
Complex Obligation (OR)

----------------------------------------

(8374)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8375)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8376)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8377) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8378)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8379) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8380)
YES

----------------------------------------

(8381)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8382) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(8383)
Complex Obligation (AND)

----------------------------------------

(8384)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8385) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8386)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8387) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8388)
YES

----------------------------------------

(8389)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8390) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8391)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8392) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8393)
YES

----------------------------------------

(8394)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8395) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8396)
Complex Obligation (OR)

----------------------------------------

(8397)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8398) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8399)
Complex Obligation (AND)

----------------------------------------

(8400)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8401) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8402)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8403) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8404)
YES

----------------------------------------

(8405)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8406) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8407)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8408) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8409)
YES

----------------------------------------

(8410)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8411) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8412)
Complex Obligation (OR)

----------------------------------------

(8413)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8414)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8415)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8416)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8417) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8418)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8419) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8420)
YES

----------------------------------------

(8421)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8422) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8423)
Complex Obligation (AND)

----------------------------------------

(8424)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8425) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8426)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8427) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8428)
YES

----------------------------------------

(8429)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8430) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8431)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8432) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8433)
YES

----------------------------------------

(8434)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8435) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8436)
Complex Obligation (OR)

----------------------------------------

(8437)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8438)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8439)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8440)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8441) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8442)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8443) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8444)
YES

----------------------------------------

(8445)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8446) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8447)
Complex Obligation (AND)

----------------------------------------

(8448)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8449) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8450)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8451) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8452)
YES

----------------------------------------

(8453)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8454) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8455)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8456) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8457)
YES

----------------------------------------

(8458)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8459) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8460)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8461) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8462)
YES

----------------------------------------

(8463)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8464) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8465)
Complex Obligation (OR)

----------------------------------------

(8466)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8467)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8468)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8469)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8470) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8471)
Complex Obligation (AND)

----------------------------------------

(8472)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8473) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8474)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8475) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8476)
YES

----------------------------------------

(8477)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8478) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8479)
Complex Obligation (OR)

----------------------------------------

(8480)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8481)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8482)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8483)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8484) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8485)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8486) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8487)
YES

----------------------------------------

(8488)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8489) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8490)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8491) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8492)
YES

----------------------------------------

(8493)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8494) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8495)
Complex Obligation (AND)

----------------------------------------

(8496)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8497) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8498)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8499) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8500)
YES

----------------------------------------

(8501)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8502) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8503)
Complex Obligation (OR)

----------------------------------------

(8504)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8505) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8506)
Complex Obligation (AND)

----------------------------------------

(8507)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8508) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8509)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8510) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8511)
YES

----------------------------------------

(8512)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8513) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8514)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8515) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8516)
YES

----------------------------------------

(8517)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8518) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8519)
Complex Obligation (OR)

----------------------------------------

(8520)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8521)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8522)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8523) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8524)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8525) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8526)
YES

----------------------------------------

(8527)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8528) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8529)
Complex Obligation (OR)

----------------------------------------

(8530)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8531)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8532)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8533)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8534) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8535)
Complex Obligation (AND)

----------------------------------------

(8536)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8537) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8538)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8539) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8540)
YES

----------------------------------------

(8541)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8542) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8543)
Complex Obligation (OR)

----------------------------------------

(8544)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8545)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8546)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8547)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8548) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8549)
Complex Obligation (OR)

----------------------------------------

(8550)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8551)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8552)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8553) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8554)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8555) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8556)
YES

----------------------------------------

(8557)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8558) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8559)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8560) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8561)
YES

----------------------------------------

(8562)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8563) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  4 Lassos,
Result: This relative DT problem is equivalent to 5 subproblems.

----------------------------------------

(8564)
Complex Obligation (AND)

----------------------------------------

(8565)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8566) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8567)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8568) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8569)
YES

----------------------------------------

(8570)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8571) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8572)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8573) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8574)
YES

----------------------------------------

(8575)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8576) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8577)
Complex Obligation (OR)

----------------------------------------

(8578)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8579)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8580)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8581)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8582) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8583)
Complex Obligation (OR)

----------------------------------------

(8584)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8585)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8586)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8587) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8588)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8589) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8590)
YES

----------------------------------------

(8591)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8592) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 3 subproblems.

----------------------------------------

(8593)
Complex Obligation (AND)

----------------------------------------

(8594)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8595) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8596)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8597) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8598)
YES

----------------------------------------

(8599)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8600) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8601)
Complex Obligation (OR)

----------------------------------------

(8602)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8603)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8604)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8605)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8606) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8607)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8608) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8609)
YES

----------------------------------------

(8610)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8611) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8612)
Complex Obligation (OR)

----------------------------------------

(8613)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8614) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8615)
Complex Obligation (AND)

----------------------------------------

(8616)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8617) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8618)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8619) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8620)
YES

----------------------------------------

(8621)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8622) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8623)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8624) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8625)
YES

----------------------------------------

(8626)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8627) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8628)
Complex Obligation (OR)

----------------------------------------

(8629)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8630)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8631)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8632) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8633)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8634) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8635)
YES

----------------------------------------

(8636)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8637) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8638)
Complex Obligation (AND)

----------------------------------------

(8639)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8640) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8641)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8642) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8643)
YES

----------------------------------------

(8644)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8645) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8646)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8647) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8648)
YES

----------------------------------------

(8649)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8650) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8651)
Complex Obligation (OR)

----------------------------------------

(8652)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8653)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8654)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8655) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8656)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8657) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8658)
YES

----------------------------------------

(8659)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8660) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8661)
Complex Obligation (AND)

----------------------------------------

(8662)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8663) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8664)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8665) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8666)
YES

----------------------------------------

(8667)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8668) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8669)
Complex Obligation (OR)

----------------------------------------

(8670)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8671)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8672)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8673) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8674)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8675) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8676)
YES

----------------------------------------

(8677)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8678) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8679)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8680) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8681)
YES

----------------------------------------

(8682)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8683) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8684)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8685) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8686)
YES

----------------------------------------

(8687)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8688) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8689)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8690) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8691)
YES

----------------------------------------

(8692)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8693) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8694)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8695) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8696)
YES

----------------------------------------

(8697)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8698) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 4 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8699)
Complex Obligation (OR)

----------------------------------------

(8700)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8701) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8702)
Complex Obligation (AND)

----------------------------------------

(8703)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8704) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8705)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8706) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8707)
YES

----------------------------------------

(8708)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8709) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8710)
Complex Obligation (OR)

----------------------------------------

(8711)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8712) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8713)
Complex Obligation (AND)

----------------------------------------

(8714)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8715) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8716)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8717) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8718)
YES

----------------------------------------

(8719)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8720) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8721)
Complex Obligation (OR)

----------------------------------------

(8722)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8723)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8724)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8725) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8726)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8727) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8728)
YES

----------------------------------------

(8729)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8730) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8731)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8732) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8733)
YES

----------------------------------------

(8734)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8735) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8736)
Complex Obligation (AND)

----------------------------------------

(8737)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8738) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8739)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8740) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8741)
YES

----------------------------------------

(8742)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8743) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8744)
Complex Obligation (OR)

----------------------------------------

(8745)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8746)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8747)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8748) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8749)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8750) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8751)
YES

----------------------------------------

(8752)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8753) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8754)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8755) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8756)
YES

----------------------------------------

(8757)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8758) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8759)
Complex Obligation (AND)

----------------------------------------

(8760)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8761) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8762)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8763) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8764)
YES

----------------------------------------

(8765)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8766) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 1 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8767)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8768) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8769)
YES

----------------------------------------

(8770)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8771) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8772)
Complex Obligation (OR)

----------------------------------------

(8773)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8774)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8775)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8776) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8777)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8778) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8779)
YES

----------------------------------------

(8780)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8781) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8782)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8783) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8784)
YES

----------------------------------------

(8785)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8786) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8787)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8788) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8789)
YES

----------------------------------------

(8790)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8791) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8792)
Complex Obligation (AND)

----------------------------------------

(8793)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8794) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8795)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8796) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8797)
YES

----------------------------------------

(8798)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8799) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8800)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8801) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8802)
YES

----------------------------------------

(8803)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8804) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8805)
Complex Obligation (OR)

----------------------------------------

(8806)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8807) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8808)
Complex Obligation (AND)

----------------------------------------

(8809)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8810) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8811)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8812) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8813)
YES

----------------------------------------

(8814)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8815) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8816)
Complex Obligation (OR)

----------------------------------------

(8817)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8818)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8819)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8820) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8821)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8822) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8823)
YES

----------------------------------------

(8824)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8825) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8826)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8827) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8828)
YES

----------------------------------------

(8829)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8830) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8831)
Complex Obligation (AND)

----------------------------------------

(8832)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8833) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8834)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8835) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8836)
YES

----------------------------------------

(8837)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8838) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8839)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8840) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8841)
YES

----------------------------------------

(8842)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8843) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8844)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8845) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8846)
YES

----------------------------------------

(8847)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8848)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8849) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8850)
Complex Obligation (AND)

----------------------------------------

(8851)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8852) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8853)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8854) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8855)
YES

----------------------------------------

(8856)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8857) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8858)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8859) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8860)
YES

----------------------------------------

(8861)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8862) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8863)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8864) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8865)
YES

----------------------------------------

(8866)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8867) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8868)
Complex Obligation (OR)

----------------------------------------

(8869)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8870)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8871)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8872) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(8873)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8874) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8875)
YES

----------------------------------------

(8876)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8877) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8878)
Complex Obligation (AND)

----------------------------------------

(8879)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8880) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8881)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8882) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8883)
YES

----------------------------------------

(8884)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8885) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8886)
Complex Obligation (OR)

----------------------------------------

(8887)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8888) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8889)
Complex Obligation (AND)

----------------------------------------

(8890)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8891) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8892)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8893) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8894)
YES

----------------------------------------

(8895)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8896) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8897)
Complex Obligation (OR)

----------------------------------------

(8898)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8899)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8900)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8901) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8902)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8903) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8904)
YES

----------------------------------------

(8905)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8906) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8907)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8908) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8909)
YES

----------------------------------------

(8910)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8911) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8912)
Complex Obligation (AND)

----------------------------------------

(8913)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8914) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8915)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8916) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8917)
YES

----------------------------------------

(8918)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8919) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8920)
Complex Obligation (OR)

----------------------------------------

(8921)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8922)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8923)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8924) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8925)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8926) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8927)
YES

----------------------------------------

(8928)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8929) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8930)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8931) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8932)
YES

----------------------------------------

(8933)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8934) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8935)
Complex Obligation (AND)

----------------------------------------

(8936)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8937) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8938)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8939) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8940)
YES

----------------------------------------

(8941)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8942) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8943)
Complex Obligation (OR)

----------------------------------------

(8944)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8945)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8946)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8947) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8948)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8949) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8950)
YES

----------------------------------------

(8951)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8952) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8953)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8954) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8955)
YES

----------------------------------------

(8956)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8957) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8958)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8959) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8960)
YES

----------------------------------------

(8961)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8962) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8963)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8964) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8965)
YES

----------------------------------------

(8966)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(c(A(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8967) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8968)
Complex Obligation (AND)

----------------------------------------

(8969)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8970) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8971)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8972) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8973)
YES

----------------------------------------

(8974)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8975) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(c(A(x1)))

Relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(C(x_1)) = 2
   POL(a(x_1)) = 0
   POL(b(x_1)) = 0
   POL(c(x_1)) = 0

----------------------------------------

(8976)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8977) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8978)
YES

----------------------------------------

(8979)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8980) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 3 + x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = 2 + x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(8981)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8982) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8983)
YES

----------------------------------------

(8984)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8985) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 3 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(8986)
Complex Obligation (OR)

----------------------------------------

(8987)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8988) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(8989)
Complex Obligation (AND)

----------------------------------------

(8990)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8991) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8992)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8993) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(8994)
YES

----------------------------------------

(8995)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8996)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8997) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(c(C(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(8998)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(8999) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9000)
YES

----------------------------------------

(9001)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9002) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9003)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9004) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9005)
YES

----------------------------------------

(9006)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9007) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(9008)
Complex Obligation (AND)

----------------------------------------

(9009)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9010) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9011)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9012) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9013)
YES

----------------------------------------

(9014)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9015) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> a(C(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9016)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9017) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9018)
YES

----------------------------------------

(9019)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9020) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9021)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9022) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9023)
YES

----------------------------------------

(9024)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9025) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(9026)
Complex Obligation (OR)

----------------------------------------

(9027)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9028)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9029)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9030) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(9031)
Complex Obligation (AND)

----------------------------------------

(9032)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9033) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(9034)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9035) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9036)
YES

----------------------------------------

(9037)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9038) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 2 subproblems.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(9039)
Complex Obligation (OR)

----------------------------------------

(9040)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(c(a(x1))) -> C(b(b(x1)))
   c(a(a(x1))) -> a(c(C(x1)))
   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9041)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> A(c(a(x1)))
   a(c(a(x1))) -> C(b(b(x1)))
   c(b(c(x1))) -> a(C(a(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9042)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9043) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> a(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(9044)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9045) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9046)
YES

----------------------------------------

(9047)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9048) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(a(x1))) -> A(c(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3
   POL(C(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3 + x_1
   POL(c(x_1)) = 3 + x_1

----------------------------------------

(9049)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(b(c(x1))) -> a(c(a(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9050) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9051)
YES

----------------------------------------

(9052)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(b(x1))) -> b(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(9053) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(b(x1))) -> b(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> A(c(A(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(9054)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> a(c(c(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(9055) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9056)
YES

----------------------------------------

(9057)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(b(x1))) -> b(C(c(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(9058) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(b(x1))) -> b(C(c(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 3 + 2*x_1
   POL(b(x_1)) = 3 + 2*x_1
   POL(c(x_1)) = 3 + 2*x_1

----------------------------------------

(9059)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(9060) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9061)
YES

----------------------------------------

(9062)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))

and relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(9063) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(a(b(x1))) -> b(c(C(x1)))

Relative ADPs:

   c(a(a(x1))) -> A(c(C(x1)))
   c(b(c(x1))) -> A(C(a(x1)))
   c(a(a(x1))) -> A(C(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   c(b(c(x1))) -> a(C(A(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   c(a(a(x1))) -> a(C(C(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(9064)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(a(a(x1))) -> a(c(c(x1)))
   a(c(a(x1))) -> c(b(b(x1)))
   a(c(a(x1))) -> a(b(b(x1)))
   c(a(a(x1))) -> b(b(b(x1)))
   a(a(b(x1))) -> b(c(c(x1)))
   c(b(c(x1))) -> a(c(a(x1)))


----------------------------------------

(9065) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(9066)
YES
