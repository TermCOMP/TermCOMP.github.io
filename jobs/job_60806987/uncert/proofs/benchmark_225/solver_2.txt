YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qawag.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 21 ms]
        (7) RelADPP
        (8) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (9) TRUE
    (10) RelADPP
        (11) RelADPReductionPairProof [EQUIVALENT, 19 ms]
        (12) RelADPP
        (13) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) RelADPP
        (16) RelADPReductionPairProof [EQUIVALENT, 26 ms]
        (17) RelADPP
        (18) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) RelADPP
        (21) RelADPReductionPairProof [EQUIVALENT, 25 ms]
        (22) RelADPP
        (23) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) RelADPP
        (26) RelADPReductionPairProof [EQUIVALENT, 22 ms]
        (27) RelADPP
        (28) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) RelADPP
        (31) RelADPReductionPairProof [EQUIVALENT, 24 ms]
        (32) RelADPP
        (33) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) RelADPP
        (36) RelADPReductionPairProof [EQUIVALENT, 19 ms]
        (37) RelADPP
        (38) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (39) TRUE
    (40) RelADPP
        (41) RelADPReductionPairProof [EQUIVALENT, 41 ms]
        (42) RelADPP
        (43) RelADPCleverAfsProof [SOUND, 13 ms]
        (44) QDP
        (45) MRRProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) PisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) RelADPP
        (50) RelADPReductionPairProof [EQUIVALENT, 24 ms]
        (51) RelADPP
        (52) RelADPCleverAfsProof [SOUND, 4 ms]
        (53) QDP
        (54) MRRProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) PisEmptyProof [EQUIVALENT, 0 ms]
        (57) YES
    (58) RelADPP
        (59) RelADPReductionPairProof [EQUIVALENT, 20 ms]
        (60) RelADPP
        (61) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (62) TRUE
    (63) RelADPP
        (64) RelADPReductionPairProof [EQUIVALENT, 23 ms]
        (65) RelADPP
        (66) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (67) YES
    (68) RelADPP
        (69) RelADPReductionPairProof [EQUIVALENT, 25 ms]
        (70) RelADPP
        (71) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (72) YES
    (73) RelADPP
        (74) RelADPReductionPairProof [EQUIVALENT, 18 ms]
        (75) RelADPP
        (76) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (77) YES
    (78) RelADPP
        (79) RelADPReductionPairProof [EQUIVALENT, 22 ms]
        (80) RelADPP
        (81) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (82) YES
    (83) RelADPP
        (84) RelADPReductionPairProof [EQUIVALENT, 14 ms]
        (85) RelADPP
        (86) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (87) YES
    (88) RelADPP
        (89) RelADPReductionPairProof [EQUIVALENT, 24 ms]
        (90) RelADPP
        (91) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (92) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   b(b(c(x1))) -> a(a(b(x1)))
   b(b(a(x1))) -> c(b(b(x1)))

The relative TRS consists of the following S rules:

   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))
   b(b(c(x1))) -> a(A(b(x1)))
   b(b(c(x1))) -> a(a(B(x1)))
   b(b(a(x1))) -> c(B(b(x1)))
   b(b(a(x1))) -> c(b(B(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   a(b(a(x1))) -> B(c(c(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  15 Lassos,
Result: This relative DT problem is equivalent to 16 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))
   b(b(c(x1))) -> a(A(b(x1)))
   b(b(a(x1))) -> c(b(B(x1)))
   b(b(c(x1))) -> a(a(B(x1)))
   b(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))
   b(b(a(x1))) -> c(b(B(x1)))
   b(b(c(x1))) -> a(a(B(x1)))
   b(b(a(x1))) -> c(B(b(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(8) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(9)
TRUE

----------------------------------------

(10)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(11) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 1 + x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(13) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(16) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(18) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(21) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(23) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(26) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(28) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(31) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

Relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 3*x_1 + 3*x_1^2
   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(32)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(33) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(36) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(B(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(37)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(38) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(39)
TRUE

----------------------------------------

(40)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(41) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 0
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(43) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Recursive path order with status [RPO].
Quasi-Precedence: B_1 > [b_1, a_1, c_1]

Status: B_1: [1]
b_1: multiset status
a_1: multiset status
c_1: multiset status


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(b0(a0(x1))) -> B0(b0(x1))

The TRS R consists of the following rules:

   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(b0(c0(x1))) -> a0(a0(b0(x1)))
   a0(c0(c0(x1))) -> c0(a0(b0(x1)))
   b0(a0(a0(x1))) -> c0(b0(b0(x1)))
   a0(b0(a0(x1))) -> b0(c0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(b0(a0(x1))) -> B0(b0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(B0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = 1 + 2*x_1
   POL(c0(x_1)) = 1 + 2*x_1


----------------------------------------

(46)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(b0(c0(x1))) -> a0(a0(b0(x1)))
   a0(c0(c0(x1))) -> c0(a0(b0(x1)))
   b0(a0(a0(x1))) -> c0(b0(b0(x1)))
   a0(b0(a0(x1))) -> b0(c0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(50) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + 2*x_1
   POL(B(x_1)) = 0
   POL(a(x_1)) = 3 + 3*x_1
   POL(b(x_1)) = 3*x_1
   POL(c(x_1)) = 2 + 3*x_1

----------------------------------------

(51)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(52) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
B(x1)  =  x1

b(x1)  =  b(x1)

c(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: b_1: [1]


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(b0(c0(x1))) -> B0(x1)

The TRS R consists of the following rules:

   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(b0(c0(x1))) -> a0(a0(b0(x1)))
   a0(c0(c0(x1))) -> c0(a0(b0(x1)))
   b0(a0(a0(x1))) -> c0(b0(b0(x1)))
   a0(b0(a0(x1))) -> b0(c0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B0(b0(c0(x1))) -> B0(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(B0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = 1 + 2*x_1
   POL(c0(x_1)) = 1 + 2*x_1


----------------------------------------

(55)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b0(b0(a0(x1))) -> c0(b0(b0(x1)))
   b0(b0(c0(x1))) -> a0(a0(b0(x1)))
   a0(c0(c0(x1))) -> c0(a0(b0(x1)))
   b0(a0(a0(x1))) -> c0(b0(b0(x1)))
   a0(b0(a0(x1))) -> b0(c0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(56) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(57)
YES

----------------------------------------

(58)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(59) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(B(x_1)) = x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(60)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(61) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(62)
TRUE

----------------------------------------

(63)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(64) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> c(B(b(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(65)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(66) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(69) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 3*x_1
   POL(B(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(70)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(71) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(72)
YES

----------------------------------------

(73)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(74) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> a(a(B(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(75)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(76) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(77)
YES

----------------------------------------

(78)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(79) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> A(a(b(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + 2*x_1
   POL(B(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(80)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(81) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(82)
YES

----------------------------------------

(83)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(84) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(a(x1))) -> c(b(B(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(85)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(86) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(87)
YES

----------------------------------------

(88)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

and relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(89) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(b(c(x1))) -> a(A(b(x1)))

Relative ADPs:

   a(c(c(x1))) -> c(A(B(x1)))
   b(b(a(x1))) -> c(b(b(x1)))
   b(a(a(x1))) -> c(B(B(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(B(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(90)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(a(x1))) -> c(b(b(x1)))
   b(b(c(x1))) -> a(a(b(x1)))
   a(c(c(x1))) -> c(a(b(x1)))
   b(a(a(x1))) -> c(b(b(x1)))
   a(b(a(x1))) -> b(c(c(x1)))


----------------------------------------

(91) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(92)
YES
