YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/z6kUJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRS S Cleaner [EQUIVALENT, 0 ms]
(2) RelTRS
(3) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(4) RelADPP
(5) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) RelADPP
        (8) RelADPReductionPairProof [EQUIVALENT, 46 ms]
        (9) RelADPP
        (10) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) RelADPP
        (13) RelADPReductionPairProof [EQUIVALENT, 41 ms]
        (14) RelADPP
        (15) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) RelADPP
        (18) RelADPReductionPairProof [EQUIVALENT, 55 ms]
        (19) RelADPP
        (20) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) RelADPP
        (23) RelADPReductionPairProof [EQUIVALENT, 41 ms]
        (24) RelADPP
        (25) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(c(x1))) -> c(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))

The relative TRS consists of the following S rules:

   b(c(a(x1))) -> a(a(c(x1)))
   b(b(c(x1))) -> a(c(b(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   c(a(a(x1))) -> c(a(a(x1)))


----------------------------------------

(1) RelTRS S Cleaner (EQUIVALENT)
We have deleted all rules from S that have the shape t -> t:

   c(a(a(x1))) -> c(a(a(x1)))


----------------------------------------

(2)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   a(b(c(x1))) -> c(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))

The relative TRS consists of the following S rules:

   b(c(a(x1))) -> a(a(c(x1)))
   b(b(c(x1))) -> a(c(b(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   b(a(b(x1))) -> b(c(c(x1)))


----------------------------------------

(3) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(4)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(c(x1))) -> c(c(c(x1)))
   b(a(b(x1))) -> c(A(a(x1)))
   b(a(b(x1))) -> c(a(A(x1)))

and relative ADPs:

   b(c(a(x1))) -> A(A(c(x1)))
   b(b(c(x1))) -> A(c(B(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> B(c(c(x1)))


----------------------------------------

(5) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(b(x1))) -> c(a(A(x1)))
   b(a(b(x1))) -> c(A(a(x1)))

and relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(8) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(b(x1))) -> c(a(A(x1)))
   b(a(b(x1))) -> c(A(a(x1)))

Relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(c(x1))) -> a(c(b(x1)))
   b(c(a(x1))) -> a(a(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(10) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(b(x1))) -> c(a(A(x1)))

and relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(13) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(b(x1))) -> c(a(A(x1)))

Relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


The remaining rules can at least be oriented weakly:

Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(B(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(c(x1))) -> a(c(b(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(15) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(b(x1))) -> c(A(a(x1)))

and relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(18) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(b(x1))) -> c(A(a(x1)))

Relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(19)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(c(x1))) -> a(c(b(x1)))
   b(c(a(x1))) -> a(a(c(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(20) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Relative ADP Problem with
absolute ADPs:

   a(b(c(x1))) -> c(c(c(x1)))

and relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))


----------------------------------------

(23) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   a(b(c(x1))) -> c(c(c(x1)))

Relative ADPs:

   b(b(c(x1))) -> A(c(B(x1)))
   b(c(a(x1))) -> A(A(c(x1)))
   a(c(c(x1))) -> c(B(A(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(B(x_1)) = 2 + 3*x_1
   POL(a(x_1)) = 2 + 2*x_1
   POL(b(x_1)) = 2 + 2*x_1
   POL(c(x_1)) = 2 + 2*x_1

----------------------------------------

(24)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(b(c(x1))) -> a(c(b(x1)))
   b(c(a(x1))) -> a(a(c(x1)))
   a(c(c(x1))) -> c(b(a(x1)))
   b(a(b(x1))) -> b(c(c(x1)))
   b(a(b(x1))) -> c(a(a(x1)))
   a(b(c(x1))) -> c(c(c(x1)))


----------------------------------------

(25) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(26)
YES
