YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LiA7N.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPReductionPairProof [EQUIVALENT, 56 ms]
        (7) RelADPP
        (8) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) RelADPP
        (15) RelADPReductionPairProof [EQUIVALENT, 40 ms]
        (16) RelADPP
        (17) RelADPCleverAfsProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 8 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) RelADPP
        (24) RelADPReductionPairProof [EQUIVALENT, 39 ms]
        (25) RelADPP
        (26) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) RelADPP
        (29) RelADPReductionPairProof [EQUIVALENT, 54 ms]
        (30) RelADPP
        (31) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (32) TRUE
    (33) RelADPP
        (34) RelADPReductionPairProof [EQUIVALENT, 35 ms]
        (35) RelADPP
        (36) RelADPCleverAfsProof [SOUND, 2 ms]
        (37) QDP
        (38) MRRProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) PisEmptyProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) RelADPP
        (43) RelADPReductionPairProof [EQUIVALENT, 51 ms]
        (44) RelADPP
        (45) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) RelADPP
        (48) RelADPReductionPairProof [EQUIVALENT, 39 ms]
        (49) RelADPP
        (50) RelADPDerelatifyingProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) QDPOrderProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) PisEmptyProof [EQUIVALENT, 0 ms]
        (55) YES
    (56) RelADPP
        (57) RelADPReductionPairProof [EQUIVALENT, 34 ms]
        (58) RelADPP
        (59) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (60) YES
    (61) RelADPP
        (62) RelADPReductionPairProof [EQUIVALENT, 42 ms]
        (63) RelADPP
        (64) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (65) TRUE
    (66) RelADPP
        (67) RelADPReductionPairProof [EQUIVALENT, 42 ms]
        (68) RelADPP
        (69) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (70) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(c(c(x1))) -> a(a(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))

The relative TRS consists of the following S rules:

   a(b(b(x1))) -> b(a(c(x1)))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(A(a(x1)))
   c(a(c(x1))) -> b(a(A(x1)))
   c(c(c(x1))) -> A(a(b(x1)))
   c(c(c(x1))) -> a(A(b(x1)))
   c(b(c(x1))) -> C(b(b(x1)))
   c(a(c(x1))) -> b(b(C(x1)))
   c(b(c(x1))) -> C(c(b(x1)))
   c(b(c(x1))) -> c(C(b(x1)))

and relative ADPs:

   a(b(b(x1))) -> b(A(C(x1)))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  9 Lassos,
Result: This relative DT problem is equivalent to 10 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(c(x1))) -> b(A(a(x1)))
   c(c(c(x1))) -> a(A(b(x1)))
   c(a(c(x1))) -> b(b(C(x1)))
   c(b(c(x1))) -> c(C(b(x1)))
   c(c(c(x1))) -> A(a(b(x1)))
   c(a(c(x1))) -> b(a(A(x1)))
   c(b(c(x1))) -> C(c(b(x1)))

and relative ADPs:

   c(c(b(x1))) -> b(b(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))


----------------------------------------

(6) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(c(x1))) -> b(A(a(x1)))
   c(c(c(x1))) -> a(A(b(x1)))
   c(a(c(x1))) -> b(b(C(x1)))
   c(b(c(x1))) -> c(C(b(x1)))
   c(c(c(x1))) -> A(a(b(x1)))
   c(a(c(x1))) -> b(a(A(x1)))

Relative ADPs:

   c(c(b(x1))) -> b(b(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(b(c(x1))) -> C(c(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(C(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> C(c(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(8) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(b(c(x1))) -> C(c(b(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(b(c(x1))) -> C(c(b(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(C(x_1)) =  	[[0]] 	 +  	[[0, 1]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> c(C(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(15) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(b(c(x1))) -> c(C(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(16)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> c(C(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(17) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

b(x1)  =  x1

c(x1)  =  c(x1)


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: c_1: multiset status


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(b0(c0(x1))) -> C0(b0(x1))

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> a0(a0(b0(x1)))
   c0(c0(b0(x1))) -> b0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(a0(a0(x1)))
   a0(b0(b0(x1))) -> b0(a0(c0(x1)))
   c0(b0(c0(x1))) -> c0(c0(b0(x1)))
   c0(b0(c0(x1))) -> c0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(b0(c0(x1))) -> C0(b0(x1))


Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = x_1
   POL(a0(x_1)) = 1 + 2*x_1
   POL(b0(x_1)) = 1 + 2*x_1
   POL(c0(x_1)) = 1 + 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> a0(a0(b0(x1)))
   c0(c0(b0(x1))) -> b0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(a0(a0(x1)))
   a0(b0(b0(x1))) -> b0(a0(c0(x1)))
   c0(b0(c0(x1))) -> c0(c0(b0(x1)))
   c0(b0(c0(x1))) -> c0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> a(A(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(24) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(c(c(x1))) -> a(A(b(x1)))

Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(25)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(26) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(29) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(c(c(x1))) -> A(a(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + 2*x_1
   POL(C(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(30)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(c(x1))) -> A(a(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(31) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(32)
TRUE

----------------------------------------

(33)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(c(x1))) -> b(b(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))


----------------------------------------

(34) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(a(c(x1))) -> b(b(C(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 0
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1

----------------------------------------

(35)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(c(x1))) -> b(b(C(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))


----------------------------------------

(36) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
C_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
C(x1)  =  x1

a(x1)  =  a(x1)

c(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: trivial

Status: a_1: [1]


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C0(a0(c0(x1))) -> C0(x1)

The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> a0(a0(b0(x1)))
   c0(c0(b0(x1))) -> b0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(a0(a0(x1)))
   a0(b0(b0(x1))) -> b0(a0(c0(x1)))
   c0(b0(c0(x1))) -> c0(c0(b0(x1)))
   c0(b0(c0(x1))) -> c0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C0(a0(c0(x1))) -> C0(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(C0(x_1)) = 2*x_1
   POL(a0(x_1)) = 2 + 2*x_1
   POL(b0(x_1)) = 2 + 2*x_1
   POL(c0(x_1)) = 2 + 2*x_1


----------------------------------------

(39)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c0(c0(c0(x1))) -> a0(a0(b0(x1)))
   c0(c0(b0(x1))) -> b0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(a0(a0(x1)))
   a0(b0(b0(x1))) -> b0(a0(c0(x1)))
   c0(b0(c0(x1))) -> c0(c0(b0(x1)))
   c0(b0(c0(x1))) -> c0(b0(b0(x1)))
   c0(a0(c0(x1))) -> b0(b0(c0(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(c(x1))) -> b(a(A(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(43) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(c(x1))) -> b(a(A(x1)))

Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(C(x_1)) = 1 + 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(44)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(45) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> C(c(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(48) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(b(c(x1))) -> C(c(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(C(x_1)) = 3 + 2*x_1
   POL(a(x_1)) = 1 + 2*x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 1 + 2*x_1

----------------------------------------

(49)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> C(c(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(50) RelADPDerelatifyingProof (EQUIVALENT)


We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(b(c(x1))) -> C(c(b(x1)))

The TRS R consists of the following rules:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(b(c(x1))) -> C(c(b(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(C(x_1)) =  	[[0]] 	 +  	[[0, 1]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(53)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(a(c(x1))) -> b(A(a(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(57) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(a(c(x1))) -> b(A(a(x1)))

Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(58)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(59) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(60)
YES

----------------------------------------

(61)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(62) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   c(b(c(x1))) -> C(b(b(x1)))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(63)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(b(c(x1))) -> C(b(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(64) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(65)
TRUE

----------------------------------------

(66)
Obligation:
Relative ADP Problem with
absolute ADPs:

   c(c(b(x1))) -> b(b(b(x1)))

and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(67) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   c(c(b(x1))) -> b(b(b(x1)))

Relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   a(b(b(x1))) -> b(A(C(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2*x_1
   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = 1 + 3*x_1
   POL(b(x_1)) = 1 + 3*x_1
   POL(c(x_1)) = 1 + 3*x_1

----------------------------------------

(68)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   c(c(c(x1))) -> a(a(b(x1)))
   c(c(b(x1))) -> b(b(b(x1)))
   c(a(c(x1))) -> b(a(a(x1)))
   a(b(b(x1))) -> b(a(c(x1)))
   c(b(c(x1))) -> c(c(b(x1)))
   c(b(c(x1))) -> c(b(b(x1)))
   c(a(c(x1))) -> b(b(c(x1)))


----------------------------------------

(69) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(70)
YES
