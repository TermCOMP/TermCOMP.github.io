YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Kc4WK.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given RelTRS could be proven:

(0) RelTRS
(1) RelTRStoRelADPProof [EQUIVALENT, 0 ms]
(2) RelADPP
(3) RelADPDepGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) RelADPP
        (6) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (7) RelADPP
        (8) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (9) RelADPP
        (10) RelADPCleverAfsProof [SOUND, 2 ms]
        (11) QDP
        (12) QDPBoundsTAProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) RelADPP
        (19) RelADPReductionPairProof [EQUIVALENT, 14 ms]
        (20) RelADPP
        (21) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE
    (23) RelADPP
        (24) RelADPDerelatifying2Proof [SOUND, 0 ms]
        (25) RelADPP
        (26) RelADPDepGraphProof [EQUIVALENT, 0 ms]
        (27) RelADPP
        (28) RelADPCleverAfsProof [SOUND, 6 ms]
        (29) QDP
        (30) QDPBoundsTAProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPOrderProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) RelADPP
        (37) RelADPReductionPairProof [EQUIVALENT, 24 ms]
        (38) RelADPP
        (39) DAbsisEmptyProof [EQUIVALENT, 0 ms]
        (40) YES


----------------------------------------

(0)
Obligation:
Relative term rewrite system:
The relative TRS consists of the following R rules:

   b(a(x)) -> a(c(a(b(x))))

The relative TRS consists of the following S rules:

   b(c(x)) -> c(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(1) RelTRStoRelADPProof (EQUIVALENT)


We upgrade the RelTRS problem to an equivalent Relative ADP Problem [IJCAR24].

----------------------------------------

(2)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> A(c(a(b(x))))
   b(a(x)) -> a(c(A(b(x))))
   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(c(x)) -> c(c(A(B(x))))
   a(a(x)) -> A(A(c(a(x))))
   a(a(x)) -> A(a(c(A(x))))
   a(a(x)) -> a(A(c(A(x))))


----------------------------------------

(3) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  3 Lassos,
Result: This relative DT problem is equivalent to 4 subproblems.

----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


----------------------------------------

(6) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(7)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(x)) -> c(c(a(B(x))))
   b(c(x)) -> c(c(A(b(x))))
   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(8) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(9)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(x)) -> c(c(a(B(x))))
   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(c(x)) -> c(c(a(b(x))))
   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(10) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
B(x1)  =  B(x1)

c(x1)  =  c(x1)

a(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [B_1, c_1]

Status: B_1: multiset status
c_1: [1]


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(c0(x)) -> B0(x)
   B0(a0(x)) -> B0(x)

The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   B0(c0(x)) -> B0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
B00(1) -> 0

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(a0(x)) -> B0(x)

The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B0(a0(x)) -> B0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
B0(x1)  =  x1

a0(x1)  =  a0(x1)

b0(x1)  =  b0

c0(x1)  =  c0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a0_1=1
   c0=1
   b0=3

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> a(c(A(b(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


----------------------------------------

(19) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


The remaining rules can at least be oriented weakly:
Absolute ADPs:

   b(a(x)) -> a(c(A(b(x))))

Relative ADPs:
none


Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2
   POL(B(x_1)) = 2 + 2*x_1
   POL(a(x_1)) = 0
   POL(b(x_1)) = 2*x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(20)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> a(c(A(b(x))))

and relative ADPs:

   b(c(x)) -> c(c(a(b(x))))
   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(21) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  0 SCCs with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 0 subproblems.

----------------------------------------

(22)
TRUE

----------------------------------------

(23)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


----------------------------------------

(24) RelADPDerelatifying2Proof (SOUND)


We use the second derelatifying processor (moving relative rules)[IJCAR24].
We move one relative ADP with annotations to the non-relative part and create an own Problem for each movable rule.

Resulting in 1 subproblem.
If one of them is SN, then our original relative ADP problem is SN
----------------------------------------

(25)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(x)) -> c(c(a(B(x))))
   b(c(x)) -> c(c(A(b(x))))
   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(26) RelADPDepGraphProof (EQUIVALENT)


We use the relative dependency graph processor [IJCAR24].
The approximation of the Relative Dependency Graph contains:
  1 SCC with nodes from P_abs,
  0 Lassos,
Result: This relative DT problem is equivalent to 1 subproblem.

----------------------------------------

(27)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(c(x)) -> c(c(a(B(x))))
   b(a(x)) -> a(c(a(B(x))))

and relative ADPs:

   b(c(x)) -> c(c(a(b(x))))
   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(28) RelADPCleverAfsProof (SOUND)
We use the first derelatifying processor [IJCAR24].
There are no annotations in relative ADPs, so the relative ADP problem can be transformed into a non-relative DP problem.

Furthermore, We use an argument filter [LPAR04].
Filtering:a_1 = 
b_1 = 
c_1 = 
B_1 = 

Found this filtering by looking at the following order that orders at least one DP strictly:Combined order from the following AFS and order.
B(x1)  =  B(x1)

c(x1)  =  c(x1)

a(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [B_1, c_1]

Status: B_1: multiset status
c_1: [1]


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(c0(x)) -> B0(x)
   B0(a0(x)) -> B0(x)

The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPBoundsTAProof (EQUIVALENT)
The DP-Problem (P, R) could be shown to be Match-DP-Bounded [TAB_NONLEFTLINEAR] by 0 for the Rule: 
   B0(c0(x)) -> B0(x)
by considering the usable rules: 
none

The compatible tree automaton used to show the Match-DP-Boundedness is represented by: 
final states : [0]
transitions: 
#0() -> 1
B00(1) -> 0

----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B0(a0(x)) -> B0(x)

The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B0(a0(x)) -> B0(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
B0(x1)  =  x1

a0(x1)  =  a0(x1)

b0(x1)  =  b0

c0(x1)  =  c0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a0_1=1
   c0=1
   b0=3

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))


----------------------------------------

(33)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b0(c0(x)) -> c0(c0(a0(b0(x))))
   b0(a0(x)) -> a0(c0(a0(b0(x))))
   a0(a0(x)) -> a0(a0(c0(a0(x))))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Relative ADP Problem with
absolute ADPs:

   b(a(x)) -> A(c(a(b(x))))

and relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


----------------------------------------

(37) RelADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [IJCAR24].
The following rules can be oriented strictly (l^# > ann(r)) 
and therefore we can remove all of its annotations in the right-hand side:
Absolute ADPs:

   b(a(x)) -> A(c(a(b(x))))

Relative ADPs:

   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))
   b(c(x)) -> c(c(A(B(x))))


No rules with annotations remain.
Ordered with Polynomial interpretation [POLO]:

   POL(A(x_1)) = 0
   POL(B(x_1)) = 3 + 3*x_1
   POL(a(x_1)) = 1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = 2 + x_1

----------------------------------------

(38)
Obligation:
Relative ADP Problem with
No absolute ADPs, and relative ADPs:

   b(c(x)) -> c(c(a(b(x))))
   b(a(x)) -> a(c(a(b(x))))
   a(a(x)) -> a(a(c(a(x))))


----------------------------------------

(39) DAbsisEmptyProof (EQUIVALENT)
The relative ADP Problem has an empty P_abs. Hence, no infinite chain exists.
----------------------------------------

(40)
YES
