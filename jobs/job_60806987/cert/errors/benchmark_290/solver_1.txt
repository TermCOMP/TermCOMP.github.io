last 1051 length 4287
CNF 1051 vars 4287 clauses
last 9076 length 40335
CNF 9076 vars 40335 clauses
last 7701 length 31728
CNF 7701 vars 31728 clauses
last 9794 length 41509
CNF 9794 vars 41509 clauses
last 13838 length 59478
last 12264 length 54861
last 12404 length 52879
CNF 13838 vars 59478 clauses
CNF 12264 vars 54861 clauses
CNF 12404 vars 52879 clauses
last 906 length 3821
CNF 906 vars 3821 clauses
**************************************************
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       split
2 sub-proofs
  1 SRS with 5 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 45 strict rules and 9 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 18 strict rules and 6 weak rules on 8 letters       weights
  SRS with 0 strict rules and 4 weak rules on 4 letters       no strict rules

  2 SRS with 1 rules on 2 letters       split
  2 sub-proofs
    1 SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 4 rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] ->= [a, a, c] {- Input 2 -}
  [c, c, b] ->= [b, b, c] {- Input 3 -}
  [b, b, a] ->= [a, b, b] {- Input 4 -}
  [a, b, a] ->= [c, b, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] -> [a, a, c] {- Strictified (Input 2) -}
  [c, c, b] -> [b, b, c] {- Strictified (Input 3) -}
  [b, b, a] -> [a, b, b] {- Strictified (Input 4) -}
  [a, b, a] -> [c, b, a] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] -> [c, c, b] {- Input 0 -}
  [b, b, b] -> [a, b, b] {- Input 1 -}
  [b, b, a] -> [a, a, c] {- Strictified (Input 2) -}
  [c, c, b] -> [b, b, c] {- Strictified (Input 3) -}
  [b, b, a] ->= [a, b, b] {- Strictified (Input 4) -}
  [a, b, a] -> [c, b, a] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, c]] -> [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, c]] -> [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, c]] -> [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, c]] ->= [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, c]] ->= [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 3/1)
  ([a, b], 3/1)
  ([a, c], 0/1)
  ([b, a], 4/1)
  ([b, b], 4/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 4/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b, b, a] -> [a, b, b] {- Strictified (Input 4) -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, b, a] -> [a, b, b] {- Strictified (Input 4) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Split[(5/1,3)\TileAllAll{2}(45/9,9)\Matrix{\Natural}{2}(18/6,8)\Weight(0/4,4)[],(1,2)\Split[(1,2)\TileAllAll{2}(4,4)\Matrix{\Natural}{2}(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 24} , self = 67 , parent = Nothing , duration = 0.184398866000 , status
F              = Fail , start = 2025-09-04 08:24:30.479674408 UTC , finish = 2025-09-04
F              08:24:30.664073274 UTC , thread_cap_info = ("ThreadId 35", 2, False)}
F              
| E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E            = 24} , self = 55 , parent = Nothing , duration = 0.131393900000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-04 08:24:30.484565742 UTC ,
| E            finish = 2025-09-04 08:24:30.615959642 UTC , thread_cap_info = ("ThreadId
| E            47", 3, False)}
| E            
| | F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | F          = True}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules
| | F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 36} , self
| | F          = 75 , parent = Nothing , duration = 0.348763323000 , status = Fail , start
| | F          = 2025-09-04 08:24:30.516342532 UTC , finish = 2025-09-04 08:24:30.865105855
| | F          UTC , thread_cap_info = ("ThreadId 80", 2, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | F        = 3 , num_top_rules = 3 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | F        = 312} , self = 76 , parent = Nothing , duration = 0.414461887000 , status
| | | F        = Fail , start = 2025-09-04 08:24:30.516929657 UTC , finish = 2025-09-04
| | | F        08:24:30.931391544 UTC , thread_cap_info = ("ThreadId 96", 1, False)}
| | | F        
| | | | S      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | S      = 3 , num_top_rules = 3 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | | S      = 312} , self = 72 , parent = Nothing , duration = 0.302586327000 , status
| | | | S      = Success , start = 2025-09-04 08:24:30.530201507 UTC , finish = 2025-09-04
| | | | S      08:24:30.832787834 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | | | S      
| E | | |      
| S | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| S | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| S | | |      = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| S | | |      = 432} , self = 89 , parent = Nothing , duration = 0.443970850000 , status
| S | | |      = Success , start = 2025-09-04 08:24:30.622574441 UTC , finish = 2025-09-04
| S | | |      08:24:31.066545291 UTC , thread_cap_info = ("ThreadId 129", 3, False)}
| S | | |      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | | F    = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F    = 432} , self = 71 , parent = Nothing , duration = 0.180135947000 , status
| | | | | F    = Fail , start = 2025-09-04 08:24:30.631028913 UTC , finish = 2025-09-04
| | | | | F    08:24:30.81116486 UTC , thread_cap_info = ("ThreadId 131", 3, False)}
| | | | | F    
| | | | | | S  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 48 , num_strict_rules
| | | | | | S  = 12 , num_top_rules = 12 , num_weak_rules = 36 , alphabet_size = 12 ,
| | | | | | S  total_length = 384} , self = 104 , parent = Nothing , duration = 0.431287290000
| | | | | | S  , status = Success , start = 2025-09-04 08:24:30.649766336 UTC , finish
| | | | | | S  = 2025-09-04 08:24:31.081053626 UTC , thread_cap_info = ("ThreadId 115",
| | | | | | S  1, False)}
| | | | | | S  
F | | | | | |  
F | | | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 48 , num_strict_rules
F | | | | | |  = 12 , num_top_rules = 12 , num_weak_rules = 36 , alphabet_size = 12 ,
F | | | | | |  total_length = 384} , self = 103 , parent = Nothing , duration = 0.408828063000
F | | | | | |  , status = Fail , start = 2025-09-04 08:24:30.669760844 UTC , finish =
F | | | | | |  2025-09-04 08:24:31.078588907 UTC , thread_cap_info = ("ThreadId 116",
F | | | | | |  0, False)}
F | | | | | |  
| | | | | F |  
| | | | S   |  
| | F |     |  
| |   F     |  
| S         |  
F           |  
            S  
