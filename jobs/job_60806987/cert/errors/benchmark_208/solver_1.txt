[Info] pool sizes (success) 4 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 14 seen 8 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 356 length 1437
CNF 356 vars 1437 clauses
last 349 length 1351
CNF 349 vars 1351 clauses
last 353 length 1395
CNF 353 vars 1395 clauses
last 434 length 1731
CNF 434 vars 1731 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1502, clauses: 5292
last 1502 length 5292
CNF 1502 vars 5292 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1502, clauses: 5292, status: Unsatisfied, time: 0.044258837s
last 683 length 2719
last 807 length 3283
CNF 683 vars 2719 clauses
CNF 807 vars 3283 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2508, clauses: 9823
last 2508 length 9823
CNF 2508 vars 9823 clauses
[Info] pool sizes (success) 53656 seen 32854 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2508, clauses: 9823, status: Unsatisfied, time: 0.795119082s
**************************************************
summary
**************************************************
SRS with 4 strict rules and 2 weak rules on 3 letters       looping derivation
from
  [a, a, a, a, c, c, a, c, a, c]
to
  [a, a, a, a, c, c, a, c, a, c]
via 9 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, c, c] -> [c, c, a] {- Input 0 -}
  [a, b, b] -> [b, b, a] {- Input 1 -}
  [a, a, c] -> [b, b, a] {- Input 2 -}
  [b, c, a] -> [a, c, c] {- Input 3 -}
  [a, c, a] ->= [a, c, b] {- Input 4 -}
  [b, a, a] ->= [a, a, a] {- Input 5 -}
reason
  Nontermination
    Derive   { from = [a, a, a, a, c, c, a, c, a, c], via = [(Step   { rule = 2, position = 2}, [a, a, b, b, a, c, a, c, a, c]), (Step   { rule = 4, position = 4}, [a, a, b, b, a, c, b, c, a, c]), (Step   { rule = 3, position = 6}, [a, a, b, b, a, c, a, c, c, c]), (Step   { rule = 1, position = 1}, [a, b, b, a, a, c, a, c, c, c]), (Step   { rule = 1, position = 0}, [b, b, a, a, a, c, a, c, c, c]), (Step   { rule = 5, position = 1}, [b, a, a, a, a, c, a, c, c, c]), (Step   { rule = 0, position = 6}, [b, a, a, a, a, c, c, c, a, c]), (Step   { rule = 0, position = 4}, [b, a, a, a, c, c, a, c, a, c]), (Step   { rule = 5, position = 0}, [a, a, a, a, c, c, a, c, a, c])], to = [a, a, a, a, c, c, a, c, a, c]}

**************************************************
skeleton: (4/2,3)\Loop{9}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.799728164000
  min duration 1.799728164000
  total durat. 1.799728164000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 36}
    , self = 72
    , parent = Nothing
    , duration = 1.799728164000
    , status = Fail
    , start = 2025-09-04 08:21:33.815995221 UTC
    , finish = 2025-09-04 08:21:35.615723385 UTC
    , thread_cap_info = ("ThreadId 145", 3, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.696545834000
  min duration 0.006020516000
  total durat. 1.702566350000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 36}
    , self = 71
    , parent = Nothing
    , duration = 1.696545834000
    , status = Success
    , start = 2025-09-04 08:21:33.414437231 UTC
    , finish = 2025-09-04 08:21:35.110983065 UTC
    , thread_cap_info = ("ThreadId 92", 3, False)}
**************************************************
S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S      , closure = Backward\n , start_strict_only = True\n , max_closure_length
S      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 4 ,
S      num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
S      = 36} , self = 71 , parent = Nothing , duration = 1.696545834000 , status
S      = Success , start = 2025-09-04 08:21:33.414437231 UTC , finish = 2025-09-04
S      08:21:35.110983065 UTC , thread_cap_info = ("ThreadId 92", 3, False)}
S      
| F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F    = 4 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| F    = 36} , self = 68 , parent = Nothing , duration = 0.278937001000 , status
| F    = Fail , start = 2025-09-04 08:21:33.479402959 UTC , finish = 2025-09-04
| F    08:21:33.75833996 UTC , thread_cap_info = ("ThreadId 133", 3, False)}
| F    
| | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F  = 4 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| | F  = 36} , self = 66 , parent = Nothing , duration = 0.247276108000 , status
| | F  = Fail , start = 2025-09-04 08:21:33.495360372 UTC , finish = 2025-09-04
| | F  08:21:33.74263648 UTC , thread_cap_info = ("ThreadId 134", 3, False)}
| | F  
| | F  
| F    
| F    Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| F    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| F    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| F    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| F    , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| F    = 3 , total_length = 36} , self = 72 , parent = Nothing , duration = 1.799728164000
| F    , status = Fail , start = 2025-09-04 08:21:33.815995221 UTC , finish =
| F    2025-09-04 08:21:35.615723385 UTC , thread_cap_info = ("ThreadId 145",
| F    3, False)}
| F    
S |    
  F    
