last 694 length 2775
CNF 694 vars 2775 clauses
last 726 length 2945
last 938 length 3829
CNF 726 vars 2945 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9006
last 1086 length 4385
CNF 938 vars 3829 clauses
last 9439 length 39949
last 9109 length 38470
last 2513 length 9006
last 10345 length 43651
last 10575 length 45960
CNF 1086 vars 4385 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9552, clauses: 39975
CNF 9439 vars 39949 clauses
last 11430 length 48653
CNF 9109 vars 38470 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3205, clauses: 11635
last 12437 length 54245
CNF 2513 vars 9006 clauses
CNF 10345 vars 43651 clauses
CNF 10575 vars 45960 clauses
last 9552 length 39975
CNF 11430 vars 48653 clauses
last 3205 length 11635
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11139, clauses: 46613
CNF 12437 vars 54245 clauses

CNF 9552 vars 39975 clauses
CNF 3205 vars 11635 clauses
last 11139 length 46613
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9006, status: Unsatisfied, time: 0.535947665s
summary
**************************************************
SRS with 2 strict rules and 3 weak rules on 3 letters       strictify
SRS with 5 rules on 3 letters       split
2 sub-proofs
  1 SRS with 5 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 45 rules on 9 letters       Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3205, clauses: 11635, status: Satisfied, time: 0.13709124s
Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 11 rules on 9 letters       weights
  SRS with 0 rules on 0 letters       no strict rules

  2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, c] -> [b, c, c] {- Input 0 -}
  [c, a, c] -> [b, b, a] {- Input 1 -}
  [b, b, b] ->= [c, c, a] {- Input 2 -}
  [c, b, a] ->= [b, a, a] {- Input 3 -}
  [c, c, c] ->= [b, c, a] {- Input 4 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, c, c] -> [b, c, c] {- Input 0 -}
  [c, a, c] -> [b, b, a] {- Input 1 -}
  [b, b, b] -> [c, c, a] {- Strictified (Input 2) -}
  [c, b, a] -> [b, a, a] {- Strictified (Input 3) -}
  [c, c, c] -> [b, c, a] {- Strictified (Input 4) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, c] -> [b, c, c] {- Input 0 -}
  [c, a, c] -> [b, b, a] {- Input 1 -}
  [b, b, b] -> [c, c, a] {- Strictified (Input 2) -}
  [c, b, a] -> [b, a, a] {- Strictified (Input 3) -}
  [c, c, c] -> [b, c, a] {- Strictified (Input 4) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, b] , [b, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, b] , [b, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, b] , [b, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, c] , [c, c] , [c, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, c] , [c, c] , [c, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, c] , [c, c] , [c, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, c] , [c, c] , [c, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, c] , [c, c] , [c, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, c] , [c, c] , [c, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, c] , [c, c] , [c, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, c] , [c, c] , [c, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, c] , [c, c] , [c, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, c], [c, b], [b, a], [a, a]] -> [ [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, a], [a, a]] -> [ [c, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, c], [c, b], [b, a], [a, a]] -> [ [b, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, c], [c, c], [c, a]] -> [ [c, b] , [b, c] , [c, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, b] , [b, c] , [c, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, c], [c, c], [c, b]] -> [ [c, b] , [b, c] , [c, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, b] , [b, c] , [c, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, b] , [b, c] , [c, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, b] , [b, c] , [c, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
reason
  ( [a, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, c] , [c, c] , [c, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, c] , [c, c] , [c, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
reason
  ([a, a], 2/1)
  ([a, b], 2/1)
  ([a, c], 1/1)
  ([b, a], 2/1)
  ([b, b], 2/1)
  ([b, c], 0/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/3,3)\Strictify(5,3)\Split[(5,3)\TileAllAll{2}(45,9)\Matrix{\Natural}{2}(11,9)\Weight(0,0)[],(0,0)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 11139 vars 46613 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.831100838000
  min duration 0.239743831000
  total durat. 1.669257953000
**************************************************
S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S          = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
S          = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S          = 360} , self = 60 , parent = Nothing , duration = 0.859098057000 , status
S          = Success , start = 2025-09-04 08:21:18.360711382 UTC , finish = 2025-09-04
S          08:21:19.219809439 UTC , thread_cap_info = ("ThreadId 66", 2, False)}
S          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| F        = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 360} , self = 59 , parent = Nothing , duration = 0.831100838000 , status
| F        = Fail , start = 2025-09-04 08:21:18.367210077 UTC , finish = 2025-09-04
| F        08:21:19.198310915 UTC , thread_cap_info = ("ThreadId 68", 2, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F      = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | F      = 36} , self = 56 , parent = Nothing , duration = 0.239743831000 , status
| | F      = Fail , start = 2025-09-04 08:21:18.430125906 UTC , finish = 2025-09-04
| | F      08:21:18.669869737 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F    = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F    = 48} , self = 57 , parent = Nothing , duration = 0.494633967000 , status
| | | F    = Fail , start = 2025-09-04 08:21:18.435740943 UTC , finish = 2025-09-04
| | | F    08:21:18.93037491 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F  = 48} , self = 58 , parent = Nothing , duration = 0.598413284000 , status
| | | | F  = Fail , start = 2025-09-04 08:21:18.435744117 UTC , finish = 2025-09-04
| | | | F  08:21:19.034157401 UTC , thread_cap_info = ("ThreadId 95", 0, False)}
| | | | F  
| | F | |  
| |   F |  
| |     F  
| F        
S          
