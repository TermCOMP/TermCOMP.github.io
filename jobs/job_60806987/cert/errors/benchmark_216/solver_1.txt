last 476 length 1925
CNF 476 vars 1925 clauses
last 576 length 2309
CNF 576 vars 2309 clauses
last 5436 length 23928
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510
last 1811 length 6510
CNF 5436 vars 23928 clauses
CNF 1811 vars 6510 clauses
last 526 length 2089
last 5123 length 21658
last 478 length 1915
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510, status: Satisfied, time: 0.063644437s
CNF 526 vars 2089 clauses
last 1622 length 6786
last 1777 length 7703
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5638, clauses: 23419
last 6254 length 26670
last 7231 length 31647
last 5505 length 23484
last 6316 length 27247
CNF 1622 vars 6786 clauses
CNF 1777 vars 7703 clauses
CNF 6254 vars 26670 clauses
CNF 6316 vars 27247 clauses
CNF 7231 vars 31647 clauses
**************************************************
CNF 5505 vars 23484 clauses
summary
**************************************************
SRS with 6 strict rules and 1 weak rules on 3 letters       weights
SRS with 3 rules on 3 letters       DP
SRS with 7 strict rules and 3 weak rules on 6 letters       weights
SRS with 2 strict rules and 3 weak rules on 5 letters       EDG
SRS with 2 strict rules and 3 weak rules on 5 letters       Usable
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, a] -> [c, b, b] {- Input 0 -}
  [b, a, c] -> [b, b, c] {- Input 1 -}
  [c, c, c] -> [b, c, c] {- Input 2 -}
  [a, c, a] -> [b, c, b] {- Input 3 -}
  [b, c, b] -> [c, b, c] {- Input 4 -}
  [a, c, b] -> [b, a, c] {- Input 5 -}
  [b, b, a] ->= [c, b, b] {- Input 6 -}
reason
  (a, 1/1)
  (b, 0/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [c, c, c] -> [b, c, c] {- Input 2 -}
  [b, c, b] -> [c, b, c] {- Input 4 -}
  [a, c, b] -> [b, a, c] {- Input 5 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
  [a, c, b] ->= [b, a, c] {- DP Nontop (Input 5) -}
  [a#, c, b] |-> [a#, c] {- DP (Top 1) (Input 5) -}
  [a#, c, b] |-> [b#, a, c] {- DP (Top 0) (Input 5) -}
  [a#, c, b] |-> [c#] {- DP (Top 2) (Input 5) -}
  [b#, c, b] |-> [b#, c] {- DP (Top 1) (Input 4) -}
  [b#, c, b] |-> [c#] {- DP (Top 2) (Input 4) -}
  [b#, c, b] |-> [c#, b, c] {- DP (Top 0) (Input 4) -}
  [c#, c, c] |-> [b#, c, c] {- DP (Top 0) (Input 2) -}
reason
  (a, 0/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
  [a, c, b] ->= [b, a, c] {- DP Nontop (Input 5) -}
  [b#, c, b] |-> [c#, b, c] {- DP (Top 0) (Input 4) -}
  [c#, c, c] |-> [b#, c, c] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, b] |-> [c#, b, c] {- DP (Top 0) (Input 4) -}
  [c#, c, c] |-> [b#, c, c] {- DP (Top 0) (Input 2) -}
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
  [a, c, b] ->= [b, a, c] {- DP Nontop (Input 5) -}
reason
  remove un-usable
    SRS
      [a, c, b] ->= [b, a, c] {- DP Nontop (Input 5) -}
   property Termination
has value Just True
for SRS
  [b#, c, b] |-> [c#, b, c] {- DP (Top 0) (Input 4) -}
  [c#, c, c] |-> [b#, c, c] {- DP (Top 0) (Input 2) -}
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
reason
  ( b
  , Wk  / 6A 6A 9A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 6A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 1A 4A 4A - \
        | 1A 4A 4A - |
        | 1A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c#, c, c] |-> [b#, c, c] {- DP (Top 0) (Input 2) -}
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
reason
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [c, c, c] ->= [b, c, c] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Input 4) -}
reason
  EDG

**************************************************
skeleton: (6/1,3)\Weight(3,3)\Deepee(7/3,6)\Weight\EDG(2/3,5)\Usable(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E            = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
E            = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
E            = 192} , self = 68 , parent = Nothing , duration = 0.189393246000 , status
E            = Except "AsyncCancelled" , start = 2025-09-04 08:21:26.87060009 UTC ,
E            finish = 2025-09-04 08:21:27.059993336 UTC , thread_cap_info = ("ThreadId
E            69", 2, False)}
E            
| S          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S          = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| S          = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| S          = 192} , self = 57 , parent = Nothing , duration = 0.179291666000 , status
| S          = Success , start = 2025-09-04 08:21:26.870601463 UTC , finish = 2025-09-04
| S          08:21:27.049893129 UTC , thread_cap_info = ("ThreadId 71", 2, False)}
| S          
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | S        = 4 , total_length = 24} , self = 72 , parent = Nothing , duration = 0.251830420000
| | S        , status = Success , start = 2025-09-04 08:21:26.97380905 UTC , finish
| | S        = 2025-09-04 08:21:27.22563947 UTC , thread_cap_info = ("ThreadId 98",
| | S        0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | E      = 4 , total_length = 24} , self = 74 , parent = Nothing , duration = 0.232439706000
| | | E      , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:26.993932925
| | | E      UTC , finish = 2025-09-04 08:21:27.226372631 UTC , thread_cap_info = ("ThreadId
| | | E      101", 0, False)}
| | | E      
| | | | E    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | E    = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | E    = 24} , self = 77 , parent = Nothing , duration = 0.200459623000 , status
| | | | E    = Except "AsyncCancelled" , start = 2025-09-04 08:21:27.026181175 UTC ,
| | | | E    finish = 2025-09-04 08:21:27.226640798 UTC , thread_cap_info = ("ThreadId
| | | | E    103", 0, False)}
| | | | E    
| | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | S  = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | S  = 24} , self = 75 , parent = Nothing , duration = 0.192594475000 , status
| | | | | S  = Success , start = 2025-09-04 08:21:27.033888992 UTC , finish = 2025-09-04
| | | | | S  08:21:27.226483467 UTC , thread_cap_info = ("ThreadId 104", 0, False)}
| | | | | S  
| S | | | |  
E   | | | |  
    S | | |  
      E | |  
        | S  
        E    
