[Info] pool sizes (success) 5 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 368 length 1505
[Info] pool sizes (success) 4 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 420 length 1677
CNF 368 vars 1505 clauses
last 368 length 1505
CNF 420 vars 1677 clauses
CNF 368 vars 1505 clauses
last 420 length 1677
last 2374 length 10195
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1400, clauses: 4950
CNF 420 vars 1677 clauses
last 1400 length 4950
CNF 1400 vars 4950 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1400, clauses: 4950
last 1400 length 4950
CNF 1400 vars 4950 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1400, clauses: 4950, status: Unsatisfied, time: 0.090063434s
last 2230 length 9639
last 787 length 3143
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4452, clauses: 18325
last 635 length 2571
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1400, clauses: 4950, status: Unsatisfied, time: 0.166585908s
**************************************************last 2154 length 9087
last 2306 length 9745
last 2770 length 12219

last 4452 length 18325
CNF 635 vars 2571 clauses
CNF 787 vars 3143 clauses
CNF 2230 vars 9639 clauses
CNF 2154 vars 9087 clauses
CNF 2306 vars 9745 clauses
summaryCNF 2770 vars 12219 clauses

CNF 4452 vars 18325 clauses
**************************************************
SRS with 3 strict rules and 3 weak rules on 3 letters       split
2 sub-proofs
  1 SRS with 4 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 36 strict rules and 18 weak rules on 9 letters       weights
  SRS with 0 strict rules and 12 weak rules on 8 letters       no strict rules

  2 SRS with 0 strict rules and 2 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, c, c] -> [a, c, b] {- Input 0 -}
  [c, a, a] -> [c, b, b] {- Input 1 -}
  [a, b, a] -> [c, b, a] {- Input 2 -}
  [a, b, c] ->= [a, a, c] {- Input 3 -}
  [c, a, a] ->= [c, a, b] {- Input 4 -}
  [a, b, c] ->= [c, c, c] {- Input 5 -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, c] -> [a, c, b] {- Input 0 -}
  [c, a, a] -> [c, b, b] {- Input 1 -}
  [a, b, a] -> [c, b, a] {- Input 2 -}
  [a, b, c] ->= [a, a, c] {- Input 3 -}
  [c, a, a] ->= [c, a, b] {- Input 4 -}
  [a, b, c] -> [c, c, c] {- Input 5 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[b, c], [c, a], [a, a], [a, b]] -> [ [b, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, c], [c, a], [a, a], [a, c]] -> [ [b, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, c], [c, a], [a, a], [a, a]] -> [ [b, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, c], [c, a], [a, a], [a, b]] -> [ [c, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, c], [c, a], [a, a], [a, c]] -> [ [c, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, c], [c, a], [a, a], [a, a]] -> [ [c, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c], [c, a], [a, a], [a, b]] -> [ [a, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, a], [a, a], [a, c]] -> [ [a, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, a], [a, a], [a, a]] -> [ [a, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[b, a], [a, b], [b, c], [c, b]] ->= [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, c], [c, c]] ->= [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, c], [c, a]] ->= [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, b]] ->= [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, c]] ->= [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, a]] ->= [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, b]] ->= [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, c]] ->= [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, a]] ->= [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[b, c], [c, a], [a, a], [a, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[b, c], [c, a], [a, a], [a, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[b, c], [c, a], [a, a], [a, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[c, c], [c, a], [a, a], [a, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, c], [c, a], [a, a], [a, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, c], [c, a], [a, a], [a, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[a, c], [c, a], [a, a], [a, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[a, c], [c, a], [a, a], [a, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[a, c], [c, a], [a, a], [a, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[b, a], [a, b], [b, c], [c, b]] -> [ [b, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[b, a], [a, b], [b, c], [c, c]] -> [ [b, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[b, a], [a, b], [b, c], [c, a]] -> [ [b, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 5)) -}
  [[c, a], [a, b], [b, c], [c, b]] -> [ [c, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[c, a], [a, b], [b, c], [c, c]] -> [ [c, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
  [[c, a], [a, b], [b, c], [c, a]] -> [ [c, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 5)) -}
  [[a, a], [a, b], [b, c], [c, b]] -> [ [a, c] , [c, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
  [[a, a], [a, b], [b, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 5)) -}
  [[a, a], [a, b], [b, c], [c, a]] -> [ [a, c] , [c, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 5)) -}
reason
  ([a, a], 12/1)
  ([a, b], 12/1)
  ([a, c], 0/1)
  ([b, a], 2/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 7/1)
  ([c, b], 2/1)
  ([c, c], 6/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, c], [c, b]] ->= [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, c], [c, c]] ->= [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, c], [c, a]] ->= [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, b]] ->= [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, c]] ->= [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, a], [a, b], [b, c], [c, a]] ->= [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, b]] ->= [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, c]] ->= [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, a], [a, b], [b, c], [c, a]] ->= [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[b, c], [c, a], [a, a], [a, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[c, c], [c, a], [a, a], [a, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[a, c], [c, a], [a, a], [a, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, b, c] ->= [a, a, c] {- Input 3 -}
  [c, a, a] ->= [c, a, b] {- Input 4 -}
reason
  no strict rules

**************************************************
skeleton: (3/3,3)\Split[(4/2,3)\TileAllAll{2}(36/18,9)\Weight(0/12,8)[],(0/2,3)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E        = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
E        = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
E        = 68 , parent = Nothing , duration = 0.209833363000 , status = Except "AsyncCancelled"
E        , start = 2025-09-04 08:21:32.720246358 UTC , finish = 2025-09-04 08:21:32.930079721
E        UTC , thread_cap_info = ("ThreadId 20", 0, False)}
E        
| E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| E      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| E      = 96} , self = 64 , parent = Nothing , duration = 0.149963105000 , status
| E      = Except "AsyncCancelled" , start = 2025-09-04 08:21:32.721924094 UTC ,
| E      finish = 2025-09-04 08:21:32.871887199 UTC , thread_cap_info = ("ThreadId
| E      74", 1, False)}
| E      
| | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | E    = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | E    = 96} , self = 65 , parent = Nothing , duration = 0.149976148000 , status
| | E    = Except "AsyncCancelled" , start = 2025-09-04 08:21:32.721928286 UTC ,
| | E    finish = 2025-09-04 08:21:32.871904434 UTC , thread_cap_info = ("ThreadId
| | E    76", 1, False)}
| | E    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F  = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | F  = 18} , self = 67 , parent = Nothing , duration = 0.145818658000 , status
| | | F  = Fail , start = 2025-09-04 08:21:32.731774962 UTC , finish = 2025-09-04
| | | F  08:21:32.87759362 UTC , thread_cap_info = ("ThreadId 63", 3, False)}
| | | F  
| E | |  
|   E |  
|     F  
E        
