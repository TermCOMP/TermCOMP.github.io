last 1183 length 4883
last 806 length 3241
last 1067 length 4231
CNF 1183 vars 4883 clauses
CNF 1067 vars 4231 clauses
last 900 length 3627
CNF 900 vars 3627 clauses
CNF 806 vars 3241 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3037, clauses: 11149
last 3037 length 11149
CNF 3037 vars 11149 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 8907
last 2459 length 8907
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3037, clauses: 11149, status: Satisfied, time: 0.09113641s
last 10368 length 44286
CNF 2459 vars 8907 clauses
CNF 10368 vars 44286 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9300, clauses: 38909
last 9300 length 38909
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 8907, status: Satisfied, time: 0.161558666s
CNF 9300 vars 38909 clauses
last 941 length 3771
CNF 941 vars 3771 clauses
last 11729 length 50220
last 1009 length 4129
CNF 11729 vars 50220 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2756, clauses: 10062
CNF 1009 vars 4129 clauses
last 2756 length 10062
CNF 2756 vars 10062 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2756, clauses: 10062, status: Satisfied, time: 0.054698246s
**************************************************
summary
**************************************************
SRS with 3 strict rules and 3 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 10 strict rules and 6 weak rules on 5 letters       weights
SRS with 2 strict rules and 6 weak rules on 4 letters       EDG
SRS with 1 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b] -> [c, a, c] {- Input 0 -}
  [b, a, c] -> [b, b, a] {- Input 1 -}
  [a, a, b] -> [c, a, c] {- Input 2 -}
  [b, c, b] ->= [c, b, a] {- Input 3 -}
  [b, c, b] ->= [b, a, b] {- Input 4 -}
  [c, b, b] ->= [a, c, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, b] -> [c, a, c] {- Input 0 -}
  [b, a, c] -> [b, b, a] {- Input 1 -}
  [a, a, b] -> [c, a, c] {- Input 2 -}
  [b, c, b] -> [c, b, a] {- Strictified (Input 3) -}
  [b, c, b] -> [b, a, b] {- Strictified (Input 4) -}
  [c, b, b] -> [a, c, b] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, a] -> [c, a, c] {- Mirror (Input 0) -}
  [c, a, b] -> [a, b, b] {- Mirror (Input 1) -}
  [b, a, a] -> [c, a, c] {- Mirror (Input 2) -}
  [b, c, b] -> [a, b, c] {- Mirror (Strictified (Input 3)) -}
  [b, c, b] -> [b, a, b] {- Mirror (Strictified (Input 4)) -}
  [b, b, c] -> [b, c, a] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, c, b] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b#, a, a] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, a, a] |-> [c#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a] |-> [c#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, b, a] |-> [c#, a, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, c] |-> [b#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, b, c] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [b#, c, b] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b#, c, b] |-> [b#, c] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [b#, c, b] |-> [c#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [c#, a, b] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (c, 2/1)
  (b#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, c, b] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b#, b, c] |-> [b#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, c, b] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b, c] |-> [b#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b, b, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, c, b] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b#
  , Wk  / 22A 22A 24A - \
        | 22A 22A 24A - |
        | 22A 22A 24A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, b, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, c, b] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [b, c, b] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (3/3,3)\Strictify\Mirror(6,3)\Deepee(10/6,5)\Weight(2/6,4)\EDG(1/6,4)\Matrix{\Arctic}{3}(0/6,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
F            = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F            = 432} , self = 76 , parent = Nothing , duration = 0.456462085000 , status
F            = Fail , start = 2025-09-04 08:21:19.028493166 UTC , finish = 2025-09-04
F            08:21:19.484955251 UTC , thread_cap_info = ("ThreadId 76", 2, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 432} , self = 68 , parent = Nothing , duration = 0.362871037000 , status
| F          = Fail , start = 2025-09-04 08:21:19.033418797 UTC , finish = 2025-09-04
| F          08:21:19.396289834 UTC , thread_cap_info = ("ThreadId 78", 2, False)}
| F          
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | S        = 4 , total_length = 42} , self = 69 , parent = Nothing , duration = 0.339131796000
| | S        , status = Success , start = 2025-09-04 08:21:19.085242186 UTC , finish
| | S        = 2025-09-04 08:21:19.424373982 UTC , thread_cap_info = ("ThreadId 101",
| | S        0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | E      = 4 , total_length = 42} , self = 72 , parent = Nothing , duration = 0.383925711000
| | | E      , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.09248037
| | | E      UTC , finish = 2025-09-04 08:21:19.476406081 UTC , thread_cap_info = ("ThreadId
| | | E      102", 0, False)}
| | | E      
| | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S    = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | S    = 5 , total_length = 54} , self = 61 , parent = Nothing , duration = 0.142979619000
| | | | S    last 10813 length 47109
, status = Success , start = 2025-09-04 08:21:19.112467842 UTC , finish
| | | | S    = 2025-09-04 08:21:19.255447461 UTC , thread_cap_info = ("ThreadId 100",
| | | | S    0, False)}
| | | | S    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | | E  = 5 , total_length = 54} , self = 63 , parent = Nothing , duration = 0.226204013000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.163620651
| | | | | E  UTC , finish = 2025-09-04 08:21:19.389824664 UTC , thread_cap_info = ("ThreadId
| | | | | E  105", 0, False)}
| | | | | E  
| | | | S |  
| | | |   E  
| F | |      
|   S |      
|     E      
F            
CNF 10813 vars 47109 clauses
