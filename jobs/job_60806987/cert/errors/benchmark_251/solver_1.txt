last 9624 length 41281
CNF 9624 vars 41281 clauses
last 628 length 2559
last 650 length 2607
CNF 650 vars 2607 clauses
CNF 628 vars 2559 clauses
last 9328 length 41332
last 8894 length 38091
CNF 8894 vars 38091 clauses
last 1029 length 4197
last 8088 length 35829
CNF 9328 vars 41332 clauses
last 1007 length 4023
CNF 1029 vars 4197 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 11931 length 51444
CNF 8088 vars 35829 clauses
last 12248 length 53801
[Info] pool sizes (success) 1556 seen 927 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 1007 vars 4023 clauses
last 1306 length 5147
last 941 length 3813
last 1610 length 6585
last 783 length 3103
CNF 11931 vars 51444 clauses
**************************************************CNF 12248 vars 53801 clauses

last 9624 length 41281
last 9328 length 41332
CNF 1306 vars 5147 clauses
CNF 941 vars 3813 clauses
CNF 1610 vars 6585 clauses
last 9864 length 42043
CNF 783 vars 3103 clauses
last 15449 length 66508
CNF 9624 vars 41281 clauses
summary
CNF 9328 vars 41332 clauses
CNF 9864 vars 42043 clauses
CNF 15449 vars 66508 clauses
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       looping derivation
from
  [b, a, a, b, a, b, b, a, a]
to
  [b, a, a, b, a, b, b, a, a]
via 23 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [b, b, a] -> [b, a, a] {- Input 0 -}
  [c, c, a] -> [c, b, c] {- Input 1 -}
  [c, b, c] ->= [b, a, a] {- Input 2 -}
  [c, c, c] ->= [c, a, a] {- Input 3 -}
  [a, b, b] ->= [b, c, c] {- Input 4 -}
  [c, a, a] ->= [b, a, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just False
for SRS
  [b, b, a] -> [b, a, a] {- Input 0 -}
  [c, c, a] -> [c, b, c] {- Input 1 -}
  [c, b, c] -> [b, a, a] {- Strictified (Input 2) -}
  [c, c, c] -> [c, a, a] {- Strictified (Input 3) -}
  [a, b, b] -> [b, c, c] {- Strictified (Input 4) -}
  [c, a, a] -> [b, a, b] {- Strictified (Input 5) -}
reason
  Nontermination
    Derive   { from = [b, a, a, b, a, b, b, a, a], via = [(Step   { rule = 4, position = 4}, [b, a, a, b, b, c, c, a, a]), (Step   { rule = 4, position = 2}, [b, a, b, c, c, c, c, a, a]), (Step   { rule = 1, position = 5}, [b, a, b, c, c, c, b, c, a]), (Step   { rule = 3, position = 3}, [b, a, b, c, a, a, b, c, a]), (Step   { rule = 5, position = 3}, [b, a, b, b, a, b, b, c, a]), (Step   { rule = 0, position = 2}, [b, a, b, a, a, b, b, c, a]), (Step   { rule = 4, position = 4}, [b, a, b, a, b, c, c, c, a]), (Step   { rule = 3, position = 5}, [b, a, b, a, b, c, a, a, a]), (Step   { rule = 5, position = 5}, [b, a, b, a, b, b, a, b, a]), (Step   { rule = 4, position = 3}, [b, a, b, b, c, c, a, b, a]), (Step   { rule = 1, position = 4}, [b, a, b, b, c, b, c, b, a]), (Step   { rule = 4, position = 1}, [b, b, c, c, c, b, c, b, a]), (Step   { rule = 3, position = 2}, [b, b, c, a, a, b, c, b, a]), (Step   { rule = 5, position = 2}, [b, b, b, a, b, b, c, b, a]), (Step   { rule = 0, position = 1}, [b, b, a, a, b, b, c, b, a]), (Step   { rule = 4, position = 3}, [b, b, a, b, c, c, c, b, a]), (Step   { rule = 3, position = 4}, [b, b, a, b, c, a, a, b, a]), (Step   { rule = 5, position = 4}, [b, b, a, b, b, a, b, b, a]), (Step   { rule = 0, position = 3}, [b, b, a, b, a, a, b, b, a]), (Step   { rule = 4, position = 5}, [b, b, a, b, a, b, c, c, a]), (Step   { rule = 0, position = 0}, [b, a, a, b, a, b, c, c, a]), (Step   { rule = 1, position = 6}, [b, a, a, b, a, b, c, b, c]), (Step   { rule = 2, position = 6}, [b, a, a, b, a, b, b, a, a])], to = [b, a, a, b, a, b, b, a, a]}

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Loop{23}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                = 24} , self = 85 , parent = Nothing , duration = 0.682120252000 , status
E                = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.872410798 UTC ,
E                finish = 2025-09-04 08:21:19.55453105 UTC , thread_cap_info = ("ThreadId
E                34", 0, False)}
E                
| E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E              = 24} , self = 74 , parent = Nothing , duration = 0.661245247000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.885049425 UTC ,
| E              finish = 2025-09-04 08:21:19.546294672 UTC , thread_cap_info = ("ThreadId
| E              60", 1, False)}
| E              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 288} , self = 57 , parent = Nothing , duration = 0.477451432000 , status
| | F            = Fail , start = 2025-09-04 08:21:18.885698565 UTC , finish = 2025-09-04
| | F            08:21:19.363149997 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
| | F            
| | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | E          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | E          = 288} , self = 104 , parent = Nothing , duration = 0.683311240000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.903151821 UTC ,
| | | E          finish = 2025-09-04 08:21:19.586463061 UTC , thread_cap_info = ("ThreadId
| | | E          69", 1, False)}
| | | E          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | | F        = 312} , self = 52 , parent = Nothing , duration = 0.361615468000 , status
| | | | F        = Fail , start = 2025-09-04 08:21:18.903864053 UTC , finish = 2025-09-04
| | | | F        08:21:19.265479521 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | | | F        
| | | | | S      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | | S      = 3 , num_top_rules = 3 , num_weak_rules = 36 , alphabet_size = 10 , total_length
| | | | | S      = 312} , self = 58 , parent = Nothing , duration = 0.510869363000 , status
| | | | | S      = Success , start = 2025-09-04 08:21:18.923514258 UTC , finish = 2025-09-04
| | | | | S      08:21:19.434383621 UTC , thread_cap_info = ("ThreadId 81", 3, False)}
| | | | | S      
| | | | F |      
| | | | F |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F |      = 39 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 36 ,
| | | | F |      alphabet_size = 10 , total_length = 312} , self = 61 , parent = Nothing
| | | | F |      , duration = 0.169590231000 , status = Fail , start = 2025-09-04 08:21:19.285611772
| | | | F |      UTC , finish = 2025-09-04 08:21:19.455202003 UTC , thread_cap_info = ("ThreadId
| | | | F |      102", 3, False)}
| | | | F |      
| | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | S    = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | S    = 48} , self = 95 , parent = Nothing , duration = 0.258237525000 , status
| | | | | | S    = Success , start = 2025-09-04 08:21:19.3058373 UTC , finish = 2025-09-04
| | | | | | S    08:21:19.564074825 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| | | | | | S    
| | | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | F  = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | | | | | | F  = 4 , total_length = 30} , self = 60 , parent = Nothing , duration = 0.110747927000
| | | | | | | F  , status = Fail , start = 2025-09-04 08:21:19.3444232 UTC , finish = 2025-09-04
| | | | | | | F  08:21:19.455171127 UTC , thread_cap_info = ("ThreadId 107", 0, False)}
| | | | | | | F  
| | F | | | | |  
| |   | | S | |  
| |   | |   | F  
| |   | F   |    
| | S |     |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | S |     |    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | S |     |    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | S |     |    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | S |     |    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | S |     |    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | S |     |    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | S |     |    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | S |     |    = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | S |     |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | S |     |    = 36} , self = 105 , parent = Nothing , duration = 0.178406000000 , status
| | S |     |    = Success , start = 2025-09-04 08:21:19.463263328 UTC , finish = 2025-09-04
| | S |     |    08:21:19.641669328 UTC , thread_cap_info = ("ThreadId 136", 0, False)}
| | S |     |    
| E | |     |    
E   | |     |    
    | |     S    
    | E          
    S            
