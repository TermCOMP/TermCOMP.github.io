last 9544 length 40520
CNF 9544 vars 40520 clauses
last 8239 length 35043
last 8745 length 37918
CNF 8239 vars 35043 clauses
CNF 8745 vars 37918 clauses
last 7959 length 34402
last 6338 length 26290
last 834 length 3295
CNF 7959 vars 34402 clauses
last 902 length 3733
CNF 6338 vars 26290 clauses
CNF 834 vars 3295 clauses
last 1273 length 5245
last 1237 length 4953
CNF 902 vars 3733 clauses
last 9544 length 40520
last 9583 length 41710
last 8745 length 37918
last 212 length 839
last 204 length 829
last 8239 length 35043
CNF 1273 vars 5245 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2498, clauses: 9099
CNF 1237 vars 4953 clauses
CNF 9544 vars 40520 clauses
CNF 9583 vars 41710 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9010, clauses: 37665
CNF 212 vars 839 clauses
CNF 8745 vars 37918 clauses
CNF 204 vars 829 clauses
last 2498 length 9099
CNF 8239 vars 35043 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3715, clauses: 13738
last 9010 length 37665
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11266, clauses: 47053
CNF 2498 vars 9099 clauses
last 3715 length 13738
**************************************************last 9583 length 41710

last 9544 length 40520
CNF 9010 vars 37665 clauses
last 11266 length 47053
CNF 3715 vars 13738 clauses
CNF 9583 vars 41710 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2498, clauses: 9099, status: Satisfied, time: 0.392991809s
summaryCNF 9544 vars 40520 clauses
CNF 11266 vars 47053 clauses

Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9010, clauses: 37665, status: Satisfied, time: 0.347051433s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3715, clauses: 13738, status: Satisfied, time: 0.223069271s
last 8745 length 37918
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       cleaner
SRS with 2 strict rules and 3 weak rules on 3 letters       strictify
SRS with 5 rules on 3 letters       split
2 sub-proofs
  1 SRS with 4 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 36 strict rules and 9 weak rules on 9 letters       weights
  SRS with 30 strict rules and 4 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 12 strict rules and 4 weak rules on 9 letters       weights
  SRS with 0 strict rules and 1 weak rules on 4 letters       no strict rules

  2 SRS with 1 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 1 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 9 rules on 8 letters       weights
    SRS with 1 rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, a, c] -> [c, c, b] {- Input 0 -}
  [c, c, c] -> [b, c, c] {- Input 1 -}
  [b, c, a] ->= [a, c, b] {- Input 2 -}
  [a, b, a] ->= [c, a, a] {- Input 3 -}
  [b, c, b] ->= [b, c, b] {- Input 4 -}
  [c, b, a] ->= [c, a, a] {- Input 5 -}
reason
  cleaner
   property Termination
has value Just True
for SRS
  [c, a, c] -> [c, c, b] {- Input 0 -}
  [c, c, c] -> [b, c, c] {- Input 1 -}
  [b, c, a] ->= [a, c, b] {- Input 2 -}
  [a, b, a] ->= [c, a, a] {- Input 3 -}
  [c, b, a] ->= [c, a, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, a, c] -> [c, c, b] {- Input 0 -}
  [c, c, c] -> [b, c, c] {- Input 1 -}
  [b, c, a] -> [a, c, b] {- Strictified (Input 2) -}
  [a, b, a] -> [c, a, a] {- Strictified (Input 3) -}
  [c, b, a] -> [c, a, a] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, a, c] -> [c, c, b] {- Input 0 -}
  [c, c, c] -> [b, c, c] {- Input 1 -}
  [b, c, a] ->= [a, c, b] {- Strictified (Input 2) -}
  [a, b, a] -> [c, a, a] {- Strictified (Input 3) -}
  [c, b, a] -> [c, a, a] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}last 8239 length 35043

  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[c, c], [c, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 2/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 2/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b, c, a] -> [a, c, b] {- Strictified (Input 2) -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, a] -> [a, c, b] {- Strictified (Input 2) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
reason
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Cleaner(2/3,3)\Strictify(5,3)\Split[(4/1,3)\TileAllAll{2}(36/9,9)\Weight(30/4,9)\Matrix{\Natural}{2}(12/4,9)\Weight(0/1,4)[],(1,3)\Split[(1,3)\TileAllAll{2}(9,8)\Weight(1,4)\Matrix{\Natural}{2}(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 8745 vars 37918 clauses
CNF 8239 vars 35043 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.633689336000
  min duration 0.261618901000
  total durat. 1.801504433000
Success : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.629429094000
  min duration 0.172677706000
  total durat. 1.178155452000
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.646158660000
  min duration 0.263297334000
  total durat. 1.250573543000
**************************************************
E                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                    , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E                    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E                    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E                    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E                    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E                    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                    = 6} , self = 67 , parent = Nothing , duration = 0.118820784000 , status
E                    = Except "AsyncCancelled" , start = 2025-09-04 07:32:42.592174421 UTC ,
E                    finish = 2025-09-04 07:32:42.710995205 UTC , thread_cap_info = ("ThreadId
E                    80", 3, False)}
E                    
| F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                  = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
| F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                  = 30} , self = 76 , parent = Nothing , duration = 0.244348264000 , status
| F                  = Fail , start = 2025-09-04 07:32:42.622801051 UTC , finish = 2025-09-04
| F                  07:32:42.867149315 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
| F                  
| | E                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E                = False\n , verbose = False}" , input_size = Size { num_rules = 40 , num_strict_rules
| | E                = 6 , num_top_rules = 6 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | E                = 320} , self = 83 , parent = Nothing , duration = 0.228269225000 , status
| | E                = Except "AsyncCancelled" , start = 2025-09-04 07:32:42.662845673 UTC ,
| | E                finish = 2025-09-04 07:32:42.891114898 UTC , thread_cap_info = ("ThreadId
| | E                120", 3, False)}
| | E                
| | | S              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | S              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S              = False\n , verbose = False}" , input_size = Size { num_rules = 40 , num_strict_rules
| | | S              = 6 , num_top_rules = 6 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | | S              = 320} , self = 74 , parent = Nothing , duration = 0.172677706000 , status
| | | S              = Success , start = 2025-09-04 07:32:42.68299933 UTC , finish = 2025-09-04
| | | S              07:32:42.855677036 UTC , thread_cap_info = ("ThreadId 121", 3, False)}
| | | S              
E | | |              
S | | |              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S | | |              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S | | |              = False\n , verbose = False}" , input_size = Size { num_rules = 34 , num_strict_rules
S | | |              = 34 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S | | |              = 272} , self = 100 , parent = Nothing , duration = 0.301389884000 , status
S | | |              = Success , start = 2025-09-04 07:32:42.72329459 UTC , finish = 2025-09-04
S | | |              07:32:43.024684474 UTC , thread_cap_info = ("ThreadId 131", 0, False)}
S | | |              
| | | | E            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 34 , num_strict_rules
| | | | E            = 34 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | E            = 272} , self = 105 , parent = Nothing , duration = 0.341117549000 , status
| | | | E            = Except "AsyncCancelled" , start = 2025-09-04 07:32:42.743453977 UTC ,
| | | | E            finish = 2025-09-04 07:32:43.084571526 UTC , thread_cap_info = ("ThreadId
| | | | E            133", 0, False)}
| | | | E            
| | | | | S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S          = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | S          = 3 , num_top_rules = 3 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | | | | S          = 296} , self = 98 , parent = Nothing , duration = 0.261618901000 , status
| | | | | S          = Success , start = 2025-09-04 07:32:42.743488037 UTC , finish = 2025-09-04
| | | | | S          07:32:43.005106938 UTC , thread_cap_info = ("ThreadId 138", 3, False)}
| | | | | S          
| | | | | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | | | E        = 3 , num_top_rules = 3 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | | | | | E        = 296} , self = 102 , parent = Nothing , duration = 0.263297334000 , status
| | | | | | E        = Except "AsyncCancelled" , start = 2025-09-04 07:32:42.764265128 UTC ,
| | | | | | E        finish = 2025-09-04 07:32:43.027562462 UTC , thread_cap_info = ("ThreadId
| | | | | | E        139", 3, False)}
| | | | | | E        
| | | S | | |        
| F |   | | |        
|   E   | | |        
| S     | | |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S     | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S     | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 40 , num_strict_rules
| S     | | |        = 6 , num_top_rules = 6 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| S     | | |        = 320} , self = 124 , parent = Nothing , duration = 0.629429094000 , status
| S     | | |        = Success , start = 2025-09-04 07:32:42.956825842 UTC , finish = 2025-09-04
| S     | | |        07:32:43.586254936 UTC , thread_cap_info = ("ThreadId 167", 3, False)}
| S     | | |        
| | F   | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F   | | |        = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | F   | | |        = 42} , self = 121 , parent = Nothing , duration = 0.326749347000 , status
| | F   | | |        = Fail , start = 2025-09-04 07:32:42.964881491 UTC , finish = 2025-09-04
| | F   | | |        07:32:43.291630838 UTC , thread_cap_info = ("ThreadId 162", 0, False)}
| | F   | | |        
| | | S | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 40 , num_strict_rules
| | | S | | |        = 6 , num_top_rules = 6 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | | S | | |        = 320} , self = 126 , parent = Nothing , duration = 0.633689336000 , status
| | | S | | |        = Success , start = 2025-09-04 07:32:42.985856777 UTC , finish = 2025-09-04
| | | S | | |        07:32:43.619546113 UTC , thread_cap_info = ("ThreadId 166", 3, False)}
| | | S | | |        
| | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | | | | F      = 42} , self = 117 , parent = Nothing , duration = 0.279480718000 , status
| | | | | | | F      = Fail , start = 2025-09-04 07:32:42.985998264 UTC , finish = 2025-09-04
| | | | | | | F      07:32:43.265478982 UTC , thread_cap_info = ("ThreadId 169", 0, False)}
| | | | | | | F      
| | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | F    = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 6 , total_length
| | | | | | | | F    = 60} , self = 122 , parent = Nothing , duration = 0.478975140000 , status
| | | | | | | | F    = Fail , start = 2025-09-04 07:32:43.002804702 UTC , finish = 2025-09-04
| | | | | | | | F    07:32:43.481779842 UTC , thread_cap_info = ("ThreadId 173", 0, False)}
| | | | | | | | F    
| | | | | S | | |    
| | | | | F | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | F | | |    = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 6 , total_length
| | | | | F | | |    = 60} , self = 123 , parent = Nothing , duration = 0.461290422000 , status
| | | | | F | | |    = Fail , start = 2025-09-04 07:32:43.024230371 UTC , finish = 2025-09-04
| | | | | F | | |    07:32:43.485520793 UTC , thread_cap_info = ("ThreadId 176", 0, False)}
| | | | | F | | |    
S | | | | | | | |    
  | | | | | E | |    
  | | | E |   | |    
S | | |   |   | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S | | |   |   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S | | |   |   | |    = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
S | | |   |   | |    = 3 , num_top_rules = 3 , num_weak_rules = 34 , alphabet_size = 10 , total_length
S | | |   |   | |    = 296} , self = 138 , parent = Nothing , duration = 0.604806312000 , status
S | | |   |   | |    = Success , start = 2025-09-04 07:32:43.104158686 UTC , finish = 2025-09-04
S | | |   |   | |    07:32:43.708964998 UTC , thread_cap_info = ("ThreadId 183", 3, False)}
S | | |   |   | |    
| | | | E |   | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E |   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E |   | |    = False\n , verbose = False}" , input_size = Size { num_rules = 37 , num_strict_rules
| | | | E |   | |    = 3 , num_top_rules = 3 , num_weak_rules = 34 , alphabet_size = 10 , total_length
| | | | E |   | |    = 296} , self = 140 , parent = Nothing , duration = 0.646158660000 , status
| | | | E |   | |    = Except "AsyncCancelled" , start = 2025-09-04 07:32:43.122804792 UTC ,
| | | | E |   | |    finish = 2025-09-04 07:32:43.768963452 UTC , thread_cap_info = ("ThreadId
| | | | E |   | |    184", 3, False)}
| | | | E |   | |    
| | | | | | E | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E | |    = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | | | E | |    = 1 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | E | |    = 8} , self = 136 , parent = Nothing , duration = 0.440800036000 , status
| | | | | | E | |    = Except "AsyncCancelled" , start = 2025-09-04 07:32:43.263722117 UTC ,
| | | | | | E | |    finish = 2025-09-04 07:32:43.704522153 UTC , thread_cap_info = ("ThreadId
| | | | | | E | |    200", 3, False)}
| | | | | | E | |    
| | | | | | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | | | | | | S  = 1 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | | | | S  = 8} , self = 132 , parent = Nothing , duration = 0.376048652000 , status
| | | | | | | | | S  = Success , start = 2025-09-04 07:32:43.263724838 UTC , finish = 2025-09-04
| | | | | | | | | S  07:32:43.63977349 UTC , thread_cap_info = ("ThreadId 202", 3, False)}
| | | | | | | | | S  
| | | | | | | F | |  
| | F | | | |   | |  
| |   | | | |   F |  
| |   | | F |     |  
| S   | |   |     |  
|     S |   |     |  
|       |   |     S  
|       |   E        
S       |            
        E            
