last 851 length 3411
last 1494 length 6131
CNF 851 vars 3411 clauses
last 819 length 3285
CNF 1494 vars 6131 clauses
last 1562 length 6349
CNF 819 vars 3285 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2552, clauses: 9207
last 11002 length 46159
last 11828 length 49607
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4463, clauses: 16458
CNF 1562 vars 6349 clauses
last 12599 length 53036
last 2552 length 9207
last 12134 length 51475
last 17272 length 76465
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9886, clauses: 41403
CNF 11002 vars 46159 clauses
CNF 11828 vars 49607 clauses
last 17323 length 73420
last 4463 length 16458
CNF 2552 vars 9207 clauses
CNF 12599 vars 53036 clauses
CNF 12134 vars 51475 clauses
last 9886 length 41403
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14562, clauses: 61031
CNF 17272 vars 76465 clauses
CNF 17323 vars 73420 clauses
CNF 4463 vars 16458 clauses
last 14562 length 61031
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2552, clauses: 9207, status: Unsatisfied, time: 0.547993323s
CNF 9886 vars 41403 clauses
CNF 14562 vars 61031 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6010, clauses: 24592
last 6010 length 24592
CNF 6010 vars 24592 clauses
[Info] pool sizes (success) 108614 seen 68428 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 5 strict rules and 1 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       looping derivation
from
  [a, b, b, b, b, a, c, c, a, b, b, a, a]
to
  [a, b, b, b, b, a, c, c, a, b, b, a, a]
via 154 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, b, c] -> [b, a, c] {- Input 0 -}
  [a, b, c] -> [a, b, b] {- Input 1 -}
  [c, b, c] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [c, a, c] {- Input 3 -}
  [c, c, a] -> [b, c, b] {- Input 4 -}
  [b, b, b] ->= [c, a, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just False
for SRS
  [a, b, c] -> [b, a, c] {- Input 0 -}
  [a, b, c] -> [a, b, b] {- Input 1 -}
  [c, b, c] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [c, a, c] {- Input 3 -}
  [c, c, a] -> [b, c, b] {- Input 4 -}
  [b, b, b] -> [c, a, a] {- Strictified (Input 5) -}
reason
  Nontermination
    Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4463, clauses: 16458, status: Unsatisfied, time: 0.655938139s
Derive   { from = [a, b, b, b, b, a, c, c, a, b, b, a, a], via = [(Step   { rule = 4, position = 6}, [a, b, b, b, b, a, b, c, b, b, b, a, a]), (Step   { rule = 5, position = 8}, [a, b, b, b, b, a, b, c, c, a, a, a, a]), (Step   { rule = 0, position = 5}, [a, b, b, b, b, b, a, c, c, a, a, a, a]), (Step   { rule = 4, position = 7}, [a, b, b, b, b, b, a, b, c, b, a, a, a]), (Step   { rule = 3, position = 9}, [a, b, b, b, b, b, a, b, c, c, a, c, a]), (Step   { rule = 0, position = 6}, [a, b, b, b, b, b, b, a, c, c, a, c, a]), (Step   { rule = 4, position = 8}, [a, b, b, b, b, b, b, a, b, c, b, c, a]), (Step   { rule = 2, position = 9}, [a, b, b, b, b, b, b, a, b, c, a, b, a]), (Step   { rule = 0, position = 7}, [a, b, b, b, b, b, b, b, a, c, a, b, a]), (Step   { rule = 5, position = 5}, [a, b, b, b, b, c, a, a, a, c, a, b, a]), (Step   { rule = 5, position = 2}, [a, b, c, a, a, c, a, a, a, c, a, b, a]), (Step   { rule = 1, position = 0}, [a, b, b, a, a, c, a, a, a, c, a, b, a]), (Step   { rule = 3, position = 2}, [a, b, c, a, c, c, a, a, a, c, a, b, a]), (Step   { rule = 4, position = 4}, [a, b, c, a, b, c, b, a, a, c, a, b, a]), (Step   { rule = 3, position = 6}, [a, b, c, a, b, c, c, a, c, c, a, b, a]), (Step   { rule = 4, position = 8}, [a, b, c, a, b, c, c, a, b, c, b, b, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, b, c, c, a, b, b, b, b, a]), (Step   { rule = 5, position = 9}, [a, b, c, a, b, c, c, a, b, c, a, a, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, b, c, c, a, b, b, a, a, a]), (Step   { rule = 3, position = 9}, [a, b, c, a, b, c, c, a, b, c, a, c, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, b, c, c, a, b, b, a, c, a]), (Step   { rule = 4, position = 5}, [a, b, c, a, b, b, c, b, b, b, a, c, a]), (Step   { rule = 5, position = 7}, [a, b, c, a, b, b, c, c, a, a, a, c, a]), (Step   { rule = 4, position = 6}, [a, b, c, a, b, b, b, c, b, a, a, c, a]), (Step   { rule = 3, position = 8}, [a, b, c, a, b, b, b, c, c, a, c, c, a]), (Step   { rule = 4, position = 7}, [a, b, c, a, b, b, b, b, c, b, c, c, a]), (Step   { rule = 2, position = 8}, [a, b, c, a, b, b, b, b, c, a, b, c, a]), (Step   { rule = 1, position = 9}, [a, b, c, a, b, b, b, b, c, a, b, b, a]), (Step   { rule = 5, position = 5}, [a, b, c, a, b, c, a, a, c, a, b, b, a]), (Step   { rule = 1, position = 3}, [a, b, c, a, b, b, a, a, c, a, b, b, a]), (Step   { rule = 3, position = 5}, [a, b, c, a, b, c, a, c, c, a, b, b, a]), (Step   { rule = 4, position = 7}, [a, b, c, a, b, c, a, b, c, b, b, b, a]), (Step   { rule = 5, position = 9}, [a, b, c, a, b, c, a, b, c, c, a, a, a]), (Step   { rule = 0, position = 6}, [a, b, c, a, b, c, b, a, c, c, a, a, a]), (Step   { rule = 4, position = 8}, [a, b, c, a, b, c, b, a, b, c, b, a, a]), (Step   { rule = 3, position = 10}, [a, b, c, a, b, c, b, a, b, c, c, a, c]), (Step   { rule = 0, position = 7}, [a, b, c, a, b, c, b, b, a, c, c, a, c]), (Step   { rule = 4, position = 9}, [a, b, c, a, b, c, b, b, a, b, c, b, c]), (Step   { rule = 2, position = 10}, [a, b, c, a, b, c, b, b, a, b, c, a, b]), (Step   { rule = 0, position = 8}, [a, b, c, a, b, c, b, b, b, a, c, a, b]), (Step   { rule = 5, position = 6}, [a, b, c, a, b, c, c, a, a, a, c, a, b]), (Step   { rule = 0, position = 3}, [a, b, c, b, a, c, c, a, a, a, c, a, b]), (Step   { rule = 4, position = 5}, [a, b, c, b, a, b, c, b, a, a, c, a, b]), (Step   { rule = 3, position = 7}, [a, b, c, b, a, b, c, c, a, c, c, a, b]), (Step   { rule = 4, position = 9}, [a, b, c, b, a, b, c, c, a, b, c, b, b]), (Step   { rule = 1, position = 8}, [a, b, c, b, a, b, c, c, a, b, b, b, b]), (Step   { rule = 5, position = 10}, [a, b, c, b, a, b, c, c, a, b, c, a, a]), (Step   { rule = 1, position = 8}, [a, b, c, b, a, b, c, c, a, b, b, a, a]), (Step   { rule = 3, position = 10}, [a, b, c, b, a, b, c, c, a, b, c, a, c]), (Step   { rule = 1, position = 8}, [a, b, c, b, a, b, c, c, a, b, b, a, c]), (Step   { rule = 0, position = 4}, [a, b, c, b, b, a, c, c, a, b, b, a, c]), (Step   { rule = 4, position = 6}, [a, b, c, b, b, a, b, c, b, b, b, a, c]), (Step   { rule = 5, position = 8}, [a, b, c, b, b, a, b, c, c, a, a, a, c]), (Step   { rule = 0, position = 5}, [a, b, c, b, b, b, a, c, c, a, a, a, c]), (Step   { rule = 5, position = 3}, [a, b, c, c, a, a, a, c, c, a, a, a, c]), (Step   { rule = 4, position = 2}, [a, b, b, c, b, a, a, c, c, a, a, a, c]), (Step   { rule = 3, position = 4}, [a, b, b, c, c, a, c, c, c, a, a, a, c]), (Step   { rule = 4, position = 3}, [a, b, b, b, c, b, c, c, c, a, a, a, c]), (Step   { rule = 2, position = 4}, [a, b, b, b, c, a, b, c, c, a, a, a, c]), (Step   { rule = 0, position = 5}, [a, b, b, b, c, b, a, c, c, a, a, a, c]), (Step   { rule = 4, position = 7}, [a, b, b, b, c, b, a, b, c, b, a, a, c]), (Step   { rule = 3, position = 9}, [a, b, b, b, c, b, a, b, c, c, a, c, c]), (Step   { rule = 0, position = 6}, [a, b, b, b, c, b, b, a, c, c, a, c, c]), (Step   { rule = 4, position = 8}, [a, b, b, b, c, b, b, a, b, c, b, c, c]), (Step   { rule = 2, position = 9}, [a, b, b, b, c, b, b, a, b, c, a, b, c]), (Step   { rule = 1, position = 10}, [a, b, b, b, c, b, b, a, b, c, a, b, b]), (Step   { rule = 0, position = 7}, [a, b, b, b, c, b, b, b, a, c, a, b, b]), (Step   { rule = 5, position = 5}, [a, b, b, b, c, c, a, a, a, c, a, b, b]), (Step   { rule = 4, position = 4}, [a, b, b, b, b, c, b, a, a, c, a, b, b]), (Step   { rule = 3, position = 6}, [a, b, b, b, b, c, c, a, c, c, a, b, b]), (Step   { rule = 4, position = 8}, [a, b, b, b, b, c, c, a, b, c, b, b, b]), (Step   { rule = 5, position = 10}, [a, b, b, b, b, c, c, a, b, c, c, a, a]), (Step   { rule = 4, position = 5}, [a, b, b, b, b, b, c, b, b, c, c, a, a]), (Step   { rule = 5, position = 2}, [a, b, c, a, a, b, c, b, b, c, c, a, a]), (Step   { rule = 1, position = 4}, [a, b, c, a, a, b, b, b, b, c, c, a, a]), (Step   { rule = 5, position = 5}, [a, b, c, a, a, c, a, a, b, c, c, a, a]), (Step   { rule = 0, position = 7}, [a, b, c, a, a, c, a, b, a, c, c, a, a]), (Step   { rule = 4, position = 9}, [a, b, c, a, a, c, a, b, a, b, c, b, a]), (Step   { rule = 0, position = 8}, [a, b, c, a, a, c, a, b, b, a, c, b, a]), (Step   { rule = 1, position = 0}, [a, b, b, a, a, c, a, b, b, a, c, b, a]), (Step   { rule = 3, position = 2}, [a, b, c, a, c, c, a, b, b, a, c, b, a]), (Step   { rule = 4, position = 4}, [a, b, c, a, b, c, b, b, b, a, c, b, a]), (Step   { rule = 5, position = 6}, [a, b, c, a, b, c, c, a, a, a, c, b, a]), (Step   { rule = 0, position = 3}, [a, b, c, b, a, c, c, a, a, a, c, b, a]), (Step   { rule = 4, position = 5}, [a, b, c, b, a, b, c, b, a, a, c, b, a]), (Step   { rule = 3, position = 7}, [a, b, c, b, a, b, c, c, a, c, c, b, a]), (Step   { rule = 0, position = 4}, [a, b, c, b, b, a, c, c, a, c, c, b, a]), (Step   { rule = 4, position = 6}, [a, b, c, b, b, a, b, c, b, c, c, b, a]), (Step   { rule = 2, position = 7}, [a, b, c, b, b, a, b, c, a, b, c, b, a]), (Step   { rule = 1, position = 8}, [a, b, c, b, b, a, b, c, a, b, b, b, a]), (Step   { rule = 5, position = 9}, [a, b, c, b, b, a, b, c, a, c, a, a, a]), (Step   { rule = 0, position = 5}, [a, b, c, b, b, b, a, c, a, c, a, a, a]), (Step   { rule = 5, position = 3}, [a, b, c, c, a, a, a, c, a, c, a, a, a]), (Step   { rule = 4, position = 2}, [a, b, b, c, b, a, a, c, a, c, a, a, a]), (Step   { rule = 3, position = 4}, [a, b, b, c, c, a, c, c, a, c, a, a, a]), (Step   { rule = 4, position = 6}, [a, b, b, c, c, a, b, c, b, c, a, a, a]), (Step   { rule = 2, position = 7}, [a, b, b, c, c, a, b, c, a, b, a, a, a]), (Step   { rule = 3, position = 9}, [a, b, b, c, c, a, b, c, a, c, a, c, a]), (Step   { rule = 1, position = 5}, [a, b, b, c, c, a, b, b, a, c, a, c, a]), (Step   { rule = 4, position = 3}, [a, b, b, b, c, b, b, b, a, c, a, c, a]), (Step   { rule = 5, position = 5}, [a, b, b, b, c, c, a, a, a, c, a, c, a]), (Step   { rule = 4, position = 4}, [a, b, b, b, b, c, b, a, a, c, a, c, a]), (Step   { rule = 3, position = 6}, [a, b, b, b, b, c, c, a, c, c, a, c, a]), (Step   { rule = 4, position = 8}, [a, b, b, b, b, c, c, a, b, c, b, c, a]), (Step   { rule = 2, position = 9}, [a, b, b, b, b, c, c, a, b, c, a, b, a]), (Step   { rule = 4, position = 5}, [a, b, b, b, b, b, c, b, b, c, a, b, a]), (Step   { rule = 5, position = 2}, [a, b, c, a, a, b, c, b, b, c, a, b, a]), (Step   { rule = 1, position = 4}, [a, b, c, a, a, b, b, b, b, c, a, b, a]), (Step   { rule = 5, position = 6}, [a, b, c, a, a, b, c, a, a, c, a, b, a]), (Step   { rule = 1, position = 4}, [a, b, c, a, a, b, b, a, a, c, a, b, a]), (Step   { rule = 3, position = 6}, [a, b, c, a, a, b, c, a, c, c, a, b, a]), (Step   { rule = 4, position = 8}, [a, b, c, a, a, b, c, a, b, c, b, b, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, a, b, c, a, b, b, b, b, a]), (Step   { rule = 5, position = 9}, [a, b, c, a, a, b, c, a, b, c, a, a, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, a, b, c, a, b, b, a, a, a]), (Step   { rule = 3, position = 9}, [a, b, c, a, a, b, c, a, b, c, a, c, a]), (Step   { rule = 0, position = 7}, [a, b, c, a, a, b, c, b, a, c, a, c, a]), (Step   { rule = 1, position = 4}, [a, b, c, a, a, b, b, b, a, c, a, c, a]), (Step   { rule = 5, position = 5}, [a, b, c, a, a, c, a, a, a, c, a, c, a]), (Step   { rule = 1, position = 0}, [a, b, b, a, a, c, a, a, a, c, a, c, a]), (Step   { rule = 3, position = 2}, [a, b, c, a, c, c, a, a, a, c, a, c, a]), (Step   { rule = 4, position = 4}, [a, b, c, a, b, c, b, a, a, c, a, c, a]), (Step   { rule = 3, position = 6}, [a, b, c, a, b, c, c, a, c, c, a, c, a]), (Step   { rule = 4, position = 8}, [a, b, c, a, b, c, c, a, b, c, b, c, a]), (Step   { rule = 2, position = 9}, [a, b, c, a, b, c, c, a, b, c, a, b, a]), (Step   { rule = 1, position = 7}, [a, b, c, a, b, c, c, a, b, b, a, b, a]), (Step   { rule = 4, position = 5}, [a, b, c, a, b, b, c, b, b, b, a, b, a]), (Step   { rule = 5, position = 7}, [a, b, c, a, b, b, c, c, a, a, a, b, a]), (Step   { rule = 4, position = 6}, [a, b, c, a, b, b, b, c, b, a, a, b, a]), (Step   { rule = 3, position = 8}, [a, b, c, a, b, b, b, c, c, a, c, b, a]), (Step   { rule = 4, position = 7}, [a, b, c, a, b, b, b, b, c, b, c, b, a]), (Step   { rule = 5, position = 5}, [a, b, c, a, b, c, a, a, c, b, c, b, a]), (Step   { rule = 1, position = 3}, [a, b, c, a, b, b, a, a, c, b, c, b, a]), (Step   { rule = 3, position = 5}, [a, b, c, a, b, c, a, c, c, b, c, b, a]), (Step   { rule = 0, position = 3}, [a, b, c, b, a, c, a, c, c, b, c, b, a]), (Step   { rule = 1, position = 0}, [a, b, b, b, a, c, a, c, c, b, c, b, a]), (Step   { rule = 2, position = 8}, [a, b, b, b, a, c, a, c, c, a, b, b, a]), (Step   { rule = 4, position = 7}, [a, b, b, b, a, c, a, b, c, b, b, b, a]), (Step   { rule = 5, position = 9}, [a, b, b, b, a, c, a, b, c, c, a, a, a]), (Step   { rule = 0, position = 6}, [a, b, b, b, a, c, b, a, c, c, a, a, a]), (Step   { rule = 4, position = 8}, [a, b, b, b, a, c, b, a, b, c, b, a, a]), (Step   { rule = 3, position = 10}, [a, b, b, b, a, c, b, a, b, c, c, a, c]), (Step   { rule = 0, position = 7}, [a, b, b, b, a, c, b, b, a, c, c, a, c]), (Step   { rule = 4, position = 9}, [a, b, b, b, a, c, b, b, a, b, c, b, c]), (Step   { rule = 0, position = 8}, [a, b, b, b, a, c, b, b, b, a, c, b, c]), (Step   { rule = 5, position = 6}, [a, b, b, b, a, c, c, a, a, a, c, b, c]), (Step   { rule = 4, position = 5}, [a, b, b, b, a, b, c, b, a, a, c, b, c]), (Step   { rule = 3, position = 7}, [a, b, b, b, a, b, c, c, a, c, c, b, c]), (Step   { rule = 0, position = 4}, [a, b, b, b, b, a, c, c, a, c, c, b, c]), (Step   { rule = 2, position = 10}, [a, b, b, b, b, a, c, c, a, c, c, a, b]), (Step   { rule = 4, position = 9}, [a, b, b, b, b, a, c, c, a, b, c, b, b]), (Step   { rule = 1, position = 8}, [a, b, b, b, b, a, c, c, a, b, b, b, b]), (Step   { rule = 5, position = 10}, [a, b, b, b, b, a, c, c, a, b, c, a, a]), (Step   { rule = 1, position = 8}, [a, b, b, b, b, a, c, c, a, b, b, a, a])], to = [a, b, b, b, b, a, c, c, a, b, b, a, a]}

**************************************************
skeleton: (5/1,3)\Strictify(6,3)\Loop{154}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.343674904000
  min duration 0.060840129000
  total durat. 3.669390921000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 60
    , parent = Nothing
    , duration = 1.105756329000
    , status = Fail
    , start = 2025-09-04 08:24:23.496535219 UTC
    , finish = 2025-09-04 08:24:24.602291548 UTC
    , thread_cap_info = ("ThreadId 67", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 72
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 54
      , alphabet_size = 12
      , total_length = 576}
    , self = 65
    , parent = Nothing
    , duration = 1.343674904000
    , status = Fail
    , start = 2025-09-04 08:24:23.578012988 UTC
    , finish = 2025-09-04 08:24:24.921687892 UTC
    , thread_cap_info = ("ThreadId 95", 1, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.204688373000
  min duration 0.496244697000
  total durat. 4.562081377000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 59
    , parent = Nothing
    , duration = 1.083620819000
    , status = Fail
    , start = 2025-09-04 08:24:23.496541628 UTC
    , finish = 2025-09-04 08:24:24.580162447 UTC
    , thread_cap_info = ("ThreadId 69", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 72
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 54
      , alphabet_size = 12
      , total_length = 576}
    , self = 64
    , parent = Nothing
    , duration = 1.204688373000
    , status = Fail
    , start = 2025-09-04 08:24:23.579614577 UTC
    , finish = 2025-09-04 08:24:24.78430295 UTC
    , thread_cap_info = ("ThreadId 96", 1, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.124692586000
  min duration 1.124692586000
  total durat. 1.124692586000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 6
      , alphabet_size = 4
      , total_length = 42}
    , self = 63
    , parent = Nothing
    , duration = 1.124692586000
    , status = Fail
    , start = 2025-09-04 08:24:23.639698933 UTC
    , finish = 2025-09-04 08:24:24.764391519 UTC
    , thread_cap_info = ("ThreadId 101", 2, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.525561331000
  min duration 1.525561331000
  total durat. 1.525561331000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 66
    , parent = Nothing
    , duration = 1.525561331000
    , status = Success
    , start = 2025-09-04 08:24:23.487267815 UTC
    , finish = 2025-09-04 08:24:25.012829146 UTC
    , thread_cap_info = ("ThreadId 36", 2, False)}
**************************************************
S                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S                      , closure = Backward\n , start_strict_only = True\n , max_closure_length
S                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S                      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
S                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S                      = 36} , self = 66 , parent = Nothing , duration = 1.525561331000 , status
S                      = Success , start = 2025-09-04 08:24:23.487267815 UTC , finish = 2025-09-04
S                      08:24:25.012829146 UTC , thread_cap_info = ("ThreadId 36", 2, False)}
S                      
| F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F                    = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                    = 432} , self = 60 , parent = Nothing , duration = 1.105756329000 , status
| F                    = Fail , start = 2025-09-04 08:24:23.496535219 UTC , finish = 2025-09-04
| F                    08:24:24.602291548 UTC , thread_cap_info = ("ThreadId 67", 0, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | F                  = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F                  = 432} , self = 59 , parent = Nothing , duration = 1.083620819000 , status
| | F                  = Fail , start = 2025-09-04 08:24:23.496541628 UTC , finish = 2025-09-04
| | F                  08:24:24.580162447 UTC , thread_cap_info = ("ThreadId 69", 0, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F                = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | F                = 42} , self = 57 , parent = Nothing , duration = 0.496244697000 , status
| | | F                = Fail , start = 2025-09-04 08:24:23.566355232 UTC , finish = 2025-09-04
| | | F                08:24:24.062599929 UTC , thread_cap_info = ("ThreadId 88", 2, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F              = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | | F              = 72} , self = 56 , parent = Nothing , duration = 0.176213949000 , status
| | | | F              = Fail , start = 2025-09-04 08:24:23.566359187 UTC , finish = 2025-09-04
| | | | F              08:24:23.742573136 UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 72 , num_strict_rules
| | | | | F            = 18 , num_top_rules = 18 , num_weak_rules = 54 , alphabet_size = 12 ,
| | | | | F            total_length = 576} , self = 65 , parent = Nothing , duration = 1.343674904000
| | | | | F            , status = Fail , start = 2025-09-04 08:24:23.578012988 UTC , finish =
| | | | | F            2025-09-04 08:24:24.921687892 UTC , thread_cap_info = ("ThreadId 95", 1,
| | | | | F            False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 72 , num_strict_rules
| | | | | | F          = 18 , num_top_rules = 18 , num_weak_rules = 54 , alphabet_size = 12 ,
| | | | | | F          total_length = 576} , self = 64 , parent = Nothing , duration = 1.204688373000
| | | | | | F          , status = Fail , start = 2025-09-04 08:24:23.579614577 UTC , finish =
| | | | | | F          2025-09-04 08:24:24.78430295 UTC , thread_cap_info = ("ThreadId 96", 1,
| | | | | | F          False)}
| | | | | | F          
| | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | F        = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | | | | | F        = 72} , self = 58 , parent = Nothing , duration = 0.814985382000 , status
| | | | | | | F        = Fail , start = 2025-09-04 08:24:23.588885634 UTC , finish = 2025-09-04
| | | | | | | F        08:24:24.403871016 UTC , thread_cap_info = ("ThreadId 90", 2, False)}
| | | | | | | F        
| | | | | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | F      = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | | | | | | F      = 4 , total_length = 42} , self = 63 , parent = Nothing , duration = 1.124692586000
| | | | | | | | F      , status = Fail , start = 2025-09-04 08:24:23.639698933 UTC , finish =
| | | | | | | | F      2025-09-04 08:24:24.764391519 UTC , thread_cap_info = ("ThreadId 101",
| | | | | | | | F      2, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| | | | | | | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 54 , alphabet_size = 10 , total_length
| | | | | | | | | F    = 456} , self = 61 , parent = Nothing , duration = 0.982905610000 , status
| | | | | | | | | F    = Fail , start = 2025-09-04 08:24:23.67971744 UTC , finish = 2025-09-04
| | | | | | | | | F    08:24:24.66262305 UTC , thread_cap_info = ("ThreadId 103", 1, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| | | | | | | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 54 , alphabet_size = 10 , total_length
| | | | | | | | | | F  = 456} , self = 62 , parent = Nothing , duration = 0.962542106000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-04 08:24:23.720030229 UTC , finish = 2025-09-04
| | | | | | | | | | F  08:24:24.682572335 UTC , thread_cap_info = ("ThreadId 104", 1, False)}
| | | | | | | | | | F  
| | | | F | | | | | |  
| | | F   | | | | | |  
| | |     | | F | | |  
| | F     | |   | | |  
| F       | |   | | |  
|         | |   | F |  
|         | |   |   F  
|         | |   F      
|         | F          
|         F            
S                      
