last 1045 length 4163
last 1121 length 4561
CNF 1045 vars 4163 clauses
CNF 1121 vars 4561 clauses
last 979 length 4009
last 1087 length 4345
CNF 1087 vars 4345 clauses
CNF 979 vars 4009 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3329, clauses: 12276
last 3329 length 12276
CNF 3329 vars 12276 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3088, clauses: 11242
last 3088 length 11242
CNF 3088 vars 11242 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3329, clauses: 12276, status: Unsatisfied, time: 0.322547145s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10603, clauses: 44323
last 10603 length 44323
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3088, clauses: 11242, status: Unsatisfied, time: 0.269211342s
CNF 10603 vars 44323 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10551, clauses: 44113
last 10551 length 44113
CNF 10551 vars 44113 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6519, clauses: 26654
last 6519 length 26654
last 8682 length 36460
CNF 6519 vars 26654 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6429, clauses: 26217
CNF 8682 vars 36460 clauses
last 6429 length 26217
last 10019 length 42576
[Info] pool sizes (success) 47762 seen 28925 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 10019 vars 42576 clauses
**************************************************
summary
**************************************************
SRS with 3 strict rules and 2 weak rules on 3 letters       strictify
SRS with 5 rules on 3 letters       looping derivation
from
  [a, c, a, b, b, a, a, a, a, a, c, a]
to
  [a, c, a, b, b, a, a, a, a, a, c, a]
via 50 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, c, c] -> [b, b, a] {- Input 0 -}
  [b, c, b] -> [a, a, a] {- Input 1 -}
  [a, c, a] -> [a, a, a] {- Input 2 -}
  [a, a, b] ->= [c, b, a] {- Input 3 -}
  [b, a, a] ->= [a, a, c] {- Input 4 -}
reason
  strictify
   property Termination
has value Just False
for SRS
  [a, c, c] -> [b, b, a] {- Input 0 -}
  [b, c, b] -> [a, a, a] {- Input 1 -}
  [a, c, a] -> [a, a, a] {- Input 2 -}
  [a, a, b] -> [c, b, a] {- Strictified (Input 3) -}
  [b, a, a] -> [a, a, c] {- Strictified (Input 4) -}
reason
  Nontermination
    Derive   { from = [a, c, a, b, b, a, a, a, a, a, c, a], via = [(Step   { rule = 4, position = 4}, [a, c, a, b, a, a, c, a, a, a, c, a]), (Step   { rule = 4, position = 3}, [a, c, a, a, a, c, c, a, a, a, c, a]), (Step   { rule = 0, position = 4}, [a, c, a, a, b, b, a, a, a, a, c, a]), (Step   { rule = 4, position = 5}, [a, c, a, a, b, a, a, c, a, a, c, a]), (Step   { rule = 2, position = 6}, [a, c, a, a, b, a, a, a, a, a, c, a]), (Step   { rule = 3, position = 2}, [a, c, c, b, a, a, a, a, a, a, c, a]), (Step   { rule = 4, position = 3}, [a, c, c, a, a, c, a, a, a, a, c, a]), (Step   { rule = 0, position = 0}, [b, b, a, a, a, c, a, a, a, a, c, a]), (Step   { rule = 4, position = 1}, [b, a, a, c, a, c, a, a, a, a, c, a]), (Step   { rule = 4, position = 0}, [a, a, c, c, a, c, a, a, a, a, c, a]), (Step   { rule = 0, position = 1}, [a, b, b, a, a, c, a, a, a, a, c, a]), (Step   { rule = 4, position = 2}, [a, b, a, a, c, c, a, a, a, a, c, a]), (Step   { rule = 0, position = 3}, [a, b, a, b, b, a, a, a, a, a, c, a]), (Step   { rule = 4, position = 4}, [a, b, a, b, a, a, c, a, a, a, c, a]), (Step   { rule = 4, position = 3}, [a, b, a, a, a, c, c, a, a, a, c, a]), (Step   { rule = 0, position = 4}, [a, b, a, a, b, b, a, a, a, a, c, a]), (Step   { rule = 4, position = 5}, [a, b, a, a, b, a, a, c, a, a, c, a]), (Step   { rule = 4, position = 4}, [a, b, a, a, a, a, c, c, a, a, c, a]), (Step   { rule = 0, position = 5}, [a, b, a, a, a, b, b, a, a, a, c, a]), (Step   { rule = 4, position = 6}, [a, b, a, a, a, b, a, a, c, a, c, a]), (Step   { rule = 4, position = 5}, [a, b, a, a, a, a, a, c, c, a, c, a]), (Step   { rule = 0, position = 6}, [a, b, a, a, a, a, b, b, a, a, c, a]), (Step   { rule = 4, position = 7}, [a, b, a, a, a, a, b, a, a, c, c, a]), (Step   { rule = 0, position = 8}, [a, b, a, a, a, a, b, a, b, b, a, a]), (Step   { rule = 3, position = 4}, [a, b, a, a, c, b, a, a, b, b, a, a]), (Step   { rule = 3, position = 6}, [a, b, a, a, c, b, c, b, a, b, a, a]), (Step   { rule = 1, position = 5}, [a, b, a, a, c, a, a, a, a, b, a, a]), (Step   { rule = 3, position = 7}, [a, b, a, a, c, a, a, c, b, a, a, a]), (Step   { rule = 4, position = 8}, [a, b, a, a, c, a, a, c, a, a, c, a]), (Step   { rule = 4, position = 1}, [a, a, a, c, c, a, a, c, a, a, c, a]), (Step   { rule = 0, position = 2}, [a, a, b, b, a, a, a, c, a, a, c, a]), (Step   { rule = 4, position = 3}, [a, a, b, a, a, c, a, c, a, a, c, a]), (Step   { rule = 4, position = 2}, [a, a, a, a, c, c, a, c, a, a, c, a]), (Step   { rule = 0, position = 3}, [a, a, a, b, b, a, a, c, a, a, c, a]), (Step   { rule = 4, position = 4}, [a, a, a, b, a, a, c, c, a, a, c, a]), (Step   { rule = 0, position = 5}, [a, a, a, b, a, b, b, a, a, a, c, a]), (Step   { rule = 4, position = 6}, [a, a, a, b, a, b, a, a, c, a, c, a]), (Step   { rule = 4, position = 5}, [a, a, a, b, a, a, a, c, c, a, c, a]), (Step   { rule = 0, position = 6}, [a, a, a, b, a, a, b, b, a, a, c, a]), (Step   { rule = 4, position = 7}, [a, a, a, b, a, a, b, a, a, c, c, a]), (Step   { rule = 4, position = 6}, [a, a, a, b, a, a, a, a, c, c, c, a]), (Step   { rule = 0, position = 7}, [a, a, a, b, a, a, a, b, b, a, c, a]), (Step   { rule = 3, position = 5}, [a, a, a, b, a, c, b, a, b, a, c, a]), (Step   { rule = 3, position = 1}, [a, c, b, a, a, c, b, a, b, a, c, a]), (Step   { rule = 4, position = 2}, [a, c, a, a, c, c, b, a, b, a, c, a]), (Step   { rule = 0, position = 3}, [a, c, a, b, b, a, b, a, b, a, c, a]), (Step   { rule = 2, position = 9}, [a, c, a, b, b, a, b, a, b, a, a, a]), (Step   { rule = 4, position = 8}, [a, c, a, b, b, a, b, a, a, a, c, a]), (Step   { rule = 4, position = 6}, [a, c, a, b, b, a, a, a, c, a, c, a]), (Step   { rule = 2, position = 7}, [a, c, a, b, b, a, a, a, a, a, c, a])], to = [a, c, a, b, b, a, a, a, a, a, c, a]}

**************************************************
skeleton: (3/2,3)\Strictify(5,3)\Loop{50}[]
**************************************************
letCNF 6429 vars 26217 clauses
 {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 1.056829365000
  min duration 0.051123944000
  total durat. 1.165325886000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 45
      , num_strict_rules = 45
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 360}
    , self = 61
    , parent = Nothing
    , duration = 1.056829365000
    , status = Fail
    , start = 2025-09-04 07:32:36.480489316 UTC
    , finish = 2025-09-04 07:32:37.537318681 UTC
    , thread_cap_info = ("ThreadId 101", 1, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.272955239000
  min duration 1.272955239000
  total durat. 1.272955239000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 5
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 30}
    , self = 62
    , parent = Nothing
    , duration = 1.272955239000
    , status = Success
    , start = 2025-09-04 07:32:36.342336815 UTC
    , finish = 2025-09-04 07:32:37.615292054 UTC
    , thread_cap_info = ("ThreadId 36", 1, False)}
**************************************************
S        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S        , closure = Forward\n , start_strict_only = True\n , max_closure_length
S        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S        = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
S        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S        = 30} , self = 62 , parent = Nothing , duration = 1.272955239000 , status
S        = Success , start = 2025-09-04 07:32:36.342336815 UTC , finish = 2025-09-04
S        07:32:37.615292054 UTC , thread_cap_info = ("ThreadId 36", 1, False)}
S        
| F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F      = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| F      = 5 , total_length = 54} , self = 59 , parent = Nothing , duration = 0.388207232000
| F      , status = Fail , start = 2025-09-04 07:32:36.428513454 UTC , finish =
| F      2025-09-04 07:32:36.816720686 UTC , thread_cap_info = ("ThreadId 87", 3,
| F      False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | F    = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 360} , self = 61 , parent = Nothing , duration = 1.056829365000 , status
| | F    = Fail , start = 2025-09-04 07:32:36.480489316 UTC , finish = 2025-09-04
| | F    07:32:37.537318681 UTC , thread_cap_info = ("ThreadId 101", 1, False)}
| | F    
| | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | F  = 5 , total_length = 48} , self = 60 , parent = Nothing , duration = 0.446219126000
| | | F  , status = Fail , start = 2025-09-04 07:32:36.490875321 UTC , finish =
| | | F  2025-09-04 07:32:36.937094447 UTC , thread_cap_info = ("ThreadId 96", 3,
| | | F  False)}
| | | F  
| F | |  
|   | F  
|   F    
S        
