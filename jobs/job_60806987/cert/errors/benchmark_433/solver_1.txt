[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 112 length 495
last 451 length 1984
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 100 length 441
last 112 length 495
last 100 length 441
CNF 112 vars 495 clauses
last 196 length 801
last 536 length 2295
CNF 451 vars 1984 clauses
last 451 length 1984
last 536 length 2295
last 264 length 1076
CNF 100 vars 441 clauses
CNF 112 vars 495 clauses
last 2236 length 9437
last 2236 length 9437
CNF 100 vars 441 clauses
last 2283 length 9717
last 2283 length 9717
last 2236 length 9437
last 2283 length 9717
CNF 196 vars 801 clauses
CNF 536 vars 2295 clauses
CNF 451 vars 1984 clauses
CNF 536 vars 2295 clauses
CNF 264 vars 1076 clauses
CNF 2236 vars 9437 clauses
CNF 2236 vars 9437 clauses
CNF 2283 vars 9717 clauses
CNF 2283 vars 9717 clauses
CNF 2283 vars 9717 clauses
CNF 2236 vars 9437 clauses
last 1225 length 5154
last 1134 length 4911
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9503, clauses: 39177
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1286, clauses: 4753
**************************************************CNF 1225 vars 5154 clauses
last 9503 length 39177
last 1286 length 4753

CNF 1134 vars 4911 clauses
CNF 1286 vars 4753 clauses
summary
**************************************************
SRS with 2 strict rules and 1 weak rules on 3 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 18 strict rules and 9 weak rules on 9 letters       weights
  SRS with 9 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 6 strict rules and 9 weak rules on 8 letters       weights
  SRS with 0 strict rules and 9 weak rules on 5 letters       no strict rules

  2 SRS with 0 strict rules and 1 weak rules on 2 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [b, a] {- Input 0 -}
  [c, b] -> [b, c, a] {- Input 1 -}
  [a] ->= [a, c, a] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b] -> [b, a] {- Input 0 -}
  [c, b] -> [b, c, a] {- Input 1 -}
  [a] ->= [a, c, a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] -> [ [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, a]] -> [ [a, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, c], [c, b], [b, a]] -> [ [c, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, c], [c, b], [b, b]] -> [ [c, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c], [c, b], [b, c]] -> [ [c, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, c]] ->= [ [b, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, a]] -> [ [a, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, c]] ->= [ [b, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[a, c], [c, b], [b, a]] -> [ [a, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, b] , [b, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, b] , [b, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, b] , [b, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, a], [a, a]] ->= [ [a, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, c]] ->= [ [b, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] ->= [ [a, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] ->= [ [a, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] ->= [ [b, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] ->= [ [b, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, c]] ->= [ [b, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a] ->= [a, c, a] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: (2/1,3)\Split[(2/1,3)\TileAllAll{2}(18/9,9)\Weight(9/9,8)\Matrix{\Natural}{2}(6/9,8)\Weight(0/9,5)[],(0/1,2)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let CNF 9503 vars 39177 clauses
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1286, clauses: 4753, status: Unsatisfied, time: 0.016636939s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.498989262000
  min duration 2.498989262000
  total durat. 2.498989262000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 18
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 117}
    , self = 108
    , parent = Nothing
    , duration = 2.498989262000
    , status = Success
    , start = 2025-09-04 08:29:29.303021105 UTC
    , finish = 2025-09-04 08:29:31.802010367 UTC
    , thread_cap_info = ("ThreadId 160", 3, False)}
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.754242666000
  min duration 1.388632851000
  total durat. 7.942433753000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 10}
    , self = 81
    , parent = Nothing
    , duration = 1.388632851000
    , status = Fail
    , start = 2025-09-04 08:29:29.157991344 UTC
    , finish = 2025-09-04 08:29:30.546624195 UTC
    , thread_cap_info = ("ThreadId 67", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 10}
    , self = 87
    , parent = Nothing
    , duration = 1.478674929000
    , status = Fail
    , start = 2025-09-04 08:29:29.166520261 UTC
    , finish = 2025-09-04 08:29:30.64519519 UTC
    , thread_cap_info = ("ThreadId 65", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 14}
    , self = 89
    , parent = Nothing
    , duration = 1.607781507000
    , status = Fail
    , start = 2025-09-04 08:29:29.199312497 UTC
    , finish = 2025-09-04 08:29:30.807094004 UTC
    , thread_cap_info = ("ThreadId 130", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 30}
    , self = 91
    , parent = Nothing
    , duration = 1.713101800000
    , status = Fail
    , start = 2025-09-04 08:29:29.151532884 UTC
    , finish = 2025-09-04 08:29:30.864634684 UTC
    , thread_cap_info = ("ThreadId 71", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 30}
    , self = 96
    , parent = Nothing
    , duration = 1.754242666000
    , status = Fail
    , start = 2025-09-04 08:29:29.16654525 UTC
    , finish = 2025-09-04 08:29:30.920787916 UTC
    , thread_cap_info = ("ThreadId 96", 0, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 2.512713819000
  min duration 0.026411736000
  total durat. 5.004764158000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 18
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 117}
    , self = 110
    , parent = Nothing
    , duration = 2.465638603000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:29:29.336681339 UTC
    , finish = 2025-09-04 08:29:31.802319942 UTC
    , thread_cap_info = ("ThreadId 151", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 18
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 117}
    , self = 103
    , parent = Nothing
    , duration = 2.512713819000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:29:29.246571143 UTC
    , finish = 2025-09-04 08:29:31.759284962 UTC
    , thread_cap_info = ("ThreadId 143", 0, False)}
Success : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 2.420642963000
  min duration 2.416472236000
  total durat. 4.837115199000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 18
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 117}
    , self = 102
    , parent = Nothing
    , duration = 2.416472236000
    , status = Success
    , start = 2025-09-04 08:29:29.342797907 UTC
    , finish = 2025-09-04 08:29:31.759270143 UTC
    , thread_cap_info = ("ThreadId 153", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 18
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 117}
    , self = 99
    , parent = Nothing
    , duration = 2.420642963000
    , status = Success
    , start = 2025-09-04 08:29:29.259723203 UTC
    , finish = 2025-09-04 08:29:31.680366166 UTC
    , thread_cap_info = ("ThreadId 145", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.782001130000
  min duration 0.807299266000
  total durat. 7.022612957000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 30}
    , self = 79
    , parent = Nothing
    , duration = 1.277896512000
    , status = Fail
    , start = 2025-09-04 08:29:29.151538315 UTC
    , finish = 2025-09-04 08:29:30.429434827 UTC
    , thread_cap_info = ("ThreadId 72", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 10}
    , self = 82
    , parent = Nothing
    , duration = 1.427061272000
    , status = Fail
    , start = 2025-09-04 08:29:29.158604428 UTC
    , finish = 2025-09-04 08:29:30.5856657 UTC
    , thread_cap_info = ("ThreadId 68", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 5
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 30}
    , self = 95
    , parent = Nothing
    , duration = 1.728354777000
    , status = Fail
    , start = 2025-09-04 08:29:29.178613092 UTC
    , finish = 2025-09-04 08:29:30.906967869 UTC
    , thread_cap_info = ("ThreadId 97", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 14}
    , self = 98
    , parent = Nothing
    , duration = 1.782001130000
    , status = Fail
    , start = 2025-09-04 08:29:29.218518348 UTC
    , finish = 2025-09-04 08:29:31.000519478 UTC
    , thread_cap_info = ("ThreadId 131", 0, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.757382589000
  min duration 1.757382589000
  total durat. 1.757382589000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 14}
    , self = 97
    , parent = Nothing
    , duration = 1.757382589000
    , status = Fail
    , start = 2025-09-04 08:29:29.22777395 UTC
    , finish = 2025-09-04 08:29:30.985156539 UTC
    , thread_cap_info = ("ThreadId 133", 2, False)}
**************************************************
F                                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F                                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                                    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
F                                    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F                                    = 10} , self = 77 , parent = Nothing , duration = 0.807299266000 , status
F                                    = Fail , start = 2025-09-04 08:29:29.151432322 UTC , finish = 2025-09-04
F                                    08:29:29.958731588 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
F                                    
| F                                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                                  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| F                                  = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F                                  = 30} , self = 91 , parent = Nothing , duration = 1.713101800000 , status
| F                                  = Fail , start = 2025-09-04 08:29:29.151532884 UTC , finish = 2025-09-04
| F                                  08:29:30.864634684 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| F                                  
| | F                                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                                = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F                                = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F                                = 30} , self = 79 , parent = Nothing , duration = 1.277896512000 , status
| | F                                = Fail , start = 2025-09-04 08:29:29.151538315 UTC , finish = 2025-09-04
| | F                                08:29:30.429434827 UTC , thread_cap_info = ("ThreadId 72", 0, False)}
| | F                                
| | | F                              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                              = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F                              = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F                              = 10} , self = 81 , parent = Nothing , duration = 1.388632851000 , status
| | | F                              = Fail , start = 2025-09-04 08:29:29.157991344 UTC , finish = 2025-09-04
| | | F                              08:29:30.546624195 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
| | | F                              
| | | | F                            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                            = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | F                            = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F                            = 10} , self = 82 , parent = Nothing , duration = 1.427061272000 , status
| | | | F                            = Fail , start = 2025-09-04 08:29:29.158604428 UTC , finish = 2025-09-04
| | | | F                            08:29:30.5856657 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
| | | | F                            
| | | | | F                          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                          = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | F                          = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F                          = 10} , self = 87 , parent = Nothing , duration = 1.478674929000 , status
| | | | | F                          = Fail , start = 2025-09-04 08:29:29.166520261 UTC , finish = 2025-09-04
| | | | | F                          08:29:30.64519519 UTC , thread_cap_info = ("ThreadId 65", 1, False)}
| | | | | F                          
| | | | | | F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F                        = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F                        = 30} , self = 96 , parent = Nothing , duration = 1.754242666000 , status
| | | | | | F                        = Fail , start = 2025-09-04 08:29:29.16654525 UTC , finish = 2025-09-04
| | | | | | F                        08:29:30.920787916 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| | | | | | F                        
| | | | | | | F                      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | F                      = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | F                      = 30} , self = 95 , parent = Nothing , duration = 1.728354777000 , status
| | | | | | | F                      = Fail , start = 2025-09-04 08:29:29.178613092 UTC , finish = 2025-09-04
| | | | | | | F                      08:29:30.906967869 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | | | | | | F                      
| | | | | | | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | F                    = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | F                    = 14} , self = 89 , parent = Nothing , duration = 1.607781507000 , status
| | | | | | | | F                    = Fail , start = 2025-09-04 08:29:29.199312497 UTC , finish = 2025-09-04
| | | | | | | | F                    08:29:30.807094004 UTC , thread_cap_info = ("ThreadId 130", 0, False)}
| | | | | | | | F                    
| | | | | | | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | | F                  = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | F                  = 14} , self = 98 , parent = Nothing , duration = 1.782001130000 , status
| | | | | | | | | F                  = Fail , start = 2025-09-04 08:29:29.218518348 UTC , finish = 2025-09-04
| | | | | | | | | F                  08:29:31.000519478 UTC , thread_cap_info = ("ThreadId 131", 0, False)}
| | | | | | | | | F                  
| | | | | | | | | | F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | | | | F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | | | | F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | | | | F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | | | | F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | | | | F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 2 ,
| | | | | | | | | | F                num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | | F                = 14} , self = 78 , parent = Nothing , duration = 0.895513501000 , status
| | | | | | | | | | F                = Fail , start = 2025-09-04 08:29:29.22762056 UTC , finish = 2025-09-04
| | | | | | | | | | F                08:29:30.123134061 UTC , thread_cap_info = ("ThreadId 134", 3, False)}
| | | | | | | | | | F                
| | | | | | | | | | | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | | | | | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | | | | | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | | | | | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | | | | | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | | | | | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 2 ,
| | | | | | | | | | | F              num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | | | F              = 14} , self = 97 , parent = Nothing , duration = 1.757382589000 , status
| | | | | | | | | | | F              = Fail , start = 2025-09-04 08:29:29.22777395 UTC , finish = 2025-09-04
| | | | | | | | | | | F              08:29:30.985156539 UTC , thread_cap_info = ("ThreadId 133", 2, False)}
| | | | | | | | | | | F              
| | | | | | | | | | | | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | E            = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | E            = 117} , self = 103 , parent = Nothing , duration = 2.512713819000 , status
| | | | | | | | | | | | E            = Except "AsyncCancelled" , start = 2025-09-04 08:29:29.246571143 UTC ,
| | | | | | | | | | | | E            finish = 2025-09-04 08:29:31.759284962 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | E            143", 0, False)}
| | | | | | | | | | | | E            
| | | | | | | | | | | | | S          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | S          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | | S          = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | S          = 117} , self = 99 , parent = Nothing , duration = 2.420642963000 , status
| | | | | | | | | | | | | S          = Success , start = 2025-09-04 08:29:29.259723203 UTC , finish = 2025-09-04
| | | | | | | | | | | | | S          08:29:31.680366166 UTC , thread_cap_info = ("ThreadId 145", 0, False)}
| | | | | | | | | | | | | S          
| | | | | | | | | | | | | | S        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | | | S        = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | S        = 117} , self = 108 , parent = Nothing , duration = 2.498989262000 , status
| | | | | | | | | | | | | | S        = Success , start = 2025-09-04 08:29:29.303021105 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | S        08:29:31.802010367 UTC , thread_cap_info = ("ThreadId 160", 3, False)}
| | | | | | | | | | | | | | S        
| | | | | | | | | | | | | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | | | | E      = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | | E      = 117} , self = 110 , parent = Nothing , duration = 2.465638603000 , status
| | | | | | | | | | | | | | | E      = Except "AsyncCancelled" , start = 2025-09-04 08:29:29.336681339 UTC ,
| | | | | | | | | | | | | | | E      finish = 2025-09-04 08:29:31.802319942 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | | E      151", 0, False)}
| | | | | | | | | | | | | | | E      
| | | | | | | | | | | | | | | | S    Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | | | | | | | | | | | | | S    , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | | | | | | | | | | | | | S    , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | | | | | | | | | | | | | S    = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | | | | | | | | | | | | | S    , cpf = True}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | | | | | S    = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | | | S    = 117} , self = 76 , parent = Nothing , duration = 0.473766860000 , status
| | | | | | | | | | | | | | | | S    = Success , start = 2025-09-04 08:29:29.342795761 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | S    08:29:29.816562621 UTC , thread_cap_info = ("ThreadId 162", 3, False)}
| | | | | | | | | | | | | | | | S    
| | | | | | | | | | | | | | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | | | | | | | S  = 9 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | | | | S  = 117} , self = 102 , parent = Nothing , duration = 2.416472236000 , status
| | | | | | | | | | | | | | | | | S  = Success , start = 2025-09-04 08:29:29.342797907 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | | S  08:29:31.759270143 UTC , thread_cap_info = ("ThreadId 153", 0, False)}
| | | | | | | | | | | | | | | | | S  
| | | | | | | | | | | | | | | | S |  
| | | | | | | | | | | | | | | | S |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | | | | | | | | | | | | S |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | | | | | | | | | | | | S |  = Size { num_rules = 1152 , num_strict_rules = 576 , num_top_rules = 0
| | | | | | | | | | | | | | | | S |  , num_weak_rules = 576 , alphabet_size = 64 , total_length = 9792} , self
| | | | | | | | | | | | | | | | S |  = 80 , parent = Nothing , duration = 0.598824384000 , status = Success
| | | | | | | | | | | | | | | | S |  , start = 2025-09-04 08:29:29.838612076 UTC , finish = 2025-09-04 08:29:30.43743646
| | | | | | | | | | | | | | | | S |  UTC , thread_cap_info = ("ThreadId 165", 3, False)}
| | | | | | | | | | | | | | | | S |  
F | | | | | | | | | | | | | | | | |  
  | | | | | | | | | F | | | | | | |  
  | F | | | | | | |   | | | | | | |  
  |   | | | | | | |   | | | | | S |  
S |   | | | | | | |   | | | | |   |  Info { what = "Unlabel\n { accept_null_strict = True\n , produce_null_strict
S |   | | | | | | |   | | | | |   |  = False\n , verbose = False\n , tracing = False}" , input_size = Size {
S |   | | | | | | |   | | | | |   |  num_rules = 336 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
S |   | | | | | | |   | | | | |   |  = 320 , alphabet_size = 46 , total_length = 2704} , self = 83 , parent
S |   | | | | | | |   | | | | |   |  = Nothing , duration = 0.190289685000 , status = Success , start = 2025-09-04
S |   | | | | | | |   | | | | |   |  08:29:30.44374462 UTC , finish = 2025-09-04 08:29:30.634034305 UTC , thread_cap_info
S |   | | | | | | |   | | | | |   |  = ("ThreadId 173", 3, False)}
S |   | | | | | | |   | | | | |   |  
| |   F | | | | | |   | | | | |   |  
| |     F | | | | |   | | | | |   |  
S |       | | | | |   | | | | |   |  
  |       F | | | |   | | | | |   |  
S |         | | | |   | | | | |   |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S |         | | | |   | | | | |   |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S |         | | | |   | | | | |   |  = Size { num_rules = 576 , num_strict_rules = 256 , num_top_rules = 0 ,
S |         | | | |   | | | | |   |  num_weak_rules = 320 , alphabet_size = 64 , total_length = 4864} , self
S |         | | | |   | | | | |   |  = 90 , parent = Nothing , duration = 0.120486974000 , status = Success
S |         | | | |   | | | | |   |  , start = 2025-09-04 08:29:30.714409648 UTC , finish = 2025-09-04 08:29:30.834896622
S |         | | | |   | | | | |   |  UTC , thread_cap_info = ("ThreadId 189", 3, False)}
S |         | | | |   | | | | |   |  
| |         | | F |   | | | | |   |  
S |         | |   |   | | | | |   |  
  F         | |   |   | | | | |   |  
            | F   |   | | | | |   |  
            F     |   | | | | |   |  
                  |   F | | | |   |  
                  F     | | | |   |  
                        | S | |   |  
                        |   | |   S  
                        E   | |      
                            S |      
                              E      
