last 1181 length 4793
last 1077 length 4329
CNF 1181 vars 4793 clauses
last 1092 length 4377
CNF 1077 vars 4329 clauses
last 1126 length 4583
CNF 1092 vars 4377 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3352, clauses: 12250
CNF 1126 vars 4583 clauses
last 10154 length 42986
last 12976 length 55499
last 3352 length 12250
last 12926 length 56218
last 13720 length 58646
last 15067 length 63781
last 14984 length 63840
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3370, clauses: 12295
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11762, clauses: 49236
CNF 10154 vars 42986 clauses
CNF 12976 vars 55499 clauses
CNF 3352 vars 12250 clauses
CNF 12926 vars 56218 clauses
CNF 13720 vars 58646 clauses
CNF 15067 vars 63781 clauses
last 3370 length 12295
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11767, clauses: 49261
CNF 14984 vars 63840 clauses
last 11762 length 49236
CNF 3370 vars 12295 clauses
last 11767 length 49261
CNF 11762 vars 49236 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3352, clauses: 12250, status: Unsatisfied, time: 0.764110097s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3370, clauses: 12295, status: Unsatisfied, time: 0.500195376s
CNF 11767 vars 49261 clauses
[Info] pool sizes (success) 156027 seen 100787 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 4 strict rules and 2 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       looping derivation
from
  [a, a, c, a, a, b, a, b, c, a, a]
to
  [a, a, c, a, a, b, a, b, c, a, a]
via 22 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, c, a] -> [c, a, a] {- Input 0 -}
  [b, b, c] -> [b, a, b] {- Input 1 -}
  [c, a, a] -> [a, a, b] {- Input 2 -}
  [c, b, c] -> [b, c, a] {- Input 3 -}
  [a, b, a] ->= [a, c, c] {- Input 4 -}
  [b, a, b] ->= [b, b, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just False
for SRS
  [a, c, a] -> [c, a, a] {- Input 0 -}
  [b, b, c] -> [b, a, b] {- Input 1 -}
  [c, a, a] -> [a, a, b] {- Input 2 -}
  [c, b, c] -> [b, c, a] {- Input 3 -}
  [a, b, a] -> [a, c, c] {- Strictified (Input 4) -}
  [b, a, b] -> [b, b, b] {- Strictified (Input 5) -}
reason
  Nontermination
    Derive   { from = [a, a, c, a, a, b, a, b, c, a, a], via = [(Step   { rule = 4, position = 4}, [a, a, c, a, a, c, c, b, c, a, a]), (Step   { rule = 3, position = 6}, [a, a, c, a, a, c, b, c, a, a, a]), (Step   { rule = 3, position = 5}, [a, a, c, a, a, b, c, a, a, a, a]), (Step   { rule = 2, position = 2}, [a, a, a, a, b, b, c, a, a, a, a]), (Step   { rule = 1, position = 4}, [a, a, a, a, b, a, b, a, a, a, a]), (Step   { rule = 4, position = 5}, [a, a, a, a, b, a, c, c, a, a, a]), (Step   { rule = 4, position = 3}, [a, a, a, a, c, c, c, c, a, a, a]), (Step   { rule = 2, position = 7}, [a, a, a, a, c, c, c, a, a, b, a]), (Step   { rule = 4, position = 8}, [a, a, a, a, c, c, c, a, a, c, c]), (Step   { rule = 2, position = 6}, [a, a, a, a, c, c, a, a, b, c, c]), (Step   { rule = 2, position = 5}, [a, a, a, a, c, a, a, b, b, c, c]), (Step   { rule = 1, position = 7}, [a, a, a, a, c, a, a, b, a, b, c]), (Step   { rule = 4, position = 6}, [a, a, a, a, c, a, a, c, c, b, c]), (Step   { rule = 3, position = 8}, [a, a, a, a, c, a, a, c, b, c, a]), (Step   { rule = 3, position = 7}, [a, a, a, a, c, a, a, b, c, a, a]), (Step   { rule = 0, position = 3}, [a, a, a, c, a, a, a, b, c, a, a]), (Step   { rule = 0, position = 2}, [a, a, c, a, a, a, a, b, c, a, a]), (Step   { rule = 0, position = 1}, [a, c, a, a, a, a, a, b, c, a, a]), (Step   { rule = 0, position = 0}, [c, a, a, a, a, a, a, b, c, a, a]), (Step   { rule = 2, position = 0}, [a, a, b, a, a, a, a, b, c, a, a]), (Step   { rule = 4, position = 1}, [a, a, c, c, a, a, a, b, c, a, a]), (Step   { rule = 2, position = 3}, [a, a, c, a, a, b, a, b, c, a, a])], to = [a, a, c, a, a, b, a, b, c, a, a]}

**************************************************
skeleton: (4/2,3)\Strictify(6,3)\Loop{22}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19603, clauses: 74686
last 19603 length 74686
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7191, clauses: 29311
**************************************************
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7180, clauses: 29223
last 7191 length 29311
last 7180 length 29223
statistics on proof search (CNF 19603 vars 74686 clauses
nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.243125730000
  min duration 0.105043780000
  total durat. 4.309498154000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 60
    , parent = Nothing
    , duration = 1.138215488000
    , status = Fail
    , start = 2025-09-04 08:21:22.839440234 UTC
    , finish = 2025-09-04 08:21:23.977655722 UTC
    , thread_cap_info = ("ThreadId 68", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 9
      , num_weak_rules = 54
      , alphabet_size = 11
      , total_length = 504}
    , self = 63
    , parent = Nothing
    , duration = 1.235415725000
    , status = Fail
    , start = 2025-09-04 08:21:22.859319137 UTC
    , finish = 2025-09-04 08:21:24.094734862 UTC
    , thread_cap_info = ("ThreadId 78", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 9
      , num_weak_rules = 54
      , alphabet_size = 11
      , total_length = 504}
    , self = 64
    , parent = Nothing
    , duration = 1.243125730000
    , status = Fail
    , start = 2025-09-04 08:21:22.859324777 UTC
    , finish = 2025-09-04 08:21:24.102450507 UTC
    , thread_cap_info = ("ThreadId 74", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.240783364000
  min duration 0.244478373000
  total durat. 4.116260349000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 59
    , parent = Nothing
    , duration = 1.105606909000
    , status = Fail
    , start = 2025-09-04 08:21:22.859318918 UTC
    , finish = 2025-09-04 08:21:23.964925827 UTC
    , thread_cap_info = ("ThreadId 70", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 9
      , num_weak_rules = 54
      , alphabet_size = 11
      , total_length = 504}
    , self = 61
    , parent = Nothing
    , duration = 1.168258552000
    , status = Fail
    , start = 2025-09-04 08:21:22.848152366 UTC
    , finish = 2025-09-04 08:21:24.016410918 UTC
    , thread_cap_info = ("ThreadId 79", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 9
      , num_top_rules = 9
      , num_weak_rules = 54
      , alphabet_size = 11
      , total_length = 504}
    , self = 62
    , parent = Nothing
    , duration = 1.240783364000
    , status = Fail
    , start = 2025-09-04 08:21:22.841477875 UTC
    , finish = 2025-09-04 08:21:24.082261239 UTC
    , thread_cap_info = ("ThreadId 75", 3, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.258004365000
  min duration 0.901031334000
  total durat. 2.159035699000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 6
      , alphabet_size = 5
      , total_length = 54}
    , self = 65
    , parent = Nothing
    , duration = 1.258004365000
    , status = Fail
    , start = 2025-09-04 08:21:23.101346138 UTC
    , finish = 2025-09-04 08:21:24.359350503 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 2.255098858000
  min duration 2.255098858000
  total durat. 2.255098858000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 67
    , parent = Nothing
    , duration = 2.255098858000
    , status = Success
    , start = 2025-09-04 08:21:22.785728843 UTC
    , finish = 2025-09-04 08:21:25.040827701 UTC
    , thread_cap_info = ("ThreadId 36", 2, False)}
**************************************************
S                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S                      , closure = Forward\n , start_strict_only = True\n , max_closure_length
S                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S                      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
S                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S                      = 36} , self = 67 , parent = Nothing , duration = 2.255098858000 , status
S                      = Success , start = 2025-09-04 08:21:22.785728843 UTC , finish = 2025-09-04
S                      08:21:25.040827701 UTC , thread_cap_info = ("ThreadId 36", 2, False)}
S                      
| F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F                    = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                    = 432} , self = 60 , parent = Nothing , duration = 1.138215488000 , status
| F                    = Fail , start = 2025-09-04 08:21:22.839440234 UTC , finish = 2025-09-04
| F                    08:21:23.977655722 UTC , thread_cap_info = ("ThreadId 68", 2, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | F                  = 9 , num_top_rules = 9 , num_weak_rules = 54 , alphabet_size = 11 , total_length
| | F                  = 504} , self = 62 , parent = Nothing , duration = 1.240783364000 , status
| | F                  = Fail , start = 2025-09-04 08:21:22.841477875 UTC , finish = 2025-09-04
| | F                  08:21:24.082261239 UTC , thread_cap_info = ("ThreadId 75", 3, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | F                = 9 , num_top_rules = 9 , num_weak_rules = 54 , alphabet_size = 11 , total_length
| | | F                = 504} , self = 61 , parent = Nothing , duration = 1.168258552000 , status
| | | F                = Fail , start = 2025-09-04 08:21:22.848152366 UTC , finish = 2025-09-04
| | | F                08:21:24.016410918 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | F              = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F              = 432} , self = 59 , parent = Nothing , duration = 1.105606909000 , status
| | | | F              = Fail , start = 2025-09-04 08:21:22.859318918 UTC , finish = 2025-09-04
| | | | F              08:21:23.964925827 UTC , thread_cap_info = ("ThreadId 70", 2, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | F            = 9 , num_top_rules = 9 , num_weak_rules = 54 , alphabet_size = 11 , total_length
| | | | | F            = 504} , self = 63 , parent = Nothing , duration = 1.235415725000 , status
| | | | | F            = Fail , start = 2025-09-04 08:21:22.859319137 UTC , finish = 2025-09-04
| | | | | F            08:21:24.094734862 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | F          = 9 , num_top_rules = 9 , num_weak_rules = 54 , alphabet_size = 11 , total_length
| | | | | | F          = 504} , self = 64 , parent = Nothing , duration = 1.243125730000 , status
| | | | | | F          = Fail , start = 2025-09-04 08:21:22.859324777 UTC , finish = 2025-09-04
| | | | | | F          08:21:24.102450507 UTC , thread_cap_info = ("ThreadId 74", 3, False)}
| | | | | | F          
| | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | | F        = 54} , self = 53 , parent = Nothing , duration = 0.105043780000 , status
| | | | | | | F        = Fail , start = 2025-09-04 08:21:22.979924469 UTC , finish = 2025-09-04
| | | | | | | F        08:21:23.084968249 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | | | | | F        
| | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | | | F      = 54} , self = 55 , parent = Nothing , duration = 0.244478373000 , status
| | | | | | | | F      = Fail , start = 2025-09-04 08:21:22.999327269 UTC , finish = 2025-09-04
| | | | | | | | F      08:21:23.243805642 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | | | | F    = 54} , self = 58 , parent = Nothing , duration = 0.587697431000 , status
| | | | | | | | | F    = Fail , start = 2025-09-04 08:21:23.021417022 UTC , finish = 2025-09-04
| | | | | | | | | F    08:21:23.609114453 UTC , thread_cap_info = ("ThreadId 97", 0, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | | | | | | | F  = 54} , self = 57 , parent = Nothing , duration = 0.357133151000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-04 08:21:23.065298324 UTC , finish = 2025-09-04
| | | | | | | | | | F  08:21:23.422431475 UTC , thread_cap_info = ("ThreadId 98", 0, False)}
| | | | | | | | | | F  
| | | | | | | F | | |  
| | | | | | | F | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | F | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | F | | |  = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | | | | F | | |  = 5 , total_length = 54} , self = 65 , parent = Nothing , duration = 1.258004365000
| | | | | | | F | | |  , status = Fail , start = 2025-09-04 08:21:23.101346138 UTC , finish =
| | | | | | | F | | |  2025-09-04 08:21:24.359350503 UTC , thread_cap_info = ("ThreadId 101",
| | | | | | | F | | |  0, False)}
| | | | | | | F | | |  
| | | | | | | | F | |  
| | | | | | | |   | F  
| | | | | | | | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | F |    = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | | | | | | F |    = 5 , total_length = 54} , self = 66 , parent = Nothing , duration = 0.901031334000
| | | | | | | | F |    , status = Fail , start = 2025-09-04 08:21:23.479912098 UTC , finish =
| | | | | | | | F |    2025-09-04 08:21:24.380943432 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | | | F |    0, False)}
| | | | | | | | F |    
| | | | | | | | | F    
| | | | F | | | |      
| F | |   | | | |      
|   | F   | | | |      
|   F     | | | |      
|         F | | |      
|           F | |      
|             F |      
|               F      
S                      
