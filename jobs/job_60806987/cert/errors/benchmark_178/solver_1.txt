last 22 length 73
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 25 length 90
CNF 22 vars 73 clauses
last 12 length 33
last 12 length 33
last 72 length 265
last 92 length 338
last 42 length 143
last 67 length 250
last 261 length 1093
last 330 length 1370
last 161 length 658
last 210 length 848
CNF 25 vars 90 clauses
last 1182 length 4980
last 1252 length 5397
CNF 12 vars 33 clauses
CNF 12 vars 33 clauses
last 1182 length 4980
last 1252 length 5397
CNF 72 vars 265 clauses
last 1252 length 5397
last 1182 length 4980
CNF 92 vars 338 clauses
CNF 42 vars 143 clauses
CNF 67 vars 250 clauses
CNF 261 vars 1093 clauses
CNF 330 vars 1370 clauses
CNF 161 vars 658 clauses
CNF 210 vars 848 clauses
CNF 1182 vars 4980 clauses
CNF 1252 vars 5397 clauses
CNF 1182 vars 4980 clauses
CNF 1252 vars 5397 clauses
CNF 1252 vars 5397 clauses
CNF 1182 vars 4980 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6847, clauses: 28069
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 934, clauses: 3391
**************************************************last 6847 length 28069
last 934 length 3391

summary
CNF 6847 vars 28069 clauses
CNF 934 vars 3391 clauses
**************************************************
SRS with 2 strict rules and 1 weak rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 18 weak rules on 9 letters       weights
  SRS with 0 strict rules and 11 weak rules on 8 letters       no strict rules

  2 SRS with 1 strict rules and 1 weak rules on 3 letters       split
  2 sub-proofs
    1 SRS with 1 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 9 strict rules and 9 weak rules on 9 letters       weights
    SRS with 2 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 strict rules and 9 weak rules on 7 letters       weights
    SRS with 0 strict rules and 3 weak rules on 5 letters       no strict rules

    2 SRS with 0 strict rules and 1 weak rules on 2 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b] {- Input 0 -}
  [a, a] -> [a, c, b, a] {- Input 1 -}
  [b] ->= [c, b] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, a] ->= [a, b, a, b] {- Input 0 -}
  [a, a] -> [a, c, b, a] {- Input 1 -}
  [b] ->= [c, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, c], [c, a], [a, c]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, b], [b, c], [c, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, c]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a]] -> [ [b, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, a], [a, a], [a, c]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a], [a, a], [a, a]] -> [ [c, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, a], [a, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, c]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, a], [a, a], [a, a]] -> [ [a, a] , [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, b], [b, b]] ->= [ [b, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, b], [b, a]] ->= [ [a, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 2/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, b], [b, b]] ->= [ [b, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, b], [b, a]] ->= [ [a, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b] {- Input 0 -}
  [b] ->= [c, b] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b] {- Input 0 -}
  [b] ->= [c, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[b, b], [b, b]] ->= [ [b, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, b], [b, a]] ->= [ [a, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 2/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, b], [b, b]] ->= [ [b, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, b], [b, a]] ->= [ [a, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[b, b], [b, b]] ->= [ [b, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, c]] ->= [ [b, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] ->= [ [b, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] ->= [ [a, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] ->= [ [a, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, b], [b, a]] ->= [ [a, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, b], [b, b]] ->= [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c]] ->= [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, a]] ->= [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [b] ->= [c, b] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: (2/1,3)\Split[(1/2,3)\TileAllAll{2}(9/18,9)\Weight(0/11,8)[],(1/1,3)\Split[(1/1,3)\TileAllAll{2}(9/9,9)\Weight(2/9,8)\Matrix{\Natural}{2}(0/9,7)\Weight(0/3,5)[],(0/1,2)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 934, clauses: 3391, status: Unsatisfied, time: 0.278904784s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 2.726451086000
  min duration 2.522981200000
  total durat. 7.895377740000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 117
    , parent = Nothing
    , duration = 2.522981200000
    , status = Success
    , start = 2025-09-04 07:31:50.23576162 UTC
    , finish = 2025-09-04 07:31:52.75874282 UTC
    , thread_cap_info = ("ThreadId 181", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 112
    , parent = Nothing
    , duration = 2.645945454000
    , status = Success
    , start = 2025-09-04 07:31:50.056273371 UTC
    , finish = 2025-09-04 07:31:52.702218825 UTC
    , thread_cap_info = ("ThreadId 172", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 107
    , parent = Nothing
    , duration = 2.726451086000
    , status = Success
    , start = 2025-09-04 07:31:49.930125776 UTC
    , finish = 2025-09-04 07:31:52.656576862 UTC
    , thread_cap_info = ("ThreadId 154", 1, False)}
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 2.538668148000
  min duration 0.153691788000
  total durat. 10.867366398000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6847, clauses: 28069, status: Satisfied, time: 0.315657624s
      , num_weak_rules = 0
      , alphabet_size = 1
      , total_length = 2}
    , self = 96
    , parent = Nothing
    , duration = 1.591361555000
    , status = Fail
    , start = 2025-09-04 07:31:49.88302677 UTC
    , finish = 2025-09-04 07:31:51.474388325 UTC
    , thread_cap_info = ("ThreadId 78", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 4}
    , self = 97
    , parent = Nothing
    , duration = 1.739721195000
    , status = Fail
    , start = 2025-09-04 07:31:49.883297083 UTC
    , finish = 2025-09-04 07:31:51.623018278 UTC
    , thread_cap_info = ("ThreadId 96", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 5}
    , self = 98
    , parent = Nothing
    , duration = 2.389125554000
    , status = Fail
    , start = 2025-09-04 07:31:49.890490983 UTC
    , finish = 2025-09-04 07:31:52.279616537 UTC
    , thread_cap_info = ("ThreadId 115", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 16}
    , self = 101
    , parent = Nothing
    , duration = 2.454798158000
    , status = Fail
    , start = 2025-09-04 07:31:49.899776711 UTC
    , finish = 2025-09-04 07:31:52.354574869 UTC
    , thread_cap_info = ("ThreadId 132", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 10}
    , self = 103
    , parent = Nothing
    , duration = 2.538668148000
    , status = Fail
    , start = 2025-09-04 07:31:49.917815546 UTC
    , finish = 2025-09-04 07:31:52.456483694 UTC
    , thread_cap_info = ("ThreadId 146", 1, False)}
Success : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 2.663105205000
  min duration 2.502852031000
  total durat. 7.779536168000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 116
    , parent = Nothing
    , duration = 2.502852031000
    , status = Success
    , start = 2025-09-04 07:31:50.255658749 UTC
    , finish = 2025-09-04 07:31:52.75851078 UTC
    , thread_cap_info = ("ThreadId 183", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 110
    , parent = Nothing
    , duration = 2.613578932000
    , status = Success
    , start = 2025-09-04 07:31:50.077176718 UTC
    , finish = 2025-09-04 07:31:52.69075565 UTC
    , thread_cap_info = ("ThreadId 173", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 11
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 63}
    , self = 105
    , parent = Nothing
    , duration = 2.663105205000
    , status = Success
    , start = 2025-09-04 07:31:49.934770378 UTC
    , finish = 2025-09-04 07:31:52.597875583 UTC
    , thread_cap_info = ("ThreadId 156", 1, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 2.635911247000
  min duration 1.315497949000
  total durat. 12.886356309000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 3}
    , self = 94
    , parent = Nothing
    , duration = 1.315497949000
    , status = Fail
    , start = 2025-09-04 07:31:49.878077107 UTC
    , finish = 2025-09-04 07:31:51.193575056 UTC
    , thread_cap_info = ("ThreadId 68", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 1
      , total_length = 2}
    , self = 95
    , parent = Nothing
    , duration = 1.531275945000
    , status = Fail
    , start = 2025-09-04 07:31:49.882969165 UTC
    , finish = 2025-09-04 07:31:51.41424511 UTC
    , thread_cap_info = ("ThreadId 79", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 4}
    , self = 99
    , parent = Nothing
    , duration = 2.418657709000
    , status = Fail
    , start = 2025-09-04 07:31:49.883821622 UTC
    , finish = 2025-09-04 07:31:52.302479331 UTC
    , thread_cap_info = ("ThreadId 97", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 5}
    , self = 100
    , parent = Nothing
    , duration = 2.452112285000
    , status = Fail
    , start = 2025-09-04 07:31:49.890848963 UTC
    , finish = 2025-09-04 07:31:52.342961248 UTC
    , thread_cap_info = ("ThreadId 116", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 16}
    , self = 102
    , parent = Nothing
    , duration = 2.532901174000
    , status = Fail
    , start = 2025-09-04 07:31:49.900814346 UTC
    , finish = 2025-09-04 07:31:52.43371552 UTC
    , thread_cap_info = ("ThreadId 135", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 1
      , alphabet_size = 3
      , total_length = 10}
    , self = 104
    , parent = Nothing
    , duration = 2.635911247000
    , status = Fail
    , start = 2025-09-04 07:31:49.918506364 UTC
    , finish = 2025-09-04 07:31:52.554417611 UTC
    , thread_cap_info = ("ThreadId 149", 1, False)}
**************************************************
F                                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                                    = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
F                                    = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                                    = 3} , self = 83 , parent = Nothing , duration = 0.153691788000 , status
F                                    = Fail , start = 2025-09-04 07:31:49.875596004 UTC , finish = 2025-09-04
F                                    07:31:50.029287792 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
F                                    
| F                                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                                  = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| F                                  = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                                  = 3} , self = 94 , parent = Nothing , duration = 1.315497949000 , status
| F                                  = Fail , start = 2025-09-04 07:31:49.878077107 UTC , finish = 2025-09-04
| F                                  07:31:51.193575056 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
| F                                  
| | F                                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                                = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | F                                = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 1 , total_length
| | F                                = 2} , self = 95 , parent = Nothing , duration = 1.531275945000 , status
| | F                                = Fail , start = 2025-09-04 07:31:49.882969165 UTC , finish = 2025-09-04
| | F                                07:31:51.41424511 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | F                                
| | | F                              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                              = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | F                              = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 1 , total_length
| | | F                              = 2} , self = 96 , parent = Nothing , duration = 1.591361555000 , status
| | | F                              = Fail , start = 2025-09-04 07:31:49.88302677 UTC , finish = 2025-09-04
| | | F                              07:31:51.474388325 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| | | F                              
| | | | F                            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                            = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | F                            = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | F                            = 4} , self = 97 , parent = Nothing , duration = 1.739721195000 , status
| | | | F                            = Fail , start = 2025-09-04 07:31:49.883297083 UTC , finish = 2025-09-04
| | | | F                            07:31:51.623018278 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| | | | F                            
| | | | | F                          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                          = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | | F                          = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | F                          = 4} , self = 99 , parent = Nothing , duration = 2.418657709000 , status
| | | | | F                          = Fail , start = 2025-09-04 07:31:49.883821622 UTC , finish = 2025-09-04
| | | | | F                          07:31:52.302479331 UTC , thread_cap_info = ("ThreadId 97", 2, False)}
| | | | | F                          
| | | | | | F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | | | F                        = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | F                        = 5} , self = 98 , parent = Nothing , duration = 2.389125554000 , status
| | | | | | F                        = Fail , start = 2025-09-04 07:31:49.890490983 UTC , finish = 2025-09-04
| | | | | | F                        07:31:52.279616537 UTC , thread_cap_info = ("ThreadId 115", 2, False)}
| | | | | | F                        
| | | | | | | F                      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 1 , num_strict_rules
| | | | | | | F                      = 1 , num_top_rules = 1 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | F                      = 5} , self = 100 , parent = Nothing , duration = 2.452112285000 , status
| | | | | | | F                      = Fail , start = 2025-09-04 07:31:49.890848963 UTC , finish = 2025-09-04
| | | | | | | F                      07:31:52.342961248 UTC , thread_cap_info = ("ThreadId 116", 0, False)}
| | | | | | | F                      
| | | | | | | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | F                    = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | F                    = 16} , self = 101 , parent = Nothing , duration = 2.454798158000 , status
| | | | | | | | F                    = Fail , start = 2025-09-04 07:31:49.899776711 UTC , finish = 2025-09-04
| | | | | | | | F                    07:31:52.354574869 UTC , thread_cap_info = ("ThreadId 132", 1, False)}
| | | | | | | | F                    
| | | | | | | | | F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | | | F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | | | F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | | | F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | | | F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | | | F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | F                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 2 ,
| | | | | | | | | F                  num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | F                  = 16} , self = 84 , parent = Nothing , duration = 0.156569906000 , status
| | | | | | | | | F                  = Fail , start = 2025-09-04 07:31:49.899806171 UTC , finish = 2025-09-04
| | | | | | | | | F                  07:31:50.056376077 UTC , thread_cap_info = ("ThreadId 122", 3, False)}
| | | | | | | | | F                  
| | | | | | | | | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | | | F                = 2 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | | F                = 16} , self = 102 , parent = Nothing , duration = 2.532901174000 , status
| | | | | | | | | | F                = Fail , start = 2025-09-04 07:31:49.900814346 UTC , finish = 2025-09-04
| | | | | | | | | | F                07:31:52.43371552 UTC , thread_cap_info = ("ThreadId 135", 1, False)}
| | | | | | | | | | F                
| | | | | | | | | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | | | | | | | | F              = 1 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | | | F              = 10} , self = 103 , parent = Nothing , duration = 2.538668148000 , status
| | | | | | | | | | | F              = Fail , start = 2025-09-04 07:31:49.917815546 UTC , finish = 2025-09-04
| | | | | | | | | | | F              07:31:52.456483694 UTC , thread_cap_info = ("ThreadId 146", 1, False)}
| | | | | | | | | | | F              
| | | | | | | | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | | | | | | | | | F            = 1 , num_top_rules = 0 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | | | | | F            = 10} , self = 104 , parent = Nothing , duration = 2.635911247000 , status
| | | | | | | | | | | | F            = Fail , start = 2025-09-04 07:31:49.918506364 UTC , finish = 2025-09-04
| | | | | | | | | | | | F            07:31:52.554417611 UTC , thread_cap_info = ("ThreadId 149", 1, False)}
| | | | | | | | | | | | F            
| | | | | | | | | | | | | S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | S          = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | | | | | S          = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | S          = 63} , self = 107 , parent = Nothing , duration = 2.726451086000 , status
| | | | | | | | | | | | | S          = Success , start = 2025-09-04 07:31:49.930125776 UTC , finish = 2025-09-04
| | | | | | | | | | | | | S          07:31:52.656576862 UTC , thread_cap_info = ("ThreadId 154", 1, False)}
| | | | | | | | | | | | | S          
| | | | | | | | | | | | | | S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | | | | | | S        = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | S        = 63} , self = 105 , parent = Nothing , duration = 2.663105205000 , status
| | | | | | | | | | | | | | S        = Success , start = 2025-09-04 07:31:49.934770378 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | S        07:31:52.597875583 UTC , thread_cap_info = ("ThreadId 156", 1, False)}
| | | | | | | | | | | | | | S        
F | | | | | | | | | | | | | |        
S | | | | | | | | | | | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S | | | | | | | | | | | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S | | | | | | | | | | | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
S | | | | | | | | | | | | | |        = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
S | | | | | | | | | | | | | |        = 63} , self = 112 , parent = Nothing , duration = 2.645945454000 , status
S | | | | | | | | | | | | | |        = Success , start = 2025-09-04 07:31:50.056273371 UTC , finish = 2025-09-04
S | | | | | | | | | | | | | |        07:31:52.702218825 UTC , thread_cap_info = ("ThreadId 172", 2, False)}
S | | | | | | | | | | | | | |        
| | | | | | | | | F | | | | |        
| | | | | | | | | S | | | | |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | S | | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | S | | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | S | | | | |        = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | S | | | | |        = 63} , self = 110 , parent = Nothing , duration = 2.613578932000 , status
| | | | | | | | | S | | | | |        = Success , start = 2025-09-04 07:31:50.077176718 UTC , finish = 2025-09-04
| | | | | | | | | S | | | | |        07:31:52.69075565 UTC , thread_cap_info = ("ThreadId 173", 3, False)}
| | | | | | | | | S | | | | |        
| | | | | | | | | | | | | | | S      Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | | | | | | | | | | | S      epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | | | | | | | | | | | S      = Size { num_rules = 704 , num_strict_rules = 128 , num_top_rules = 0 ,
| | | | | | | | | | | | | | | S      num_weak_rules = 576 , alphabet_size = 62 , total_length = 5440} , self
| | | | | | | | | | | | | | | S      = 90 , parent = Nothing , duration = 0.376842196000 , status = Success
| | | | | | | | | | | | | | | S      , start = 2025-09-04 07:31:50.09704607 UTC , finish = 2025-09-04 07:31:50.473888266
| | | | | | | | | | | | | | | S      UTC , thread_cap_info = ("ThreadId 176", 2, False)}
| | | | | | | | | | | | | | | S      
| | | | | | | | | | | | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | | | | | | | | S    = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | | | S    = 63} , self = 117 , parent = Nothing , duration = 2.522981200000 , status
| | | | | | | | | | | | | | | | S    = Success , start = 2025-09-04 07:31:50.23576162 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | S    07:31:52.75874282 UTC , thread_cap_info = ("ThreadId 181", 0, False)}
| | | | | | | | | | | | | | | | S    
| | | | | | | | | | | | | | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | | | | | | | | | | | | S  = 2 , num_top_rules = 0 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | | | | | | | | | | | | | S  = 63} , self = 116 , parent = Nothing , duration = 2.502852031000 , status
| | | | | | | | | | | | | | | | | S  = Success , start = 2025-09-04 07:31:50.255658749 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | | S  07:31:52.75851078 UTC , thread_cap_info = ("ThreadId 183", 0, False)}
| | | | | | | | | | | | | | | | | S  
| | | | | | | | | | | | | | | S | |  
| | | | | | | | | | | | | | | F | |  Info { what = "Unlabel\n { accept_null_strict = True\n , produce_null_strict
| | | | | | | | | | | | | | | F | |  = False\n , verbose = False\n , tracing = False}" , input_size = Size {
| | | | | | | | | | | | | | | F | |  num_rules = 178 , num_strict_rules = 10 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | | | | | | F | |  = 168 , alphabet_size = 37 , total_length = 1286} , self = 91 , parent
| | | | | | | | | | | | | | | F | |  = Nothing , duration = 0.110821092000 , status = Fail , start = 2025-09-04
| | | | | | | | | | | | | | | F | |  07:31:50.473905141 UTC , finish = 2025-09-04 07:31:50.584726233 UTC , thread_cap_info
| | | | | | | | | | | | | | | F | |  = ("ThreadId 187", 2, False)}
| | | | | | | | | | | | | | | F | |  
| | | | | | | | | | | | | | | F | |  
| F | | | | | | | | | | | | |   | |  
|   F | | | | | | | | | | | |   | |  
|     F | | | | | | | | | | |   | |  
|       F | | | | | | | | | |   | |  
|         | F | | | | | | | |   | |  
|         F   | | | | | | | |   | |  
|             F | | | | | | |   | |  
|               F | | | | | |   | |  
|                 | F | | | |   | |  
|                 |   F | | |   | |  
|                 |     F | |   | |  
|                 |       | S   | |  
|                 |       S     | |  
|                 S             | |  
S                               | |  
                                | S  
                                S    
