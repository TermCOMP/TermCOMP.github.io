[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 542 length 2585
last 695 length 3199
last 542 length 2585
last 695 length 3199
last 2218 length 11351
last 2242 length 10339
last 2242 length 10339
last 2218 length 11351
last 738 length 3254
last 552 length 2381
CNF 542 vars 2585 clauses
CNF 695 vars 3199 clauses
last 1193 length 5992
last 5815 length 29960
last 6939 length 31721
last 1193 length 5992
last 958 length 4443
last 958 length 4443
CNF 542 vars 2585 clauses
CNF 2218 vars 11351 clauses
CNF 695 vars 3199 clauses
CNF 2242 vars 10339 clauses
CNF 2242 vars 10339 clauses
CNF 2218 vars 11351 clauses
CNF 738 vars 3254 clauses
CNF 552 vars 2381 clauses
CNF 1193 vars 5992 clauses
CNF 5815 vars 29960 clauses
CNF 6939 vars 31721 clauses
CNF 1193 vars 5992 clauses
CNF 958 vars 4443 clauses
CNF 958 vars 4443 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2419, clauses: 9391
last 2419 length 9391
CNF 2419 vars 9391 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2419, clauses: 9391, status: Unsatisfied, time: 0.059634735s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4780, clauses: 17847
last 4780 length 17847
CNF 4780 vars 17847 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15359, clauses: 63777
last 15359 length 63777
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4780, clauses: 17847, status: Satisfied, time: 0.079608107s
CNF 15359 vars 63777 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 18 weak rules on 9 letters       weights
SRS with 1 strict rules and 16 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 16 weak rules on 8 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c, a] -> [] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [b, a, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, a]] -> [ [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, b]] -> [ [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ c , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c]] ->= [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, c], [c, a], [a, c]] -> [ [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [a, c]
  , St (Corner  / 1 0 0 \
                | 0 3 0 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 1 0 \
                | 0 4 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 0 \
                | 0 4 0 |
                \ 0 0 1 /) )
  ( [b, c]
  , St (Corner  / 1 0 7 \
                | 0 0 4 |
                \ 0 0 1 /) )
  ( [c, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [c, b]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [c, c]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c]] ->= [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a]] ->= [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a]] ->= [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b]] ->= [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c]] ->= [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

**************************************************
skeleton: (1/2,3)\TileAllAll{2}(9/18,9)\Weight(1/16,9)\Matrix{\Natural}{3}(0/16,8)[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15359, clauses: 63777, status: Satisfied, time: 0.326015904s

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 1.411558478000
  min duration 0.702606542000
  total durat. 9.270808088000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 21
      , num_strict_rules = 15
      , num_top_rules = 15
      , num_weak_rules = 6
      , alphabet_size = 6
      , total_length = 75}
    , self = 88
    , parent = Nothing
    , duration = 1.003514350000
    , status = Fail
    , start = 2025-09-04 08:27:51.6808226 UTC
    , finish = 2025-09-04 08:27:52.68433695 UTC
    , thread_cap_info = ("ThreadId 83", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 48
      , num_top_rules = 48
      , num_weak_rules = 16
      , alphabet_size = 16
      , total_length = 216}
    , self = 89
    , parent = Nothing
    , duration = 1.112824962000
    , status = Fail
    , start = 2025-09-04 08:27:51.704158947 UTC
    , finish = 2025-09-04 08:27:52.816983909 UTC
    , thread_cap_info = ("ThreadId 120", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 48
      , num_top_rules = 48
      , num_weak_rules = 16
      , alphabet_size = 16
      , total_length = 216}
    , self = 90
    , parent = Nothing
    , duration = 1.157905107000
    , status = Fail
    , start = 2025-09-04 08:27:51.685536634 UTC
    , finish = 2025-09-04 08:27:52.843441741 UTC
    , thread_cap_info = ("ThreadId 94", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 42}
    , self = 92
    , parent = Nothing
    , duration = 1.203004860000
    , status = Fail
    , start = 2025-09-04 08:27:51.741410816 UTC
    , finish = 2025-09-04 08:27:52.944415676 UTC
    , thread_cap_info = ("ThreadId 131", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 16
      , alphabet_size = 9
      , total_length = 70}
    , self = 99
    , parent = Nothing
    , duration = 1.304739907000
    , status = Fail
    , start = 2025-09-04 08:27:51.880274655 UTC
    , finish = 2025-09-04 08:27:53.185014562 UTC
    , thread_cap_info = ("ThreadId 160", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 16
      , alphabet_size = 9
      , total_length = 70}
    , self = 98
    , parent = Nothing
    , duration = 1.374653882000
    , status = Fail
    , start = 2025-09-04 08:27:51.789863779 UTC
    , finish = 2025-09-04 08:27:53.164517661 UTC
    , thread_cap_info = ("ThreadId 150", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 48
      , alphabet_size = 9
      , total_length = 312}
    , self = 97
    , parent = Nothing
    , duration = 1.411558478000
    , status = Fail
    , start = 2025-09-04 08:27:51.749465903 UTC
    , finish = 2025-09-04 08:27:53.161024381 UTC
    , thread_cap_info = ("ThreadId 139", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 8
  max duration 1.311141747000
  min duration 0.601322010000
  total durat. 8.777208552000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 48
      , num_top_rules = 48
      , num_weak_rules = 16
      , alphabet_size = 16
      , total_length = 216}
    , self = 91
    , parent = Nothing
    , duration = 1.151998031000
    , status = Fail
    , start = 2025-09-04 08:27:51.711612275 UTC
    , finish = 2025-09-04 08:27:52.863610306 UTC
    , thread_cap_info = ("ThreadId 121", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 6
      , alphabet_size = 3
      , total_length = 42}
    , self = 93
    , parent = Nothing
    , duration = 1.235199285000
    , status = Fail
    , start = 2025-09-04 08:27:51.74782859 UTC
    , finish = 2025-09-04 08:27:52.983027875 UTC
    , thread_cap_info = ("ThreadId 135", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 16
      , alphabet_size = 9
      , total_length = 70}
    , self = 94
    , parent = Nothing
    , duration = 1.263088286000
    , status = Fail
    , start = 2025-09-04 08:27:51.789870004 UTC
    , finish = 2025-09-04 08:27:53.05295829 UTC
    , thread_cap_info = ("ThreadId 152", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 16
      , alphabet_size = 9
      , total_length = 70}
    , self = 96
    , parent = Nothing
    , duration = 1.302789614000
    , status = Fail
    , start = 2025-09-04 08:27:51.840926109 UTC
    , finish = 2025-09-04 08:27:53.143715723 UTC
    , thread_cap_info = ("ThreadId 161", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 48
      , alphabet_size = 9
      , total_length = 312}
    , self = 95
    , parent = Nothing
    , duration = 1.311141747000
    , status = Fail
    , start = 2025-09-04 08:27:51.75460155 UTC
    , finish = 2025-09-04 08:27:53.065743297 UTC
    , thread_cap_info = ("ThreadId 141", 0, False)}
**************************************************
F                                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F                                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                                    = False\n , verbose = False}" , input_size = Size { num_rules = 21 , num_strict_rules
F                                    = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size = 6 , total_length
F                                    = 75} , self = 82 , parent = Nothing , duration = 0.601322010000 , status
F                                    = Fail , start = 2025-09-04 08:27:51.679647456 UTC , finish = 2025-09-04
F                                    08:27:52.280969466 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
F                                    
| F                                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                                  = False\n , verbose = False}" , input_size = Size { num_rules = 21 , num_strict_rules
| F                                  = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| F                                  = 75} , self = 88 , parent = Nothing , duration = 1.003514350000 , status
| F                                  = Fail , start = 2025-09-04 08:27:51.6808226 UTC , finish = 2025-09-04
| F                                  08:27:52.68433695 UTC , thread_cap_info = ("ThreadId 83", 3, False)}
| F                                  
| | F                                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                                = False\n , verbose = False}" , input_size = Size { num_rules = 21 , num_strict_rules
| | F                                = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | F                                = 75} , self = 83 , parent = Nothing , duration = 0.702606542000 , status
| | F                                = Fail , start = 2025-09-04 08:27:51.683424054 UTC , finish = 2025-09-04
| | F                                08:27:52.386030596 UTC , thread_cap_info = ("ThreadId 87", 3, False)}
| | F                                
| | | F                              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                              = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | F                              = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | F                              total_length = 216} , self = 90 , parent = Nothing , duration = 1.157905107000
| | | F                              , status = Fail , start = 2025-09-04 08:27:51.685536634 UTC , finish =
| | | F                              2025-09-04 08:27:52.843441741 UTC , thread_cap_info = ("ThreadId 94", 2,
| | | F                              False)}
| | | F                              
| | | | F                            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                            = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | F                            = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | F                            total_length = 216} , self = 87 , parent = Nothing , duration = 0.977318237000
| | | | F                            , status = Fail , start = 2025-09-04 08:27:51.685539864 UTC , finish =
| | | | F                            2025-09-04 08:27:52.662858101 UTC , thread_cap_info = ("ThreadId 95", 2,
| | | | F                            False)}
| | | | F                            
| | | | | F                          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                          = False\n , verbose = False}" , input_size = Size { num_rules = 21 , num_strict_rules
| | | | | F                          = 15 , num_top_rules = 15 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | | | F                          = 75} , self = 86 , parent = Nothing , duration = 0.934351342000 , status
| | | | | F                          = Fail , start = 2025-09-04 08:27:51.690499702 UTC , finish = 2025-09-04
| | | | | F                          08:27:52.624851044 UTC , thread_cap_info = ("ThreadId 89", 1, False)}
| | | | | F                          
| | | | | | F                        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | F                        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | F                        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | F                        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | F                        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | F                        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | F                        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | F                        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | F                        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| | | | | | F                        num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| | | | | | F                        = 8} , self = 85 , parent = Nothing , duration = 0.775738161000 , status
| | | | | | F                        = Fail , start = 2025-09-04 08:27:51.69079339 UTC , finish = 2025-09-04
| | | | | | F                        08:27:52.466531551 UTC , thread_cap_info = ("ThreadId 117", 3, False)}
| | | | | | F                        
| | | | | | | F                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | F                      , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | F                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | F                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | F                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | F                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | F                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | F                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | F                      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 1 ,
| | | | | | | F                      num_top_rules = 0 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| | | | | | | F                      = 8} , self = 84 , parent = Nothing , duration = 0.762370647000 , status
| | | | | | | F                      = Fail , start = 2025-09-04 08:27:51.704114611 UTC , finish = 2025-09-04
| | | | | | | F                      08:27:52.466485258 UTC , thread_cap_info = ("ThreadId 118", 3, False)}
| | | | | | | F                      
| | | | | | | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | | F                    = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | | | | | F                    total_length = 216} , self = 89 , parent = Nothing , duration = 1.112824962000
| | | | | | | | F                    , status = Fail , start = 2025-09-04 08:27:51.704158947 UTC , finish =
| | | | | | | | F                    2025-09-04 08:27:52.816983909 UTC , thread_cap_info = ("ThreadId 120",
| | | | | | | | F                    2, False)}
| | | | | | | | F                    
| | | | | | | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | | | F                  = 48 , num_top_rules = 48 , num_weak_rules = 16 , alphabet_size = 16 ,
| | | | | | | | | F                  total_length = 216} , self = 91 , parent = Nothing , duration = 1.151998031000
| | | | | | | | | F                  , status = Fail , start = 2025-09-04 08:27:51.711612275 UTC , finish =
| | | | | | | | | F                  2025-09-04 08:27:52.863610306 UTC , thread_cap_info = ("ThreadId 121",
| | | | | | | | | F                  2, False)}
| | | | | | | | | F                  
| | | | | | | | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | | | F                = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | | | | | | F                = 42} , self = 92 , parent = Nothing , duration = 1.203004860000 , status
| | | | | | | | | | F                = Fail , start = 2025-09-04 08:27:51.741410816 UTC , finish = 2025-09-04
| | | | | | | | | | F                08:27:52.944415676 UTC , thread_cap_info = ("ThreadId 131", 0, False)}
| | | | | | | | | | F                
| | | | | | | | | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | | | | | | F              = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | | | | | | | | | | F              = 42} , self = 93 , parent = Nothing , duration = 1.235199285000 , status
| | | | | | | | | | | F              = Fail , start = 2025-09-04 08:27:51.74782859 UTC , finish = 2025-09-04
| | | | | | | | | | | F              08:27:52.983027875 UTC , thread_cap_info = ("ThreadId 135", 1, False)}
| | | | | | | | | | | F              
| | | | | | | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | | | | | | | | | | F            = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | | | | | | | | | | F            = 312} , self = 97 , parent = Nothing , duration = 1.411558478000 , status
| | | | | | | | | | | | F            = Fail , start = 2025-09-04 08:27:51.749465903 UTC , finish = 2025-09-04
| | | | | | | | | | | | F            08:27:53.161024381 UTC , thread_cap_info = ("ThreadId 139", 0, False)}
| | | | | | | | | | | | F            
| | | | | | | | | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | | | | | | | | | | | F          = 3 , num_top_rules = 0 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | F          = 312} , self = 95 , parent = Nothing , duration = 1.311141747000 , status
| | | | | | | | | | | | | F          = Fail , start = 2025-09-04 08:27:51.75460155 UTC , finish = 2025-09-04
| | | | | | | | | | | | | F          08:27:53.065743297 UTC , thread_cap_info = ("ThreadId 141", 0, False)}
| | | | | | | | | | | | | F          
| | | | | | | | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | | | | | | | F        = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | F        = 70} , self = 98 , parent = Nothing , duration = 1.374653882000 , status
| | | | | | | | | | | | | | F        = Fail , start = 2025-09-04 08:27:51.789863779 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | F        08:27:53.164517661 UTC , thread_cap_info = ("ThreadId 150", 3, False)}
| | | | | | | | | | | | | | F        
| | | | | | | | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | | | | | | | | F      = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | | F      = 70} , self = 94 , parent = Nothing , duration = 1.263088286000 , status
| | | | | | | | | | | | | | | F      = Fail , start = 2025-09-04 08:27:51.789870004 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | F      08:27:53.05295829 UTC , thread_cap_info = ("ThreadId 152", 3, False)}
| | | | | | | | | | | | | | | F      
| | | | | | | | | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | | | | | | | | | F    = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | | | F    = 70} , self = 96 , parent = Nothing , duration = 1.302789614000 , status
| | | | | | | | | | | | | | | | F    = Fail , start = 2025-09-04 08:27:51.840926109 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | F    08:27:53.143715723 UTC , thread_cap_info = ("ThreadId 161", 3, False)}
| | | | | | | | | | | | | | | | F    
| | | | | | | | | | | | | | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | | | | | | | | | | | | | F  = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| | | | | | | | | | | | | | | | | F  = 70} , self = 99 , parent = Nothing , duration = 1.304739907000 , status
| | | | | | | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:27:51.880274655 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | | | | F  08:27:53.185014562 UTC , thread_cap_info = ("ThreadId 160", 2, False)}
| | | | | | | | | | | | | | | | | F  
F | | | | | | | | | | | | | | | | |  
  | F | | | | | | | | | | | | | | |  
  |   | | | | F | | | | | | | | | |  
  |   | | | F   | | | | | | | | | |  
  |   | | F     | | | | | | | | | |  
  |   | F       | | | | | | | | | |  
  F   |         | | | | | | | | | |  
      |         F | | | | | | | | |  
      F           | | | | | | | | |  
                  F | | | | | | | |  
                    F | | | | | | |  
                      F | | | | | |  
F                       | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
F                       | | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F                       | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F                       | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F                       | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F                       | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
F                       | | | | | |  , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
F                       | | | | | |  = 3 , total_length = 42} , self = 100 , parent = Nothing , duration = 0.222957176000
F                       | | | | | |  , status = Fail , start = 2025-09-04 08:27:53.04246021 UTC , finish = 2025-09-04
F                       | | | | | |  08:27:53.265417386 UTC , thread_cap_info = ("ThreadId 188", 0, False)}
F                       | | | | | |  
|                       | | | F | |  
|                       | F |   | |  
|                       |   |   F |  
| E                     |   |     |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E                     |   |     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E                     |   |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E                     |   |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E                     |   |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E                     |   |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| E                     |   |     |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
| E                     |   |     |  = 9 , total_length = 70} , self = 103 , parent = Nothing , duration = 0.440747887000
| E                     |   |     |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:53.160993218
| E                     |   |     |  UTC , finish = 2025-09-04 08:27:53.601741105 UTC , thread_cap_info = ("ThreadId
| E                     |   |     |  189", 3, False)}
| E                     |   |     |  
| |                     F   |     |  
| |                         F     |  
| |                               F  
| | S                                Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | S                                = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | S                                = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | S                                , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S                                \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S                                , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | S                                , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 16 , alphabet_size
| | S                                = 9 , total_length = 70} , self = 101 , parent = Nothing , duration = 0.207191436000
| | S                                , status = Success , start = 2025-09-04 08:27:53.220821406 UTC , finish
| | S                                = 2025-09-04 08:27:53.428012842 UTC , thread_cap_info = ("ThreadId 191",
| | S                                3, False)}
| | S                                
F | |                                
  | S                                
  E                                  
