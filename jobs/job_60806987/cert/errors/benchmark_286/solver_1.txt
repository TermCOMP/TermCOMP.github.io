last 453 length 1817
CNF 453 vars 1817 clauses
last 367 length 1505
CNF 367 vars 1505 clauses
last 2122 length 9035
CNF 2122 vars 9035 clauses
last 1353 length 5376
CNF 1353 vars 5376 clauses
last 971 length 3882
last 1112 length 4526
CNF 971 vars 3882 clauses
last 818 length 3236
CNF 1112 vars 4526 clauses
CNF 818 vars 3236 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
**************************************************
summary
**************************************************
SRS with 4 strict rules and 3 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 15 strict rules and 7 weak rules on 5 letters       weights
SRS with 7 strict rules and 7 weak rules on 5 letters       EDG
SRS with 3 strict rules and 7 weak rules on 5 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 5 letters       weights
SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
SRS with 1 strict rules and 1 weak rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a] -> [b, c, c] {- Input 0 -}
  [b, a, c] -> [a, a, c] {- Input 1 -}
  [a, b, a] -> [a, c, c] {- Input 2 -}
  [b, b, a] -> [a, b, a] {- Input 3 -}
  [a, a, c] ->= [a, b, c] {- Input 4 -}
  [a, c, c] ->= [c, b, a] {- Input 5 -}
  [b, c, c] ->= [c, c, a] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, a] -> [b, c, c] {- Input 0 -}
  [b, a, c] -> [a, a, c] {- Input 1 -}
  [a, b, a] -> [a, c, c] {- Input 2 -}
  [b, b, a] -> [a, b, a] {- Input 3 -}
  [a, a, c] -> [a, b, c] {- Strictified (Input 4) -}
  [a, c, c] -> [c, b, a] {- Strictified (Input 5) -}
  [b, c, c] -> [c, c, a] {- Strictified (Input 6) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a] -> [c, c, b] {- Mirror (Input 0) -}
  [c, a, b] -> [c, a, a] {- Mirror (Input 1) -}
  [a, b, a] -> [c, c, a] {- Mirror (Input 2) -}
  [a, b, b] -> [a, b, a] {- Mirror (Input 3) -}
  [c, a, a] -> [c, b, a] {- Mirror (Strictified (Input 4)) -}
  [c, c, a] -> [a, b, c] {- Mirror (Strictified (Input 5)) -}
  [c, c, b] -> [a, c, c] {- Mirror (Strictified (Input 6)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, c, a] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, b, a] |-> [c#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, b, a] |-> [c#, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, b, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [a#, b, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, a, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, c, a] |-> [c#] {- DP (Top 2) (Mirror (Strictified (Input 5))) -}
  [c#, c, b] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, c, b] |-> [c#] {- DP (Top 2) (Mirror (Strictified (Input 6))) -}
  [c#, c, b] |-> [c#, c] {- DP (Top 1) (Mirror (Strictified (Input 6))) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, c, a] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, b, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, a] |-> [c#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, a, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, c, b] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, c, a] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [c, c, b] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( b
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( c
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( a#
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( c#
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
  [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
reason
  remove un-usable
    SRS
      [c, a, b] ->= [c, a, a] {- DP Nontop (Mirror (Input 1)) -}
      [c, a, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [c#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, b, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (4/3,3)\Strictify\Mirror(7,3)\Deepee(15/7,5)\Weight(7/7,5)\EDG(3/7,5)\Matrix{\Natural}{2}(2/3,5)\Weight\EDG(1/3,4)\Usable(1/1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E  , closure = Backward\n , start_strict_only = True\n , max_closure_length
E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E  = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E  = 12} , self = 79 , parent = Nothing , duration = 0.114052429000 , status
E  = Except "AsyncCancelled" , start = 2025-09-04 08:24:22.424784775 UTC ,
E  finish = 2025-09-04 08:24:22.538837204 UTC , thread_cap_info = ("ThreadId
E  56", 2, False)}
E  
E  
