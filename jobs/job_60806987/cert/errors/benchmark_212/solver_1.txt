last 1057 length 4243
CNF 1057 vars 4243 clauses
last 883 length 3557
CNF 883 vars 3557 clauses
last 1601 length 6399
last 11412 length 48225
CNF 1601 vars 6399 clauses
last 1241 length 5043
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2816, clauses: 10185
last 2816 length 10185
CNF 11412 vars 48225 clauses
CNF 2816 vars 10185 clauses
CNF 1241 vars 5043 clauses
last 489 length 2184
last 431 length 1819
CNF 431 vars 1819 clauses
CNF 489 vars 2184 clauses
**************************************************
summary
**************************************************
SRS with 6 strict rules and 1 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       split
2 sub-proofs
  1 SRS with 6 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 54 strict rules and 9 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 3 weak rules on 7 letters       weights
  SRS with 0 strict rules and 3 weak rules on 4 letters       no strict rules

  2 SRS with 1 rules on 2 letters       split
  2 sub-proofs
    1 SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 4 rules on 4 letters       weights
    SRS with 2 rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, c, b] -> [b, b, b] {- Input 0 -}
  [c, a, c] -> [b, a, a] {- Input 1 -}
  [c, c, c] -> [a, a, b] {- Input 2 -}
  [c, b, c] -> [c, b, b] {- Input 3 -}
  [c, a, c] -> [b, b, c] {- Input 4 -}
  [c, b, c] -> [c, c, b] {- Input 5 -}
  [a, b, b] ->= [b, a, c] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, c, b] -> [b, b, b] {- Input 0 -}
  [c, a, c] -> [b, a, a] {- Input 1 -}
  [c, c, c] -> [a, a, b] {- Input 2 -}
  [c, b, c] -> [c, b, b] {- Input 3 -}
  [c, a, c] -> [b, b, c] {- Input 4 -}
  [c, b, c] -> [c, c, b] {- Input 5 -}
  [a, b, b] -> [b, a, c] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, c, b] -> [b, b, b] {- Input 0 -}
  [c, a, c] -> [b, a, a] {- Input 1 -}
  [c, c, c] -> [a, a, b] {- Input 2 -}
  [c, b, c] -> [c, b, b] {- Input 3 -}
  [c, a, c] -> [b, b, c] {- Input 4 -}
  [c, b, c] ->= [c, c, b] {- Input 5 -}
  [a, b, b] -> [b, a, c] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, c], [c, b]] -> [ [c, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, c], [c, a]] -> [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, c], [c, b], [b, c], [c, a]] -> [ [b, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, c], [c, b], [b, c], [c, c]] -> [ [a, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[a, c], [c, b], [b, c], [c, b]] -> [ [a, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, c], [c, b], [b, c], [c, a]] -> [ [a, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, c], [c, a], [a, c], [c, c]] -> [ [c, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[c, c], [c, a], [a, c], [c, b]] -> [ [c, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[c, c], [c, a], [a, c], [c, a]] -> [ [c, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, c], [c, a], [a, c], [c, c]] -> [ [b, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, c], [c, a], [a, c], [c, b]] -> [ [b, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[b, c], [c, a], [a, c], [c, a]] -> [ [b, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[a, c], [c, a], [a, c], [c, c]] -> [ [a, b] , [b, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[a, c], [c, a], [a, c], [c, b]] -> [ [a, b] , [b, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[a, c], [c, a], [a, c], [c, a]] -> [ [a, b] , [b, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[c, c], [c, b], [b, c], [c, b]] ->= [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, b]] ->= [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, a]] ->= [ [b, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 5)) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
  [[a, c], [c, b], [b, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 5)) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, c] , [c, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 5)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [c, b, c] -> [c, c, b] {- Input 5 -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, b, c] -> [c, c, b] {- Input 5 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
reason
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, c] , [c, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
reason
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (6/1,3)\Strictify(7,3)\Split[(6/1,3)\TileAllAll{2}(54/9,9)\Matrix{\Natural}{2}(2/3,7)\Weight(0/3,4)[],(1,2)\Split[(1,2)\TileAllAll{2}(4,4)\Weight(2,3)\Matrix{\Natural}{2}(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))last 11291 length 47461
CNF 11291 vars 47461 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2816, clauses: 10185, status: Unsatisfied, time: 0.248956562s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4065, clauses: 15125
last 4065 length 15125
CNF 4065 vars 15125 clauses
last 14831 length 62898
CNF 14831 vars 62898 clauses
last 12594 length 53511
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 12594 vars 53511 clauses


**************************************************
E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E          = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
E          = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
E          = 504} , self = 61 , parent = Nothing , duration = 0.509441810000 , status
E          = Except "AsyncCancelled" , start = 2025-09-04 08:21:32.963998146 UTC ,
E          finish = 2025-09-04 08:21:33.473439956 UTC , thread_cap_info = ("ThreadId
E          68", 1, False)}
E          
| S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S        = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| S        = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| S        = 504} , self = 59 , parent = Nothing , duration = 0.474477756000 , status
| S        = Success , start = 2025-09-04 08:21:32.964003571 UTC , finish = 2025-09-04
| S        08:21:33.438481327 UTC , thread_cap_info = ("ThreadId 70", 1, False)}
| S        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F      = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F      = 48} , self = 56 , parent = Nothing , duration = 0.175828001000 , status
| | F      = Fail , start = 2025-09-04 08:21:33.171437836 UTC , finish = 2025-09-04
| | F      08:21:33.347265837 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F    = 5 , num_top_rules = 5 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | F    = 72} , self = 57 , parent = Nothing , duration = 0.119830505000 , status
| | | F    = Fail , start = 2025-09-04 08:21:33.233228872 UTC , finish = 2025-09-04
| | | F    08:21:33.353059377 UTC , thread_cap_info = ("ThreadId 102", 3, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F  = 5 , num_top_rules = 5 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | | F  = 72} , self = 58 , parent = Nothing , duration = 0.185968671000 , status
| | | | F  = Fail , start = 2025-09-04 08:21:33.249150835 UTC , finish = 2025-09-04
| | | | F  08:21:33.435119506 UTC , thread_cap_info = ("ThreadId 103", 3, False)}
| | | | F  
| | F | |  
| |   F |  
| |     F  
| S        
E          
last 16586 length 70104
