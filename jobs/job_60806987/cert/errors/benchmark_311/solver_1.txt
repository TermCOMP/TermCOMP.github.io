[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 3 seen 3 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 1012 length 5047
CNF 1012 vars 5047 clauses
[Info] pool sizes (success) 114 seen 89 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 130 seen 105 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 1168 length 6631
last 1145 length 6113
last 1203 length 5737
CNF 1145 vars 6113 clauses
last 1203 length 5737
CNF 1203 vars 5737 clauses
CNF 1203 vars 5737 clauses
last 1145 length 6113
CNF 1145 vars 6113 clauses
last 2324 length 12345
CNF 2324 vars 12345 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3918, clauses: 15038
last 3918 length 15038
CNF 3918 vars 15038 clauses
last 2776 length 13893
**************************************************
summary
**************************************************
SRS with 1 strict rules and 3 weak rules on 2 letters       looping derivation
from
  [a, a, a]
to
  [a, a, a, b, b]
via 20 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, a, a] -> [] {- Input 0 -}
  [a] ->= [] {- Input 1 -}
  [b] ->= [] {- Input 2 -}
  [] ->= [b, b, a, b, b] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [a, a, a], via = [(Step   { rule = 0, position = 0}, []), (Step   { rule = 3, position = 0}, [b, b, a, b, b]), (Step   { rule = 2, position = 3}, [b, b, a, b]), (Step   { rule = 2, position = 3}, [b, b, a]), (Step   { rule = 2, position = 0}, [b, a]), (Step   { rule = 2, position = 0}, [a]), (Step   { rule = 3, position = 1}, [a, b, b, a, b, b]), (Step   { rule = 1, position = 3}, [a, b, b, b, b]), (Step   { rule = 2, position = 1}, [a, b, b, b]), (Step   { rule = 2, position = 1}, [a, b, b]), (Step   { rule = 2, position = 1}, [a, b]), (Step   { rule = 3, position = 1}, [a, b, b, a, b, b, b]), (Step   { rule = 2, position = 1}, [a, b, a, b, b, b]), (Step   { rule = 2, position = 1}, [a, a, b, b, b]), (Step   { rule = 2, position = 2}, [a, a, b, b]), (Step   { rule = 2, position = 2}, [a, a, b]), (Step   { rule = 2, position = 2}, [a, a]), (Step   { rule = 3, position = 2}, [a, a, b, b, a, b, b]), (Step   { rule = 2, position = 2}, [a, a, b, a, b, b]), (Step   { rule = 2, position = 2}, [a, a, a, b, b])], to = [a, a, a, b, b]}

**************************************************
skeleton: (1/3,2)\Loop{20}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3918, clauses: 15038, status: Unsatisfied, time: 0.034666045s
last 1623 length 8517
last 2324 length 12345
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 7} , self
E              = 61 , parent = Nothing , duration = 0.299068968000 , status = Except "AsyncCancelled"
E              , start = 2025-09-04 08:23:46.230313832 UTC , finish = 2025-09-04 08:23:46.5293828
E              UTC , thread_cap_info = ("ThreadId 20", 0, False)}
E              
| E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E            = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| E            = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| E            = 52} , self = 58 , parent = Nothing , duration = 0.173132083000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-04 08:23:46.2355628 UTC , finish
| E            = 2025-09-04 08:23:46.408694883 UTC , thread_cap_info = ("ThreadId 69",
| E            3, False)}
| E            
| | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | E          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | E          = 52} , self = 59 , parent = Nothing , duration = 0.166763572000 , status
| | E          = Except "AsyncCancelled" , start = 2025-09-04 08:23:46.247232873 UTC ,
| | E          finish = 2025-09-04 08:23:46.413996445 UTC , thread_cap_info = ("ThreadId
| | E          71", 3, False)}
| | E          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F        = 12 , num_top_rules = 12 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | F        = 80} , self = 65 , parent = Nothing , duration = 0.278011478000 , status
| | | F        = Fail , start = 2025-09-04 08:23:46.262106589 UTC , finish = 2025-09-04
| | | F        08:23:46.540118067 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | F      = 12 , num_top_rules = 12 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | F      = 80} , self = 63 , parent = Nothing , duration = 0.254844873000 , status
| | | | F      = Fail , start = 2025-09-04 08:23:46.280605726 UTC , finish = 2025-09-04
| | | | F      08:23:46.535450599 UTC , thread_cap_info = ("ThreadId 93", 0, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | F    = 12 , num_top_rules = 12 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | F    = 80} , self = 64 , parent = Nothing , duration = 0.156430927000 , status
| | | | | F    = Fail , start = 2025-09-04 08:23:46.381199025 UTC , finish = 2025-09-04
| | | | | F    08:23:46.537629952 UTC , thread_cap_info = ("ThreadId 117", 0, False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | F  = 12 , num_top_rules = 12 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | F  = 80} , self = 66 , parent = Nothing , duration = 0.139833028000 , status
| | | | | | F  = Fail , start = 2025-09-04 08:23:46.402994302 UTC , finish = 2025-09-04
| | | | | | F  08:23:46.54282733 UTC , thread_cap_info = ("ThreadId 118", 0, False)}
| | | | | | F  
| E | | | | |  
|   E | | | |  
E     | | | |  
      | F | |  
      |   F |  
      F     |  
            F  
CNF 1623 vars 8517 clauses
