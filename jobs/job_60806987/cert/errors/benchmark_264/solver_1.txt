last 1276 length 4991
last 1656 length 6807
CNF 1276 vars 4991 clauses
last 1272 length 5021
last 1836 length 7481
CNF 1656 vars 6807 clauses
CNF 1272 vars 5021 clauses
CNF 1836 vars 7481 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3735, clauses: 13958
last 3735 length 13958
last 7172 length 31492
last 6496 length 27683
CNF 6496 vars 27683 clauses
CNF 7172 vars 31492 clauses
CNF 3735 vars 13958 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3964, clauses: 14965
last 3964 length 14965
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3735, clauses: 13958, status: Satisfied, time: 0.162287073s
CNF 3964 vars 14965 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3964, clauses: 14965, status: Satisfied, time: 0.111192112s
last 5386 length 22909
last 915 length 3621
last 5964 length 26081
last 1091 length 4467
last 859 length 3405
last 1087 length 4421
CNF 5386 vars 22909 clauses
CNF 915 vars 3621 clauses
CNF 1091 vars 4467 clauses
last 7492 length 32902
last 6910 length 29653
CNF 5964 vars 26081 clauses
CNF 1087 vars 4421 clauses
last 6718 length 28639
CNF 859 vars 3405 clauses
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2588, clauses: 9399
last 7828 length 34314

CNF 6718 vars 28639 clauses
CNF 6910 vars 29653 clauses
last 2588 length 9399
CNF 7492 vars 32902 clauses
CNF 7828 vars 34314 clauses
summary
CNF 2588 vars 9399 clauses
**************************************************
SRS with 6 strict rules and 1 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 5 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 18 strict rules and 45 weak rules on 9 letters       weights
  SRS with 0 strict rules and 29 weak rules on 9 letters       no strict rules

  2 SRS with 5 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 1 strict rules and 4 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 9 strict rules and 36 weak rules on 9 letters       weights
    SRS with 2 strict rules and 27 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 strict rules and 27 weak rules on 9 letters       weights
    SRS with 0 strict rules and 24 weak rules on 9 letters       no strict rules

    2 SRS with 4 rules on 3 letters       split
    2 sub-proofs
      1 SRS with 4 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
      SRS with 36 rules on 9 letters       weights
      SRS with 24 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
      SRS with 12 rules on 9 letters       weights
      SRS with 0 rules on 0 letters       no strict rules

      2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, a] -> [a, c, b] {- Input 0 -}
  [b, b, c] -> [b, c, c] {- Input 1 -}
  [c, c, b] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [a, b, a] {- Input 3 -}
  [b, a, c] -> [a, b, a] {- Input 4 -}
  [a, c, a] -> [b, c, c] {- Input 5 -}
  [b, c, a] ->= [b, a, a] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, c, a] -> [a, c, b] {- Input 0 -}
  [b, b, c] -> [b, c, c] {- Input 1 -}
  [c, c, b] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [a, b, a] {- Input 3 -}
  [b, a, c] -> [a, b, a] {- Input 4 -}
  [a, c, a] -> [b, c, c] {- Input 5 -}
  [b, c, a] -> [b, a, a] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, a] ->= [a, c, b] {- Input 0 -}
  [b, b, c] ->= [b, c, c] {- Input 1 -}
  [c, c, b] ->= [c, a, b] {- Input 2 -}
  [b, a, a] ->= [a, b, a] {- Input 3 -}
  [b, a, c] ->= [a, b, a] {- Input 4 -}
  [a, c, a] -> [b, c, c] {- Input 5 -}
  [b, c, a] -> [b, a, a] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, c]] ->= [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[a, a], [a, c], [c, a], [a, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[a, a], [a, c], [c, a], [a, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[a, a], [a, c], [c, a], [a, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 5)) -}
  [[c, a], [a, c], [c, a], [a, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[c, a], [a, c], [c, a], [a, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
  [[c, a], [a, c], [c, a], [a, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 5)) -}
  [[b, a], [a, c], [c, a], [a, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
  [[b, a], [a, c], [c, a], [a, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 5)) -}
  [[b, a], [a, c], [c, a], [a, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 5)) -}
  [[a, b], [b, c], [c, a], [a, a]] -> [ [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, a], [a, c]] -> [ [a, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, a], [a, b]] -> [ [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, a], [a, a]] -> [ [c, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, a], [a, c]] -> [ [c, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, a], [a, b]] -> [ [c, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, a], [a, a]] -> [ [b, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, a], [a, c]] -> [ [b, b] , [b, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, a], [a, b]] -> [ [b, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 4/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, c, a] -> [a, c, b] {- Input 0 -}
  [b, b, c] -> [b, c, c] {- Input 1 -}
  [c, c, b] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [a, b, a] {- Input 3 -}
  [b, a, c] -> [a, b, a] {- Input 4 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, a] ->= [a, c, b] {- Input 0 -}
  [b, b, c] ->= [b, c, c] {- Input 1 -}
  [c, c, b] ->= [c, a, b] {- Input 2 -}
  [b, a, a] ->= [a, b, a] {- Input 3 -}
  [b, a, c] -> [a, b, a] {- Input 4 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, c]] ->= [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[a, b], [b, a], [a, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[a, b], [b, a], [a, c], [c, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, c]] -> [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, b]] -> [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[b, b], [b, a], [a, c], [c, b]] -> [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 2/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[c, b], [b, a], [a, c], [c, c]] -> [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] ->= [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] ->= [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] ->= [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] ->= [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] ->= [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] ->= [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] ->= [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] ->= [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] ->= [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, c, a] -> [a, c, b] {- Input 0 -}
  [b, b, c] -> [b, c, c] {- Input 1 -}
  [c, c, b] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [a, b, a] {- Input 3 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, a] -> [a, c, b] {- Input 0 -}
  [b, b, c] -> [b, c, c] {- Input 1 -}
  [c, c, b] -> [c, a, b] {- Input 2 -}
  [b, a, a] -> [a, b, a] {- Input 3 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, c]] -> [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, a], [a, b]] -> [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, c]] -> [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, b], [b, a], [a, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (6/1,3)\Strictify(7,3)\Split[(2/5,3)\TileAllAll{2}(18/45,9)\Weight(0/29,9)[],(5,3)\Split[(1/4,3)\TileAllAll{2}(9/36,9)\Weight(2/27,9)\Matrix{\Natural}{2}(0/27,9)\Weight(0/24,9)[],(4,3)\Split[(4,3)\TileAllAll{2}(36,9)\Weight(24,9)\Matrix{\Natural}{2}(12,9)\Weight(0,0)[],(0,0)[]]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2588, clauses: 9399, status: Satisfied, time: 0.034413386s
unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S            = False\n , verbose = False}" , input_size = Size { num_rules = 29 , num_strict_rules
S            = 29 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S            = 232} , self = 67 , parent = Nothing , duration = 0.240395004000 , status
S            = Success , start = 2025-09-04 08:21:18.338893903 UTC , finish = 2025-09-04
S            08:21:18.579288907 UTC , thread_cap_info = ("ThreadId 85", 2, False)}
S            
| E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E          = False\n , verbose = False}" , input_size = Size { num_rules = 29 , num_strict_rules
| E          = 29 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| E          = 232} , self = 77 , parent = Nothing , duration = 0.254569245000 , status
| E          = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.340304548 UTC ,
| E          finish = 2025-09-04 08:21:18.594873793 UTC , thread_cap_info = ("ThreadId
| E          87", 2, False)}
| E          
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 12 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 7 ,
| | S        alphabet_size = 5 , total_length = 72} , self = 82 , parent = Nothing ,
| | S        duration = 0.227488299000 , status = Success , start = 2025-09-04 08:21:18.41276936
| | S        UTC , finish = 2025-09-04 08:21:18.640257659 UTC , thread_cap_info = ("ThreadId
| | S        100", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | E      , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 7 , alphabet_size
| | | E      = 5 , total_length = 72} , self = 86 , parent = Nothing , duration = 0.319839946000
| | | E      , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.440000304
| | | E      UTC , finish = 2025-09-04 08:21:18.75984025 UTC , thread_cap_info = ("ThreadId
| | | E      115", 0, False)}
| | | E      
| | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S    = 13 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 7 ,
| | | | S    alphabet_size = 5 , total_length = 78} , self = 84 , parent = Nothing ,
| | | | S    duration = 0.271029998000 , status = Success , start = 2025-09-04 08:21:18.47547124
| | | | S    UTC , finish = 2025-09-04 08:21:18.746501238 UTC , thread_cap_info = ("ThreadId
| | | | S    117", 0, False)}
| | | | S    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 13
| | | | | E  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 7 , alphabet_size
| | | | | E  = 5 , total_length = 78} , self = 88 , parent = Nothing , duration = 0.300980651000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.479658346
| | | | | E  UTC , finish = 2025-09-04 08:21:18.780638997 UTC , thread_cap_info = ("ThreadId
| | | | | E  118", 0, False)}
| | | | | E  
S | | | | |  
  E | | | |  
S   | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S   | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
S   | | | |  = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S   | | | |  = 192} , self = 96 , parent = Nothing , duration = 0.319376189000 , status
S   | | | |  = Success , start = 2025-09-04 08:21:18.595005598 UTC , finish = 2025-09-04
S   | | | |  08:21:18.914381787 UTC , thread_cap_info = ("ThreadId 151", 2, False)}
S   | | | |  
|   S | | |  
|     | S |  
|     E   |  
|         E  
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F          = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F          = 48} , self = 101 , parent = Nothing , duration = 0.136835330000 , status
| F          = Fail , start = 2025-09-04 08:21:18.780956747 UTC , finish = 2025-09-04
| F          08:21:18.917792077 UTC , thread_cap_info = ("ThreadId 166", 0, False)}
| F          
S |          
  F          
