last 433 length 1771
CNF 433 vars 1771 clauses
last 1777 length 7717
CNF 1777 vars 7717 clauses
last 1558 length 6560
last 590 length 2347
CNF 590 vars 2347 clauses
last 486 length 1961
CNF 486 vars 1961 clauses
last 584 length 2341
CNF 584 vars 2341 clauses
last 484 length 1987
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6579
last 1859 length 6579
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6579
CNF 484 vars 1987 clauses
last 1859 length 6579
CNF 1859 vars 6579 clauses
CNF 1859 vars 6579 clauses
last 904 length 3854
CNF 904 vars 3854 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6830, clauses: 28411
last 6830 length 28411
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6579, status: Satisfied, time: 0.109871343s
CNF 6830 vars 28411 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6579, status: Unsatisfied, time: 0.113889397s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6830, clauses: 28411, status: Satisfied, time: 0.061950154s
last 1569 length 6826
CNF 1569 vars 6826 clauses
**************************************************
summary
**************************************************
SRS with 3 strict rules and 4 weak rules on 3 letters       cleaner
SRS with 3 strict rules and 3 weak rules on 3 letters       weights
SRS with 1 strict rules and 2 weak rules on 3 letters       strictify
SRS with 3 rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 18 weak rules on 9 letters       weights
  SRS with 3 strict rules and 4 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 4 weak rules on 6 letters       no strict rules

  2 SRS with 2 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 2 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 18 rules on 9 letters       weights
    SRS with 4 rules on 6 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 3 rules on 5 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] -> [a, a, c] {- Input 1 -}
  [b, a, c] -> [c, c, a] {- Input 2 -}
  [a, c, a] ->= [a, c, c] {- Input 3 -}
  [a, b, b] ->= [a, b, b] {- Input 4 -}
  [a, b, b] ->= [a, b, a] {- Input 5 -}
  [b, c, c] ->= [c, b, c] {- Input 6 -}
reason
  cleaner
   property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] -> [a, a, c] {- Input 1 -}
  [b, a, c] -> [c, c, a] {- Input 2 -}
  [a, c, a] ->= [a, c, c] {- Input 3 -}
  [a, b, b] ->= [a, b, a] {- Input 5 -}
  [b, c, c] ->= [c, b, c] {- Input 6 -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] ->= [a, b, a] {- Input 5 -}
  [b, c, c] ->= [c, b, c] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] -> [a, b, a] {- Strictified (Input 5) -}
  [b, c, c] -> [c, b, c] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, a] ->= [b, a, c] {- Input 0 -}
  [a, b, b] ->= [a, b, a] {- Strictified (Input 5) -}
  [b, c, c] -> [c, b, c] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, a]] ->= [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, c]] ->= [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, b]] ->= [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, a]] ->= [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, c]] ->= [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] ->= [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, a]] ->= [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, c]] ->= [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] ->= [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, b], [b, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, b], [b, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, c]] ->= [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 1/1)
  ([c, a], 3/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, c], [c, a], [a, a]] ->= [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 0 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[b, a], [a, c], [c, a], [a, a]] ->= [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] -> [a, b, a] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c, a] -> [b, a, c] {- Input 0 -}
  [a, b, b] -> [a, b, a] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a], [a, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, a], [a, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, a], [a, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, a], [a, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 2/1)
  ([c, a], 2/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, c], [c, a], [a, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([c, a], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3/4,3)\Cleaner(3/3,3)\Weight(1/2,3)\Strictify(3,3)\Split[(1/2,3)\TileAllAll{2}(9/18,9)\Weight(3/4,9)\Matrix{\Natural}{2}(0/4,6)[],(2,3)\Split[(2,3)\TileAllAll{2}(18,9)\Weight(4,6)\Matrix{\Natural}{2}(3,5)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
S        = 4 , total_length = 24} , self = 111 , parent = Nothing , duration = 0.152626072000
S        , status = Success , start = 2025-09-04 08:21:31.221243563 UTC , finish
S        = 2025-09-04 08:21:31.373869635 UTC , thread_cap_info = ("ThreadId 160",
S        2, False)}
S        
| E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| E      = 4 , total_length = 24} , self = 115 , parent = Nothing , duration = 0.159967034000
| E      , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:31.234486925
| E      UTC , finish = 2025-09-04 08:21:31.394453959 UTC , thread_cap_info = ("ThreadId
| E      174", 2, False)}
| E      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | F    = 4 , total_length = 24} , self = 120 , parent = Nothing , duration = 0.161029106000
| | F    , status = Fail , start = 2025-09-04 08:21:31.235916246 UTC , finish =
| | F    2025-09-04 08:21:31.396945352 UTC , thread_cap_info = ("ThreadId 178",
| | F    0, False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | S  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | S  = 4 , total_length = 24} , self = 122 , parent = Nothing , duration = 0.152032133000
| | | S  , status = Success , start = 2025-09-04 08:21:31.257784373 UTC , finish
| | | S  = 2025-09-04 08:21:31.409816506 UTC , thread_cap_info = ("ThreadId 187",
| | | S  0, False)}
| | | S  
S | | |  
  E | |  
    F |  
      S  
