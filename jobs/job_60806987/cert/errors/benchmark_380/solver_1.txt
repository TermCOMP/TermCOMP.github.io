[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 2 seen 2 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 276 length 1177
last 242 length 1087
last 272 length 1233
last 564 length 2545
last 622 length 2775
last 264 length 1189
last 558 length 2535
CNF 242 vars 1087 clauses
last 650 length 2931
CNF 272 vars 1233 clauses
CNF 276 vars 1177 clauses
CNF 264 vars 1189 clauses
CNF 564 vars 2545 clauses
CNF 622 vars 2775 clauses
CNF 558 vars 2535 clauses
CNF 650 vars 2931 clauses
last 860 length 3656
CNF 860 vars 3656 clauses
last 254 length 1068
last 993 length 4232
CNF 993 vars 4232 clauses
last 860 length 3656
CNF 860 vars 3656 clauses
last 993 length 4232
last 363 length 1560
CNF 254 vars 1068 clauses
CNF 993 vars 4232 clauses
last 3510 length 15294
CNF 363 vars 1560 clauses
last 4555 length 19081
CNF 3510 vars 15294 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7219
last 1940 length 7219
CNF 1940 vars 7219 clauses
CNF 4555 vars 19081 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7219, status: Unsatisfied, time: 0.064322313s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12567, clauses: 51893
last 12567 length 51893
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4897, clauses: 18255
last 4897 length 18255
CNF 12567 vars 51893 clauses
CNF 4897 vars 18255 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12567, clauses: 51893, status: Satisfied, time: 0.203886311s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 2 weak rules on 3 letters       mirror
SRS with 1 strict rules and 2 weak rules on 3 letters       context
SRS with 1 strict rules and 6 weak rules on 3 letters       mirror
SRS with 1 strict rules and 6 weak rules on 3 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, b, a] -> [c] {- Input 0 -}
  [] ->= [a] {- Input 1 -}
  [] ->= [a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, b, c] -> [c] {- Mirror (Input 0) -}
  [] ->= [a] {- Mirror (Input 1) -}
  [] ->= [b, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, b, b, c] -> [c] {- Mirror (Input 0) -}
  [a] ->= [a, a] {- Mirror (Input 1) -}
  [b] ->= [b, a] {- Mirror (Input 1) -}
  [c] ->= [c, a] {- Mirror (Input 1) -}
  [a] ->= [a, b, a] {- Mirror (Input 2) -}
  [b] ->= [b, b, a] {- Mirror (Input 2) -}
  [c] ->= [c, b, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, b, b, a] -> [c] {- Input 0 -}
  [a] ->= [a, a] {- Input 1 -}
  [b] ->= [a, b] {- Input 1 -}
  [c] ->= [a, c] {- Input 1 -}
  [a] ->= [a, b, a] {- Input 2 -}
  [b] ->= [a, b, b] {- Input 2 -}
  [c] ->= [a, b, c] {- Input 2 -}
reason
  ( a
  , St  / 0A  0A  -   \
        | 0A  0A  -   |
        \ -2A -2A -1A / )
  ( b
  , St  / 0A  -   -  \
        | 0A  -   -  |
        \ -1A -1A 1A / )
  ( c
  , St  / 0A  0A  1A \
        | 0A  0A  1A |
        \ -2A -1A 0A / )
   property Termination
has value Just True
for SRS
  [a] ->= [a, a] {- Input 1 -}
  [b] ->= [a, b] {- Input 1 -}
  [c] ->= [a, c] {- Input 1 -}
  [a] ->= [a, b, a] {- Input 2 -}
  [b] ->= [a, b, b] {- Input 2 -}
  [c] ->= [a, b, c] {- Input 2 -}
reason
  no strict rules

**************************************************
skeleton: \Mirror(1/2,3)\Context\Mirror(1/6,3)\Matrix{\ArcticBZ}{3}(0/6,3)[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F          = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
F          = 26} , self = 91 , parent = Nothing , duration = 0.203073136000 , status
F          = Fail , start = 2025-09-04 08:27:51.151688433 UTC , finish = 2025-09-04
F          08:27:51.354761569 UTC , thread_cap_info = ("ThreadId 159", 1, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| F        = 3 , num_top_rules = 0 , num_weak_rules = 14 , alphabet_size = 9 , total_length
| F        = 70} , self = 93 , parent = Nothing , duration = 0.213382242000 , status
| F        = Fail , start = 2025-09-04 08:27:51.158431878 UTC , finish = 2025-09-04
| F        08:27:51.37181412 UTC , thread_cap_info = ("ThreadId 164", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F      = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 3 , total_length
| | F      = 26} , self = 95 , parent = Nothing , duration = 0.240027355000 , status
| | F      = Fail , start = 2025-09-04 08:27:51.171663548 UTC , finish = 2025-09-04
| | F      08:27:51.411690903 UTC , thread_cap_info = ("ThreadId 161", 1, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | F    = 3 , num_top_rules = 0 , num_weak_rules = 42 , alphabet_size = 9 , total_length
| | | F    = 252} , self = 98 , parent = Nothing , duration = 0.301131001000 , status
| | | F    = Fail , start = 2025-09-04 08:27:51.233169972 UTC , finish = 2025-09-04
| | | F    08:27:51.534300973 UTC , thread_cap_info = ("ThreadId 173", 1, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | | F  = 3 , num_top_rules = 0 , num_weak_rules = 42 , alphabet_size = 9 , total_length
| | | | F  = 252} , self = 96 , parent = Nothing , duration = 0.217372798000 , status
| | | | F  = Fail , start = 2025-09-04 08:27:51.23317549 UTC , finish = 2025-09-04
| | | | F  08:27:51.450548288 UTC , thread_cap_info = ("ThreadId 175", 1, False)}
| | | | F  
F | | | |  
S | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
S | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
S | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
S | | | |  = 3 , total_length = 26} , self = 99 , parent = Nothing , duration = 0.423884768000
S | | | |  , status = Success , start = 2025-09-04 08:27:51.354792999 UTC , finish
S | | | |  = 2025-09-04 08:27:51.778677767 UTC , thread_cap_info = ("ThreadId 180",
S | | | |  1, False)}
S | | | |  
| F | | |  
|   F | |  
|     | F  
| E   |    Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |    , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E   |    , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size
| E   |    = 3 , total_length = 26} , self = 101 , parent = Nothing , duration = 0.279829583000
| E   |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:51.531836674
| E   |    UTC , finish = 2025-09-04 08:27:51.811666257 UTC , thread_cap_info = ("ThreadId
| E   |    191", 1, False)}
| E   |    
| |   F    
S |        
  E        
