last 1129 length 4609
CNF 1129 vars 4609 clauses
last 1310 length 5189
CNF 1310 vars 5189 clauses
last 1093 length 4405
CNF 1093 vars 4405 clauses
last 1314 length 5255
CNF 1314 vars 5255 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4098, clauses: 15161
last 4098 length 15161
CNF 4098 vars 15161 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3268, clauses: 11947
last 3268 length 11947
CNF 3268 vars 11947 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4098, clauses: 15161, status: Satisfied, time: 0.033780482s
last 1185 length 4735
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3268, clauses: 11947, status: Satisfied, time: 0.037841975s
CNF 1185 vars 4735 clauses
last 1193 length 4721
last 993 length 4073
last 1013 length 4093
last 6740 length 28583
CNF 1193 vars 4721 clauses
CNF 1013 vars 4093 clauses
CNF 993 vars 4073 clauses
CNF 6740 vars 28583 clauses
last 7524 length 32517
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3785, clauses: 13911
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2952, clauses: 10703
CNF 7524 vars 32517 clauses
last 3785 length 13911
last 2952 length 10703
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12689, clauses: 53175
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10551, clauses: 44137
**************************************************CNF 3785 vars 13911 clauses

last 12689 length 53175
last 10551 length 44137
CNF 2952 vars 10703 clauses
summaryCNF 10551 vars 44137 clauses
last 7182 length 30479

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3785, clauses: 13911, status: Satisfied, time: 0.233722357s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2952, clauses: 10703, status: Satisfied, time: 0.141961815s
last 8162 length 35353
**************************************************CNF 12689 vars 53175 clauses

CNF 7182 vars 30479 clauses
SRS with 3 strict rules and 3 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 54 rules on 9 letters       weights
SRS with 30 rules on 9 letters       mirror
SRS with 30 rules on 9 letters       DP
SRS with 58 strict rules and 30 weak rules on 15 letters       weights
SRS with 18 strict rules and 30 weak rules on 15 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b] -> [c, b, c] {- Input 0 -}
  [c, a, b] -> [a, c, b] {- Input 1 -}
  [c, c, a] -> [c, b, b] {- Input 2 -}
  [b, c, c] ->= [b, a, c] {- Input 3 -}
  [a, c, b] ->= [c, b, a] {- Input 4 -}
  [c, c, b] ->= [c, a, c] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, b, b] -> [c, b, c] {- Input 0 -}
  [c, a, b] -> [a, c, b] {- Input 1 -}
  [c, c, a] -> [c, b, b] {- Input 2 -}
  [b, c, c] -> [b, a, c] {- Strictified (Input 3) -}
  [a, c, b] -> [c, b, a] {- Strictified (Input 4) -}
  [c, c, b] -> [c, a, c] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, c] , [c, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, a], [a, b], [b, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, a], [a, b], [b, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, a], [a, b], [b, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, a], [a, b], [b, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, a], [a, b], [b, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, a], [a, b], [b, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, c], [c, a], [a, b], [b, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, c], [c, a], [a, b], [b, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c], [c, a], [a, b], [b, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, a], [a, a]] -> [ [a, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, a], [a, b]] -> [ [a, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, a], [a, c]] -> [ [a, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, a]] -> [ [b, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, b]] -> [ [b, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, c]] -> [ [b, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, a]] -> [ [c, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, b]] -> [ [c, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, c]] -> [ [c, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, a], [a, c], [c, b], [b, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, a], [a, c], [c, b], [b, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, a], [a, c], [c, b], [b, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, c] , [c, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, c] , [c, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, a], [a, a]] -> [ [a, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, a], [a, b]] -> [ [a, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, a], [a, c]] -> [ [a, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, a]] -> [ [b, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, b]] -> [ [b, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, a], [a, c]] -> [ [b, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, a]] -> [ [c, c] , [c, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, b]] -> [ [c, c] , [c, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, a], [a, c]] -> [ [c, c] , [c, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, a], [a, c], [c, b], [b, a]] -> [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, a], [a, c], [c, b], [b, b]] -> [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, a], [a, c], [c, b], [b, c]] -> [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, a]] -> [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, b]] -> [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[b, a], [a, c], [c, b], [b, c]] -> [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, a]] -> [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, b]] -> [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[c, a], [a, c], [c, b], [b, c]] -> [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[b, a], [b, b], [a, b], [a, a]] -> [ [c, a] , [b, c] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 0 (Input 0))) -}
  [[b, c], [b, b], [a, b], [a, a]] -> [ [c, c] , [b, c] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 2 (Input 0))) -}
  [[b, a], [b, b], [a, b], [b, a]] -> [ [c, a] , [b, c] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, c], [b, b], [a, b], [b, a]] -> [ [c, c] , [b, c] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 2 (Input 0))) -}
  [[b, a], [b, b], [a, b], [c, a]] -> [ [c, a] , [b, c] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 0 (Input 0))) -}
  [[b, c], [b, b], [a, b], [c, a]] -> [ [c, c] , [b, c] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 2 (Input 0))) -}
  [[a, a], [c, a], [c, c], [a, c]] -> [ [b, a] , [b, b] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [c, a], [c, c], [a, c]] -> [ [b, b] , [b, b] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, c], [c, a], [c, c], [a, c]] -> [ [b, c] , [b, b] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 2 (Input 2))) -}
  [[a, a], [c, a], [c, c], [b, c]] -> [ [b, a] , [b, b] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 0 (Input 2))) -}
  [[a, b], [c, a], [c, c], [b, c]] -> [ [b, b] , [b, b] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 1 (Input 2))) -}
  [[a, c], [c, a], [c, c], [b, c]] -> [ [b, c] , [b, b] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 2 (Input 2))) -}
  [[a, a], [c, a], [c, c], [c, c]] -> [ [b, a] , [b, b] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 0 (Input 2))) -}
  [[a, b], [c, a], [c, c], [c, c]] -> [ [b, b] , [b, b] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 1 (Input 2))) -}
  [[a, c], [c, a], [c, c], [c, c]] -> [ [b, c] , [b, b] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 2 (Input 2))) -}
  [[b, a], [c, b], [a, c], [a, a]] -> [ [a, a] , [b, a] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 0 (Strictified (Input 4)))) -}
  [[b, b], [c, b], [a, c], [a, a]] -> [ [a, b] , [b, a] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 1 (Strictified (Input 4)))) -}
  [[b, c], [c, b], [a, c], [a, a]] -> [ [a, c] , [b, a] , [c, b] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 2 (Strictified (Input 4)))) -}
  [[b, a], [c, b], [a, c], [b, a]] -> [ [a, a] , [b, a] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 0 (Strictified (Input 4)))) -}
  [[b, b], [c, b], [a, c], [b, a]] -> [ [a, b] , [b, a] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 1 (Strictified (Input 4)))) -}
  [[b, c], [c, b], [a, c], [b, a]] -> [ [a, c] , [b, a] , [c, b] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 2 (Strictified (Input 4)))) -}
  [[b, a], [c, b], [a, c], [c, a]] -> [ [a, a] , [b, a] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 0 (Strictified (Input 4)))) -}
  [[b, b], [c, b], [a, c], [c, a]] -> [ [a, b] , [b, a] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 1 (Strictified (Input 4)))) -}
  [[b, c], [c, b], [a, c], [c, a]] -> [ [a, c] , [b, a] , [c, b] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 2 (Strictified (Input 4)))) -}
  [[b, a], [c, b], [c, c], [a, c]] -> [ [c, a] , [a, c] , [c, a] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 0 (Strictified (Input 5)))) -}
  [[b, c], [c, b], [c, c], [a, c]] -> [ [c, c] , [a, c] , [c, a] , [ a , c ] ] {- Mirror (Semlab 0 (Concon 2 (Strictified (Input 5)))) -}
  [[b, a], [c, b], [c, c], [b, c]] -> [ [c, a] , [a, c] , [c, a] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 0 (Strictified (Input 5)))) -}
  [[b, c], [c, b], [c, c], [b, c]] -> [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- Mirror (Semlab 1 (Concon 2 (Strictified (Input 5)))) -}
  [[b, a], [c, b], [c, c], [c, c]] -> [ [c, a] , [a, c] , [c, a] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 0 (Strictified (Input 5)))) -}
  [[b, c], [c, b], [c, c], [c, c]] -> [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- Mirror (Semlab 2 (Concon 2 (Strictified (Input 5)))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[b, a], [b, b], [a, b], [a, a]] ->= [ [c, a] , [b, c] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [a, a]] ->= [ [c, c] , [b, c] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[b, a], [b, b], [a, b], [b, a]] ->= [ [c, a] , [b, c] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [b, a]] ->= [ [c, c] , [b, c] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[b, a], [b, b], [a, b], [c, a]] ->= [ [c, a] , [b, c] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [c, a]] ->= [ [c, c] , [b, c] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[a, a], [c, a], [c, c], [a, c]] ->= [ [b, a] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [a, c]] ->= [ [b, b] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [a, c]] ->= [ [b, c] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 2)))) -}
  [[a, a], [c, a], [c, c], [b, c]] ->= [ [b, a] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [b, c]] ->= [ [b, b] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [b, c]] ->= [ [b, c] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, a], [c, a], [c, c], [c, c]] ->= [ [b, a] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [c, c]] ->= [ [b, b] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [c, c]] ->= [ [b, c] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 2)))) -}
  [[b, a], [c, b], [a, c], [a, a]] ->= [ [a, a] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [a, a]] ->= [ [a, b] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [a, a]] ->= [ [a, c] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [a, c], [b, a]] ->= [ [a, a] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [b, a]] ->= [ [a, b] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [b, a]] ->= [ [a, c] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [a, c], [c, a]] ->= [ [a, a] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [c, a]] ->= [ [a, b] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [c, a]] ->= [ [a, c] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [c, c], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [a, c]] ->= [ [c, c] , [a, c] , [c, a] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Strictified (Input 5))))) -}
  [[b, a], [c, b], [c, c], [b, c]] ->= [ [c, a] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [b, c]] ->= [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Strictified (Input 5))))) -}
  [[b, a], [c, b], [c, c], [c, c]] ->= [ [c, a] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [c, c]] ->= [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Strictified (Input 5))))) -}
  [[a, a]#, [c, a], [c, c], [a, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [a, c]] |-> [ [b, b]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [b, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [b, c]] |-> [ [b, b]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [c, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [c, c]] |-> [ [b, b]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [a, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [a, c]] |-> [ [b, b]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [b, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [b, c]] |-> [ [b, b]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [c, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [c, c]] |-> [ [b, b]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 1 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [a, c]] |-> [ [b, b]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [a, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [b, c]] |-> [ [b, b]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [b, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [c, c]] |-> [ [b, b]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [c, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Input 2)))) -}
  [[b, a]#, [b, b], [a, b], [a, a]] |-> [ [ a , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[b, a]#, [b, b], [a, b], [a, a]] |-> [ [b, c]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[b, a]#, [b, b], [a, b], [b, a]] |-> [ [ b , c ]# ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[b, a]#, [b, b], [a, b], [b, a]] |-> [ [b, c]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[b, a]#, [b, b], [a, b], [c, a]] |-> [ [b, c]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[b, a]#, [c, b], [a, c], [a, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [a, a]] |-> [ [ a , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [a, a]] |-> [ [b, a]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [b, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [b, a]] |-> [ [b, a]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [b, a]] |-> [ [ b , c ]# ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [c, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [c, a]] |-> [ [b, a]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [c, c], [a, c]] |-> [ [a, c]# , [c, a] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Strictified (Input 5))))) -}
  [[b, a]#, [c, b], [c, c], [b, c]] |-> [ [a, c]# , [c, a] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Strictified (Input 5))))) -}
  [[b, a]#, [c, b], [c, c], [c, c]] |-> [ [a, c]# , [c, a] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Strictified (Input 5))))) -}
  [[b, b]#, [c, b], [a, c], [a, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [a, a]] |-> [ [ a , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [a, a]] |-> [ [b, a]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [b, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [b, a]] |-> [ [b, a]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [b, a]] |-> [ [ b , c ]# ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [c, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [c, a]] |-> [ [b, a]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c]#, [b, b], [a, b], [a, a]] |-> [ [ a , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[b, c]#, [b, b], [a, b], [a, a]] |-> [ [b, c]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[b, c]#, [b, b], [a, b], [b, a]] |-> [ [ b , c ]# ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[b, c]#, [b, b], [a, b], [b, a]] |-> [ [b, c]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[b, c]#, [b, b], [a, b], [c, a]] |-> [ [b, c]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[b, c]#, [c, b], [a, c], [a, a]] |-> [ [ a , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [a, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [a, a]] |-> [ [b, a]# , [c, b] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [b, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [b, a]] |-> [ [b, a]# , [c, b] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [b, a]] |-> [ [ b , c ]# ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [c, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [c, a]] |-> [ [b, a]# , [c, b] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [c, c], [a, c]] |-> [ [a, c]# , [c, a] , [ a , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Strictified (Input 5))))) -}
  [[b, c]#, [c, b], [c, c], [b, c]] |-> [ [a, c]# , [c, a] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Strictified (Input 5))))) -}
  [[b, c]#, [c, b], [c, c], [c, c]] |-> [ [a, c]# , [c, a] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Strictified (Input 5))))) -}
reason
  ([a, a], 2/1)
  ([a, b], 2/1)
  ([a, c], 2/1)
  ([b, a], 2/1)
  ([b, b], 2/1)
  ([b, c], 2/1)
  ([c, a], 2/1)
  ([c, b], 2/1)
  ([c, c], 2/1)
  ([a, a]#, 1/1)
  ([a, b]#, 1/1)
  ([a, c]#, 1/1)
  ([b, a]#, 1/1)
  ([b, b]#, 1/1)
  ([b, c]#, 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [b, b], [a, b], [a, a]] ->= [ [c, a] , [b, c] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [a, a]] ->= [ [c, c] , [b, c] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[b, a], [b, b], [a, b], [b, a]] ->= [ [c, a] , [b, c] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [b, a]] ->= [ [c, c] , [b, c] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[b, a], [b, b], [a, b], [c, a]] ->= [ [c, a] , [b, c] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[b, c], [b, b], [a, b], [c, a]] ->= [ [c, c] , [b, c] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[a, a], [c, a], [c, c], [a, c]] ->= [ [b, a] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [a, c]] ->= [ [b, b] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [a, c]] ->= [ [b, c] , [b, b] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 2)))) -}
  [[a, a], [c, a], [c, c], [b, c]] ->= [ [b, a] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [b, c]] ->= [ [b, b] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [b, c]] ->= [ [b, c] , [b, b] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, a], [c, a], [c, c], [c, c]] ->= [ [b, a] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, b], [c, a], [c, c], [c, c]] ->= [ [b, b] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 2)))) -}
  [[a, c], [c, a], [c, c], [c, c]] ->= [ [b, c] , [b, b] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 2)))) -}
  [[b, a], [c, b], [a, c], [a, a]] ->= [ [a, a] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [a, a]] ->= [ [a, b] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [a, a]] ->= [ [a, c] , [b, a] , [c, b] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [a, c], [b, a]] ->= [ [a, a] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [b, a]] ->= [ [a, b] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [b, a]] ->= [ [a, c] , [b, a] , [c, b] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [a, c], [c, a]] ->= [ [a, a] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b], [c, b], [a, c], [c, a]] ->= [ [a, b] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c], [c, b], [a, c], [c, a]] ->= [ [a, c] , [b, a] , [c, b] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Strictified (Input 4))))) -}
  [[b, a], [c, b], [c, c], [a, c]] ->= [ [c, a] , [a, c] , [c, a] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [a, c]] ->= [ [c, c] , [a, c] , [c, a] , [ a , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Strictified (Input 5))))) -}
  [[b, a], [c, b], [c, c], [b, c]] ->= [ [c, a] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [b, c]] ->= [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Strictified (Input 5))))) -}CNF 8162 vars 35353 clauses

  [[b, a], [c, b], [c, c], [c, c]] ->= [ [c, a] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 5))))) -}
  [[b, c], [c, b], [c, c], [c, c]] ->= [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Strictified (Input 5))))) -}
  [[a, a]#, [c, a], [c, c], [a, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [b, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[a, a]#, [c, a], [c, c], [c, c]] |-> [ [b, a]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [a, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [b, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, b]#, [c, a], [c, c], [c, c]] |-> [ [b, b]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [a, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [b, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, c]#, [c, a], [c, c], [c, c]] |-> [ [b, c]# , [b, b] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Input 2)))) -}
  [[b, a]#, [c, b], [a, c], [a, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [b, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Strictified (Input 4))))) -}
  [[b, a]#, [c, b], [a, c], [c, a]] |-> [ [a, a]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [a, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [b, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Strictified (Input 4))))) -}
  [[b, b]#, [c, b], [a, c], [c, a]] |-> [ [a, b]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [a, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ a , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [b, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Strictified (Input 4))))) -}
  [[b, c]#, [c, b], [a, c], [c, a]] |-> [ [a, c]# , [b, a] , [c, b] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Strictified (Input 4))))) -}
reason
  EDG

**************************************************
skeleton: (3/3,3)\Strictify(6,3)\TileAllAll{2}(54,9)\Weight\Mirror(30,9)\Deepee(58/30,15)\Weight(18/30,15)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12689, clauses: 53175, status: Satisfied, time: 0.064834915s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S        = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
S        = 5 , total_length = 54} , self = 91 , parent = Nothing , duration = 0.123007683000
S        , status = Success , start = 2025-09-04 08:21:19.826365891 UTC , finish
S        = 2025-09-04 08:21:19.949373574 UTC , thread_cap_info = ("ThreadId 140",
S        0, False)}
S        
| E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| E      = 5 , total_length = 54} , self = 94 , parent = Nothing , duration = 0.140297342000
| E      , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.84871471
| E      UTC , finish = 2025-09-04 08:21:19.989012052 UTC , thread_cap_info = ("ThreadId
| E      142", 0, False)}
| E      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 30 , num_strict_rules
| | F    = 30 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 240} , self = 103 , parent = Nothing , duration = 0.212305044000 , status
| | F    = Fail , start = 2025-09-04 08:21:19.892423813 UTC , finish = 2025-09-04
| | F    08:21:20.104728857 UTC , thread_cap_info = ("ThreadId 155", 2, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F  = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | F  = 60} , self = 100 , parent = Nothing , duration = 0.106117350000 , status
| | | F  = Fail , start = 2025-09-04 08:21:19.926836185 UTC , finish = 2025-09-04
| | | F  08:21:20.032953535 UTC , thread_cap_info = ("ThreadId 166", 2, False)}
| | | F  
S | | |  
  E | |  
    | F  
    F    
