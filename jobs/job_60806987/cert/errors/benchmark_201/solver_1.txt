last 804 length 3239
last 737 length 2957
CNF 804 vars 3239 clauses
CNF 737 vars 2957 clauses
last 752 length 3081
last 731 length 2951
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2366, clauses: 8478
last 2366 length 8478
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2384, clauses: 8541
CNF 2366 vars 8478 clauses
CNF 752 vars 3081 clauses
CNF 731 vars 2951 clauses
last 2384 length 8541
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2366, clauses: 8478, status: Satisfied, time: 0.010704398s
CNF 2384 vars 8541 clauses
**************************************************
summary
**************************************************
SRS with 2 strict rules and 3 weak rules on 3 letters       strictify
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 12 strict rules and 5 weak rules on 6 letters       weights
SRS with 2 strict rules and 5 weak rules on 5 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, c, a] -> [c, c, b] {- Input 0 -}
  [b, b, c] -> [a, a, b] {- Input 1 -}
  [b, a, b] ->= [a, c, b] {- Input 2 -}
  [c, a, a] ->= [b, a, b] {- Input 3 -}
  [c, c, c] ->= [c, a, c] {- Input 4 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, c, a] -> [c, c, b] {- Input 0 -}
  [b, b, c] -> [a, a, b] {- Input 1 -}
  [b, a, b] -> [a, c, b] {- Strictified (Input 2) -}
  [c, a, a] -> [b, a, b] {- Strictified (Input 3) -}
  [c, c, c] -> [c, a, c] {- Strictified (Input 4) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, c, c] -> [b, c, c] {- Mirror (Input 0) -}
  [c, b, b] -> [b, a, a] {- Mirror (Input 1) -}
  [b, a, b] -> [b, c, a] {- Mirror (Strictified (Input 2)) -}
  [a, a, c] -> [b, a, b] {- Mirror (Strictified (Input 3)) -}
  [c, c, c] -> [c, a, c] {- Mirror (Strictified (Input 4)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, b] ->= [b, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, c] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [a#, a, c] |-> [a#, b] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [a#, a, c] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [a#, a, c] |-> [b#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [a#, c, c] |-> [b#, c, c] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 2))) -}
  [b#, a, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [b#, a, b] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 2))) -}
  [c#, b, b] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, b, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b, b] |-> [b#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, c] |-> [a#, c] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [c#, c, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
reason
  (a, 3/1)
  (b, 3/1)
  (c, 3/1)
  (a#, 2/1)
  (b#, 1/1)
  (c#, 3/1)
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, b] ->= [b, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, c] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b#, a, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [c#, c, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, b] ->= [b, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, c] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 4))) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [b, c, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, b] ->= [b, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, c] ->= [b, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, c, c] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 4))) -}
reason
  EDG

**************************************************
skeleton: (2/3,3)\Strictify\Mirror(5,3)\Deepee(12/5,6)\Weight(2/5,5)\EDG(1/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E    = 18} , self = 64 , parent = Nothing , duration = 0.116201073000 , status
E    = Except "AsyncCancelled" , start = 2025-09-04 07:32:57.704286197 UTC ,
E    finish = 2025-09-04 07:32:57.82048727 UTC , thread_cap_info = ("ThreadId
E    91", 0, False)}
E    
| E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E  = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
| E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E  = 30} , self = 78 , parent = Nothing , duration = 0.103340415000 , status
| E  = Except "AsyncCancelled" , start = 2025-09-04 07:32:57.720432948 UTC ,
| E  finish = 2025-09-04 07:32:57.823773363 UTC , thread_cap_info = ("ThreadId
| E  81", 3, False)}
| E  
E |  
  E  
