last 1146 length 4613
CNF 1146 vars 4613 clauses
last 944 length 3849
last 7735 length 32586
CNF 7735 vars 32586 clauses
CNF 944 vars 3849 clauses
last 8034 length 35161
last 11026 length 46841
CNF 11026 vars 46841 clauses
last 11868 length 50645
CNF 11868 vars 50645 clauses
last 1481 length 6079
last 862 length 3455
last 844 length 3417
last 1571 length 6303
CNF 1481 vars 6079 clauses
CNF 862 vars 3455 clauses
last 832 length 3415
CNF 844 vars 3417 clauses
last 922 length 3867
CNF 1571 vars 6303 clauses
last 12266 length 51790
last 12521 length 53396
last 15602 length 66596
last 15934 length 68101
CNF 832 vars 3415 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2648, clauses: 9522
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4472, clauses: 16494
CNF 922 vars 3867 clauses
CNF 12266 vars 51790 clauses
CNF 12521 vars 53396 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10468, clauses: 43865
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14564, clauses: 61037
last 2648 length 9522
CNF 15602 vars 66596 clauses
last 4472 length 16494
**************************************************
CNF 15934 vars 68101 clauses
last 10468 length 43865
last 14564 length 61037
CNF 2648 vars 9522 clauses
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       split
2 sub-proofs
  1 SRS with 4 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 36 strict rules and 18 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 3 strict rules and 15 weak rules on 9 letters       weights
  SRS with 0 strict rules and 4 weak rules on 7 letters       no strict rules

  2 SRS with 2 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 2 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 18 rules on 8 letters       weights
    SRS with 4 rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = KBOCNF 10468 vars 43865 clauses
, CNF 4472 vars 16494 clauses
shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 1 rules on 5 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, c, c] -> [a, b, c] {- Input 0 -}
  [b, a, c] -> [b, c, b] {- Input 1 -}
  [a, b, a] ->= [c, a, c] {- Input 2 -}
  [b, b, c] ->= [a, b, b] {- Input 3 -}
  [c, a, b] ->= [b, c, c] {- Input 4 -}
  [a, b, c] ->= [b, b, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, c, c] -> [a, b, c] {- Input 0 -}
  [b, a, c] -> [b, c, b] {- Input 1 -}
  [a, b, a] -> [c, a, c] {- Strictified (Input 2) -}
  [b, b, c] -> [a, b, b] {- Strictified (Input 3) -}
  [c, a, b] -> [b, c, c] {- Strictified (Input 4) -}
  [a, b, c] -> [b, b, b] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, c, c] ->= [a, b, c] {- Input 0 -}
  [b, a, c] -> [b, c, b] {- Input 1 -}
  [a, b, a] ->= [c, a, c] {- Strictified (Input 2) -}
  [b, b, c] -> [a, b, b] {- Strictified (Input 3) -}
  [c, a, b] -> [b, c, c] {- Strictified (Input 4) -}
  [a, b, c] -> [b, b, b] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, c], [c, c], [c, c]] ->= [ [c, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, a]] ->= [ [c, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, b]] ->= [ [c, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, c]] ->= [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] ->= [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, b]] ->= [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, c]] ->= [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, a]] ->= [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, b]] ->= [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, b], [b, a], [a, c], [c, c]] -> [ [c, b] , [b, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, b], [b, a], [a, c], [c, a]] -> [ [c, b] , [b, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, b], [b, a], [a, c], [c, b]] -> [ [c, b] , [b, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, b], [b, a], [a, c], [c, c]] -> [ [a, b] , [b, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, c], [c, a]] -> [ [a, b] , [b, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, c], [c, b]] -> [ [a, b] , [b, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [ [b, b] , [b, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [ [b, b] , [b, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, b]] -> [ [b, b] , [b, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, a], [a, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, b]] ->= [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, a], [a, b], [b, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, b], [b, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, a], [a, b], [b, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, b], [b, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, b], [b, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, b], [b, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, b], [b, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, b], [b, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, a], [a, b], [b, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[c, a], [a, b], [b, c], [c, c]] -> [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, c], [c, a]] -> [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, a], [a, b], [b, c], [c, b]] -> [ [c, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, c], [c, c]] -> [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, c], [c, a]] -> [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, a], [a, b], [b, c], [c, b]] -> [ [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, c]] -> [ [b, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, a]] -> [ [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, a], [a, b], [b, c], [c, b]] -> [ [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[c, c], [c, c], [c, c], [c, c]] ->= [ [c, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, a]] ->= [ [c, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, b]] ->= [ [c, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, c]] ->= [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] ->= [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, b]] ->= [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, c]] ->= [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, a]] ->= [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, b]] ->= [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a], [a, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[a, c], [c, a], [a, b], [b, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, b], [b, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, a], [a, b], [b, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
reason
  ([a, a], 10/1)
  ([a, b], 0/1)
  ([a, c], 11/1)
  ([b, a], 10/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 5/1)
   property Termination
has value Just True
for SRS
  [[b, c], [c, c], [c, c], [c, c]] ->= [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, a]] ->= [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, b]] ->= [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a], [a, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [c, c, c] -> [a, b, c] {- Input 0 -}
  [a, b, a] -> [c, a, c] {- Strictified (Input 2) -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, c, c] -> [a, b, c] {- Input 0 -}
  [a, b, a] -> [c, a, c] {- Strictified (Input 2) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, a]] -> [ [c, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, c], [c, c], [c, b]] -> [ [c, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
CNF 14564 vars 61037 clauses
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
reason
  ([a, a], 3/2)
  ([a, b], 3/2)
  ([a, c], 1/1)
  ([b, a], 3/2)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 3/2)
   property Termination
has value Just True
for SRS
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
reason
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
reason
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([c, a], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Split[(4/2,3)\TileAllAll{2}(36/18,9)\Matrix{\Natural}{2}(3/15,9)\Weight(0/4,7)[],(2,3)\Split[(2,3)\TileAllAll{2}(18,8)\Weight(4,7)\Matrix{\Natural}{2}(1,5)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2648, clauses: 9522, status: Unsatisfied, time: 0.187388381s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.710303669000
  min duration 0.110165915000
  total durat. 1.471887042000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.733279278000
  min duration 0.022690786000
  total durat. 1.720324998000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.441377123000
  min duration 0.316786661000
  total durat. 1.758163784000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 124
    , parent = Nothing
    , duration = 1.441377123000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:21:23.037024608 UTC
    , finish = 2025-09-04 08:21:24.478401731 UTC
    , thread_cap_info = ("ThreadId 107", 2, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.460851897000
  min duration 0.189278213000
  total durat. 1.650130110000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 123
    , parent = Nothing
    , duration = 1.460851897000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:21:23.017513716 UTC
    , finish = 2025-09-04 08:21:24.478365613 UTC
    , thread_cap_info = ("ThreadId 106", 2, False)}
**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                = 24} , self = 68 , parent = Nothing , duration = 0.316786661000 , status
E                = Except "AsyncCancelled" , start = 2025-09-04 08:21:22.947638861 UTC ,
E                finish = 2025-09-04 08:21:23.264425522 UTC , thread_cap_info = ("ThreadId
E                33", 2, False)}
E                
| E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E              = 24} , self = 54 , parent = Nothing , duration = 0.189278213000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-04 08:21:22.947749238 UTC ,
| E              finish = 2025-09-04 08:21:23.137027451 UTC , thread_cap_info = ("ThreadId
| E              35", 3, False)}
| E              
| | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | E            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | E            = 288} , self = 66 , parent = Nothing , duration = 0.243695665000 , status
| | E            = Except "AsyncCancelled" , start = 2025-09-04 08:21:22.982475013 UTC ,
| | E            finish = 2025-09-04 08:21:23.226170678 UTC , thread_cap_info = ("ThreadId
| | E            71", 3, False)}
| | E            
| | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | E          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | E          = 288} , self = 67 , parent = Nothing , duration = 0.222179666000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-04 08:21:23.004024875 UTC ,
| | | E          finish = 2025-09-04 08:21:23.226204541 UTC , thread_cap_info = ("ThreadId
| | | E          73", 3, False)}
| | | E          
| | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | E        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | E        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | E        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | E        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | E        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E        = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E        = 36} , self = 123 , parent = Nothing , duration = 1.460851897000 , status
| | | | E        = Except "AsyncCancelled" , start = 2025-09-04 08:21:23.017513716 UTC ,
| | | | E        finish = 2025-09-04 08:21:24.478365613 UTC , thread_cap_info = ("ThreadId
| | | | E        106", 2, False)}
| | | | E        
| | | | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E      , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | E      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | E      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | E      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | E      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | E      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | E      = 36} , self = 124 , parent = Nothing , duration = 1.441377123000 , status
| | | | | E      = Except "AsyncCancelled" , start = 2025-09-04 08:21:23.037024608 UTC ,
| | | | | E      finish = 2025-09-04 08:21:24.478401731 UTC , thread_cap_info = ("ThreadId
| | | | | E      107", 2, False)}
| | | | | E      
| E | | | |      
| F | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F | | | |      = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| F | | | |      = 48} , self = 70 , parent = Nothing , duration = 0.110165915000 , status
| F | | | |      = Fail , start = 2025-09-04 08:21:23.157036658 UTC , finish = 2025-09-04
| F | | | |      08:21:23.267202573 UTC , thread_cap_info = ("ThreadId 113", 2, False)}
| F | | | |      
| | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | | | S    = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | S    = 432} , self = 100 , parent = Nothing , duration = 0.379646622000 , status
| | | | | | S    = Success , start = 2025-09-04 08:21:23.161203523 UTC , finish = 2025-09-04
| | | | | | S    08:21:23.540850145 UTC , thread_cap_info = ("ThreadId 131", 1, False)}
| | | | | | S    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | | | | F  = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | | F  = 432} , self = 95 , parent = Nothing , duration = 0.285102317000 , status
| | | | | | | F  = Fail , start = 2025-09-04 08:21:23.177024741 UTC , finish = 2025-09-04
| | | | | | | F  08:21:23.462127058 UTC , thread_cap_info = ("ThreadId 133", 1, False)}
| | | | | | | F  
| | E | | | | |  
| |   E | | | |  
E |     | | | |  
  F     | | | |  
F       | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F       | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F       | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F       | | | |  = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
F       | | | |  = 72} , self = 114 , parent = Nothing , duration = 0.651417458000 , status
F       | | | |  = Fail , start = 2025-09-04 08:21:23.457061986 UTC , finish = 2025-09-04
F       | | | |  08:21:24.108479444 UTC , thread_cap_info = ("ThreadId 170", 2, False)}
F       | | | |  
|       | | | F  
| F     | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F     | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F     | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F     | | |    = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| F     | | |    = 42} , self = 115 , parent = Nothing , duration = 0.679252617000 , status
| F     | | |    = Fail , start = 2025-09-04 08:21:23.46405851 UTC , finish = 2025-09-04
| F     | | |    08:21:24.143311127 UTC , thread_cap_info = ("ThreadId 173", 2, False)}
| F     | | |    
| | F   | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F   | | |    = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | F   | | |    = 42} , self = 116 , parent = Nothing , duration = 0.710303669000 , status
| | F   | | |    = Fail , start = 2025-09-04 08:21:23.473648536 UTC , finish = 2025-09-04
| | F   | | |    08:21:24.183952205 UTC , thread_cap_info = ("ThreadId 172", 1, False)}
| | F   | | |    
| | | F | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F | | |    = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| | | F | | |    = 72} , self = 117 , parent = Nothing , duration = 0.733279278000 , status
| | | F | | |    = Fail , start = 2025-09-04 08:21:23.473655579 UTC , finish = 2025-09-04
| | | F | | |    08:21:24.206934857 UTC , thread_cap_info = ("ThreadId 171", 0, False)}
| | | F | | |    
| | | | | | S    
| | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | S    = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | | | | | S    = 32} , self = 118 , parent = Nothing , duration = 0.600541195000 , status
| | | | | | S    = Success , start = 2025-09-04 08:21:23.877611918 UTC , finish = 2025-09-04
| | | | | | S    08:21:24.478153113 UTC , thread_cap_info = ("ThreadId 202", 2, False)}
| | | | | | S    
F | | | | | |    
  F | | | | |    
    F | | | |    
      F | | |    
        | | S    
        E |      
          E      
