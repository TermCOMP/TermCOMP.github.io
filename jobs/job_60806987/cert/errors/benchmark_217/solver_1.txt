last 633 length 2555
CNF 633 vars 2555 clauses
last 633 length 2581
CNF 633 vars 2581 clauses
last 633 length 2505
CNF 633 vars 2505 clauses
last 500 length 1981
last 486 length 1927
CNF 500 vars 1981 clauses
last 514 length 2105
last 512 length 2075
CNF 486 vars 1927 clauses
CNF 514 vars 2105 clauses
CNF 512 vars 2075 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1579, clauses: 5686
last 1579 length 5686
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1474, clauses: 5335
CNF 1579 vars 5686 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5015, clauses: 20879
last 1474 length 5335
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5599, clauses: 23347
last 6004 length 25881
last 5015 length 20879
last 5599 length 23347
CNF 1474 vars 5335 clauses
CNF 6004 vars 25881 clauses
CNF 5599 vars 23347 clauses
CNF 5015 vars 20879 clauses
last 5996 length 25830
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1579, clauses: 5686, status: Satisfied, time: 0.09985074s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1474, clauses: 5335, status: Unsatisfied, time: 0.08001725s
last 1685 length 7037
last 1557 length 6600
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5599, clauses: 23347, status: Satisfied, time: 0.126190857s
last 4923 length 20413
last 5939 length 25473
last 6626 length 28648
last 6454 length 27795
**************************************************
CNF 4923 vars 20413 clauses
CNF 5939 vars 25473 clauses
CNF 6454 vars 27795 clauses
summaryCNF 6626 vars 28648 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5015, clauses: 20879, status: Unsatisfied, time: 0.310131725s

**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       weights
SRS with 2 strict rules and 2 weak rules on 3 letters       strictify
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 8 strict rules and 4 weak rules on 5 letters       weights
SRS with 1 strict rules and 4 weak rules on 4 letters       EDG
SRS with 1 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, c] -> [a, a, a] {- Input 0 -}
  [c, a, c] -> [a, a, a] {- Input 1 -}
  [b, b, a] ->= [c, c, c] {- Input 2 -}
  [c, b, a] ->= [a, c, b] {- Input 3 -}
  [b, b, b] ->= [b, c, b] {- Input 4 -}
  [c, a, a] ->= [c, c, a] {- Input 5 -}
reason
  (a, 0/1)
  (b, 1/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, c] -> [a, a, a] {- Input 0 -}
  [c, a, c] -> [a, a, a] {- Input 1 -}
  [c, b, a] ->= [a, c, b] {- Input 3 -}
  [c, a, a] ->= [c, c, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, c] -> [a, a, a] {- Input 0 -}
  [c, a, c] -> [a, a, a] {- Input 1 -}
  [c, b, a] -> [a, c, b] {- Strictified (Input 3) -}
  [c, a, a] -> [c, c, a] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, a, a] -> [a, a, a] {- Mirror (Input 0) -}
  [c, a, c] -> [a, a, a] {- Mirror (Input 1) -}
  [a, b, c] -> [b, c, a] {- Mirror (Strictified (Input 3)) -}
  [a, a, c] -> [a, c, c] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, a, c] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a#, a, c] |-> [c#, c] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [a#, b, c] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [a#, b, c] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [c#, a, a] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a, c] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a, c] |-> [a#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a, c] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (c, 2/1)
  (a#, 1/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, a, c] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, c] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, c] ->= [b, c, a] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( b
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( c
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( a#
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [a#, a, c] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, c] |-> [a#, c, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [a, c, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (2/4,3)\Weight(2/2,3)\Strictify\Mirror(4,3)\Deepee(8/4,5)\Weight\EDG(1/4,4)\Matrix{\Natural}{2}\EDG(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F          , closure = Forward\n , start_strict_only = True\n , max_closure_length
F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F          = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 24} , self = 114 , parent = Nothing , duration = 0.227813187000 , status
F          = Fail , start = 2025-09-04 08:21:27.260412518 UTC , finish = 2025-09-04
F          08:21:27.488225705 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
F          
| S        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| S        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| S        = 216} , self = 115 , parent = Nothing , duration = 0.225664029000 , status
| S        = Success , start = 2025-09-04 08:21:27.284672858 UTC , finish = 2025-09-04
| S        08:21:27.510336887 UTC , thread_cap_info = ("ThreadId 121", 1, False)}
| S        
| | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | E      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | E      = 216} , self = 128 , parent = Nothing , duration = 0.220131797000 , status
| | E      = Except "AsyncCancelled" , start = 2025-09-04 08:21:27.300373169 UTC ,
| | E      finish = 2025-09-04 08:21:27.520504966 UTC , thread_cap_info = ("ThreadId
| | E      123", 3, False)}
| | E      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | S    = 3 , total_length = 24} , self = 130 , parent = Nothing , duration = 0.367348497000
| | | S    , status = Success , start = 2025-09-04 08:21:27.326473606 UTC , finish
| | | S    = 2025-09-04 08:21:27.693822103 UTC , thread_cap_info = ("ThreadId 170",
| | | S    0, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | E  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | E  = 3 , total_length = 24} , self = 132 , parent = Nothing , duration = 0.368350921000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:27.346934221
| | | | E  UTC , finish = 2025-09-04 08:21:27.715285142 UTC , thread_cap_info = ("ThreadId
| | | | E  172", 0, False)}
| | | | E  
F | | | |  
  S | | |  
    E | |  
      S |  
        E  
