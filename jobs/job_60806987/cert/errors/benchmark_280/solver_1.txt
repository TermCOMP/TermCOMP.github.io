last 868 length 3961
CNF 868 vars 3961 clauses
last 932 length 3867
CNF 932 vars 3867 clauses
last 1133 length 4581
CNF 1133 vars 4581 clauses
last 875 length 3533
last 1123 length 4475
CNF 875 vars 3533 clauses
CNF 1123 vars 4475 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2618, clauses: 9543
last 2618 length 9543
CNF 2618 vars 9543 clauses
last 1399 length 5727
CNF 1399 vars 5727 clauses
last 10406 length 43393
CNF 10406 vars 43393 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3313, clauses: 12181
last 3313 length 12181
CNF 3313 vars 12181 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9924, clauses: 41545
last 9924 length 41545
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2618, clauses: 9543, status: Unsatisfied, time: 0.189207916s
CNF 9924 vars 41545 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3313, clauses: 12181, status: Satisfied, time: 0.069130988s
last 917 length 3627
last 1253 length 5061
CNF 1253 vars 5061 clauses
CNF 917 vars 3627 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6066, clauses: 24728
last 6066 length 24728
CNF 6066 vars 24728 clauses
last 15731 length 67400
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2913, clauses: 10667
last 2913 length 10667
CNF 2913 vars 10667 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6066, clauses: 24728, status: Satisfied, time: 0.111331391s
**************************************************
summary
**************************************************
SRS with 4 strict rules and 3 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 16 strict rules and 7 weak rules on 6 letters       weights
SRS with 5 strict rules and 7 weak rules on 5 letters       EDG
SRS with 1 strict rules and 7 weak rulesCNF 15731 vars 67400 clauses
 on 4 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, c] -> [b, c, c] {- Input 0 -}
  [a, a, a] -> [c, b, a] {- Input 1 -}
  [b, b, c] -> [b, a, a] {- Input 2 -}
  [c, b, c] -> [a, a, a] {- Input 3 -}
  [a, b, b] ->= [a, c, a] {- Input 4 -}
  [a, c, b] ->= [b, a, c] {- Input 5 -}
  [b, a, a] ->= [b, a, c] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [b, b, c] -> [b, c, c] {- Input 0 -}
  [a, a, a] -> [c, b, a] {- Input 1 -}
  [b, b, c] -> [b, a, a] {- Input 2 -}
  [c, b, c] -> [a, a, a] {- Input 3 -}
  [a, b, b] -> [a, c, a] {- Strictified (Input 4) -}
  [a, c, b] -> [b, a, c] {- Strictified (Input 5) -}
  [b, a, a] -> [b, a, c] {- Strictified (Input 6) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, b, b] -> [c, c, b] {- Mirror (Input 0) -}
  [a, a, a] -> [a, b, c] {- Mirror (Input 1) -}
  [c, b, b] -> [a, a, b] {- Mirror (Input 2) -}
  [c, b, c] -> [a, a, a] {- Mirror (Input 3) -}
  [b, b, a] -> [a, c, a] {- Mirror (Strictified (Input 4)) -}
  [b, c, a] -> [c, a, b] {- Mirror (Strictified (Input 5)) -}
  [a, a, b] -> [c, a, b] {- Mirror (Strictified (Input 6)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, b] ->= [a, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, a] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, a] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a, a, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, a, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a, a] |-> [b#, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, a] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, b] |-> [c#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [b#, b, a] |-> [a#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b#, b, a] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [b#, c, a] |-> [a#, b] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [b#, c, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 5))) -}
  [b#, c, a] |-> [c#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, b, b] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, b] |-> [a#, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b, b] |-> [c#, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, b, b] |-> [c#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, b, c] |-> [a#, a] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, b, c] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  (a, 3/1)
  (b, 3/1)
  (c, 3/1)
  (a#, 1/1)
  (b#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, b] ->= [a, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, a] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, a] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a, a, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 6))) -}
  [a#, a, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a, b] |-> [c#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 6))) -}
  [c#, b, b] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, b] |-> [c#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b, c] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c, b, b] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, b] ->= [a, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, a] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, a] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a, a, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  ( a
  , Wk  / 0 0 0 \
        | 0 0 1 |
        \ 0 0 1 / )
  ( b
  , Wk  / 0 0 1 \
        | 4 0 0 |
        \ 0 0 1 / )
  ( c
  , Wk  / 0 0 0 \
        | 4 0 0 |
        \ 0 0 1 / )
  ( a#
  , Wk  / 0 1 4 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [c, b, b] ->= [c, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, b] ->= [a, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [a, a, a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, a] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, a] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a, a, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 6))) -}
reason
  EDG

**************************************************
skeleton: (4/3,3)\Strictify\Mirror(7,3)\Deepee(16/7,6)\Weight(5/7,5)\EDG(1/7,4)\Matrix{\Natural}{3}(0/7,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F            = True})" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 42} , self = 95 , parent = Nothing , duration = 0.403121050000 , status
F            = Fail , start = 2025-09-04 08:20:50.348564564 UTC , finish = 2025-09-04
F            08:20:50.751685614 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| F          = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 504} , self = 86 , parent = Nothing , duration = 0.229226581000 , status
| F          = Fail , start = 2025-09-04 08:20:50.348569781 UTC , finish = 2025-09-04
| F          08:20:50.577796362 UTC , thread_cap_info = ("ThreadId 122", 2, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F        = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | F        = 60} , self = 84 , parent = Nothing , duration = 0.109404075000 , status
| | F        = Fail , start = 2025-09-04 08:20:50.408887387 UTC , finish = 2025-09-04
| | F        08:20:50.518291462 UTC , thread_cap_info = ("ThreadId 145", 2, False)}
| | F        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | F      = 4 , total_length = 48} , self = 87 , parent = Nothing , duration = 0.227944495000
| | | F      , status = Fail , start = 2025-09-04 08:20:50.419210965 UTC , finish =
| | | F      2025-09-04 08:20:50.64715546 UTC , thread_cap_info = ("ThreadId 149", 0,
| | | F      False)}
| | | F      
| | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | E    = 4 , total_length = 48} , self = 106 , parent = Nothing , duration = 0.451299393000
| | | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:50.456801738
| | | | E    UTC , finish = 2025-09-04 08:20:50.908101131 UTC , thread_cap_info = ("ThreadId
| | | | E    152", 0, False)}
| | | | E    
| | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S  = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| | | | | S  alphabet_size = 5 , total_length = 60} , self = 88 , parent = Nothing ,
| | | | | S  duration = 0.216639706000 , status = Success , start = 2025-09-04 08:20:50.473070455
| | | | | S  UTC , finish = 2025-09-04 08:20:50.689710161 UTC , thread_cap_info = ("ThreadId
| | | | | S  155", 2, False)}
| | | | | S  
| | F | | |  
| | E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | E | | |  = 5 , total_length = 60} , self = 90 , parent = Nothing , duration = 0.161391007000
| | E | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:50.568320293
| | E | | |  UTC , finish = 2025-09-04 08:20:50.7297113 UTC , thread_cap_info = ("ThreadId
| | E | | |  159", 2, False)}
| | E | | |  
| F | | | |  
|   | F | |  
| S |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| S |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| S |   | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| S |   | |  = 4 , total_length = 48} , self = 104 , parent = Nothing , duration = 0.252750860000
| S |   | |  , status = Success , start = 2025-09-04 08:20:50.649261272 UTC , finish
| S |   | |  = 2025-09-04 08:20:50.902012132 UTC , thread_cap_info = ("ThreadId 164",
| S |   | |  0, False)}
| S |   | |  
| | |   | S  
| | E   |    
F |     |    
  S     |    
        E    
