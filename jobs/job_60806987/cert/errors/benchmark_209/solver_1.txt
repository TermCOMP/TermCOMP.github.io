last 1001 length 4067
CNF 1001 vars 4067 clauses
last 997 length 4069
CNF 997 vars 4069 clauses
last 1718 length 7003
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2897, clauses: 10458
last 3962 length 17543
last 3270 length 13941
last 1714 length 6931
CNF 1718 vars 7003 clauses
last 3048 length 12993
last 2897 length 10458
last 1974 length 8237
last 1780 length 7633
last 4282 length 18961
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11678, clauses: 49015
CNF 3962 vars 17543 clauses
CNF 3270 vars 13941 clauses
CNF 3048 vars 12993 clauses
CNF 1714 vars 6931 clauses
CNF 2897 vars 10458 clauses
CNF 4282 vars 18961 clauses
CNF 1974 vars 8237 clauses
CNF 1780 vars 7633 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5061, clauses: 18794
last 11678 length 49015
**************************************************
last 5061 length 18794
summary
**************************************************
SRS with 3 strict rules and 4 weak rules on 3 letters       strictify
SRS with 7 rules on 3 letters       split
2 sub-proofs
  1 SRS with 4 strict rules and 3 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 36 strict rules and 27 weak rules on 9 letters       weights
  SRS with 0 strict rules and 13 weak rules on 9 letters       no strict rules

  2 SRS with 3 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 3 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 27 rules on 9 letters       weights
    SRS with 13 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 10 rules on 9 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, b] {- Input 0 -}
  [c, c, c] -> [a, b, a] {- Input 1 -}
  [b, c, b] -> [b, a, c] {- Input 2 -}
  [b, b, c] ->= [c, a, b] {- Input 3 -}
  [b, b, b] ->= [a, b, b] {- Input 4 -}
  [b, b, c] ->= [b, c, c] {- Input 5 -}
  [b, a, a] ->= [a, c, c] {- Input 6 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, b] {- Input 0 -}
  [c, c, c] -> [a, b, a] {- Input 1 -}
  [b, c, b] -> [b, a, c] {- Input 2 -}
  [b, b, c] -> [c, a, b] {- Strictified (Input 3) -}
  [b, b, b] -> [a, b, b] {- Strictified (Input 4) -}
  [b, b, c] -> [b, c, c] {- Strictified (Input 5) -}
  [b, a, a] -> [a, c, c] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b] ->= [a, c, b] {- Input 0 -}
  [c, c, c] ->= [a, b, a] {- Input 1 -}
  [b, c, b] -> [b, a, c] {- Input 2 -}
  [b, b, c] -> [c, a, b] {- Strictified (Input 3) -}
  [b, b, b] -> [a, b, b] {- Strictified (Input 4) -}
  [b, b, c] -> [b, c, c] {- Strictified (Input 5) -}
  [b, a, a] ->= [a, c, c] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, a]] ->= [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, c]] ->= [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, a]] ->= [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, b]] ->= [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, c]] ->= [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, b], [b, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, c] , [c, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, c] , [c, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, c] , [c, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, b], [b, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[b, b], [b, b], [b, b], [b, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, b], [b, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, b], [b, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[c, b], [b, b], [b, b], [b, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, b] , [b, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, b] , [b, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, b] , [b, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
  [[a, b], [b, a], [a, a], [a, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}
  [[a, b], [b, a], [a, a], [a, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 3/1)
  ([b, c], 2/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] ->= [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] ->= [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, b] {- Input 0 -}
  [c, c, c] -> [a, b, a] {- Input 1 -}
  [b, a, a] -> [a, c, c] {- Strictified (Input 6) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, b] {- Input 0 -}
  [c, c, c] -> [a, b, a] {- Input 1 -}
  [b, a, a] -> [a, c, c] {- Strictified (Input 6) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, a]] -> [ [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, b]] -> [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, c], [c, c], [c, c]] -> [ [b, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, a]] -> [ [c, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, b]] -> [ [c, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c], [c, c], [c, c], [c, c]] -> [ [c, a] , [a, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 6))) -}CNF 5061 vars 18794 clauses

  [[a, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Strictified (Input 6))) -}
  [[a, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Strictified (Input 6))) -}
  [[b, b], [b, a], [a, a], [a, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 3/1)
  ([b, c], 3/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, a]] -> [ [a, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 2 (Strictified (Input 6))) -}
  [[c, b], [b, a], [a, a], [a, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 2 (Strictified (Input 6))) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, b], [b, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, c], [c, c], [c, b]] -> [ [a, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 2/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3/4,3)\Strictify(7,3)\Split[(4/3,3)\TileAllAll{2}(36/27,9)\Weight(0/13,9)[],(3,3)\Split[(3,3)\TileAllAll{2}(27,9)\Weight(13,9)\Matrix{\Natural}{2}(10,9)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 11678 vars 49015 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5061, clauses: 18794, status: Satisfied, time: 0.025733853s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F      , closure = Forward\n , start_strict_only = True\n , max_closure_length
F      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F      = True})" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
F      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F      = 42} , self = 67 , parent = Nothing , duration = 0.295165423000 , status
F      = Fail , start = 2025-09-04 08:21:31.373309898 UTC , finish = 2025-09-04
F      08:21:31.668475321 UTC , thread_cap_info = ("ThreadId 45", 2, False)}
F      
| S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S    = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| S    = 13 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| S    = 104} , self = 68 , parent = Nothing , duration = 0.272730550000 , status
| S    = Success , start = 2025-09-04 08:21:31.396021442 UTC , finish = 2025-09-04
| S    08:21:31.668751992 UTC , thread_cap_info = ("ThreadId 113", 3, False)}
| S    
| | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | F  = 7 , num_top_rules = 7 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | F  = 84} , self = 66 , parent = Nothing , duration = 0.218993501000 , status
| | F  = Fail , start = 2025-09-04 08:21:31.400423641 UTC , finish = 2025-09-04
| | F  08:21:31.619417142 UTC , thread_cap_info = ("ThreadId 118", 1, False)}
| | F  
| | F  
F |    
  S    
