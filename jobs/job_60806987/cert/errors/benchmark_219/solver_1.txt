last 787 length 3111
last 1269 length 5131
CNF 787 vars 3111 clauses
last 877 length 3549
last 1061 length 4353
CNF 1061 vars 4353 clauses
CNF 877 vars 3549 clauses
CNF 1269 vars 5131 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2957, clauses: 10575
last 2957 length 10575
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3658, clauses: 13237
CNF 2957 vars 10575 clauses
last 9536 length 40345
last 3658 length 13237
last 10502 length 45475
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12226, clauses: 51307
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13515, clauses: 56693
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2957, clauses: 10575, status: Satisfied, time: 0.261299156s
CNF 9536 vars 40345 clauses
CNF 3658 vars 13237 clauses
CNF 10502 vars 45475 clauses
last 11490 length 48815
last 10490 length 44617
last 13204 length 57527
last 13515 length 56693
last 12336 length 54055
**************************************************CNF 11490 vars 48815 clauses
CNF 10490 vars 44617 clauses

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3658, clauses: 13237, status: Satisfied, time: 0.599852758s
CNF 13204 vars 57527 clauses
CNF 13515 vars 56693 clauses
CNF 12336 vars 54055 clauses
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 8 strict rules and 6 weak rules on 5 letters       weights
SRS with 2 strict rules and 6 weak rules on 5 letters       EDG
SRS with 1 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b] -> [b, a, b] {- Input 0 -}
  [c, c, c] -> [c, b, a] {- Input 1 -}
  [c, a, b] ->= [a, c, c] {- Input 2 -}
  [a, b, c] ->= [b, c, c] {- Input 3 -}
  [c, a, c] ->= [a, c, a] {- Input 4 -}
  [b, a, c] ->= [a, a, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [b, b, b] -> [b, a, b] {- Input 0 -}
  [c, c, c] -> [c, b, a] {- Input 1 -}
  [c, a, b] -> [a, c, c] {- Strictified (Input 2) -}
  [a, b, c] -> [b, c, c] {- Strictified (Input 3) -}
  [c, a, c] -> [a, c, a] {- Strictified (Input 4) -}
  [b, a, c] -> [a, a, a] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, b] -> [b, a, b] {- Mirror (Input 0) -}
  [c, c, c] -> [a, b, c] {- Mirror (Input 1) -}
  [b, a, c] -> [c, c, a] {- Mirror (Strictified (Input 2)) -}
  [c, b, a] -> [c, c, b] {- Mirror (Strictified (Input 3)) -}
  [c, a, c] -> [a, c, a] {- Mirror (Strictified (Input 4)) -}
  [c, a, b] -> [a, a, a] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, a, c] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, b] ->= [a, a, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b#, a, c] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 2))) -}
  [b#, a, c] |-> [c#, c, a] {- DP (Top 0) (Mirror (Strictified (Input 2))) -}
  [b#, b, b] |-> [b#, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a, c] |-> [c#, a] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [c#, b, a] |-> [b#] {- DP (Top 2) (Mirror (Strictified (Input 3))) -}
  [c#, b, a] |-> [c#, b] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [c#, b, a] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [c#, c, c] |-> [b#, c] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (c, 2/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, a, c] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, b] ->= [a, a, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [b#, b, b] |-> [b#, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b, a] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, a] |-> [c#, c, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
  [b, b, b] ->= [b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, a, c] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, b] ->= [a, a, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c, c, a] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [c, b, a] ->= [c, c, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [c, a, c] ->= [a, c, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, b] ->= [a, a, a] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (2/4,3)\Strictify\Mirror(6,3)\Deepee(8/6,5)\Weight(2/6,5)\EDG(1/6,4)\Matrix{\Arctic}{3}(0/6,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F      , closure = Backward\n , start_strict_only = True\n , max_closure_length
F      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F      = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
F      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F      = 36} , self = 88 , parent = Nothing , duration = 0.824062361000 , status
F      = Fail , start = 2025-09-04 08:21:33.021483437 UTC , finish = 2025-09-04
F      08:21:33.845545798 UTC , thread_cap_info = ("ThreadId 79", 3, False)}
F      
| S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S    = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| S    = 4 , total_length = 42} , self = 89 , parent = Nothing , duration = 0.812726467000
| S    , status = Success , start = 2025-09-04 08:21:33.12212778 UTC , finish
| S    = 2025-09-04 08:21:33.934854247 UTC , thread_cap_info = ("ThreadId 135",
| S    1, False)}
| S    
| | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | E  = 4 , total_length = 42} , self = 91 , parent = Nothing , duration = 0.786440990000
| | E  , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:33.150643786
| | E  UTC , finish = 2025-09-04 08:21:33.937084776 UTC , thread_cap_info = ("ThreadId
| | E  138", 1, False)}
| | E  
F | |  
  S |  
    E  
