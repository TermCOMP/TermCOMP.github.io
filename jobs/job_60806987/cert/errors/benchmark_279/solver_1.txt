[Info] pool sizes (success) 13 seen 7 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 12 seen 7 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 515 length 2071
last 439 length 1723
last 487 length 2029
CNF 439 vars 1723 clauses
CNF 515 vars 2071 clauses
last 607 length 2427
CNF 607 vars 2427 clauses
CNF 487 vars 2029 clauses
last 528 length 2175
last 540 length 2173
CNF 540 vars 2173 clauses
CNF 528 vars 2175 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6893
last 1786 length 6893
last 7066 length 29722
last 8425 length 35832
last 6650 length 28383
CNF 1786 vars 6893 clauses
last 7066 length 29722
CNF 7066 vars 29722 clauses
last 6800 length 30118
last 6519 length 27262
last 8425 length 35832
last 7066 length 29722
last 8536 length 37066
CNF 8425 vars 35832 clauses
last 8425 length 35832
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13419, clauses: 55766
CNF 6650 vars 28383 clauses
CNF 7066 vars 29722 clauses
CNF 7066 vars 29722 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6893, status: Unsatisfied, time: 1.288530606s
CNF 6800 vars 30118 clauses
CNF 6519 vars 27262 clauses
CNF 8536 vars 37066 clauses
CNF 8425 vars 35832 clauses
**************************************************last 13419 length 55766

summary
**************************************************
SRS with 2 strict rules and 5 weak rules on 3 letters       weights
SRS with 1 strict rules and 3 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 9 strict rules and 27 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 12 weak rules on 9 letters       weights
SRS with 0 strict rules and 6 weak rules on 7 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b] {- Input 0 -}
  [a, b, c] -> [b, b, c] {- Input 1 -}
  [a, b, c] ->= [c, c, b] {- Input 2 -}
  [b, a, c] ->= [c, a, c] {- Input 3 -}
  [a, a, c] ->= [a, a, b] {- Input 4 -}
  [b, c, a] ->= [a, c, b] {- Input 5 -}
  [a, a, a] ->= [c, a, b] {- Input 6 -}
reason
  (a, 1/1)
  (b, 0/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b] {- Input 0 -}
  [b, a, c] ->= [c, a, c] {- Input 3 -}
  [a, a, c] ->= [a, a, b] {- Input 4 -}
  [b, c, a] ->= [a, c, b] {- Input 5 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, b], [b, a]] -> [ [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, c]] -> [ [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, b], [b, b]] -> [ [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, a]] -> [ [c, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, c]] -> [ [c, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, b], [b, b]] -> [ [c, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, a]] -> [ [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, c]] -> [ [b, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b], [b, b]] -> [ [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, b]] ->= [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[a, b], [b, c], [c, a], [a, a]] ->= [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[a, b], [b, c], [c, a], [a, c]] ->= [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[a, b], [b, c], [c, a], [a, b]] ->= [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 5)) -}
  [[c, b], [b, c], [c, a], [a, a]] ->= [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[c, b], [b, c], [c, a], [a, c]] ->= [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
  [[c, b], [b, c], [c, a], [a, b]] ->= [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 5)) -}
  [[b, b], [b, c], [c, a], [a, a]] ->= [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
  [[b, b], [b, c], [c, a], [a, c]] ->= [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 5)) -}
  [[b, b], [b, c], [c, a], [a, b]] ->= [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 5)) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, b], [b, a], [a, c], [c, b]] ->= [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
reason
  no strict rules

**************************************************
skeleton: (2/5,3)\Weight(1/3,3)\TileAllAll{2}(9/27,9)\Matrix{\Natural}{2}(0/12,9)\Weight(0/6,7)[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 13419 vars 55766 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 2.542686602000
  min duration 0.024697565000
  total durat. 2.607561990000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 27
      , alphabet_size = 9
      , total_length = 288}
    , self = 90
    , parent = Nothing
    , duration = 2.542686602000
    , status = Success
    , start = 2025-09-04 08:20:51.359106175 UTC
    , finish = 2025-09-04 08:20:53.901792777 UTC
    , thread_cap_info = ("ThreadId 118", 2, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 2.271426222000
  min duration 0.092666245000
  total durat. 2.364092467000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 9
      , num_top_rules = 0
      , num_weak_rules = 27
      , alphabet_size = 9
      , total_length = 288}
    , self = 89
    , parent = Nothing
    , duration = 2.271426222000
    , status = Fail
    , start = 2025-09-04 08:20:51.396016989 UTC
    , finish = 2025-09-04 08:20:53.667443211 UTC
    , thread_cap_info = ("ThreadId 119", 2, False)}
Except "AsyncCancelled" : "Unlabel\n { accept_null_strict = True\n , produce_null_strict = False\n , verbose = False\n , tracing = False}"
  total number 1
  max duration 1.132420056000
  min duration 1.132420056000
  total durat. 1.132420056000
  Info
    { what = "Unlabel\n  { accept_null_strict = True\n  , produce_null_strict = False\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 470
      , num_strict_rules = 324
      , num_top_rules = 0
      , num_weak_rules = 146
      , alphabet_size = 70
      , total_length = 4700}
    , self = 95
    , parent = Nothing
    , duration = 1.132420056000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:20:52.942976419 UTC
    , finish = 2025-09-04 08:20:54.075396475 UTC
    , thread_cap_info = ("ThreadId 178", 2, False)}
Success : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 7
  max duration 1.087401377000
  min duration 0.000521168000
  total durat. 1.132270294000
  Info
    { what = "Weight\n  { modus = Pre (Or_Else Count (GLPK   { goal = Optimize, epsilon_digits = 6}))\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 2916
      , num_strict_rules = 729
      , num_top_rules = 0
      , num_weak_rules = 2187
      , alphabet_size = 81
      , total_length = 29160}
    , self = 88
    , parent = Nothing
    , duration = 1.087401377000
    , status = Success
    , start = 2025-09-04 08:20:51.855535064 UTC
    , finish = 2025-09-04 08:20:52.942936441 UTC
    , thread_cap_info = ("ThreadId 173", 2, False)}
**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 18} , self
E              = 77 , parent = Nothing , duration = 0.343312199000 , status = Except "AsyncCancelled"
E              , start = 2025-09-04 08:20:51.278183874 UTC , finish = 2025-09-04 08:20:51.621496073
E              UTC , thread_cap_info = ("ThreadId 20", 0, False)}
E              
| E            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| E            = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| E            = 24} , self = 54 , parent = Nothing , duration = 0.111549348000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-04 08:20:51.284508696 UTC ,
| E            finish = 2025-09-04 08:20:51.396058044 UTC , thread_cap_info = ("ThreadId
| E            61", 1, False)}
| E            
| | E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | E          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | E          = 216} , self = 69 , parent = Nothing , duration = 0.270827433000 , status
| | E          = Except "AsyncCancelled" , start = 2025-09-04 08:20:51.284926775 UTC ,
| | E          finish = 2025-09-04 08:20:51.555754208 UTC , thread_cap_info = ("ThreadId
| | E          68", 3, False)}
| | E          
| | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | E        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | E        = 216} , self = 70 , parent = Nothing , duration = 0.258731035000 , status
| | | E        = Except "AsyncCancelled" , start = 2025-09-04 08:20:51.297041829 UTC ,
| | | E        finish = 2025-09-04 08:20:51.555772864 UTC , thread_cap_info = ("ThreadId
| | | E        70", 3, False)}
| | | E        
| | | | S      Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | | | S      , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | | | S      , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | | | S      = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | | | S      , cpf = True}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | S      = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | | S      = 288} , self = 87 , parent = Nothing , duration = 0.489319234000 , status
| | | | S      = Success , start = 2025-09-04 08:20:51.347886559 UTC , finish = 2025-09-04
| | | | S      08:20:51.837205793 UTC , thread_cap_info = ("ThreadId 114", 2, False)}
| | | | S      
| | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | S    = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | | | S    = 288} , self = 90 , parent = Nothing , duration = 2.542686602000 , status
| | | | | S    = Success , start = 2025-09-04 08:20:51.359106175 UTC , finish = 2025-09-04
| | | | | S    08:20:53.901792777 UTC , thread_cap_info = ("ThreadId 118", 2, False)}
| | | | | S    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | | F  = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size = 9 , total_length
| | | | | | F  = 288} , self = 89 , parent = Nothing , duration = 2.271426222000 , status
| | | | | | F  = Fail , start = 2025-09-04 08:20:51.396016989 UTC , finish = 2025-09-04
| | | | | | F  08:20:53.667443211 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| | | | | | F  
| E | | | | |  
|   E | | | |  
|     E | | |  
E       | | |  
F       | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F       | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F       | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F       | | |  = 1 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F       | | |  = 24} , self = 86 , parent = Nothing , duration = 0.115404362000 , status
F       | | |  = Fail , start = 2025-09-04 08:20:51.621515975 UTC , finish = 2025-09-04
F       | | |  08:20:51.736920337 UTC , thread_cap_info = ("ThreadId 150", 3, False)}
F       | | |  
F       | | |  
        S | |  
S         | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S         | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S         | |  = Size { num_rules = 2916 , num_strict_rules = 729 , num_top_rules = 0
S         | |  , num_weak_rules = 2187 , alphabet_size = 81 , total_length = 29160} ,
S         | |  self = 88 , parent = Nothing , duration = 1.087401377000 , status = Success
S         | |  , start = 2025-09-04 08:20:51.855535064 UTC , finish = 2025-09-04 08:20:52.942936441
S         | |  UTC , thread_cap_info = ("ThreadId 173", 2, False)}
S         | |  
S         | |  
E         | |  Info { what = "Unlabel\n { accept_null_strict = True\n , produce_null_strict
E         | |  = False\n , verbose = False\n , tracing = False}" , input_size = Size {
E         | |  num_rules = 470 , num_strict_rules = 324 , num_top_rules = 0 , num_weak_rules
E         | |  = 146 , alphabet_size = 70 , total_length = 4700} , self = 95 , parent
E         | |  = Nothing , duration = 1.132420056000 , status = Except "AsyncCancelled"
E         | |  , start = 2025-09-04 08:20:52.942976419 UTC , finish = 2025-09-04 08:20:54.075396475
E         | |  UTC , thread_cap_info = ("ThreadId 178", 2, False)}
E         | |  
|         | F  
| E       |    Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E       |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E       |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E       |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E       |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E       |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 36
| E       |    , num_strict_rules = 9 , num_top_rules = 0 , num_weak_rules = 27 , alphabet_size
| E       |    = 9 , total_length = 288} , self = 92 , parent = Nothing , duration = 0.329950105000
| E       |    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:53.667490296
| E       |    UTC , finish = 2025-09-04 08:20:53.997440401 UTC , thread_cap_info = ("ThreadId
| E       |    185", 2, False)}
| E       |    
| |       S    
| E            
E              
