[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 1271 length 6552
CNF 1271 vars 6552 clauses
last 1538 length 9843
CNF 1538 vars 9843 clauses
last 1351 length 7794
CNF 1351 vars 7794 clauses
last 2050 length 12464
CNF 2050 vars 12464 clauses
last 2280 length 17464
CNF 2280 vars 17464 clauses
last 323 length 1433
last 326 length 1518
CNF 326 vars 1518 clauses
CNF 323 vars 1433 clauses
last 4746 length 28147
last 4746 length 28147
last 1560 length 7314
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1415, clauses: 5571
last 2304 length 11012
last 4086 length 32495
last 4086 length 32495
CNF 4746 vars 28147 clauses
CNF 4746 vars 28147 clauses
CNF 1560 vars 7314 clauses
last 1415 length 5571
last 1459 length 6896
last 1837 length 9440
CNF 4086 vars 32495 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10672, clauses: 44499
CNF 2304 vars 11012 clauses
last 1837 length 9440
last 1459 length 6896
last 1786 length 9673
last 1292 length 6483
CNF 4086 vars 32495 clauses
CNF 1415 vars 5571 clauses
CNF 1459 vars 6896 clauses
last 10672 length 44499
CNF 1837 vars 9440 clauses
CNF 1837 vars 9440 clauses
CNF 1459 vars 6896 clauses
CNF 1292 vars 6483 clauses
CNF 1786 vars 9673 clauses
last 25708 length 193324
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1415, clauses: 5571, status: Unsatisfied, time: 0.989094707s
CNF 10672 vars 44499 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2679, clauses: 10672
last 2679 length 10672
CNF 2679 vars 10672 clauses
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2679, clauses: 10672, status: Unsatisfied, time: 0.067290651s
CNF 25708 vars 193324 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10672, clauses: 44499, status: Unsatisfied, time: 0.842061949s
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5130, clauses: 21072
last 5130 length 21072
CNF 5130 vars 21072 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20082, clauses: 83613
last 20082 length 83613
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5130, clauses: 21072, status: Unsatisfied, time: 0.152345637s
CNF 20082 vars 83613 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20082, clauses: 83613, status: Satisfied, time: 0.49169993s
**************************************************
summary
**************************************************
SRS with 1 strict rules and 1 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 4 weak rules on 4 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 6 weak rules on 4 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 32 strict rules and 96 weak rules on 16 letters       weights
  SRS with 0 strict rules and 41 weak rules on 16 letters       no strict rules

  2 SRS with 2 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 4 weak rules on 4 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b, a] -> [b] {- Input 0 -}
  [] ->= [a, a, b, b, a] {- Input 1 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, b], [b, b], [b, a], [a, b]] -> [ [b, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, b], [b, b], [b, a], [a, a]] -> [ [b, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a], [a, b]] -> [ [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a], [a, a]] -> [ [a, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  split
   property Termination
has value Just True
for SRS
  [[b, b], [b, b], [b, b], [b, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, b], [b, b], [b, a], [a, a]] -> [ [b, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a], [a, a]] -> [ [a, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, b], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, a], [b, b]] , [[b, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 1 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[b, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[b, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[b, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, a]] ] ->= [ [[a, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, b]] ] ->= [ [[a, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [a, a]] ] ->= [ [[a, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[b, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[b, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[b, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[b, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, b], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, b]] ] -> [ [[a, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [b, a]] ] -> [ [[a, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] ] -> [ [[a, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, a]] ] -> [ [[a, a], [a, b]] , [[a, b], [b, a]] , [ [b, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 0)))) -}
  [[[b, b], [b, b]], [[b, b], [b, b]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, b], [b, b]], [[b, b], [b, a]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, b], [b, b]], [[b, b], [a, b]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, b], [b, b]], [[b, b], [a, a]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, a], [b, b]], [[b, b], [b, b]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, a], [b, b]], [[b, b], [b, a]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, a], [b, b]], [[b, b], [a, b]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, a], [b, b]], [[b, b], [a, a]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, b], [b, b]], [[b, b], [b, b]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, b], [b, b]], [[b, b], [b, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, b], [b, b]], [[b, b], [a, b]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, b], [b, b]], [[b, b], [a, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, a], [b, b]], [[b, b], [b, b]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, a], [b, b]], [[b, b], [b, a]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, a], [b, b]], [[b, b], [a, b]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[a, a], [b, b]], [[b, b], [a, a]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [b, b]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [b, a]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [a, b]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [a, a]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [b, b]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [b, a]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [a, b]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [a, a]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [b, b]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [b, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [a, b]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [a, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [b, b]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [b, a]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [a, b]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [a, a]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, b]], [[a, b], [b, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, b], [a, b]], [[a, b], [b, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, b], [a, b]], [[a, b], [a, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, b], [a, b]], [[a, b], [a, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [b, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [b, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [a, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [a, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, b], [a, b]], [[a, b], [b, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, b], [a, b]], [[a, b], [b, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, b], [a, b]], [[a, b], [a, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, b], [a, b]], [[a, b], [a, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [b, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [b, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [a, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [a, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [b, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [b, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [a, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [a, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [b, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [b, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [a, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [a, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [b, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [b, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [a, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [a, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [b, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [b, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [a, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [a, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
reason
  ([[a, a], [a, a]], 0/1)
  ([[a, a], [a, b]], 0/1)
  ([[a, a], [b, a]], 0/1)
  ([[a, a], [b, b]], 1/1)
  ([[a, b], [a, a]], 0/1)
  ([[a, b], [a, b]], 1/1)
  ([[a, b], [b, a]], 0/1)
  ([[a, b], [b, b]], 0/1)
  ([[b, a], [a, a]], 0/1)
  ([[b, a], [a, b]], 0/1)
  ([[b, a], [b, a]], 1/1)
  ([[b, a], [b, b]], 3/1)
  ([[b, b], [a, a]], 1/1)
  ([[b, b], [a, b]], 3/1)
  ([[b, b], [b, a]], 0/1)
  ([[b, b], [b, b]], 3/1)
   property Termination
has value Just True
for SRS
  [ [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[a, a], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [b, b]] , [[b, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 0 (Concon 0 (Input 0)))) -}
  [ [[b, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[b, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[b, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, b], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, b], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [[a, b], [b, b]] ] ->= [ [[a, a], [a, b]] , [[a, b], [b, b]] , [ [b, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 0 (Input 0)))) -}
  [[[a, b], [b, b]], [[b, b], [b, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 0 (Concon 0 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [a, b]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, b], [b, a]], [[b, a], [a, a]]] ->= [ [[b, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [a, b]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [b, a]], [[b, a], [a, a]]] ->= [ [[b, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [a, b]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, b], [b, a]], [[b, a], [a, a]]] ->= [ [[a, b], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [a, b]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[a, a], [b, a]], [[b, a], [a, a]]] ->= [ [[a, a], [b, a]] , [[b, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 0 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [b, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [b, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [a, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, a], [a, b]], [[a, b], [a, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [b, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [b, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [a, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[a, a], [a, b]], [[a, b], [a, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, b]] , [ [a, b] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 0 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [b, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 0 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [b, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 0 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [a, b]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 0 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, b], [a, a]], [[a, a], [a, a]]] ->= [ [[b, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 0 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [b, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 1 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [b, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 1 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [a, b]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 1 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[b, a], [a, a]], [[a, a], [a, a]]] ->= [ [[b, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 1 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [b, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 2 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [b, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 2 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [a, b]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 2 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, b], [a, a]], [[a, a], [a, a]]] ->= [ [[a, b], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 2 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [b, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , b ] ] ] {- Semlab 3 (Concon 0 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [b, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ b , a ] ] ] {- Semlab 3 (Concon 1 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [a, b]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , b ] ] ] {- Semlab 3 (Concon 2 (Semlab 1 (Concon 1 (Input 1)))) -}
  [[[a, a], [a, a]], [[a, a], [a, a]]] ->= [ [[a, a], [a, a]] , [[a, a], [a, a]] , [[a, a], [a, b]] , [[a, b], [b, b]] , [[b, b], [b, a]] , [[b, a], [a, a]] , [ [a, a] , [ a , a ] ] ] {- Semlab 3 (Concon 3 (Semlab 1 (Concon 1 (Input 1)))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [[b, b], [b, b], [b, b], [b, a], [a, b]] -> [ [b, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, b], [b, b], [b, b], [b, a], [a, b]] -> [ [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  ( [a, a]
  , St  / 0A - - \
        | -  - - |
        \ -  - - / )
  ( [a, b]
  , St  / 0A -  -   \
        | 0A -  0A  |
        \ 0A 0A -2A / )
  ( [b, a]
  , St  / 0A -  -  \
        | -  1A 2A |
        \ -  -  -  / )
  ( [b, b]
  , St  / 0A -  -1A \
        | 1A 0A 0A  |
        \ -  0A 0A  / )
   property Termination
has value Just True
for SRS
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  no strict rules

**************************************************
skeleton: (1/1,2)\TileAllAll{2}(4/4,4)\Split[(2/6,4)\TileAllAll{2}(32/96,16)\Weight(0/41,16)[],(2/4,4)\Matrix{\ArcticBZ}{3}(0/4,4)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 25495, clauses: 107637
last 25495 length 107637
CNF 25495 vars 107637 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 11
  max duration 1.737854261000
  min duration 0.033668950000
  total durat. 6.889099755000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 56}
    , self = 104
    , parent = Nothing
    , duration = 1.027203632000
    , status = Fail
    , start = 2025-09-04 08:24:05.565120444 UTC
    , finish = 2025-09-04 08:24:06.592324076 UTC
    , thread_cap_info = ("ThreadId 170", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 8
      , num_top_rules = 0
      , num_weak_rules = 33
      , alphabet_size = 16
      , total_length = 369}
    , self = 111
    , parent = Nothing
    , duration = 1.737854261000
    , status = Fail
    , start = 2025-09-04 08:24:05.712324784 UTC
    , finish = 2025-09-04 08:24:07.450179045 UTC
    , thread_cap_info = ("ThreadId 194", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 9
  max duration 1.116385234000
  min duration 0.030120972000
  total durat. 6.003576672000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 28
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 4
      , alphabet_size = 8
      , total_length = 136}
    , self = 99
    , parent = Nothing
    , duration = 1.044065896000
    , status = Fail
    , start = 2025-09-04 08:24:05.325307998 UTC
    , finish = 2025-09-04 08:24:06.369373894 UTC
    , thread_cap_info = ("ThreadId 135", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 28
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 4
      , alphabet_size = 8
      , total_length = 136}
    , self = 101
    , parent = Nothing
    , duration = 1.116385234000
    , status = Fail
    , start = 2025-09-04 08:24:05.351987216 UTC
    , finish = 2025-09-04 08:24:06.46837245 UTC
    , thread_cap_info = ("ThreadId 123", 0, False)}
Success : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.552775856000
  min duration 1.552775856000
  total durat. 1.552775856000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 42}
    , self = 113
    , parent = Nothing
    , duration = 1.552775856000
    , status = Success
    , start = 2025-09-04 08:24:06.599161001 UTC
    , finish = 2025-09-04 08:24:08.151936857 UTC
    , thread_cap_info = ("ThreadId 209", 3, False)}
Fail : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.737409673000
  min duration 1.737409673000
  total durat. 1.737409673000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 2
      , total_length = 19}
    , self = 110
    , parent = Nothing
    , duration = 1.737409673000
    , status = Fail
    , start = 2025-09-04 08:24:05.474399664 UTC
    , finish = 2025-09-04 08:24:07.211809337 UTC
    , thread_cap_info = ("ThreadId 151", 2, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.093843101000
  min duration 1.093843101000
  total durat. 1.093843101000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 42}
    , self = 115
    , parent = Nothing
    , duration = 1.093843101000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:24:07.091270061 UTC
    , finish = 2025-09-04 08:24:08.185113162 UTC
    , thread_cap_info = ("ThreadId 214", 3, False)}
Fail : "Matrix\n { monotone = Strict\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.142526063000
  min duration 0.403387436000
  total durat. 1.545913499000
  Info
    { what = "Matrix\n  { monotone = Strict\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 2
      , alphabet_size = 2
      , total_length = 19}
    , self = 108
    , parent = Nothing
    , duration = 1.142526063000
    , status = Fail
    , start = 2025-09-04 08:24:05.505116244 UTC
    , finish = 2025-09-04 08:24:06.647642307 UTC
    , thread_cap_info = ("ThreadId 158", 2, False)}
**************************************************
F                              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                              = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
F                              = 12 , num_top_rules = 12 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F                              = 68} , self = 69 , parent = Nothing , duration = 0.107857962000 , status
F                              = Fail , start = 2025-09-04 08:24:05.273092102 UTC , finish = 2025-09-04
F                              08:24:05.380950064 UTC , thread_cap_info = ("ThreadId 87", 1, False)}
F                              
| F                            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                            = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| F                            = 12 , num_top_rules = 12 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F                            = 68} , self = 72 , parent = Nothing , duration = 0.127166706000 , status
| F                            = Fail , start = 2025-09-04 08:24:05.273096546 UTC , finish = 2025-09-04
| F                            08:24:05.400263252 UTC , thread_cap_info = ("ThreadId 88", 1, False)}
| F                            
| | F                          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | F                          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | F                          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | F                          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | F                          = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 1 , num_top_rules
| | F                          = 0 , num_weak_rules = 1 , alphabet_size = 2 , total_length = 10} , self
| | F                          = 68 , parent = Nothing , duration = 0.103710644000 , status = Fail , start
| | F                          = 2025-09-04 08:24:05.273349649 UTC , finish = 2025-09-04 08:24:05.377060293
| | F                          UTC , thread_cap_info = ("ThreadId 94", 3, False)}
| | F                          
| | | F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 28 , num_strict_rules
| | | F                        = 24 , num_top_rules = 24 , num_weak_rules = 4 , alphabet_size = 8 , total_length
| | | F                        = 136} , self = 96 , parent = Nothing , duration = 0.444137862000 , status
| | | F                        = Fail , start = 2025-09-04 08:24:05.325262852 UTC , finish = 2025-09-04
| | | F                        08:24:05.769400714 UTC , thread_cap_info = ("ThreadId 122", 2, False)}
| | | F                        
| | | | F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 28 , num_strict_rules
| | | | F                      = 24 , num_top_rules = 24 , num_weak_rules = 4 , alphabet_size = 8 , total_length
| | | | F                      = 136} , self = 97 , parent = Nothing , duration = 0.603024716000 , status
| | | | F                      = Fail , start = 2025-09-04 08:24:05.325305441 UTC , finish = 2025-09-04
| | | | F                      08:24:05.928330157 UTC , thread_cap_info = ("ThreadId 130", 2, False)}
| | | | F                      
| | | | | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 28 , num_strict_rules
| | | | | F                    = 24 , num_top_rules = 24 , num_weak_rules = 4 , alphabet_size = 8 , total_length
| | | | | F                    = 136} , self = 99 , parent = Nothing , duration = 1.044065896000 , status
| | | | | F                    = Fail , start = 2025-09-04 08:24:05.325307998 UTC , finish = 2025-09-04
| | | | | F                    08:24:06.369373894 UTC , thread_cap_info = ("ThreadId 135", 2, False)}
| | | | | F                    
| | | | | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 28 , num_strict_rules
| | | | | | F                  = 24 , num_top_rules = 24 , num_weak_rules = 4 , alphabet_size = 8 , total_length
| | | | | | F                  = 136} , self = 101 , parent = Nothing , duration = 1.116385234000 , status
| | | | | | F                  = Fail , start = 2025-09-04 08:24:05.351987216 UTC , finish = 2025-09-04
| | | | | | F                  08:24:06.46837245 UTC , thread_cap_info = ("ThreadId 123", 0, False)}
| | | | | | F                  
| | F | | | |                  
F |   | | | |                  
  F   | | | |                  
F     | | | |                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F     | | | |                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     | | | |                  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F     | | | |                  = 4 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
F     | | | |                  = 100} , self = 100 , parent = Nothing , duration = 0.962393633000 , status
F     | | | |                  = Fail , start = 2025-09-04 08:24:05.445173437 UTC , finish = 2025-09-04
F     | | | |                  08:24:06.40756707 UTC , thread_cap_info = ("ThreadId 153", 1, False)}
F     | | | |                  
| F   | | | |                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F   | | | |                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | | | |                  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F   | | | |                  = 4 , num_top_rules = 0 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| F   | | | |                  = 100} , self = 98 , parent = Nothing , duration = 0.752871075000 , status
| F   | | | |                  = Fail , start = 2025-09-04 08:24:05.474389745 UTC , finish = 2025-09-04
| F   | | | |                  08:24:06.22726082 UTC , thread_cap_info = ("ThreadId 155", 1, False)}
| F   | | | |                  
| | F | | | |                  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | F | | | |                  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | F | | | |                  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | F | | | |                  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F | | | |                  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F | | | |                  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | F | | | |                  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | F | | | |                  = 2 , total_length = 19} , self = 110 , parent = Nothing , duration = 1.737409673000
| | F | | | |                  , status = Fail , start = 2025-09-04 08:24:05.474399664 UTC , finish =
| | F | | | |                  2025-09-04 08:24:07.211809337 UTC , thread_cap_info = ("ThreadId 151",
| | F | | | |                  2, False)}
| | F | | | |                  
| | | | | | | F                Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | | | | | F                = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | | F                = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | | F                , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | F                \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | F                , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | | | | F                , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | | | | | F                = 2 , total_length = 19} , self = 108 , parent = Nothing , duration = 1.142526063000
| | | | | | | F                , status = Fail , start = 2025-09-04 08:24:05.505116244 UTC , finish =
| | | | | | | F                2025-09-04 08:24:06.647642307 UTC , thread_cap_info = ("ThreadId 158",
| | | | | | | F                2, False)}
| | | | | | | F                
| | | | | | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | F              = 4 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | F              = 56} , self = 104 , parent = Nothing , duration = 1.027203632000 , status
| | | | | | | | F              = Fail , start = 2025-09-04 08:24:05.565120444 UTC , finish = 2025-09-04
| | | | | | | | F              08:24:06.592324076 UTC , thread_cap_info = ("ThreadId 170", 1, False)}
| | | | | | | | F              
| | | | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | F            = 4 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | F            = 56} , self = 102 , parent = Nothing , duration = 0.946092900000 , status
| | | | | | | | | F            = Fail , start = 2025-09-04 08:24:05.604096596 UTC , finish = 2025-09-04
| | | | | | | | | F            08:24:06.550189496 UTC , thread_cap_info = ("ThreadId 172", 3, False)}
| | | | | | | | | F            
| | | | | | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | | F          = 4 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | F          = 56} , self = 105 , parent = Nothing , duration = 0.988252337000 , status
| | | | | | | | | | F          = Fail , start = 2025-09-04 08:24:05.604108903 UTC , finish = 2025-09-04
| | | | | | | | | | F          08:24:06.59236124 UTC , thread_cap_info = ("ThreadId 171", 1, False)}
| | | | | | | | | | F          
| | | | | | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | | | F        = 4 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | | F        = 56} , self = 103 , parent = Nothing , duration = 0.949495859000 , status
| | | | | | | | | | | F        = Fail , start = 2025-09-04 08:24:05.625344694 UTC , finish = 2025-09-04
| | | | | | | | | | | F        08:24:06.574840553 UTC , thread_cap_info = ("ThreadId 175", 2, False)}
| | | | | | | | | | | F        
| | | | | | | | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | | | | | | F      = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | | | F      = 42} , self = 106 , parent = Nothing , duration = 0.930828278000 , status
| | | | | | | | | | | | F      = Fail , start = 2025-09-04 08:24:05.665235045 UTC , finish = 2025-09-04
| | | | | | | | | | | | F      08:24:06.596063323 UTC , thread_cap_info = ("ThreadId 187", 3, False)}
| | | | | | | | | | | | F      
| | | | | | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | | | | | | | F    = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | | | | | F    = 42} , self = 107 , parent = Nothing , duration = 0.944502594000 , status
| | | | | | | | | | | | | F    = Fail , start = 2025-09-04 08:24:05.665237005 UTC , finish = 2025-09-04
| | | | | | | | | | | | | F    08:24:06.609739599 UTC , thread_cap_info = ("ThreadId 188", 3, False)}
| | | | | | | | | | | | | F    
| | | | | | | | | | | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 41 , num_strict_rules
| | | | | | | | | | | | | | F  = 8 , num_top_rules = 0 , num_weak_rules = 33 , alphabet_size = 16 , total_length
| | | | | | | | | | | | | | F  = 369} , self = 111 , parent = Nothing , duration = 1.737854261000 , status
| | | | | | | | | | | | | | F  = Fail , start = 2025-09-04 08:24:05.712324784 UTC , finish = 2025-09-04
| | | | | | | | | | | | | | F  08:24:07.450179045 UTC , thread_cap_info = ("ThreadId 194", 3, False)}
| | | | | | | | | | | | | | F  
| | | F | | | | | | | | | | |  
| | |   F | | | | | | | | | |  
| F |     | | | | | | | | | |  
|   |     F | | | | | | | | |  
F   |       | | | | | | | | |  
    |       F | | | | | | | |  
    |         | | F | | | | |  
    |         | |   | F | | |  
    |         | F   |   | | |  
    |         |     F   | | |  
    |         |         F | |  
S   |         |           | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
S   |         |           | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S   |         |           | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S   |         |           | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S   |         |           | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S   |         |           | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
S   |         |           | |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
S   |         |           | |  = 4 , total_length = 42} , self = 113 , parent = Nothing , duration = 1.552775856000
S   |         |           | |  , status = Success , start = 2025-09-04 08:24:06.599161001 UTC , finish
S   |         |           | |  = 2025-09-04 08:24:08.151936857 UTC , thread_cap_info = ("ThreadId 209",
S   |         |           | |  3, False)}
S   |         |           | |  
|   |         |           F |  
| F |         |             |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| F |         |             |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| F |         |             |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| F |         |             |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F |         |             |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F |         |             |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| F |         |             |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| F |         |             |  = 4 , total_length = 42} , self = 109 , parent = Nothing , duration = 0.403387436000
| F |         |             |  , status = Fail , start = 2025-09-04 08:24:06.630283523 UTC , finish =
| F |         |             |  2025-09-04 08:24:07.033670959 UTC , thread_cap_info = ("ThreadId 210",
| F |         |             |  3, False)}
| F |         |             |  
| | |         F             |  
| F |                       |  
| E |                       |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E |                       |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |                       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |                       |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |                       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |                       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| E |                       |  , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 4 , alphabet_size
| E |                       |  = 4 , total_length = 42} , self = 115 , parent = Nothing , duration = 1.093843101000
| E |                       |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:24:07.091270061
| E |                       |  UTC , finish = 2025-09-04 08:24:08.185113162 UTC , thread_cap_info = ("ThreadId
| E |                       |  214", 3, False)}
| E |                       |  
| | F                       |  
| | F                       |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | F                       |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F                       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F                       |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F                       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F                       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | F                       |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | F                       |  = 2 , total_length = 19} , self = 112 , parent = Nothing , duration = 0.406132885000
| | F                       |  , status = Fail , start = 2025-09-04 08:24:07.265111314 UTC , finish =
| | F                       |  2025-09-04 08:24:07.671244199 UTC , thread_cap_info = ("ThreadId 215",
| | F                       |  2, False)}
| | F                       |  
| | |                       F  
| | F                          
S |                            
  E                            
