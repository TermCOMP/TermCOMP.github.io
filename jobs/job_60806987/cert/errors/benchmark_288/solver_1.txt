last 1055 length 4247
last 882 length 3549
CNF 1055 vars 4247 clauses
last 909 length 3693
CNF 882 vars 3549 clauses
last 826 length 3303
last 2605 length 11548
CNF 909 vars 3693 clauses
**************************************************last 1388 length 5791
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2864, clauses: 10458
last 1764 length 7579

CNF 826 vars 3303 clauses
last 2864 length 10458
CNF 1388 vars 5791 clauses
summaryCNF 1764 vars 7579 clauses

CNF 2864 vars 10458 clauses
**************************************************
SRS with 4 strict rules and 2 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 54 rules on 9 letters       weights
SRS with 8 rules on 8 letters       mirror
SRS with 8 rules on 8 letters       DP
SRS with 7 strict rules and 8 weak rules on 11 letters       weights
SRS with 0 strict rules and 8 weak rules on 8 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, a, b] -> [c, a, c] {- Input 0 -}
  [a, a, a] -> [c, a, a] {- Input 1 -}
  [a, b, a] -> [c, a, c] {- Input 2 -}
  [a, b, b] -> [a, c, b] {- Input 3 -}
  [a, b, b] ->= [a, a, c] {- Input 4 -}
  [b, c, c] ->= [b, a, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, a, b] -> [c, a, c] {- Input 0 -}
  [a, a, a] -> [c, a, a] {- Input 1 -}
  [a, b, a] -> [c, a, c] {- Input 2 -}
  [a, b, b] -> [a, c, b] {- Input 3 -}
  [a, b, b] -> [a, a, c] {- Strictified (Input 4) -}
  [b, c, c] -> [b, a, b] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, a], [a, b], [b, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, a], [a, b], [b, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, a], [a, b], [b, b]] -> [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[a, c], [c, a], [a, b], [b, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, c], [c, a], [a, b], [b, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, c], [c, a], [a, b], [b, b]] -> [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, c], [c, a], [a, b], [b, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, c], [c, a], [a, b], [b, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, c], [c, a], [a, b], [b, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, a], [a, c]] -> [ [c, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, a], [a, a], [a, a], [a, a]] -> [ [c, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, a], [a, a], [a, a], [a, b]] -> [ [c, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, a], [a, a], [a, a], [a, c]] -> [ [a, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, a], [a, a]] -> [ [a, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, a], [a, a], [a, a], [a, b]] -> [ [a, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, a], [a, a], [a, a], [a, c]] -> [ [b, c] , [c, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, a], [a, a]] -> [ [b, c] , [c, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a], [a, b]] -> [ [b, c] , [c, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, b], [b, a], [a, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, b], [b, a], [a, b]] -> [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, a], [a, b]] -> [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, a] , [a, c] , [c, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, a] , [a, c] , [c, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, a] , [a, c] , [c, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[c, a], [a, b], [b, b], [b, c]] -> [ [c, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[c, a], [a, b], [b, b], [b, a]] -> [ [c, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, a], [a, b], [b, b], [b, b]] -> [ [c, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, b], [b, c]] -> [ [a, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, b], [b, a]] -> [ [a, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, a], [a, b], [b, b], [b, b]] -> [ [a, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, a], [a, b], [b, b], [b, c]] -> [ [b, a] , [a, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, a], [a, b], [b, b], [b, a]] -> [ [b, a] , [a, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, a], [a, b], [b, b], [b, b]] -> [ [b, a] , [a, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, c], [c, b]] -> [ [c, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, b]] -> [ [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, c], [c, b]] -> [ [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 6/1)
  ([a, b], 6/1)
  ([a, c], 0/1)
  ([b, a], 2/1)
  ([b, b], 2/1)
  ([b, c], 6/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 4/1)
   property Termination
has value Just True
for SRS
  [[c, a], [a, b], [b, a], [a, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, a], [a, b], [b, a], [a, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, c], [c, c]] -> [ [c, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, c], [c, c], [c, a]] -> [ [c, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, c]] -> [ [a, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, c], [c, c], [c, a]] -> [ [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, c], [c, c]] -> [ [b, b] , [b, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, c], [c, c], [c, a]] -> [ [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[a, c], [b, a], [a, b], [c, a]] -> [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- Mirror (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, c], [b, a], [a, b], [b, a]] -> [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- Mirror (Semlab 2 (Concon 0 (Input 2))) -}
  [[c, c], [c, c], [b, c], [c, b]] -> [ [b, c] , [a, b] , [b, a] , [ c , b ] ] {- Mirror (Semlab 0 (Concon 0 (Strictified (Input 5)))) -}
  [[c, a], [c, c], [b, c], [c, b]] -> [ [b, a] , [a, b] , [b, a] , [ c , b ] ] {- Mirror (Semlab 0 (Concon 1 (Strictified (Input 5)))) -}
  [[c, c], [c, c], [b, c], [a, b]] -> [ [b, c] , [a, b] , [b, a] , [ a , b ] ] {- Mirror (Semlab 1 (Concon 0 (Strictified (Input 5)))) -}
  [[c, a], [c, c], [b, c], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Mirror (Semlab 1 (Concon 1 (Strictified (Input 5)))) -}
  [[c, c], [c, c], [b, c], [b, b]] -> [ [b, c] , [a, b] , [b, a] , [ b , b ] ] {- Mirror (Semlab 2 (Concon 0 (Strictified (Input 5)))) -}
  [[c, a], [c, c], [b, c], [b, b]] -> [ [b, a] , [a, b] , [b, a] , [ b , b ] ] {- Mirror (Semlab 2 (Concon 1 (Strictified (Input 5)))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[a, c], [b, a], [a, b], [c, a]] ->= [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, c], [b, a], [a, b], [b, a]] ->= [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[c, c], [c, c], [b, c], [c, b]] ->= [ [b, c] , [a, b] , [b, a] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, a] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Strictified (Input 5))))) -}
  [[c, c], [c, c], [b, c], [a, b]] ->= [ [b, c] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Strictified (Input 5))))) -}
  [[c, c], [c, c], [b, c], [b, b]] ->= [ [b, c] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [b, b]] ->= [ [b, a] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Strictified (Input 5))))) -}
  [[a, c]#, [b, a], [a, b], [b, a]] |-> [ [a, c]# , [c, a] , [ b , c ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [b, a]] |-> [ [c, a]# , [ b , c ] ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [b, a]] |-> [ [c, c]# , [a, c] , [c, a] , [ b , c ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [c, a]] |-> [ [a, c]# , [c, a] , [ c , c ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [c, a]] |-> [ [c, a]# , [ c , c ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [c, a]] |-> [ [ c , c ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, c]#, [b, a], [a, b], [c, a]] |-> [ [c, c]# , [a, c] , [c, a] , [ c , c ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
reason
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
  ([a, c]#, 1/1)
  ([c, a]#, 0/1)
  ([c, c]#, 0/1)
   property Termination
has value Just True
for SRS
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2555, clauses: 9213
last 2555 length 9213
  [[a, c], [b, a], [a, b], [c, a]] ->= [ [c, c] , [a, c] , [c, a] , [ c , c ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 2)))) -}
  [[a, c], [b, a], [a, b], [b, a]] ->= [ [c, c] , [a, c] , [c, a] , [ b , c ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 2)))) -}
  [[c, c], [c, c], [b, c], [c, b]] ->= [ [b, c] , [a, b] , [b, a] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, a] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Strictified (Input 5))))) -}
  [[c, c], [c, c], [b, c], [a, b]] ->= [ [b, c] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Strictified (Input 5))))) -}
  [[c, c], [c, c], [b, c], [b, b]] ->= [ [b, c] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Strictified (Input 5))))) -}
  [[c, a], [c, c], [b, c], [b, b]] ->= [ [b, a] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Strictified (Input 5))))) -}
reason
  EDG

**************************************************
skeleton: (4/2,3)\Strictify(6,3)\TileAllAll{2}(54,9)\Weight\Mirror(8,8)\Deepee(7/8,11)\Weight(0/8,8)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 2555 vars 9213 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2864, clauses: 10458, status: Satisfied, time: 0.023851661s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
   
