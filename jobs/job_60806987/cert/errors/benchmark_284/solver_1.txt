last 994 length 4235
CNF 994 vars 4235 clauses
last 887 length 3519
last 969 length 3967
last 861 length 3485
CNF 861 vars 3485 clauses
last 1027 length 4123
CNF 887 vars 3519 clauses
CNF 969 vars 3967 clauses
CNF 1027 vars 4123 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2660, clauses: 9570
last 10898 length 46181
last 12286 length 52847
last 13060 length 56279
last 12574 length 53479
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3045, clauses: 11000
last 12484 length 54329
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10468, clauses: 43865
last 2660 length 9570
CNF 10898 vars 46181 clauses
last 13262 length 56975
CNF 12286 vars 52847 clauses
CNF 13060 vars 56279 clauses
CNF 12574 vars 53479 clauses
last 3045 length 11000
last 10468 length 43865
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11133, clauses: 46599
CNF 12484 vars 54329 clauses
CNF 2660 vars 9570 clauses
CNF 3045 vars 11000 clauses
CNF 13262 vars 56975 clauses
last 11133 length 46599
CNF 10468 vars 43865 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2660, clauses: 9570, status: Unsatisfied, time: 0.421839149s
CNF 11133 vars 46599 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3045, clauses: 11000, status: Satisfied, time: 0.332090669s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6346, clauses: 25902
last 6346 length 25902
CNF 6346 vars 25902 clauses
**************************************************
summary
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 9 strict rules and 6 weak rules on 5 letters       weights
SRS with 2 strict rules and 6 weak rules on 5 letters       EDG
SRS with 2 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 6 weak rules on 5 letters       weights
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, c, a] -> [a, a, c] {- Input 0 -}
  [b, b, a] -> [b, b, b] {- Input 1 -}
  [b, c, b] ->= [c, b, c] {- Input 2 -}
  [b, a, a] ->= [c, a, c] {- Input 3 -}
  [c, a, a] ->= [a, a, c] {- Input 4 -}
  [c, c, b] ->= [c, b, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, c, a] -> [a, a, c] {- Input 0 -}
  [b, b, a] -> [b, b, b] {- Input 1 -}
  [b, c, b] -> [c, b, c] {- Strictified (Input 2) -}
  [b, a, a] -> [c, a, c] {- Strictified (Input 3) -}
  [c, a, a] -> [a, a, c] {- Strictified (Input 4) -}
  [c, c, b] -> [c, b, a] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, c, c] -> [c, a, a] {- Mirror (Input 0) -}
  [a, b, b] -> [b, b, b] {- Mirror (Input 1) -}
  [b, c, b] -> [c, b, c] {- Mirror (Strictified (Input 2)) -}
  [a, a, b] -> [c, a, c] {- Mirror (Strictified (Input 3)) -}
  [a, a, c] -> [c, a, a] {- Mirror (Strictified (Input 4)) -}
  [b, c, c] -> [a, b, c] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [c, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, b] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [c, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [a#, a, c] |-> [a#] {- DP (Top 2) (Mirror (Strictified (Input 4))) -}
  [a#, a, c] |-> [a#, a] {- DP (Top 1) (Mirror (Strictified (Input 4))) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c, c] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, c, c] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, c, b] |-> [b#, c] {- DP (Top 1) (Mirror (Strictified (Input 2))) -}
  [b#, c, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [b#, c, c] |-> [b#, c] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [c, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, b] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [c, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, c, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, c, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a, c, c] ->= [c, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, b] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [c, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 6A 6A 9A - \
        | 6A 6A 9A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 6A 6A 9A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 2A 2A 4A - \
        | 2A 2A 4A - |
        | 2A 2A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, c, c] ->= [c, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, b] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [c, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, c, c] ->= [c, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, b] ->= [c, b, c] {- DP Nontop (Mirror (Strictified (Input 2))) -}
  [a, a, b] ->= [c, a, c] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, a, c] ->= [c, a, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [b, c, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (2/4,3)\Strictify\Mirror(6,3)\Deepee(9/6,5)\Weight\EDG(2/6,5)\Matrix{\Arctic}{3}(1/6,5)\Weight(0/6,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.154109370000
  min duration 0.039455737000
  total durat. 3.397971938000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 105
    , parent = Nothing
    , duration = 1.154109370000
    , status = Fail
    , start = 2025-09-04 08:24:34.653936074 UTC
    , finish = 2025-09-04 08:24:35.808045444 UTC
    , thread_cap_info = ("ThreadId 148", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.111161341000
  min duration 0.182773596000
  total durat. 3.875203413000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 57
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 54
      , alphabet_size = 10
      , total_length = 456}
    , self = 106
    , parent = Nothing
    , duration = 1.039820163000
    , status = Fail
    , start = 2025-09-04 08:24:34.806174769 UTC
    , finish = 2025-09-04 08:24:35.845994932 UTC
    , thread_cap_info = ("ThreadId 175", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 54
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 432}
    , self = 103
    , parent = Nothing
    , duration = 1.111161341000
    , status = Fail
    , start = 2025-09-04 08:24:34.653942705 UTC
    , finish = 2025-09-04 08:24:35.765104046 UTC
    , thread_cap_info = ("ThreadId 150", 3, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.123627904000
  min duration 1.123627904000
  total durat. 1.123627904000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 6
      , alphabet_size = 4
      , total_length = 42}
    , self = 109
    , parent = Nothing
    , duration = 1.123627904000
    , status = Fail
    , start = 2025-09-04 08:24:34.842721372 UTC
    , finish = 2025-09-04 08:24:35.966349276 UTC
    , thread_cap_info = ("ThreadId 177", 3, False)}
**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E                  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E                  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E                  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E                  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E                  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                  = 6} , self = 79 , parent = Nothing , duration = 0.107298384000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-04 08:24:34.593383276 UTC ,
E                  finish = 2025-09-04 08:24:34.70068166 UTC , thread_cap_info = ("ThreadId
E                  64", 3, False)}
E                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E                , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E                max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E                [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E                string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E                , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E                = 6} , self = 89 , parent = Nothing , duration = 0.184973794000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-04 08:24:34.5961261 UTC , finish
| E                = 2025-09-04 08:24:34.781099894 UTC , thread_cap_info = ("ThreadId 83",
| E                1, False)}
| E                
| | F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | F              = True}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules
| | F              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 36} , self
| | F              = 80 , parent = Nothing , duration = 0.106147394000 , status = Fail , start
| | F              = 2025-09-04 08:24:34.596233846 UTC , finish = 2025-09-04 08:24:34.70238124
| | F              UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | F            = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 432} , self = 105 , parent = Nothing , duration = 1.154109370000 , status
| | | F            = Fail , start = 2025-09-04 08:24:34.653936074 UTC , finish = 2025-09-04
| | | F            08:24:35.808045444 UTC , thread_cap_info = ("ThreadId 148", 3, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F          = 432} , self = 103 , parent = Nothing , duration = 1.111161341000 , status
| | | | F          = Fail , start = 2025-09-04 08:24:34.653942705 UTC , finish = 2025-09-04
| | | | F          08:24:35.765104046 UTC , thread_cap_info = ("ThreadId 150", 3, False)}
| | | | F          
E | | | |          
  | F | |          
F |   | |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |   | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |   | |          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F |   | |          = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
F |   | |          = 42} , self = 98 , parent = Nothing , duration = 0.182773596000 , status
F |   | |          = Fail , start = 2025-09-04 08:24:34.761204821 UTC , finish = 2025-09-04
F |   | |          08:24:34.943978417 UTC , thread_cap_info = ("ThreadId 163", 3, False)}
F |   | |          
| | F | |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | |          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F | |          = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | F | |          = 48} , self = 101 , parent = Nothing , duration = 0.375107007000 , status
| | F | |          = Fail , start = 2025-09-04 08:24:34.767239198 UTC , finish = 2025-09-04
| | F | |          08:24:35.142346205 UTC , thread_cap_info = ("ThreadId 164", 3, False)}
| | F | |          
| E | | |          
| F | | |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | |          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F | | |          = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| F | | |          = 48} , self = 102 , parent = Nothing , duration = 0.769609755000 , status
| F | | |          = Fail , start = 2025-09-04 08:24:34.782846828 UTC , finish = 2025-09-04
| F | | |          08:24:35.552456583 UTC , thread_cap_info = ("ThreadId 165", 3, False)}
| F | | |          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 54 , alphabet_size = 10 , total_length
| | | | | F        = 456} , self = 106 , parent = Nothing , duration = 1.039820163000 , status
| | | | | F        = Fail , start = 2025-09-04 08:24:34.806174769 UTC , finish = 2025-09-04
| | | | | F        08:24:35.845994932 UTC , thread_cap_info = ("ThreadId 175", 0, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 54 , alphabet_size = 10 , total_length
| | | | | | F      = 456} , self = 104 , parent = Nothing , duration = 0.967632240000 , status
| | | | | | F      = Fail , start = 2025-09-04 08:24:34.820657171 UTC , finish = 2025-09-04
| | | | | | F      08:24:35.788289411 UTC , thread_cap_info = ("ThreadId 174", 0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | F    = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | | | | | F    = 4 , total_length = 42} , self = 109 , parent = Nothing , duration = 1.123627904000
| | | | | | | F    , status = Fail , start = 2025-09-04 08:24:34.842721372 UTC , finish =
| | | | | | | F    2025-09-04 08:24:35.966349276 UTC , thread_cap_info = ("ThreadId 177",
| | | | | | | F    3, False)}
| | | | | | | F    
F | | | | | | |    
F | | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
F | | | | | | |    = 6 , num_top_rules = 6 , num_weak_rules = 54 , alphabet_size = 11 , total_length
F | | | | | | |    = 480} , self = 108 , parent = Nothing , duration = 0.861667584000 , status
F | | | | | | |    = Fail , start = 2025-09-04 08:24:35.083278725 UTC , finish = 2025-09-04
F | | | | | | |    08:24:35.944946309 UTC , thread_cap_info = ("ThreadId 182", 3, False)}
F | | | | | | |    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | | | | | | F  = 6 , num_top_rules = 6 , num_weak_rules = 54 , alphabet_size = 11 , total_length
| | | | | | | | F  = 480} , self = 107 , parent = Nothing , duration = 0.771838558000 , status
| | | | | | | | F  = Fail , start = 2025-09-04 08:24:35.100662063 UTC , finish = 2025-09-04
| | | | | | | | F  08:24:35.872500621 UTC , thread_cap_info = ("ThreadId 183", 3, False)}
| | | | | | | | F  
| | F | | | | | |  
| | S | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | | | | | |  = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| | S | | | | | |  = 5 , total_length = 48} , self = 110 , parent = Nothing , duration = 0.740327627000
| | S | | | | | |  , status = Success , start = 2025-09-04 08:24:35.240798315 UTC , finish
| | S | | | | | |  = 2025-09-04 08:24:35.981125942 UTC , thread_cap_info = ("ThreadId 184",
| | S | | | | | |  3, False)}
| | S | | | | | |  
| F | | | | | | |  
| E | | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E | | | | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| E | | | | | | |  = 5 , total_length = 48} , self = 112 , parent = Nothing , duration = 0.848267044000
| E | | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:24:35.552488676
| E | | | | | | |  UTC , finish = 2025-09-04 08:24:36.40075572 UTC , thread_cap_info = ("ThreadId
| E | | | | | | |  186", 3, False)}
| E | | | | | | |  
| | | | F | | | |  
| | | |   | F | |  
| | | F   |   | |  
| | |     F   | |  
| | |         | F  
F | |         |    
  | |         F    
  | S              
  E                
