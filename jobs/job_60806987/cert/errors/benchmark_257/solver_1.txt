last 2916 length 12217
last 2744 length 11511
CNF 2916 vars 12217 clauses
CNF 2744 vars 11511 clauses
last 1471 length 5963
last 834 length 3367
CNF 1471 vars 5963 clauses
CNF 834 vars 3367 clauses
last 846 length 3391
last 1493 length 6019
last 4794 length 20806
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4391, clauses: 16302
last 5704 length 24329
last 5128 length 21420
last 5024 length 21398
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2552, clauses: 9201
last 5666 length 24146
CNF 846 vars 3391 clauses
last 6414 length 27352
CNF 1493 vars 6019 clauses
last 4391 length 16302
CNF 4794 vars 20806 clauses
CNF 5128 vars 21420 clauses
CNF 5024 vars 21398 clauses
CNF 5704 vars 24329 clauses
last 2552 length 9201
CNF 5666 vars 24146 clauses
CNF 6414 vars 27352 clauses
CNF 4391 vars 16302 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9884, clauses: 41397
CNF 2552 vars 9201 clauses
last 4085 length 18055
last 3678 length 15579
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13693, clauses: 57350
last 3742 length 15937
last 3427 length 14570
last 9884 length 41397
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4391, clauses: 16302, status: Satisfied, time: 0.439103664s
last 6047 length 25670
last 13693 length 57350
last 6559 length 28502
CNF 3678 vars 15579 clauses
CNF 4085 vars 18055 clauses
CNF 3742 vars 15937 clauses
CNF 3427 vars 14570 clauses
CNF 9884 vars 41397 clauses
CNF 6047 vars 25670 clauses
last 809 length 3251
last 853 length 3411
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2552, clauses: 9201, status: Unsatisfied, time: 0.602615075s
CNF 6559 vars 28502 clauses
last 2422 length 10363
last 2236 length 9485
last 5128 length 21420
last 4794 length 20806
CNF 853 vars 3411 clauses
CNF 809 vars 3251 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6004, clauses: 24566
CNF 2236 vars 9485 clauses
last 5666 length 24146
CNF 2422 vars 10363 clauses
CNF 5128 vars 21420 clauses
CNF 4794 vars 20806 clauses
last 6004 length 24566
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2561, clauses: 9270
last 6414 length 27352
CNF 5666 vars 24146 clauses
**************************************************
last 2561 length 9270
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9594, clauses: 40169
summaryCNF 6004 vars 24566 clauses

last 9594 length 40169
CNF 6414 vars 27352 clauses
CNF 2561 vars 9270 clauses
**************************************************
SRS with 2 strict rules and 4 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 5 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 45 weak rules on 9 letters       weights
  SRS with 0 strict rules and 24 weak rules on 9 letters       no strict rules

  2 SRS with 5 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 1 strict rules and 4 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 9 strict rules and 36 weak rules on 9 letters       weights
    SRS with 6 strict rules and 18 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 strict rules and 18 weak rules on 9 letters       weights
    SRS with 0 strict rules and 16 weak rules on 9 letters       no strict rules

    2 SRS with 4 rules on 3 letters       split
    2 sub-proofs
      1 SRS with 2 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
      SRS with 18 strict rules and 18 weak rules on 9 letters       weights
      SRS with 5 strict rules and 11 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
      SRS with 3 strict rules and 11 weak rules on 9 letters       weights
      SRS with 0 strict rules and 10 weak rules on 9 letters       no strict rules

      2 SRS with 2 rules on 3 letters       split
      2 sub-proofs
        1 SRS with 2 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
        SRS with 18 rules on 9 letters       weights
        SRS with 10 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
        SRS with 9 rules on 6 letters       weights
        SRS with 0 rules on 0 letters       no strict rules

        2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
  [c, c, b] ->= [a, c, a] {- Input 2 -}
  [b, a, c] ->= [c, a, c] {- Input 3 -}
  [c, b, c] ->= [b, b, b] {- Input 4 -}
  [b, b, a] ->= [b, a, c] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
  [c, c, b] -> [a, c, a] {- Strictified (Input 2) -}
  [b, a, c] -> [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] -> [b, b, b] {- Strictified (Input 4) -}
  [b, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] ->= [a, c, c] {- Input 0 -}
  [b, b, c] ->= [a, b, b] {- Input 1 -}
  [c, c, b] -> [a, c, a] {- Strictified (Input 2) -}
  [b, a, c] ->= [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] ->= [b, b, b] {- Strictified (Input 4) -}
  [b, b, a] ->= [b, a, c] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b], [b, a]] -> [ [a, a] , [a, c] , [c, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 2))) -}
  [[a, c], [c, c], [c, b], [b, c]] -> [ [a, a] , [a, c] , [c, a] , [ a , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 2))) -}
  [[a, c], [c, c], [c, b], [b, b]] -> [ [a, a] , [a, c] , [c, a] , [ a , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 2))) -}
  [[c, c], [c, c], [c, b], [b, a]] -> [ [c, a] , [a, c] , [c, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 2))) -}
  [[c, c], [c, c], [c, b], [b, c]] -> [ [c, a] , [a, c] , [c, a] , [ a , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 2))) -}
  [[c, c], [c, c], [c, b], [b, b]] -> [ [c, a] , [a, c] , [c, a] , [ a , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 2))) -}
  [[b, c], [c, c], [c, b], [b, a]] -> [ [b, a] , [a, c] , [c, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 2))) -}
  [[b, c], [c, c], [c, b], [b, c]] -> [ [b, a] , [a, c] , [c, a] , [ a , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 2))) -}
  [[b, c], [c, c], [c, b], [b, b]] -> [ [b, a] , [a, c] , [c, a] , [ a , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 2))) -}
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, b]] ->= [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, b]] ->= [ [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, b]] ->= [ [c, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, a]] ->= [ [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, b]] ->= [ [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, a]] ->= [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, c]] ->= [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, a]] ->= [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, c]] ->= [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, a]] ->= [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, c]] ->= [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 3/2)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 3/2)
  ([b, c], 5/2)
  ([c, a], 0/1)
  ([c, b], 5/2)
  ([c, c], 3/2)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, c]] ->= [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, b]] ->= [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, c]] ->= [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, b]] ->= [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, c]] ->= [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, b]] ->= [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
  [b, a, c] -> [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] -> [b, b, b] {- Strictified (Input 4) -}
  [b, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] ->= [a, c, c] {- Input 0 -}
  [b, b, c] ->= [a, b, b] {- Input 1 -}
  [b, a, c] ->= [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] ->= [b, b, b] {- Strictified (Input 4) -}
  [b, b, a] -> [b, a, c] {- Strictified (Input 5) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a], [a, c], [c, a]] ->= [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, c]] ->= [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, b]] ->= [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, a]] ->= [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, c]] ->= [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, b]] ->= [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, b]] ->= [ [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, b]] ->= [ [c, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, a]] ->= [ [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, c]] ->= [ [b, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, b]] ->= [ [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, a]] -> [ [a, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, a]] -> [ [c, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, a]] -> [ [b, b] , [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ([a, a], 5/2)
  ([a, b], 3/2)
  ([a, c], 1/1)
  ([b, a], 3/2)
  ([b, b], 5/2)
  ([b, c], 4/1)
  ([c, a], 0/1)
  ([c, b], 3/1)
  ([c, c], 5/2)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[a, b], [b, b], [b, a], [a, c]] -> [ [a, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 5))) -}
  [[a, b], [b, b], [b, a], [a, b]] -> [ [a, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, c]] -> [ [c, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 5))) -}
  [[c, b], [b, b], [b, a], [a, b]] -> [ [c, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, c]] -> [ [b, b] , [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 5))) -}
  [[b, b], [b, b], [b, a], [a, b]] -> [ [b, b] , [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 5))) -}
reason
  ( [a, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] ->= [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] ->= [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] ->= [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] ->= [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] ->= [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, c], [c, a]] ->= [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] ->= [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
  [b, a, c] -> [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] -> [b, b, b] {- Strictified (Input 4) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] ->= [a, c, c] {- Input 0 -}
  [b, b, c] ->= [a, b, b] {- Input 1 -}
  [b, a, c] -> [c, a, c] {- Strictified (Input 3) -}
  [c, b, c] -> [b, b, b] {- Strictified (Input 4) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] ->= [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] ->= [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] ->= [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] ->= [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] ->= [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a], [a, c], [c, a]] -> [ [a, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, c]] -> [ [a, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 3))) -}
  [[a, b], [b, a], [a, c], [c, b]] -> [ [a, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, a]] -> [ [c, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, c]] -> [ [c, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 3))) -}
  [[c, b], [b, a], [a, c], [c, b]] -> [ [c, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[a, c], [c, b], [b, c], [c, a]] -> [ [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, c]] -> [ [a, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Strictified (Input 4))) -}
  [[a, c], [c, b], [b, c], [c, b]] -> [ [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, b]] -> [ [c, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, a]] -> [ [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, c]] -> [ [b, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 4))) -}
  [[b, c], [c, b], [b, c], [c, b]] -> [ [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 4))) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 4/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
  [[c, c], [c, b], [b, c], [c, a]] -> [ [c, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Strictified (Input 4))) -}
  [[c, c], [c, b], [b, c], [c, c]] -> [ [c, b] , [b, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Strictified (Input 4))) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}CNF 9594 vars 40169 clauses

  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, c], [c, a]] -> [ [b, c] , [c, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, c]] -> [ [b, c] , [c, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Strictified (Input 3))) -}
  [[b, b], [b, a], [a, c], [c, b]] -> [ [b, c] , [c, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Strictified (Input 3))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 3/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] ->= [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] ->= [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] ->= [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] ->= [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] ->= [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] ->= [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] ->= [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] ->= [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] ->= [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, c] -> [a, c, c] {- Input 0 -}
  [b, b, c] -> [a, b, b] {- Input 1 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, a]] -> [ [a, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, c], [c, b]] -> [ [a, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, a]] -> [ [c, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, c]] -> [ [c, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, b], [b, b], [b, c], [c, b]] -> [ [c, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, a]] -> [ [b, a] , [a, b] , [b, b] , [ b , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, c]] -> [ [b, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, c], [c, b]] -> [ [b, a] , [a, b] , [b, b] , [ b , b ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 2/1)
  ([c, a], 0/1)
  ([c, b], 2/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, b] , [ b , c ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, c], [c, a]] -> [ [a, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, c]] -> [ [a, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, c], [c, b]] -> [ [a, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, a]] -> [ [c, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, c]] -> [ [c, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, a], [a, c], [c, b]] -> [ [c, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, a]] -> [ [b, a] , [a, c] , [c, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, c]] -> [ [b, a] , [a, c] , [c, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, c], [c, b]] -> [ [b, a] , [a, c] , [c, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
reason
  ([a, a], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (2/4,3)\Strictify(6,3)\Split[(1/5,3)\TileAllAll{2}(9/45,9)\Weight(0/24,9)[],(5,3)\Split[(1/4,3)\TileAllAll{2}(9/36,9)\Weight(6/18,9)\Matrix{\Natural}{2}(0/18,9)\Weight(0/16,9)[],(4,3)\Split[(2/2,3)\TileAllAll{2}(18/18,9)\Weight(5/11,9)\Matrix{\Natural}{2}(3/11,9)\Weight(0/10,9)[],(2,3)\Split[(2,3)\TileAllAll{2}(18,9)\Weight(10,9)\Matrix{\Natural}{2}(9,6)\Weight(0,0)[],(0,0)[]]]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9884, clauses: 41397, status: Unsatisfied, time: 0.87451822s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2561, clauses: 9270, status: Unsatisfied, time: 0.149748312s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.540758523000
  min duration 0.424335850000
  total durat. 2.320223169000
Success : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.561288737000
  min duration 0.050698803000
  total durat. 1.799900007000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.518983832000
  min duration 0.362470739000
  total durat. 1.316691688000
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.467393357000
  min duration 0.439122660000
  total durat. 1.371640564000
**************************************************
E                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                    , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                    = 18} , self = 78 , parent = Nothing , duration = 0.111245764000 , status
E                    = Except "AsyncCancelled" , start = 2025-09-04 08:21:18.961765301 UTC ,
E                    finish = 2025-09-04 08:21:19.073011065 UTC , thread_cap_info = ("ThreadId
E                    34", 1, False)}
E                    
| F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F                  = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| F                  = 72} , self = 106 , parent = Nothing , duration = 0.435237117000 , status
| F                  = Fail , start = 2025-09-04 08:21:19.028038548 UTC , finish = 2025-09-04
| F                  08:21:19.463275665 UTC , thread_cap_info = ("ThreadId 133", 1, False)}
| F                  
| | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F                = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | F                = 42} , self = 104 , parent = Nothing , duration = 0.238598647000 , status
| | F                = Fail , start = 2025-09-04 08:21:19.048252374 UTC , finish = 2025-09-04
| | F                08:21:19.286851021 UTC , thread_cap_info = ("ThreadId 141", 1, False)}
| | F                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F              = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | F              = 42} , self = 105 , parent = Nothing , duration = 0.362470739000 , status
| | | F              = Fail , start = 2025-09-04 08:21:19.062117581 UTC , finish = 2025-09-04
| | | F              08:21:19.42458832 UTC , thread_cap_info = ("ThreadId 142", 1, False)}
| | | F              
E | | |              
S | | |              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S | | |              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S | | |              = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
S | | |              = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
S | | |              = 192} , self = 114 , parent = Nothing , duration = 0.540758523000 , status
S | | |              = Success , start = 2025-09-04 08:21:19.080183125 UTC , finish = 2025-09-04
S | | |              08:21:19.620941648 UTC , thread_cap_info = ("ThreadId 175", 1, False)}
S | | |              
| | | | S            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S            = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | S            = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | S            = 192} , self = 116 , parent = Nothing , duration = 0.561288737000 , status
| | | | S            = Success , start = 2025-09-04 08:21:19.088448502 UTC , finish = 2025-09-04
| | | | S            08:21:19.649737239 UTC , thread_cap_info = ("ThreadId 177", 1, False)}
| | | | S            
| | | | | E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
| | | | | E          = 1 , num_top_rules = 1 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | | | | E          = 200} , self = 109 , parent = Nothing , duration = 0.514882088000 , status
| | | | | E          = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.088473058 UTC ,
| | | | | E          finish = 2025-09-04 08:21:19.603355146 UTC , thread_cap_info = ("ThreadId
| | | | | E          181", 0, False)}
| | | | | E          
| | | | | | S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
| | | | | | S        = 1 , num_top_rules = 1 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | | | | | S        = 200} , self = 107 , parent = Nothing , duration = 0.402605725000 , status
| | | | | | S        = Success , start = 2025-09-04 08:21:19.118372762 UTC , finish = 2025-09-04
| | | | | | S        08:21:19.520978487 UTC , thread_cap_info = ("ThreadId 182", 0, False)}
| | | | | | S        
| | | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S      = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | | | | | | S      alphabet_size = 6 , total_length = 72} , self = 137 , parent = Nothing
| | | | | | | S      , duration = 0.743630545000 , status = Success , start = 2025-09-04 08:21:19.14863281
| | | | | | | S      UTC , finish = 2025-09-04 08:21:19.892263355 UTC , thread_cap_info = ("ThreadId
| | | | | | | S      185", 1, False)}
| | | | | | | S      
| | | | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | S    = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | | | | | | | S    = 216} , self = 119 , parent = Nothing , duration = 0.463707313000 , status
| | | | | | | | S    = Success , start = 2025-09-04 08:21:19.2291886 UTC , finish = 2025-09-04
| | | | | | | | S    08:21:19.692895913 UTC , thread_cap_info = ("ThreadId 188", 0, False)}
| | | | | | | | S    
| | | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | E  = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | | | | | | | | E  = 216} , self = 121 , parent = Nothing , duration = 0.467393357000 , status
| | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.248243121 UTC ,
| | | | | | | | | E  finish = 2025-09-04 08:21:19.715636478 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | E  189", 0, False)}
| | | | | | | | | E  
| | F | | | | | | |  
| | F | | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F | | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F | | | | | | |  = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | F | | | | | | |  = 4 , total_length = 42} , self = 169 , parent = Nothing , duration = 0.896386767000
| | F | | | | | | |  , status = Fail , start = 2025-09-04 08:21:19.286869624 UTC , finish =
| | F | | | | | | |  2025-09-04 08:21:20.183256391 UTC , thread_cap_info = ("ThreadId 193",
| | F | | | | | | |  1, False)}
| | F | | | | | | |  
| | | F | | | | | |  
| F |   | | | | | |  
| E |   | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| E |   | | | | | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
| E |   | | | | | |  = 6 , total_length = 72} , self = 139 , parent = Nothing , duration = 0.431878029000
| E |   | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.463347723
| E |   | | | | | |  UTC , finish = 2025-09-04 08:21:19.895225752 UTC , thread_cap_info = ("ThreadId
| E |   | | | | | |  203", 1, False)}
| E |   | | | | | |  
| | |   | | S | | |  
| | |   | E   | | |  
| | | S |     | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S |     | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S |     | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | S |     | | |  = 1 , num_top_rules = 1 , num_weak_rules = 16 , alphabet_size = 10 , total_length
| | | S |     | | |  = 136} , self = 144 , parent = Nothing , duration = 0.426927533000 , status
| | | S |     | | |  = Success , start = 2025-09-04 08:21:19.604005616 UTC , finish = 2025-09-04
| | | S |     | | |  08:21:20.030933149 UTC , thread_cap_info = ("ThreadId 209", 0, False)}
| | | S |     | | |  
| | | | | E   | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E   | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | | E   | | |  = 1 , num_top_rules = 1 , num_weak_rules = 16 , alphabet_size = 10 , total_length
| | | | | E   | | |  = 136} , self = 157 , parent = Nothing , duration = 0.439122660000 , status
| | | | | E   | | |  = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.609220519 UTC ,
| | | | | E   | | |  finish = 2025-09-04 08:21:20.048343179 UTC , thread_cap_info = ("ThreadId
| | | | | E   | | |  210", 0, False)}
| | | | | E   | | |  
S | | | | |   | | |  
  | | | S |   | | |  
  | | |   |   | S |  
  | | |   |   |   E  
E | | |   |   |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
E | | |   |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E | | |   |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
E | | |   |   |      = 2 , num_top_rules = 2 , num_weak_rules = 24 , alphabet_size = 10 , total_length
E | | |   |   |      = 208} , self = 168 , parent = Nothing , duration = 0.465124547000 , status
E | | |   |   |      = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.718077618 UTC ,
E | | |   |   |      finish = 2025-09-04 08:21:20.183202165 UTC , thread_cap_info = ("ThreadId
E | | |   |   |      221", 0, False)}
E | | |   |   |      
| | | | S |   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| | | | S |   |      = 2 , num_top_rules = 2 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | | | S |   |      = 208} , self = 166 , parent = Nothing , duration = 0.424335850000 , status
| | | | S |   |      = Success , start = 2025-09-04 08:21:19.72823416 UTC , finish = 2025-09-04
| | | | S |   |      08:21:20.15257001 UTC , thread_cap_info = ("ThreadId 220", 0, False)}
| | | | S |   |      
| | | | | | E |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E |      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | E |      = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | E |      = 128} , self = 162 , parent = Nothing , duration = 0.362114666000 , status
| | | | | | E |      = Except "AsyncCancelled" , start = 2025-09-04 08:21:19.730025282 UTC ,
| | | | | | E |      finish = 2025-09-04 08:21:20.092139948 UTC , thread_cap_info = ("ThreadId
| | | | | | E |      239", 1, False)}
| | | | | | E |      
| | | | | | | | S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | | | S    = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | | | S    = 128} , self = 146 , parent = Nothing , duration = 0.293763058000 , status
| | | | | | | | S    = Success , start = 2025-09-04 08:21:19.748236555 UTC , finish = 2025-09-04
| | | | | | | | S    08:21:20.041999613 UTC , thread_cap_info = ("ThreadId 241", 1, False)}
| | | | | | | | S    
| | | | | | | S |    
| E | | | | |   |    
| F | | | | |   |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | |   |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F | | | | |   |    = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| F | | | | |   |    = 42} , self = 175 , parent = Nothing , duration = 0.518983832000 , status
| F | | | | |   |    = Fail , start = 2025-09-04 08:21:19.895601764 UTC , finish = 2025-09-04
| F | | | | |   |    08:21:20.414585596 UTC , thread_cap_info = ("ThreadId 258", 1, False)}
| F | | | | |   |    
| | | | | | | F |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | | | F |    = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | | F |    = 42} , self = 174 , parent = Nothing , duration = 0.500413756000 , status
| | | | | | | F |    = Fail , start = 2025-09-04 08:21:19.900481239 UTC , finish = 2025-09-04
| | | | | | | F |    08:21:20.400894995 UTC , thread_cap_info = ("ThreadId 257", 1, False)}
| | | | | | | F |    
| | | S | | | | |    
| | |   | | | | S    
| | | S | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | S | | | |      = 10 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | S | | | |      = 80} , self = 176 , parent = Nothing , duration = 0.464493950000 , status
| | | S | | | |      = Success , start = 2025-09-04 08:21:20.045298192 UTC , finish = 2025-09-04
| | | S | | | |      08:21:20.509792142 UTC , thread_cap_info = ("ThreadId 279", 1, False)}
| | | S | | | |      
| | | | | | | | S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | S    = 10 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | | | S    = 80} , self = 178 , parent = Nothing , duration = 0.491543684000 , status
| | | | | | | | S    = Success , start = 2025-09-04 08:21:20.045303017 UTC , finish = 2025-09-04
| | | | | | | | S    08:21:20.536846701 UTC , thread_cap_info = ("ThreadId 281", 1, False)}
| | | | | | | | S    
| | | | | E | | |    
| | | | |   E | |    
| | | | S     | |    
E | | |       | |    
  | F |       | |    
  |   |       F |    
  F   |         |    
      S         |    
                S    
