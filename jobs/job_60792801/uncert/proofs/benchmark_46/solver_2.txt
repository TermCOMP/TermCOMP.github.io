YES

Problem 1: 

(VAR vu95NonEmpty fun x xs y)
(RULES
app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
app(app(app(if,ffalse),x),y) -> y
app(app(app(if,ftrue),x),y) -> x
app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
app(app(filter,fun),nil) -> nil
app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
app(app(map,fun),nil) -> nil
app(f,app(s,x)) -> app(f,x)
app(f,num0) -> ftrue
app(f,num1) -> ffalse
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(g,app(s,x)),app(s,y)) -> APP(app(app(if,app(f,x)),app(s,x)),app(s,y))
 APP(app(g,app(s,x)),app(s,y)) -> APP(app(if,app(f,x)),app(s,x))
 APP(app(g,app(s,x)),app(s,y)) -> APP(f,x)
 APP(app(g,app(s,x)),app(s,y)) -> APP(if,app(f,x))
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,app(c,y))),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(g,app(s,x)),app(s,y)) -> APP(app(app(if,app(f,x)),app(s,x)),app(s,y))
 APP(app(g,app(s,x)),app(s,y)) -> APP(app(if,app(f,x)),app(s,x))
 APP(app(g,app(s,x)),app(s,y)) -> APP(f,x)
 APP(app(g,app(s,x)),app(s,y)) -> APP(if,app(f,x))
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,app(c,y))),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->->Cycle:
->->-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,app(c,y))),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->->Cycle:
->->-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,app(c,y))),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
-> Usable rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Interpretation type:
 Simple mixed
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 2.X1.X2 + X1
[num0] = 2
[num1] = 0
[c] = 2
[cons] = 0
[f] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[filter] = 0
[filter2] = 0
[g] = 2
[if] = 2
[map] = 2
[nil] = 0
[s] = 0
[ftrue] = 0
[APP](X1,X2) = X1.X2 + X1 + 2.X2

Problem 1.2: 

SCC Processor:
-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(g,app(s,app(c,y))),y))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
-> Usable rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Interpretation type:
 Simple mixed
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 2.X1.X2 + X1
[num0] = 2
[num1] = 0
[c] = 2
[cons] = 0
[f] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[filter] = 0
[filter2] = 0
[g] = 1
[if] = 1
[map] = 1
[nil] = 0
[s] = 0
[ftrue] = 0
[APP](X1,X2) = X1.X2 + 2.X2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Projection:
 pi(APP) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),x),y) -> y
 app(app(app(if,ftrue),x),y) -> x
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,app(s,x)),app(s,y)) -> app(app(app(if,app(f,x)),app(s,x)),app(s,y))
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(g,app(s,app(c,y))),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
