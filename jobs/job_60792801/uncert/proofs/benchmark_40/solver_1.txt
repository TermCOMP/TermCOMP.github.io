YES
proof of /home/ff862203/input_SN0qDR1QhY.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 11 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) ATransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(f, x), app(c, x)), app(c, y)) -> app(app(app(f, y), y), app(app(app(f, y), x), y))
   app(app(app(f, app(s, x)), y), z) -> app(app(app(f, x), app(s, app(c, y))), app(c, z))
   app(app(app(f, app(c, x)), x), y) -> app(c, y)
   app(app(g, x), y) -> x
   app(app(g, x), y) -> y
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(app(f, y), y), app(app(app(f, y), x), y))
   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(f, y), y)
   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(f, y)
   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(app(f, y), x), y)
   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(f, y), x)
   APP(app(app(f, app(s, x)), y), z) -> APP(app(app(f, x), app(s, app(c, y))), app(c, z))
   APP(app(app(f, app(s, x)), y), z) -> APP(app(f, x), app(s, app(c, y)))
   APP(app(app(f, app(s, x)), y), z) -> APP(f, x)
   APP(app(app(f, app(s, x)), y), z) -> APP(s, app(c, y))
   APP(app(app(f, app(s, x)), y), z) -> APP(c, y)
   APP(app(app(f, app(s, x)), y), z) -> APP(c, z)
   APP(app(app(f, app(c, x)), x), y) -> APP(c, y)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(cons, app(fun, x)), app(app(map, fun), xs))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(cons, app(fun, x))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(filter2, app(fun, x)), fun), x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(filter2, app(fun, x)), fun)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(filter2, app(fun, x))
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(cons, x), app(app(filter, fun), xs))
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(filter, fun)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(filter, fun)

The TRS R consists of the following rules:

   app(app(app(f, x), app(c, x)), app(c, y)) -> app(app(app(f, y), y), app(app(app(f, y), x), y))
   app(app(app(f, app(s, x)), y), z) -> app(app(app(f, x), app(s, app(c, y))), app(c, z))
   app(app(app(f, app(c, x)), x), y) -> app(c, y)
   app(app(g, x), y) -> x
   app(app(g, x), y) -> y
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 19 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, app(s, x)), y), z) -> APP(app(app(f, x), app(s, app(c, y))), app(c, z))

The TRS R consists of the following rules:

   app(app(app(f, x), app(c, x)), app(c, y)) -> app(app(app(f, y), y), app(app(app(f, y), x), y))
   app(app(app(f, app(s, x)), y), z) -> app(app(app(f, x), app(s, app(c, y))), app(c, z))
   app(app(app(f, app(c, x)), x), y) -> app(c, y)
   app(app(g, x), y) -> x
   app(app(g, x), y) -> y
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, app(s, x)), y), z) -> APP(app(app(f, x), app(s, app(c, y))), app(c, z))

R is empty.
The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(s(x), y, z) -> f1(x, s(c(y)), c(z))

R is empty.
The set Q consists of the following terms:

   f(x0, c(x0), c(x1))
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   f(s(x0), x1, x2)
   g(x0, x1)
   f(c(x0), x0, x1)
   filter2(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0, c(x0), c(x1))
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   f(s(x0), x1, x2)
   g(x0, x1)
   f(c(x0), x0, x1)
   filter2(true, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(s(x), y, z) -> f1(x, s(c(y)), c(z))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f1(s(x), y, z) -> f1(x, s(c(y)), c(z))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(app(f, y), x), y)

The TRS R consists of the following rules:

   app(app(app(f, x), app(c, x)), app(c, y)) -> app(app(app(f, y), y), app(app(app(f, y), x), y))
   app(app(app(f, app(s, x)), y), z) -> app(app(app(f, x), app(s, app(c, y))), app(c, z))
   app(app(app(f, app(c, x)), x), y) -> app(c, y)
   app(app(g, x), y) -> x
   app(app(g, x), y) -> y
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, x), app(c, x)), app(c, y)) -> APP(app(app(f, y), x), y)

R is empty.
The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(x, c(x), c(y)) -> f1(y, x, y)

R is empty.
The set Q consists of the following terms:

   f(x0, c(x0), c(x1))
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   f(s(x0), x1, x2)
   g(x0, x1)
   f(c(x0), x0, x1)
   filter2(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0, c(x0), c(x1))
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   f(s(x0), x1, x2)
   g(x0, x1)
   f(c(x0), x0, x1)
   filter2(true, x0, x1, x2)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(x, c(x), c(y)) -> f1(y, x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f1(x, c(x), c(y)) -> f1(y, x, y)
The graph contains the following edges 3 > 1, 1 >= 2, 2 > 2, 3 > 3


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

The TRS R consists of the following rules:

   app(app(app(f, x), app(c, x)), app(c, y)) -> app(app(app(f, y), y), app(app(app(f, y), x), y))
   app(app(app(f, app(s, x)), y), z) -> app(app(app(f, x), app(s, app(c, y))), app(c, z))
   app(app(app(f, app(c, x)), x), y) -> app(c, y)
   app(app(g, x), y) -> x
   app(app(g, x), y) -> y
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, x0), app(c, x0)), app(c, x1))
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(f, app(s, x0)), x1), x2)
   app(app(g, x0), x1)
   app(app(app(f, app(c, x0)), x0), x1)
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(25)
YES
