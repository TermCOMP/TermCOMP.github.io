YES
proof of /home/ff862203/input_LadPIJpw1Z.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) QDPOrderProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) PisEmptyProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   and(true, y) -> y
   and(false, y) -> false
   eq(nil, nil) -> true
   eq(cons(t, l), nil) -> false
   eq(nil, cons(t, l)) -> false
   eq(cons(t, l), cons(t', l')) -> and(eq(t, t'), eq(l, l'))
   eq(var(l), var(l')) -> eq(l, l')
   eq(var(l), apply(t, s)) -> false
   eq(var(l), lambda(x, t)) -> false
   eq(apply(t, s), var(l)) -> false
   eq(apply(t, s), apply(t', s')) -> and(eq(t, t'), eq(s, s'))
   eq(apply(t, s), lambda(x, t)) -> false
   eq(lambda(x, t), var(l)) -> false
   eq(lambda(x, t), apply(t, s)) -> false
   eq(lambda(x, t), lambda(x', t')) -> and(eq(x, x'), eq(t, t'))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')
   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))

The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(cons(t, l), cons(t', l')) -> AND(eq(t, t'), eq(l, l'))
   EQ(cons(t, l), cons(t', l')) -> EQ(t, t')
   EQ(cons(t, l), cons(t', l')) -> EQ(l, l')
   EQ(var(l), var(l')) -> EQ(l, l')
   EQ(apply(t, s), apply(t', s')) -> AND(eq(t, t'), eq(s, s'))
   EQ(apply(t, s), apply(t', s')) -> EQ(t, t')
   EQ(apply(t, s), apply(t', s')) -> EQ(s, s')
   EQ(lambda(x, t), lambda(x', t')) -> AND(eq(x, x'), eq(t, t'))
   EQ(lambda(x, t), lambda(x', t')) -> EQ(x, x')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(t, t')
   REN(var(l), var(k), var(l')) -> IF(eq(l, l'), var(k), var(l'))
   REN(var(l), var(k), var(l')) -> EQ(l, l')
   REN(x, y, apply(t, s)) -> REN(x, y, t)
   REN(x, y, apply(t, s)) -> REN(x, y, s)
   REN(x, y, lambda(z, t)) -> REN(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t))
   REN(x, y, lambda(z, t)) -> REN(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)

The TRS R consists of the following rules:

   and(true, y) -> y
   and(false, y) -> false
   eq(nil, nil) -> true
   eq(cons(t, l), nil) -> false
   eq(nil, cons(t, l)) -> false
   eq(cons(t, l), cons(t', l')) -> and(eq(t, t'), eq(l, l'))
   eq(var(l), var(l')) -> eq(l, l')
   eq(var(l), apply(t, s)) -> false
   eq(var(l), lambda(x, t)) -> false
   eq(apply(t, s), var(l)) -> false
   eq(apply(t, s), apply(t', s')) -> and(eq(t, t'), eq(s, s'))
   eq(apply(t, s), lambda(x, t)) -> false
   eq(lambda(x, t), var(l)) -> false
   eq(lambda(x, t), apply(t, s)) -> false
   eq(lambda(x, t), lambda(x', t')) -> and(eq(x, x'), eq(t, t'))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')
   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))

The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(cons(t, l), cons(t', l')) -> EQ(l, l')
   EQ(cons(t, l), cons(t', l')) -> EQ(t, t')
   EQ(var(l), var(l')) -> EQ(l, l')
   EQ(apply(t, s), apply(t', s')) -> EQ(t, t')
   EQ(apply(t, s), apply(t', s')) -> EQ(s, s')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(x, x')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(t, t')

The TRS R consists of the following rules:

   and(true, y) -> y
   and(false, y) -> false
   eq(nil, nil) -> true
   eq(cons(t, l), nil) -> false
   eq(nil, cons(t, l)) -> false
   eq(cons(t, l), cons(t', l')) -> and(eq(t, t'), eq(l, l'))
   eq(var(l), var(l')) -> eq(l, l')
   eq(var(l), apply(t, s)) -> false
   eq(var(l), lambda(x, t)) -> false
   eq(apply(t, s), var(l)) -> false
   eq(apply(t, s), apply(t', s')) -> and(eq(t, t'), eq(s, s'))
   eq(apply(t, s), lambda(x, t)) -> false
   eq(lambda(x, t), var(l)) -> false
   eq(lambda(x, t), apply(t, s)) -> false
   eq(lambda(x, t), lambda(x', t')) -> and(eq(x, x'), eq(t, t'))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')
   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))

The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(cons(t, l), cons(t', l')) -> EQ(l, l')
   EQ(cons(t, l), cons(t', l')) -> EQ(t, t')
   EQ(var(l), var(l')) -> EQ(l, l')
   EQ(apply(t, s), apply(t', s')) -> EQ(t, t')
   EQ(apply(t, s), apply(t', s')) -> EQ(s, s')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(x, x')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(t, t')

R is empty.
The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(cons(t, l), cons(t', l')) -> EQ(l, l')
   EQ(cons(t, l), cons(t', l')) -> EQ(t, t')
   EQ(var(l), var(l')) -> EQ(l, l')
   EQ(apply(t, s), apply(t', s')) -> EQ(t, t')
   EQ(apply(t, s), apply(t', s')) -> EQ(s, s')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(x, x')
   EQ(lambda(x, t), lambda(x', t')) -> EQ(t, t')

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(cons(t, l), cons(t', l')) -> EQ(l, l')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(cons(t, l), cons(t', l')) -> EQ(t, t')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(var(l), var(l')) -> EQ(l, l')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(apply(t, s), apply(t', s')) -> EQ(t, t')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(apply(t, s), apply(t', s')) -> EQ(s, s')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(lambda(x, t), lambda(x', t')) -> EQ(x, x')
The graph contains the following edges 1 > 1, 2 > 2


*EQ(lambda(x, t), lambda(x', t')) -> EQ(t, t')
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REN(x, y, apply(t, s)) -> REN(x, y, s)
   REN(x, y, apply(t, s)) -> REN(x, y, t)
   REN(x, y, lambda(z, t)) -> REN(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t))
   REN(x, y, lambda(z, t)) -> REN(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)

The TRS R consists of the following rules:

   and(true, y) -> y
   and(false, y) -> false
   eq(nil, nil) -> true
   eq(cons(t, l), nil) -> false
   eq(nil, cons(t, l)) -> false
   eq(cons(t, l), cons(t', l')) -> and(eq(t, t'), eq(l, l'))
   eq(var(l), var(l')) -> eq(l, l')
   eq(var(l), apply(t, s)) -> false
   eq(var(l), lambda(x, t)) -> false
   eq(apply(t, s), var(l)) -> false
   eq(apply(t, s), apply(t', s')) -> and(eq(t, t'), eq(s, s'))
   eq(apply(t, s), lambda(x, t)) -> false
   eq(lambda(x, t), var(l)) -> false
   eq(lambda(x, t), apply(t, s)) -> false
   eq(lambda(x, t), lambda(x', t')) -> and(eq(x, x'), eq(t, t'))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')
   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))

The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REN(x, y, apply(t, s)) -> REN(x, y, s)
   REN(x, y, apply(t, s)) -> REN(x, y, t)
   REN(x, y, lambda(z, t)) -> REN(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t))
   REN(x, y, lambda(z, t)) -> REN(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
REN(x1, x2, x3)  =  x3

apply(x1, x2)  =  apply(x1, x2)

lambda(x1, x2)  =  lambda(x2)

ren(x1, x2, x3)  =  ren(x3)

var(x1)  =  var

if(x1, x2, x3)  =  if


Knuth-Bendix order [KBO] with precedence:ren_1 > lambda_1
ren_1 > if > var
ren_1 > apply_2

and weight map:

   lambda_1=1
   var=1
   ren_1=0
   apply_2=1
   if=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')


----------------------------------------

(14)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   and(true, y) -> y
   and(false, y) -> false
   eq(nil, nil) -> true
   eq(cons(t, l), nil) -> false
   eq(nil, cons(t, l)) -> false
   eq(cons(t, l), cons(t', l')) -> and(eq(t, t'), eq(l, l'))
   eq(var(l), var(l')) -> eq(l, l')
   eq(var(l), apply(t, s)) -> false
   eq(var(l), lambda(x, t)) -> false
   eq(apply(t, s), var(l)) -> false
   eq(apply(t, s), apply(t', s')) -> and(eq(t, t'), eq(s, s'))
   eq(apply(t, s), lambda(x, t)) -> false
   eq(lambda(x, t), var(l)) -> false
   eq(lambda(x, t), apply(t, s)) -> false
   eq(lambda(x, t), lambda(x', t')) -> and(eq(x, x'), eq(t, t'))
   if(true, var(k), var(l')) -> var(k)
   if(false, var(k), var(l')) -> var(l')
   ren(var(l), var(k), var(l')) -> if(eq(l, l'), var(k), var(l'))
   ren(x, y, apply(t, s)) -> apply(ren(x, y, t), ren(x, y, s))
   ren(x, y, lambda(z, t)) -> lambda(var(cons(x, cons(y, cons(lambda(z, t), nil)))), ren(x, y, ren(z, var(cons(x, cons(y, cons(lambda(z, t), nil)))), t)))

The set Q consists of the following terms:

   eq(nil, nil)
   if(false, var(x0), var(x1))
   eq(var(x0), apply(x1, x2))
   eq(apply(x0, x1), var(x2))
   and(true, x0)
   eq(var(x0), lambda(x1, x2))
   eq(lambda(x0, x1), var(x2))
   and(false, x0)
   eq(cons(x0, x1), nil)
   eq(nil, cons(x0, x1))
   eq(lambda(x0, x1), lambda(x2, x3))
   ren(var(x0), var(x1), var(x2))
   ren(x0, x1, apply(x2, x3))
   ren(x0, x1, lambda(x2, x3))
   eq(cons(x0, x1), cons(x2, x3))
   eq(apply(x0, x1), lambda(x2, x0))
   eq(lambda(x0, x1), apply(x1, x2))
   if(true, var(x0), var(x1))
   eq(var(x0), var(x1))
   eq(apply(x0, x1), apply(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(16)
YES
