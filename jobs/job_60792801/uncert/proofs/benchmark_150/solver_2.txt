YES

Problem 1: 

(VAR vu95NonEmpty N X Y)
(RULES
add(num0,X) -> X
add(s(X),Y) -> s(add(X,Y))
dbl(num0) -> num0
dbl(s(X)) -> s(s(dbl(X)))
first(num0,X) -> nil
first(s(X),cons(Y)) -> cons(Y)
sqr(num0) -> num0
sqr(s(X)) -> s(add(sqr(X),dbl(X)))
terms(N) -> cons(recip(sqr(N)))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
 DBL(s(X)) -> DBL(X)
 SQR(s(X)) -> ADD(sqr(X),dbl(X))
 SQR(s(X)) -> DBL(X)
 SQR(s(X)) -> SQR(X)
 TERMS(N) -> SQR(N)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))

Problem 1: 

SCC Processor:
-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
 DBL(s(X)) -> DBL(X)
 SQR(s(X)) -> ADD(sqr(X),dbl(X))
 SQR(s(X)) -> DBL(X)
 SQR(s(X)) -> SQR(X)
 TERMS(N) -> SQR(N)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 DBL(s(X)) -> DBL(X)
->->-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->->Cycle:
->->-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
->->-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->->Cycle:
->->-> Pairs:
 SQR(s(X)) -> SQR(X)
->->-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 DBL(s(X)) -> DBL(X)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Projection:
 pi(DBL) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Projection:
 pi(ADD) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 SQR(s(X)) -> SQR(X)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Projection:
 pi(SQR) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y)) -> cons(Y)
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
