YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 X3 Y)
(RULES
active(f(X)) -> mark(if(X,c,f(ftrue)))
active(if(ffalse,X,Y)) -> mark(Y)
active(if(ftrue,X,Y)) -> mark(X)
f(active(X)) -> f(X)
f(mark(X)) -> f(X)
if(active(X1),X2,X3) -> if(X1,X2,X3)
if(mark(X1),X2,X3) -> if(X1,X2,X3)
if(X1,active(X2),X3) -> if(X1,X2,X3)
if(X1,mark(X2),X3) -> if(X1,X2,X3)
if(X1,X2,active(X3)) -> if(X1,X2,X3)
if(X1,X2,mark(X3)) -> if(X1,X2,X3)
mark(f(X)) -> active(f(mark(X)))
mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
mark(c) -> active(c)
mark(ffalse) -> active(ffalse)
mark(ftrue) -> active(ftrue)
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(f(X)) -> IF(X,c,f(ftrue))
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 F(active(X)) -> F(X)
 F(mark(X)) -> F(X)
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> F(mark(X))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> IF(mark(X1),mark(X2),X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(f(X)) -> IF(X,c,f(ftrue))
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 F(active(X)) -> F(X)
 F(mark(X)) -> F(X)
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> F(mark(X))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> IF(mark(X1),mark(X2),X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->->Cycle:
->->-> Pairs:
 F(active(X)) -> F(X)
 F(mark(X)) -> F(X)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->->Cycle:
->->-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Projection:
 pi(IF) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Projection:
 pi(IF) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Projection:
 pi(IF) = 3

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 F(active(X)) -> F(X)
 F(mark(X)) -> F(X)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Projection:
 pi(F) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
-> Usable rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[f](X) = 2.X
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3
[mark](X) = X
[c] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[ftrue] = 0
[ACTIVE](X) = X + 2
[F](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = X + 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(f(X)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
-> Usable rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[f](X) = 2.X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + X3
[mark](X) = X
[c] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[ftrue] = 0
[ACTIVE](X) = 2.X + 2
[F](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(f(X)) -> MARK(if(X,c,f(ftrue)))
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
-> Usable rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Interpretation type:
 Simple mixed
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[f](X) = 2.X.X + 2.X + 1
[if](X1,X2,X3) = 2.X1.X2.X3 + 2.X1.X2 + X1.X3 + 2.X2.X3 + X1 + X2
[mark](X) = X
[c] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[ftrue] = 0
[ACTIVE](X) = 2.X.X + 2.X + 2
[F](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X.X + 2.X + 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(f(X)) -> ACTIVE(f(mark(X)))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
-> Usable rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[f](X) = 2.X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + X3
[mark](X) = X
[c] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[ftrue] = 0
[ACTIVE](X) = X + 2
[F](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
-> Usable rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Interpretation type:
 Simple mixed
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[f](X) = 2.X.X + 2.X + 1
[if](X1,X2,X3) = 2.X1.X2.X3 + 2.X1.X2 + X1.X3 + X2.X3 + X1 + 2.X2 + 1
[mark](X) = X
[c] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[ftrue] = 0
[ACTIVE](X) = X.X + 2.X + 1
[F](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X.X + 2.X + 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),mark(X2),X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
->->-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)

Problem 1.3: 

Subterm Processor:
-> Pairs:
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(if(X1,X2,X3)) -> MARK(X2)
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Projection:
 pi(MARK) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(f(X)) -> mark(if(X,c,f(ftrue)))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 f(active(X)) -> f(X)
 f(mark(X)) -> f(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(f(X)) -> active(f(mark(X)))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),mark(X2),X3))
 mark(c) -> active(c)
 mark(ffalse) -> active(ffalse)
 mark(ftrue) -> active(ftrue)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
