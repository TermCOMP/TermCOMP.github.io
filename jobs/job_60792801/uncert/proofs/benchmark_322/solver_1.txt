YES
proof of /home/ff862203/input_W0qAowFlvu.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 31 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 6 ms]
(8) CSR
(9) CSDependencyPairsProof [EQUIVALENT, 15 ms]
(10) QCSDP
(11) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QCSDP
        (14) QCSUsableRulesProof [EQUIVALENT, 0 ms]
        (15) QCSDP
        (16) QCSDPMuMonotonicPoloProof [EQUIVALENT, 0 ms]
        (17) QCSDP
        (18) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (19) QCSDP
        (20) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (21) QCSDP
        (22) PIsEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QCSDP
        (25) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (26) QCSDP
        (27) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (28) TRUE
    (29) QCSDP
        (30) QCSDPReductionPairProof [EQUIVALENT, 8 ms]
        (31) QCSDP
        (32) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (33) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(U11(X)) -> U11(active(X))
   active(U21(X)) -> U21(active(X))
   active(U31(X)) -> U31(active(X))
   active(U41(X1, X2)) -> U41(active(X1), X2)
   active(U42(X)) -> U42(active(X))
   active(U51(X1, X2)) -> U51(active(X1), X2)
   active(U52(X)) -> U52(active(X))
   active(U61(X1, X2)) -> U61(active(X1), X2)
   active(U62(X)) -> U62(active(X))
   active(U71(X1, X2, X3)) -> U71(active(X1), X2, X3)
   active(U72(X1, X2)) -> U72(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(length(X)) -> length(active(X))
   active(U81(X)) -> U81(active(X))
   active(U91(X1, X2, X3, X4)) -> U91(active(X1), X2, X3, X4)
   active(U92(X1, X2, X3, X4)) -> U92(active(X1), X2, X3, X4)
   active(U93(X1, X2, X3, X4)) -> U93(active(X1), X2, X3, X4)
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   U11(mark(X)) -> mark(U11(X))
   U21(mark(X)) -> mark(U21(X))
   U31(mark(X)) -> mark(U31(X))
   U41(mark(X1), X2) -> mark(U41(X1, X2))
   U42(mark(X)) -> mark(U42(X))
   U51(mark(X1), X2) -> mark(U51(X1, X2))
   U52(mark(X)) -> mark(U52(X))
   U61(mark(X1), X2) -> mark(U61(X1, X2))
   U62(mark(X)) -> mark(U62(X))
   U71(mark(X1), X2, X3) -> mark(U71(X1, X2, X3))
   U72(mark(X1), X2) -> mark(U72(X1, X2))
   s(mark(X)) -> mark(s(X))
   length(mark(X)) -> mark(length(X))
   U81(mark(X)) -> mark(U81(X))
   U91(mark(X1), X2, X3, X4) -> mark(U91(X1, X2, X3, X4))
   U92(mark(X1), X2, X3, X4) -> mark(U92(X1, X2, X3, X4))
   U93(mark(X1), X2, X3, X4) -> mark(U93(X1, X2, X3, X4))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(zeros) -> ok(zeros)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(U11(X)) -> U11(proper(X))
   proper(tt) -> ok(tt)
   proper(U21(X)) -> U21(proper(X))
   proper(U31(X)) -> U31(proper(X))
   proper(U41(X1, X2)) -> U41(proper(X1), proper(X2))
   proper(U42(X)) -> U42(proper(X))
   proper(isNatIList(X)) -> isNatIList(proper(X))
   proper(U51(X1, X2)) -> U51(proper(X1), proper(X2))
   proper(U52(X)) -> U52(proper(X))
   proper(isNatList(X)) -> isNatList(proper(X))
   proper(U61(X1, X2)) -> U61(proper(X1), proper(X2))
   proper(U62(X)) -> U62(proper(X))
   proper(U71(X1, X2, X3)) -> U71(proper(X1), proper(X2), proper(X3))
   proper(U72(X1, X2)) -> U72(proper(X1), proper(X2))
   proper(isNat(X)) -> isNat(proper(X))
   proper(s(X)) -> s(proper(X))
   proper(length(X)) -> length(proper(X))
   proper(U81(X)) -> U81(proper(X))
   proper(nil) -> ok(nil)
   proper(U91(X1, X2, X3, X4)) -> U91(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(U92(X1, X2, X3, X4)) -> U92(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(U93(X1, X2, X3, X4)) -> U93(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   U11(ok(X)) -> ok(U11(X))
   U21(ok(X)) -> ok(U21(X))
   U31(ok(X)) -> ok(U31(X))
   U41(ok(X1), ok(X2)) -> ok(U41(X1, X2))
   U42(ok(X)) -> ok(U42(X))
   isNatIList(ok(X)) -> ok(isNatIList(X))
   U51(ok(X1), ok(X2)) -> ok(U51(X1, X2))
   U52(ok(X)) -> ok(U52(X))
   isNatList(ok(X)) -> ok(isNatList(X))
   U61(ok(X1), ok(X2)) -> ok(U61(X1, X2))
   U62(ok(X)) -> ok(U62(X))
   U71(ok(X1), ok(X2), ok(X3)) -> ok(U71(X1, X2, X3))
   U72(ok(X1), ok(X2)) -> ok(U72(X1, X2))
   isNat(ok(X)) -> ok(isNat(X))
   s(ok(X)) -> ok(s(X))
   length(ok(X)) -> ok(length(X))
   U81(ok(X)) -> ok(U81(X))
   U91(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U91(X1, X2, X3, X4))
   U92(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U92(X1, X2, X3, X4))
   U93(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U93(X1, X2, X3, X4))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(isNat(x0))
   active(U71(x0, x1, x2))
   proper(cons(x0, x1))
   proper(U71(x0, x1, x2))
   active(U52(x0))
   proper(U52(x0))
   proper(0)
   U51(ok(x0), ok(x1))
   active(cons(x0, x1))
   U52(ok(x0))
   U71(ok(x0), ok(x1), ok(x2))
   isNatList(ok(x0))
   U31(mark(x0))
   U92(ok(x0), ok(x1), ok(x2), ok(x3))
   cons(ok(x0), ok(x1))
   U21(ok(x0))
   active(isNat(0))
   active(U72(x0, x1))
   U21(mark(x0))
   top(mark(x0))
   U61(mark(x0), x1)
   U91(ok(x0), ok(x1), ok(x2), ok(x3))
   proper(U21(x0))
   proper(U72(x0, x1))
   active(isNat(s(x0)))
   proper(U51(x0, x1))
   take(mark(x0), x1)
   active(isNatList(nil))
   U42(mark(x0))
   U62(mark(x0))
   s(mark(x0))
   U41(mark(x0), x1)
   active(U42(x0))
   proper(isNatList(x0))
   U91(mark(x0), x1, x2, x3)
   active(U51(x0, x1))
   active(U21(x0))
   proper(U42(x0))
   proper(U92(x0, x1, x2, x3))
   active(isNatList(take(x0, x1)))
   active(U41(x0, x1))
   active(U62(x0))
   U71(mark(x0), x1, x2)
   take(ok(x0), ok(x1))
   active(U61(x0, x1))
   active(take(x0, x1))
   U81(ok(x0))
   U41(ok(x0), ok(x1))
   active(U93(x0, x1, x2, x3))
   s(ok(x0))
   proper(U61(x0, x1))
   length(mark(x0))
   proper(take(x0, x1))
   take(x0, mark(x1))
   active(isNatIList(x0))
   active(s(x0))
   U92(mark(x0), x1, x2, x3)
   U11(ok(x0))
   U62(ok(x0))
   proper(U62(x0))
   proper(isNatIList(x0))
   proper(s(x0))
   U61(ok(x0), ok(x1))
   active(U91(x0, x1, x2, x3))
   isNatIList(ok(x0))
   active(zeros)
   U51(mark(x0), x1)
   active(U31(x0))
   active(isNat(length(x0)))
   U72(mark(x0), x1)
   U42(ok(x0))
   proper(U91(x0, x1, x2, x3))
   U11(mark(x0))
   cons(mark(x0), x1)
   proper(nil)
   length(ok(x0))
   proper(U31(x0))
   U31(ok(x0))
   U93(mark(x0), x1, x2, x3)
   U52(mark(x0))
   active(U81(x0))
   proper(tt)
   U81(mark(x0))
   active(U11(x0))
   active(length(x0))
   proper(U93(x0, x1, x2, x3))
   U93(ok(x0), ok(x1), ok(x2), ok(x3))
   proper(U81(x0))
   proper(zeros)
   isNat(ok(x0))
   proper(length(x0))
   top(ok(x0))
   proper(U41(x0, x1))
   active(isNatList(cons(x0, x1)))
   active(U92(x0, x1, x2, x3))
   U72(ok(x0), ok(x1))
   proper(U11(x0))


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(U11(X)) -> U11(active(X))
   active(U21(X)) -> U21(active(X))
   active(U31(X)) -> U31(active(X))
   active(U41(X1, X2)) -> U41(active(X1), X2)
   active(U42(X)) -> U42(active(X))
   active(U51(X1, X2)) -> U51(active(X1), X2)
   active(U52(X)) -> U52(active(X))
   active(U61(X1, X2)) -> U61(active(X1), X2)
   active(U62(X)) -> U62(active(X))
   active(U71(X1, X2, X3)) -> U71(active(X1), X2, X3)
   active(U72(X1, X2)) -> U72(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(length(X)) -> length(active(X))
   active(U81(X)) -> U81(active(X))
   active(U91(X1, X2, X3, X4)) -> U91(active(X1), X2, X3, X4)
   active(U92(X1, X2, X3, X4)) -> U92(active(X1), X2, X3, X4)
   active(U93(X1, X2, X3, X4)) -> U93(active(X1), X2, X3, X4)
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   U11(mark(X)) -> mark(U11(X))
   U21(mark(X)) -> mark(U21(X))
   U31(mark(X)) -> mark(U31(X))
   U41(mark(X1), X2) -> mark(U41(X1, X2))
   U42(mark(X)) -> mark(U42(X))
   U51(mark(X1), X2) -> mark(U51(X1, X2))
   U52(mark(X)) -> mark(U52(X))
   U61(mark(X1), X2) -> mark(U61(X1, X2))
   U62(mark(X)) -> mark(U62(X))
   U71(mark(X1), X2, X3) -> mark(U71(X1, X2, X3))
   U72(mark(X1), X2) -> mark(U72(X1, X2))
   s(mark(X)) -> mark(s(X))
   length(mark(X)) -> mark(length(X))
   U81(mark(X)) -> mark(U81(X))
   U91(mark(X1), X2, X3, X4) -> mark(U91(X1, X2, X3, X4))
   U92(mark(X1), X2, X3, X4) -> mark(U92(X1, X2, X3, X4))
   U93(mark(X1), X2, X3, X4) -> mark(U93(X1, X2, X3, X4))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(zeros) -> ok(zeros)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(U11(X)) -> U11(proper(X))
   proper(tt) -> ok(tt)
   proper(U21(X)) -> U21(proper(X))
   proper(U31(X)) -> U31(proper(X))
   proper(U41(X1, X2)) -> U41(proper(X1), proper(X2))
   proper(U42(X)) -> U42(proper(X))
   proper(isNatIList(X)) -> isNatIList(proper(X))
   proper(U51(X1, X2)) -> U51(proper(X1), proper(X2))
   proper(U52(X)) -> U52(proper(X))
   proper(isNatList(X)) -> isNatList(proper(X))
   proper(U61(X1, X2)) -> U61(proper(X1), proper(X2))
   proper(U62(X)) -> U62(proper(X))
   proper(U71(X1, X2, X3)) -> U71(proper(X1), proper(X2), proper(X3))
   proper(U72(X1, X2)) -> U72(proper(X1), proper(X2))
   proper(isNat(X)) -> isNat(proper(X))
   proper(s(X)) -> s(proper(X))
   proper(length(X)) -> length(proper(X))
   proper(U81(X)) -> U81(proper(X))
   proper(nil) -> ok(nil)
   proper(U91(X1, X2, X3, X4)) -> U91(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(U92(X1, X2, X3, X4)) -> U92(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(U93(X1, X2, X3, X4)) -> U93(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   U11(ok(X)) -> ok(U11(X))
   U21(ok(X)) -> ok(U21(X))
   U31(ok(X)) -> ok(U31(X))
   U41(ok(X1), ok(X2)) -> ok(U41(X1, X2))
   U42(ok(X)) -> ok(U42(X))
   isNatIList(ok(X)) -> ok(isNatIList(X))
   U51(ok(X1), ok(X2)) -> ok(U51(X1, X2))
   U52(ok(X)) -> ok(U52(X))
   isNatList(ok(X)) -> ok(isNatList(X))
   U61(ok(X1), ok(X2)) -> ok(U61(X1, X2))
   U62(ok(X)) -> ok(U62(X))
   U71(ok(X1), ok(X2), ok(X3)) -> ok(U71(X1, X2, X3))
   U72(ok(X1), ok(X2)) -> ok(U72(X1, X2))
   isNat(ok(X)) -> ok(isNat(X))
   s(ok(X)) -> ok(s(X))
   length(ok(X)) -> ok(length(X))
   U81(ok(X)) -> ok(U81(X))
   U91(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U91(X1, X2, X3, X4))
   U92(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U92(X1, X2, X3, X4))
   U93(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U93(X1, X2, X3, X4))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(isNat(x0))
   active(U71(x0, x1, x2))
   proper(cons(x0, x1))
   proper(U71(x0, x1, x2))
   active(U52(x0))
   proper(U52(x0))
   proper(0)
   U51(ok(x0), ok(x1))
   active(cons(x0, x1))
   U52(ok(x0))
   U71(ok(x0), ok(x1), ok(x2))
   isNatList(ok(x0))
   U31(mark(x0))
   U92(ok(x0), ok(x1), ok(x2), ok(x3))
   cons(ok(x0), ok(x1))
   U21(ok(x0))
   active(isNat(0))
   active(U72(x0, x1))
   U21(mark(x0))
   top(mark(x0))
   U61(mark(x0), x1)
   U91(ok(x0), ok(x1), ok(x2), ok(x3))
   proper(U21(x0))
   proper(U72(x0, x1))
   active(isNat(s(x0)))
   proper(U51(x0, x1))
   take(mark(x0), x1)
   active(isNatList(nil))
   U42(mark(x0))
   U62(mark(x0))
   s(mark(x0))
   U41(mark(x0), x1)
   active(U42(x0))
   proper(isNatList(x0))
   U91(mark(x0), x1, x2, x3)
   active(U51(x0, x1))
   active(U21(x0))
   proper(U42(x0))
   proper(U92(x0, x1, x2, x3))
   active(isNatList(take(x0, x1)))
   active(U41(x0, x1))
   active(U62(x0))
   U71(mark(x0), x1, x2)
   take(ok(x0), ok(x1))
   active(U61(x0, x1))
   active(take(x0, x1))
   U81(ok(x0))
   U41(ok(x0), ok(x1))
   active(U93(x0, x1, x2, x3))
   s(ok(x0))
   proper(U61(x0, x1))
   length(mark(x0))
   proper(take(x0, x1))
   take(x0, mark(x1))
   active(isNatIList(x0))
   active(s(x0))
   U92(mark(x0), x1, x2, x3)
   U11(ok(x0))
   U62(ok(x0))
   proper(U62(x0))
   proper(isNatIList(x0))
   proper(s(x0))
   U61(ok(x0), ok(x1))
   active(U91(x0, x1, x2, x3))
   isNatIList(ok(x0))
   active(zeros)
   U51(mark(x0), x1)
   active(U31(x0))
   active(isNat(length(x0)))
   U72(mark(x0), x1)
   U42(ok(x0))
   proper(U91(x0, x1, x2, x3))
   U11(mark(x0))
   cons(mark(x0), x1)
   proper(nil)
   length(ok(x0))
   proper(U31(x0))
   U31(ok(x0))
   U93(mark(x0), x1, x2, x3)
   U52(mark(x0))
   active(U81(x0))
   proper(tt)
   U81(mark(x0))
   active(U11(x0))
   active(length(x0))
   proper(U93(x0, x1, x2, x3))
   U93(ok(x0), ok(x1), ok(x2), ok(x3))
   proper(U81(x0))
   proper(zeros)
   isNat(ok(x0))
   proper(length(x0))
   top(ok(x0))
   proper(U41(x0, x1))
   active(isNatList(cons(x0, x1)))
   active(U92(x0, x1, x2, x3))
   U72(ok(x0), ok(x1))
   proper(U11(x0))

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U81(tt) -> nil
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(nil) -> 0
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U81(tt) -> nil
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(nil) -> 0
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1, x_2, x_3)) = x_1 + x_2
   POL(U72(x_1, x_2)) = x_1 + x_2
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U92(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U93(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 1
   POL(isNatIList(x_1)) = 1
   POL(isNatList(x_1)) = 1
   POL(length(x_1)) = 1 + x_1
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 1
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   length(nil) -> 0




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U81(tt) -> nil
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U81(tt) -> nil
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1, x_2, x_3)) = x_1 + x_2
   POL(U72(x_1, x_2)) = x_1 + x_2
   POL(U81(x_1)) = 1 + x_1
   POL(U91(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U92(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U93(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U81(tt) -> nil




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(0, IL) -> U81(isNatIList(IL))
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
U81: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1, x_2, x_3)) = x_1 + x_2
   POL(U72(x_1, x_2)) = x_1 + x_2
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U92(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U93(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(0, IL) -> U81(isNatIList(IL))




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U11: {1}
tt: empty set
U21: {1}
U31: {1}
U41: {1}
U42: {1}
isNatIList: empty set
U51: {1}
U52: {1}
isNatList: empty set
U61: {1}
U62: {1}
U71: {1}
U72: {1}
isNat: empty set
s: {1}
length: {1}
nil: empty set
U91: {1}
U92: {1}
U93: {1}
take: {1, 2}

----------------------------------------

(9) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(10)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2, U42'_1, U52'_1, U62'_1, LENGTH_1, U11'_1, U21'_1, U31'_1, TAKE_2} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U41'_2, U51'_2, U61'_2, U72'_2, U71'_3, U92'_4, U91'_4, U93'_4} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1, ISNATILIST_1, ISNATLIST_1, ISNAT_1, U_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   U41'(tt, V2) -> U42'(isNatIList(V2))
   U41'(tt, V2) -> ISNATILIST(V2)
   U51'(tt, V2) -> U52'(isNatList(V2))
   U51'(tt, V2) -> ISNATLIST(V2)
   U61'(tt, V2) -> U62'(isNatIList(V2))
   U61'(tt, V2) -> ISNATILIST(V2)
   U71'(tt, L, N) -> U72'(isNat(N), L)
   U71'(tt, L, N) -> ISNAT(N)
   U72'(tt, L) -> LENGTH(L)
   U91'(tt, IL, M, N) -> U92'(isNat(M), IL, M, N)
   U91'(tt, IL, M, N) -> ISNAT(M)
   U92'(tt, IL, M, N) -> U93'(isNat(N), IL, M, N)
   U92'(tt, IL, M, N) -> ISNAT(N)
   ISNAT(length(V1)) -> U11'(isNatList(V1))
   ISNAT(length(V1)) -> ISNATLIST(V1)
   ISNAT(s(V1)) -> U21'(isNat(V1))
   ISNAT(s(V1)) -> ISNAT(V1)
   ISNATILIST(V) -> U31'(isNatList(V))
   ISNATILIST(V) -> ISNATLIST(V)
   ISNATILIST(cons(V1, V2)) -> U41'(isNat(V1), V2)
   ISNATILIST(cons(V1, V2)) -> ISNAT(V1)
   ISNATLIST(cons(V1, V2)) -> U51'(isNat(V1), V2)
   ISNATLIST(cons(V1, V2)) -> ISNAT(V1)
   ISNATLIST(take(V1, V2)) -> U61'(isNat(V1), V2)
   ISNATLIST(take(V1, V2)) -> ISNAT(V1)
   LENGTH(cons(N, L)) -> U71'(isNatList(L), L, N)
   LENGTH(cons(N, L)) -> ISNATLIST(L)
   TAKE(s(M), cons(N, IL)) -> U91'(isNatIList(IL), IL, M, N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(IL)

The collapsing dependency pairs are DP_c:
   U72'(tt, L) -> L
   U93'(tt, IL, M, N) -> N


The hidden terms of R are:

   zeros
   take(x0, x1)

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@4a44aa2b

Hence, the new unhiding pairs DP_u are :
   U72'(tt, L) -> U(L)
   U93'(tt, IL, M, N) -> U(N)
   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(zeros) -> ZEROS
   U(take(x0, x1)) -> TAKE(x0, x1)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(11) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 3 SCCs with 13 less nodes.

----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U51'_2, U61'_2, U41'_2} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1, ISNATLIST_1, ISNATILIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNATILIST(V) -> ISNATLIST(V)
   ISNATLIST(cons(V1, V2)) -> U51'(isNat(V1), V2)
   U51'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(cons(V1, V2)) -> ISNAT(V1)
   ISNAT(length(V1)) -> ISNATLIST(V1)
   ISNATLIST(take(V1, V2)) -> U61'(isNat(V1), V2)
   U61'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> U41'(isNat(V1), V2)
   U41'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> ISNAT(V1)
   ISNAT(s(V1)) -> ISNAT(V1)
   ISNATLIST(take(V1, V2)) -> ISNAT(V1)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(14) QCSUsableRulesProof (EQUIVALENT)
The following rules are not useable [DA_EMMES] and can be deleted:

   zeros -> cons(0, zeros)
   U71(tt, x0, x1) -> U72(isNat(x1), x0)
   U72(tt, x0) -> s(length(x0))
   U91(tt, x0, x1, x2) -> U92(isNat(x1), x0, x1, x2)
   U92(tt, x0, x1, x2) -> U93(isNat(x2), x0, x1, x2)
   U93(tt, x0, x1, x2) -> cons(x2, take(x1, x0))
   length(cons(x0, x1)) -> U71(isNatList(x1), x1, x0)
   take(s(x0), cons(x1, x2)) -> U91(isNatIList(x2), x2, x0, x1)

----------------------------------------

(15)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U11_1, s_1, U21_1, U52_1, take_2, U62_1, U31_1, U42_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U41_2, U51'_2, U61'_2, U41'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatList_1, isNatIList_1, ISNATLIST_1, ISNATILIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNATILIST(V) -> ISNATLIST(V)
   ISNATLIST(cons(V1, V2)) -> U51'(isNat(V1), V2)
   U51'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(cons(V1, V2)) -> ISNAT(V1)
   ISNAT(length(V1)) -> ISNATLIST(V1)
   ISNATLIST(take(V1, V2)) -> U61'(isNat(V1), V2)
   U61'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> U41'(isNat(V1), V2)
   U41'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> ISNAT(V1)
   ISNAT(s(V1)) -> ISNAT(V1)
   ISNATLIST(take(V1, V2)) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNat(V1))
   U21(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   U61(tt, V2) -> U62(isNatIList(V2))
   isNatIList(V) -> U31(isNatList(V))
   U31(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U62(tt) -> tt
   U52(tt) -> tt
   U11(tt) -> tt

Q is empty.

----------------------------------------

(16) QCSDPMuMonotonicPoloProof (EQUIVALENT)
By using the following mu-monotonic polynomial ordering [POLO], at least one Dependency Pair or term rewrite system rule of this Q-CSDP problem can be strictly oriented and thus deleted.

Strictly oriented dependency pairs:

   ISNATLIST(cons(V1, V2)) -> U51'(isNat(V1), V2)
   U51'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(cons(V1, V2)) -> ISNAT(V1)
   ISNAT(length(V1)) -> ISNATLIST(V1)
   ISNATLIST(take(V1, V2)) -> U61'(isNat(V1), V2)
   U61'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> U41'(isNat(V1), V2)
   U41'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(cons(V1, V2)) -> ISNAT(V1)
   ISNATLIST(take(V1, V2)) -> ISNAT(V1)


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ISNAT(x_1)) = 2 + x_1
   POL(ISNATILIST(x_1)) = 1 + 2*x_1
   POL(ISNATLIST(x_1)) = 1 + 2*x_1
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1)) = 2*x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1, x_2)) = 2*x_1
   POL(U41'(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U51'(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = 2*x_1
   POL(U61'(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(U62(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 2*x_1
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(tt) = 0
   POL(zeros) = 2


----------------------------------------

(17)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U11_1, s_1, U21_1, U52_1, take_2, U62_1, U31_1, U42_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U41_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatList_1, isNatIList_1, ISNATLIST_1, ISNATILIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNATILIST(V) -> ISNATLIST(V)
   ISNAT(s(V1)) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNat(V1))
   U21(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   U61(tt, V2) -> U62(isNatIList(V2))
   isNatIList(V) -> U31(isNatList(V))
   U31(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U62(tt) -> tt
   U52(tt) -> tt
   U11(tt) -> tt

Q is empty.

----------------------------------------

(18) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 1 SCC with 1 less node.

----------------------------------------

(19)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U11_1, s_1, U21_1, U52_1, take_2, U62_1, U31_1, U42_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U41_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatList_1, isNatIList_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNAT(s(V1)) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNat(V1))
   U21(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   U61(tt, V2) -> U62(isNatIList(V2))
   isNatIList(V) -> U31(isNatList(V))
   U31(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U62(tt) -> tt
   U52(tt) -> tt
   U11(tt) -> tt

Q is empty.

----------------------------------------

(20) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   ISNAT(s(V1)) -> ISNAT(V1)
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Combined order from the following AFS and order.
ISNAT(x1)  =  x1


Subterm Order

----------------------------------------

(21)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U11_1, s_1, U21_1, U52_1, take_2, U62_1, U31_1, U42_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U41_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatList_1, isNatIList_1} are not replacing on any position.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNat(V1))
   U21(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   U61(tt, V2) -> U62(isNatIList(V2))
   isNatIList(V) -> U31(isNatList(V))
   U31(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U62(tt) -> tt
   U52(tt) -> tt
   U11(tt) -> tt

Q is empty.

----------------------------------------

(22) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2, TAKE_2} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U92'_4, U91'_4, U93'_4} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1, U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U91'(tt, IL, M, N) -> U92'(isNat(M), IL, M, N)
   U92'(tt, IL, M, N) -> U93'(isNat(N), IL, M, N)
   U93'(tt, IL, M, N) -> U(N)
   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(take(x0, x1)) -> TAKE(x0, x1)
   TAKE(s(M), cons(N, IL)) -> U91'(isNatIList(IL), IL, M, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(25) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(take(x0, x1)) -> TAKE(x0, x1)
   TAKE(s(M), cons(N, IL)) -> U91'(isNatIList(IL), IL, M, N)
The remaining pairs can at least be oriented weakly.

   U91'(tt, IL, M, N) -> U92'(isNat(M), IL, M, N)
   U92'(tt, IL, M, N) -> U93'(isNat(N), IL, M, N)
   U93'(tt, IL, M, N) -> U(N)
Used ordering:  Combined order from the following AFS and order.
U92'(x1, x2, x3, x4)  =  x4

U91'(x1, x2, x3, x4)  =  x4

U93'(x1, x2, x3, x4)  =  x4

U(x1)  =  x1

TAKE(x1, x2)  =  x2


Subterm Order

----------------------------------------

(26)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U92'_4, U91'_4, U93'_4} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1, U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U91'(tt, IL, M, N) -> U92'(isNat(M), IL, M, N)
   U92'(tt, IL, M, N) -> U93'(isNat(N), IL, M, N)
   U93'(tt, IL, M, N) -> U(N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(27) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 3 less nodes.

----------------------------------------

(28)
TRUE

----------------------------------------

(29)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2, LENGTH_1} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U72'_2, U71'_3} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1} are not replacing on any position.

The TRS P consists of the following rules:

   U71'(tt, L, N) -> U72'(isNat(N), L)
   U72'(tt, L) -> LENGTH(L)
   LENGTH(cons(N, L)) -> U71'(isNatList(L), L, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(30) QCSDPReductionPairProof (EQUIVALENT)
Using the order

Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(LENGTH(x_1)) = 2*x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 2
   POL(U41(x_1, x_2)) = 2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1, x_2, x_3)) = 2*x_2
   POL(U71'(x_1, x_2, x_3)) = x_1 + 2*x_2
   POL(U72(x_1, x_2)) = 2*x_2
   POL(U72'(x_1, x_2)) = 1 + 2*x_2
   POL(U91(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U92(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U93(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(cons(x_1, x_2)) = 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = 2
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = x_1
   POL(nil) = 2
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1
   POL(tt) = 2
   POL(zeros) = 0


the following usable rules


   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   U31(tt) -> tt
   zeros -> cons(0, zeros)
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U11(tt) -> tt
   U21(tt) -> tt


could all be oriented weakly.

Furthermore, the pairs


   U71'(tt, L, N) -> U72'(isNat(N), L)
   U72'(tt, L) -> LENGTH(L)


could be oriented strictly and thus removed by the CS-Reduction Pair Processor [LPAR08,DA_EMMES].


----------------------------------------

(31)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U11_1, U21_1, U31_1, U42_1, U52_1, U62_1, s_1, length_1, take_2, LENGTH_1} are replacing on all positions.
For all symbols f in {cons_2, U41_2, U51_2, U61_2, U71_3, U72_2, U91_4, U92_4, U93_4, U71'_3} we have mu(f) = {1}.
The symbols in {isNatIList_1, isNatList_1, isNat_1} are not replacing on any position.

The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> U71'(isNatList(L), L, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U11(tt) -> tt
   U21(tt) -> tt
   U31(tt) -> tt
   U41(tt, V2) -> U42(isNatIList(V2))
   U42(tt) -> tt
   U51(tt, V2) -> U52(isNatList(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIList(V2))
   U62(tt) -> tt
   U71(tt, L, N) -> U72(isNat(N), L)
   U72(tt, L) -> s(length(L))
   U91(tt, IL, M, N) -> U92(isNat(M), IL, M, N)
   U92(tt, IL, M, N) -> U93(isNat(N), IL, M, N)
   U93(tt, IL, M, N) -> cons(N, take(M, IL))
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatList(V1))
   isNat(s(V1)) -> U21(isNat(V1))
   isNatIList(V) -> U31(isNatList(V))
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNat(V1), V2)
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U51(isNat(V1), V2)
   isNatList(take(V1, V2)) -> U61(isNat(V1), V2)
   length(cons(N, L)) -> U71(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U91(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(32) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 1 less node.

----------------------------------------

(33)
TRUE
