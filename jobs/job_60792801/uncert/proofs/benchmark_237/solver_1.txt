YES
proof of /home/ff862203/input_TXBuVAdX9J.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 32 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 6 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 3 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 0 ms]
(14) QDP
(15) MRRProof [EQUIVALENT, 0 ms]
(16) QDP
(17) MRRProof [EQUIVALENT, 0 ms]
(18) QDP
(19) DependencyGraphProof [EQUIVALENT, 0 ms]
(20) QDP
(21) QDPQMonotonicMRRProof [EQUIVALENT, 12 ms]
(22) QDP
(23) DependencyGraphProof [EQUIVALENT, 0 ms]
(24) QDP
(25) UsableRulesProof [EQUIVALENT, 0 ms]
(26) QDP
(27) QReductionProof [EQUIVALENT, 0 ms]
(28) QDP
(29) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(30) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__nats -> a__adx(a__zeros)
   a__zeros -> cons(0, zeros)
   a__head(cons(X, L)) -> mark(X)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__nats -> a__adx(a__zeros)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__head(cons(X, L)) -> mark(X)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 1 + 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = 1 + 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__head(cons(X, L)) -> mark(X)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = 1 + x_1
   POL(a__head(x_1)) = 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__adx(nil) -> nil




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 1 + 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__tail(cons(X, L)) -> mark(L)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, L)) -> MARK(X)
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   MARK(adx(X)) -> MARK(X)
   MARK(nats) -> A__NATS
   MARK(zeros) -> A__ZEROS
   MARK(head(X)) -> A__HEAD(mark(X))
   MARK(head(X)) -> MARK(X)
   MARK(tail(X)) -> A__TAIL(mark(X))
   MARK(tail(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(head(X)) -> MARK(X)
   MARK(tail(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(tail(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = x_1
   POL(A__INCR(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 1 + 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(zeros) = 0


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(head(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(head(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = 2*x_1
   POL(A__INCR(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 1 + x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 1 + x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = 1 + 2*x_1
   POL(A__INCR(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(a__adx(x_1)) = 1 + x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(a__adx(x_1)) = 2 + 2*x_1
   POL(a__head(x_1)) = 0
   POL(a__incr(x_1)) = 2 + 2*x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 0
   POL(a__zeros) = 0
   POL(adx(x_1)) = 2 + 2*x_1
   POL(cons(x_1, x_2)) = x_1
   POL(head(x_1)) = 0
   POL(incr(x_1)) = 2 + 2*x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 0
   POL(zeros) = 0


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, L)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(incr(x0))
   mark(adx(x0))
   a__zeros
   a__nats
   mark(zeros)
   mark(0)
   mark(s(x0))
   a__incr(x0)
   mark(tail(x0))
   mark(cons(x0, x1))
   a__head(x0)
   mark(nil)
   mark(nats)
   a__adx(x0)
   mark(head(x0))
   a__tail(x0)


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(cons(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(30)
YES
