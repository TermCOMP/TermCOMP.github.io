YES

Problem 1: 

(VAR vu95NonEmpty L X X1 X2 XS Y YS)
(RULES
au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
au95u95app(nil,YS) -> mark(YS)
au95u95app(X1,X2) -> app(X1,X2)
au95u95from(X) -> cons(mark(X),from(s(X)))
au95u95from(X) -> from(X)
au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
au95u95prefix(X) -> prefix(X)
au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
au95u95zWadr(nil,YS) -> nil
au95u95zWadr(X1,X2) -> zWadr(X1,X2)
au95u95zWadr(XS,nil) -> nil
mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
mark(cons(X1,X2)) -> cons(mark(X1),X2)
mark(from(X)) -> au95u95from(mark(X))
mark(nil) -> nil
mark(prefix(X)) -> au95u95prefix(mark(X))
mark(s(X)) -> s(mark(X))
mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 AU95U95APP(cons(X,XS),YS) -> MARK(X)
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> AU95U95PREFIX(mark(X))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95APP(cons(X,XS),YS) -> MARK(X)
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> AU95U95PREFIX(mark(X))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95APP(cons(X,XS),YS) -> MARK(X)
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95APP(cons(X,XS),YS) -> MARK(X)
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
-> Usable rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95app](X1,X2) = X1 + 2.X2 + 2
[au95u95from](X) = X + 2
[au95u95prefix](X) = 2.X + 2
[au95u95zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[app](X1,X2) = X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[fSNonEmpty] = 0
[from](X) = X + 2
[nil] = 0
[prefix](X) = 2.X + 2
[s](X) = 2.X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95APP](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95FROM](X) = 2.X + 2
[AU95U95PREFIX](X) = 0
[AU95U95ZWADR](X1,X2) = 2.X1 + 2.X2 + 1
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95APP(nil,YS) -> MARK(YS)
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
-> Usable rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95app](X1,X2) = 2.X1 + X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95prefix](X) = 2.X + 2
[au95u95zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[app](X1,X2) = 2.X1 + X2 + 2
[cons](X1,X2) = X1
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[nil] = 2
[prefix](X) = 2.X + 2
[s](X) = X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95APP](X1,X2) = X1 + 2.X2 + 1
[AU95U95FROM](X) = 2.X + 2
[AU95U95PREFIX](X) = 0
[AU95U95ZWADR](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> AU95U95APP(mark(Y),cons(mark(X),nil))
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> AU95U95APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
-> Usable rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95app](X1,X2) = 2.X1 + X2 + 1
[au95u95from](X) = 2.X + 2
[au95u95prefix](X) = X + 2
[au95u95zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[app](X1,X2) = 2.X1 + X2 + 1
[cons](X1,X2) = 2.X1 + 2
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[nil] = 0
[prefix](X) = X + 2
[s](X) = 2.X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95APP](X1,X2) = 0
[AU95U95FROM](X) = 2.X + 2
[AU95U95PREFIX](X) = 0
[AU95U95ZWADR](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
-> Usable rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95app](X1,X2) = 2.X1 + X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95prefix](X) = 2.X + 2
[au95u95zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[app](X1,X2) = 2.X1 + X2 + 2
[cons](X1,X2) = 2.X1 + 2
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[nil] = 0
[prefix](X) = 2.X + 2
[s](X) = 2.X + 1
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95APP](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95PREFIX](X) = 0
[AU95U95ZWADR](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95ZWADR(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
-> Usable rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95app](X1,X2) = X1 + 2.X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95prefix](X) = 2.X + 2
[au95u95zWadr](X1,X2) = 2.X1 + 2.X2 + 1
[mark](X) = X
[app](X1,X2) = X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[nil] = 0
[prefix](X) = 2.X + 2
[s](X) = 2.X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95APP](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95PREFIX](X) = 0
[AU95U95ZWADR](X1,X2) = 2.X2 + 2
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> AU95U95ZWADR(mark(X1),mark(X2))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))

Problem 1: 

Subterm Processor:
-> Pairs:
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Projection:
 pi(MARK) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 au95u95app(cons(X,XS),YS) -> cons(mark(X),app(XS,YS))
 au95u95app(nil,YS) -> mark(YS)
 au95u95app(X1,X2) -> app(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95prefix(L) -> cons(nil,zWadr(L,prefix(L)))
 au95u95prefix(X) -> prefix(X)
 au95u95zWadr(cons(X,XS),cons(Y,YS)) -> cons(au95u95app(mark(Y),cons(mark(X),nil)),zWadr(XS,YS))
 au95u95zWadr(nil,YS) -> nil
 au95u95zWadr(X1,X2) -> zWadr(X1,X2)
 au95u95zWadr(XS,nil) -> nil
 mark(app(X1,X2)) -> au95u95app(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(nil) -> nil
 mark(prefix(X)) -> au95u95prefix(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(zWadr(X1,X2)) -> au95u95zWadr(mark(X1),mark(X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
