YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
even(num0) -> ftrue
even(s(num0)) -> ffalse
even(s(s(x))) -> even(x)
gt(s(x),s(y)) -> gt(x,y)
gt(s(x),zero) -> ftrue
gt(zero,y) -> ffalse
half(num0) -> num0
half(s(s(x))) -> s(half(x))
id(x) -> x
if(ffalse,x,y) -> y
if(ftrue,x,y) -> x
ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
not(x) -> if(x,ffalse,ftrue)
plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
plus(zero,y) -> y
times(num0,y) -> num0
times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 EVEN(s(s(x))) -> EVEN(x)
 GT(s(x),s(y)) -> GT(x,y)
 HALF(s(s(x))) -> HALF(x)
 IFU95TIMES(ffalse,s(x),y) -> PLUS(y,times(x,y))
 IFU95TIMES(ffalse,s(x),y) -> TIMES(x,y)
 IFU95TIMES(ftrue,s(x),y) -> HALF(s(x))
 IFU95TIMES(ftrue,s(x),y) -> PLUS(times(half(s(x)),y),times(half(s(x)),y))
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 NOT(x) -> IF(x,ffalse,ftrue)
 PLUS(s(x),s(y)) -> GT(x,y)
 PLUS(s(x),s(y)) -> ID(x)
 PLUS(s(x),s(y)) -> ID(y)
 PLUS(s(x),s(y)) -> IF(gt(x,y),x,y)
 PLUS(s(x),s(y)) -> IF(not(gt(x,y)),id(x),id(y))
 PLUS(s(x),s(y)) -> NOT(gt(x,y))
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> GT(x,x)
 PLUS(s(x),x) -> ID(x)
 PLUS(s(x),x) -> IF(gt(x,x),id(x),id(x))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
 TIMES(s(x),y) -> EVEN(s(x))
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)

Problem 1: 

SCC Processor:
-> Pairs:
 EVEN(s(s(x))) -> EVEN(x)
 GT(s(x),s(y)) -> GT(x,y)
 HALF(s(s(x))) -> HALF(x)
 IFU95TIMES(ffalse,s(x),y) -> PLUS(y,times(x,y))
 IFU95TIMES(ffalse,s(x),y) -> TIMES(x,y)
 IFU95TIMES(ftrue,s(x),y) -> HALF(s(x))
 IFU95TIMES(ftrue,s(x),y) -> PLUS(times(half(s(x)),y),times(half(s(x)),y))
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 NOT(x) -> IF(x,ffalse,ftrue)
 PLUS(s(x),s(y)) -> GT(x,y)
 PLUS(s(x),s(y)) -> ID(x)
 PLUS(s(x),s(y)) -> ID(y)
 PLUS(s(x),s(y)) -> IF(gt(x,y),x,y)
 PLUS(s(x),s(y)) -> IF(not(gt(x,y)),id(x),id(y))
 PLUS(s(x),s(y)) -> NOT(gt(x,y))
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> GT(x,x)
 PLUS(s(x),x) -> ID(x)
 PLUS(s(x),x) -> IF(gt(x,x),id(x),id(x))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
 TIMES(s(x),y) -> EVEN(s(x))
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 HALF(s(s(x))) -> HALF(x)
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->->Cycle:
->->-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->->Cycle:
->->-> Pairs:
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->->Cycle:
->->-> Pairs:
 EVEN(s(s(x))) -> EVEN(x)
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->->Cycle:
->->-> Pairs:
 IFU95TIMES(ffalse,s(x),y) -> TIMES(x,y)
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)


The problem is decomposed in 5 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Projection:
 pi(HALF) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Projection:
 pi(GT) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
-> Usable rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[even](X) = 0
[gt](X1,X2) = 3.X1 + 1
[half](X) = 0
[id](X) = X
[if](X1,X2,X3) = X2 + X3
[ifu95times](X1,X2,X3) = 0
[not](X) = 3.X + 4
[plus](X1,X2) = 0
[times](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 3
[s](X) = 4.X + 3/2
[ftrue] = 0
[zero] = 3/4
[EVEN](X) = 0
[GT](X1,X2) = 0
[HALF](X) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[IFU95TIMES](X1,X2,X3) = 0
[NOT](X) = 0
[PLUS](X1,X2) = 4.X1 + 2.X2
[TIMES](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
-> Usable rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[even](X) = 0
[gt](X1,X2) = 2.X1 + 2
[half](X) = 0
[id](X) = X
[if](X1,X2,X3) = X2 + X3
[ifu95times](X1,X2,X3) = 0
[not](X) = 0
[plus](X1,X2) = 0
[times](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[s](X) = 2.X + 1
[ftrue] = 1
[zero] = 2
[EVEN](X) = 0
[GT](X1,X2) = 0
[HALF](X) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[IFU95TIMES](X1,X2,X3) = 0
[NOT](X) = 0
[PLUS](X1,X2) = 2.X1
[TIMES](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 EVEN(s(s(x))) -> EVEN(x)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Projection:
 pi(EVEN) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Reduction Pairs Processor:
-> Pairs:
 IFU95TIMES(ffalse,s(x),y) -> TIMES(x,y)
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
-> Usable rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[even](X) = 1
[gt](X1,X2) = 0
[half](X) = X
[id](X) = 0
[if](X1,X2,X3) = 0
[ifu95times](X1,X2,X3) = 0
[not](X) = 0
[plus](X1,X2) = 0
[times](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[s](X) = 2.X + 2
[ftrue] = 1
[zero] = 0
[EVEN](X) = 0
[GT](X1,X2) = 0
[HALF](X) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[IFU95TIMES](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3
[NOT](X) = 0
[PLUS](X1,X2) = 0
[TIMES](X1,X2) = 2.X1 + 2.X2 + 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
->->-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)

Problem 1.5: 

Reduction Pairs Processor:
-> Pairs:
 IFU95TIMES(ftrue,s(x),y) -> TIMES(half(s(x)),y)
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
-> Usable rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[even](X) = 1/2.X + 1/2
[gt](X1,X2) = 0
[half](X) = 1/2.X + 1/2
[id](X) = 0
[if](X1,X2,X3) = 0
[ifu95times](X1,X2,X3) = 0
[not](X) = 0
[plus](X1,X2) = 0
[times](X1,X2) = 0
[num0] = 1
[fSNonEmpty] = 0
[ffalse] = 1/2
[s](X) = 2.X + 2
[ftrue] = 1
[zero] = 0
[EVEN](X) = 0
[GT](X1,X2) = 0
[HALF](X) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[IFU95TIMES](X1,X2,X3) = X1 + X2 + 1/2.X3 + 1/2
[NOT](X) = 0
[PLUS](X1,X2) = 0
[TIMES](X1,X2) = 2.X1 + 1/2.X2

Problem 1.5: 

SCC Processor:
-> Pairs:
 TIMES(s(x),y) -> IFU95TIMES(even(s(x)),s(x),y)
-> Rules:
 even(num0) -> ftrue
 even(s(num0)) -> ffalse
 even(s(s(x))) -> even(x)
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 half(num0) -> num0
 half(s(s(x))) -> s(half(x))
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifu95times(ffalse,s(x),y) -> plus(y,times(x,y))
 ifu95times(ftrue,s(x),y) -> plus(times(half(s(x)),y),times(half(s(x)),y))
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 times(num0,y) -> num0
 times(s(x),y) -> ifu95times(even(s(x)),s(x),y)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
