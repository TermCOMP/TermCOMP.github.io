YES
proof of /home/ff862203/input_3IiqYBgaIl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 113 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 47 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 44 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 49 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 8 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QDP
        (14) UsableRulesProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QReductionProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) QDP
        (28) UsableRulesProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QReductionProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (40) YES
    (41) QDP
        (42) UsableRulesProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) QReductionProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (47) YES
    (48) QDP
        (49) UsableRulesProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) QReductionProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (54) YES
    (55) QDP
        (56) UsableRulesProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) QReductionProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (61) YES
    (62) QDP
        (63) UsableRulesProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) QReductionProof [EQUIVALENT, 0 ms]
        (66) QDP
        (67) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (68) YES
    (69) QDP
        (70) UsableRulesProof [EQUIVALENT, 0 ms]
        (71) QDP
        (72) QReductionProof [EQUIVALENT, 0 ms]
        (73) QDP
        (74) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (75) YES
    (76) QDP
        (77) UsableRulesProof [EQUIVALENT, 0 ms]
        (78) QDP
        (79) QReductionProof [EQUIVALENT, 0 ms]
        (80) QDP
        (81) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (82) YES
    (83) QDP
        (84) UsableRulesProof [EQUIVALENT, 0 ms]
        (85) QDP
        (86) QReductionProof [EQUIVALENT, 0 ms]
        (87) QDP
        (88) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (89) YES
    (90) QDP
        (91) UsableRulesProof [EQUIVALENT, 0 ms]
        (92) QDP
        (93) QReductionProof [EQUIVALENT, 0 ms]
        (94) QDP
        (95) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (96) YES
    (97) QDP
        (98) UsableRulesProof [EQUIVALENT, 0 ms]
        (99) QDP
        (100) QReductionProof [EQUIVALENT, 0 ms]
        (101) QDP
        (102) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (103) YES
    (104) QDP
        (105) UsableRulesProof [EQUIVALENT, 0 ms]
        (106) QDP
        (107) QReductionProof [EQUIVALENT, 0 ms]
        (108) QDP
        (109) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (110) YES
    (111) QDP
        (112) UsableRulesProof [EQUIVALENT, 0 ms]
        (113) QDP
        (114) QReductionProof [EQUIVALENT, 0 ms]
        (115) QDP
        (116) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (117) YES
    (118) QDP
        (119) UsableRulesProof [EQUIVALENT, 0 ms]
        (120) QDP
        (121) MRRProof [EQUIVALENT, 96 ms]
        (122) QDP
        (123) MRRProof [EQUIVALENT, 82 ms]
        (124) QDP
        (125) MRRProof [EQUIVALENT, 22 ms]
        (126) QDP
        (127) MRRProof [EQUIVALENT, 100 ms]
        (128) QDP
        (129) QDPOrderProof [EQUIVALENT, 200 ms]
        (130) QDP
        (131) QDPQMonotonicMRRProof [EQUIVALENT, 60 ms]
        (132) QDP
        (133) DependencyGraphProof [EQUIVALENT, 0 ms]
        (134) QDP
        (135) QDPQMonotonicMRRProof [EQUIVALENT, 94 ms]
        (136) QDP
        (137) QDPOrderProof [EQUIVALENT, 119 ms]
        (138) QDP
        (139) QDPOrderProof [EQUIVALENT, 168 ms]
        (140) QDP
        (141) DependencyGraphProof [EQUIVALENT, 0 ms]
        (142) QDP
        (143) QDPQMonotonicMRRProof [EQUIVALENT, 57 ms]
        (144) QDP
        (145) QDPQMonotonicMRRProof [EQUIVALENT, 30 ms]
        (146) QDP
        (147) DependencyGraphProof [EQUIVALENT, 0 ms]
        (148) QDP
        (149) QDPQMonotonicMRRProof [EQUIVALENT, 30 ms]
        (150) QDP
        (151) QDPQMonotonicMRRProof [EQUIVALENT, 75 ms]
        (152) QDP
        (153) QDPQMonotonicMRRProof [EQUIVALENT, 43 ms]
        (154) QDP
        (155) QDPQMonotonicMRRProof [EQUIVALENT, 32 ms]
        (156) QDP
        (157) QDPOrderProof [EQUIVALENT, 123 ms]
        (158) QDP
        (159) DependencyGraphProof [EQUIVALENT, 0 ms]
        (160) QDP
        (161) QDPOrderProof [EQUIVALENT, 91 ms]
        (162) QDP
        (163) QDPOrderProof [EQUIVALENT, 69 ms]
        (164) QDP
        (165) QDPOrderProof [EQUIVALENT, 0 ms]
        (166) QDP
        (167) DependencyGraphProof [EQUIVALENT, 0 ms]
        (168) QDP
        (169) QDPOrderProof [EQUIVALENT, 0 ms]
        (170) QDP
        (171) UsableRulesProof [EQUIVALENT, 0 ms]
        (172) QDP
        (173) QReductionProof [EQUIVALENT, 0 ms]
        (174) QDP
        (175) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (176) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 1 + x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(U31(tt)) -> mark(tt)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = 1 + x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(U11(tt)) -> mark(tt)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(zeros) -> CONS(0, zeros)
   ACTIVE(U21(tt)) -> MARK(tt)
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U41(tt, V2)) -> U42^1(isNatIList(V2))
   ACTIVE(U41(tt, V2)) -> ISNATILIST(V2)
   ACTIVE(U42(tt)) -> MARK(tt)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U51(tt, V2)) -> U52^1(isNatList(V2))
   ACTIVE(U51(tt, V2)) -> ISNATLIST(V2)
   ACTIVE(U52(tt)) -> MARK(tt)
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   ACTIVE(U61(tt, L, N)) -> U62^1(isNat(N), L)
   ACTIVE(U61(tt, L, N)) -> ISNAT(N)
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   ACTIVE(U62(tt, L)) -> S(length(L))
   ACTIVE(U62(tt, L)) -> LENGTH(L)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(s(V1))) -> U21^1(isNat(V1))
   ACTIVE(isNat(s(V1))) -> ISNAT(V1)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatIList(cons(V1, V2))) -> U41^1(isNat(V1), V2)
   ACTIVE(isNatIList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> U51^1(isNat(V1), V2)
   ACTIVE(isNatList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   ACTIVE(length(cons(N, L))) -> U61^1(isNatList(L), L, N)
   ACTIVE(length(cons(N, L))) -> ISNATLIST(L)
   MARK(zeros) -> ACTIVE(zeros)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(0) -> ACTIVE(0)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> U11^1(mark(X))
   MARK(U11(X)) -> MARK(X)
   MARK(tt) -> ACTIVE(tt)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> U21^1(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U31(X)) -> U31^1(mark(X))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> U41^1(mark(X1), X2)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   MARK(U42(X)) -> U42^1(mark(X))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> U51^1(mark(X1), X2)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> U52^1(mark(X))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> U61^1(mark(X1), X2, X3)
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> U62^1(mark(X1), X2)
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(nil) -> ACTIVE(nil)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   U11^1(mark(X)) -> U11^1(X)
   U11^1(active(X)) -> U11^1(X)
   U21^1(mark(X)) -> U21^1(X)
   U21^1(active(X)) -> U21^1(X)
   U31^1(mark(X)) -> U31^1(X)
   U31^1(active(X)) -> U31^1(X)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)
   U42^1(mark(X)) -> U42^1(X)
   U42^1(active(X)) -> U42^1(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)
   ISNATILIST(active(X)) -> ISNATILIST(X)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)
   U52^1(mark(X)) -> U52^1(X)
   U52^1(active(X)) -> U52^1(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)
   ISNATLIST(active(X)) -> ISNATLIST(X)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 16 SCCs with 36 less nodes.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U62^1(X1, mark(X2)) -> U62^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U62^1(mark(X1), X2) -> U62^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U62^1(active(X1), X2) -> U62^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U62^1(X1, active(X2)) -> U62^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(40)
YES

----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATLIST(active(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


*ISNATLIST(mark(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(54)
YES

----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U52^1(active(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


*U52^1(mark(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(61)
YES

----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U51^1(X1, mark(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U51^1(mark(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(active(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(X1, active(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(68)
YES

----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATILIST(active(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


*ISNATILIST(mark(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(75)
YES

----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U42^1(active(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


*U42^1(mark(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(82)
YES

----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(84) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(86) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U41^1(X1, mark(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U41^1(mark(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(active(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(X1, active(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(89)
YES

----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(95) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U31^1(active(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


*U31^1(mark(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(96)
YES

----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(98) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(99)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(100) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(102) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U21^1(active(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


*U21^1(mark(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(103)
YES

----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(109) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U11^1(active(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


*U11^1(mark(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(110)
YES

----------------------------------------

(111)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(112) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(114) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   U42(active(x0))
   U61(x0, mark(x1), x2)
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   U62(x0, active(x1))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   isNat(active(x0))
   U21(mark(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   U52(mark(x0))
   U11(active(x0))
   cons(active(x0), x1)
   U42(mark(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   isNatList(active(x0))
   U61(active(x0), x1, x2)


----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U61(tt, x0, x1))
   mark(isNatIList(x0))
   mark(U11(x0))
   mark(U62(x0, x1))
   active(length(nil))
   mark(U21(x0))
   active(U11(tt))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   active(U21(tt))
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   mark(isNatList(x0))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   active(isNatList(nil))
   mark(U31(x0))
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(116) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(117)
YES

----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(119) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(121) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U31(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 2 + x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(123) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U11(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 2 + x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + 2*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(125) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U41(X1, X2)) -> MARK(X1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(127) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(129) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( U11_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = 2
POL( U42_1(x_1) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U52_1(x_1) ) = 0
POL( U61_3(x_1, ..., x_3) ) = 2
POL( U62_2(x_1, x_2) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, -2}
POL( zeros ) = 2
POL( active_1(x_1) ) = 2x_1 + 2
POL( 0 ) = 2
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(131) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(zeros) -> ACTIVE(zeros)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 0
   POL(MARK(x_1)) = x_1
   POL(U11(x_1)) = 1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = x_1
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2)) = 0
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(nil) = 2
   POL(s(x_1)) = 2*x_1
   POL(tt) = 0
   POL(zeros) = 2


----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(133) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(134)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(135) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(cons(X1, X2)) -> MARK(X1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 0
   POL(MARK(x_1)) = x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = 2*x_1
   POL(U31(x_1)) = 1
   POL(U41(x_1, x_2)) = 0
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2)) = 0
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 1 + 2*x_1
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(nil) = 2
   POL(s(x_1)) = 2*x_1
   POL(tt) = 0
   POL(zeros) = 2


----------------------------------------

(136)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(137) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U51(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = x_1 + 2
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = x_1
POL( zeros ) = 0
POL( active_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( 0 ) = 2
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 0
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1
POL( U21_1(x_1) ) = 2x_1
POL( U11_1(x_1) ) = 2
POL( U31_1(x_1) ) = 0
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(139) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U61_3(x_1, ..., x_3) ) = 0
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = max{0, -2}
POL( zeros ) = 0
POL( active_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1 + 2
POL( isNatIList_1(x_1) ) = 0
POL( U52_1(x_1) ) = x_1 + 2
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 2x_1 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( U21_1(x_1) ) = x_1 + 2
POL( U11_1(x_1) ) = max{0, x_1 - 2}
POL( U31_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)


----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(141) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(142)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(143) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = 2*x_1
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 0
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2)) = 0
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 2*x_1
   POL(tt) = 1
   POL(zeros) = 0


----------------------------------------

(144)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(145) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = 0
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 1
   POL(U42(x_1)) = 0
   POL(U51(x_1, x_2)) = 1
   POL(U52(x_1)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2)) = 1
   POL(active(x_1)) = 0
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 1
   POL(isNatList(x_1)) = 1
   POL(length(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(146)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(147) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(148)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(149) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(length(X)) -> ACTIVE(length(mark(X)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = 0
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 1
   POL(U42(x_1)) = 0
   POL(U51(x_1, x_2)) = 1
   POL(U52(x_1)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2)) = 1
   POL(active(x_1)) = 0
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 1
   POL(isNatList(x_1)) = 1
   POL(length(x_1)) = 0
   POL(mark(x_1)) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(150)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(151) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 0
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 0
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1
   POL(U62(x_1, x_2)) = 2 + x_1
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 2
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 2*x_1
   POL(tt) = 2
   POL(zeros) = 0


----------------------------------------

(152)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(153) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 0
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 0
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 2 + x_1
   POL(U62(x_1, x_2)) = 2*x_1
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2 + x_1
   POL(isNat(x_1)) = 2
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(tt) = 2
   POL(zeros) = 2


----------------------------------------

(154)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(155) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U21(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ACTIVE(x_1)) = 0
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 0
   POL(U21(x_1)) = 2 + x_1
   POL(U31(x_1)) = 0
   POL(U41(x_1, x_2)) = 0
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2)) = 1
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 2
   POL(zeros) = 0


----------------------------------------

(156)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(157) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2x_2 + 2
POL( mark_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 2
POL( active_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = 2x_2 + 2
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = x_1 + 1
POL( U61_3(x_1, ..., x_3) ) = x_2 + 2
POL( U62_2(x_1, x_2) ) = 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2
POL( length_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = max{0, x_1 - 2}
POL( U11_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(158)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(159) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(160)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(161) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( zeros ) = 0
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U61_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_3 - 2}
POL( U62_2(x_1, x_2) ) = 2
POL( isNat_1(x_1) ) = x_1
POL( s_1(x_1) ) = max{0, 2x_1 - 2}
POL( length_1(x_1) ) = max{0, 2x_1 - 2}
POL( U21_1(x_1) ) = max{0, 2x_1 - 2}
POL( U11_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(162)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(163) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

U41(x1, x2)  =  x2

MARK(x1)  =  x1

U42(x1)  =  x1

isNatIList(x1)  =  x1

U51(x1, x2)  =  U51

U52(x1)  =  x1

isNatList(x1)  =  isNatList

cons(x1, x2)  =  x2

mark(x1)  =  x1

active(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:U51 > isNatList

and weight map:

   isNatList=1
   U51=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)


----------------------------------------

(164)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(165) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

U41(x1, x2)  =  x2

MARK(x1)  =  x1

U42(x1)  =  x1

isNatIList(x1)  =  x1

U52(x1)  =  x1

cons(x1, x2)  =  cons(x2)

mark(x1)  =  x1

active(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)


----------------------------------------

(166)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(167) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(168)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U52(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(169) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

U42(x1)  =  x1

U41(x1, x2)  =  U41

ACTIVE(x1)  =  ACTIVE

isNatIList(x1)  =  isNatIList

U52(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   isNatIList=1
   U41=3
   ACTIVE=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(170)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U52(X)) -> MARK(X)

The TRS R consists of the following rules:

   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U31(X)) -> active(U31(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(171) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(172)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U52(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U31(active(x0))
   U42(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   U52(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   U52(mark(x0))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   U42(mark(x0))
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(173) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U31(active(x0))
   active(U61(tt, x0, x1))
   U61(x0, mark(x1), x2)
   mark(isNatIList(x0))
   mark(U11(x0))
   isNat(mark(x0))
   length(active(x0))
   U51(x0, active(x1))
   U62(active(x0), x1)
   isNatIList(active(x0))
   mark(U62(x0, x1))
   active(length(nil))
   U62(x0, active(x1))
   mark(U21(x0))
   isNatList(mark(x0))
   U61(mark(x0), x1, x2)
   U51(active(x0), x1)
   U41(x0, active(x1))
   active(U11(tt))
   U41(active(x0), x1)
   cons(x0, active(x1))
   length(mark(x0))
   active(U42(tt))
   mark(tt)
   mark(zeros)
   active(U52(tt))
   mark(0)
   mark(length(x0))
   mark(U41(x0, x1))
   active(isNatIList(x0))
   active(U31(tt))
   active(length(cons(x0, x1)))
   mark(cons(x0, x1))
   U31(mark(x0))
   U41(x0, mark(x1))
   U61(x0, active(x1), x2)
   active(U21(tt))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U62(mark(x0), x1)
   mark(isNat(x0))
   active(zeros)
   active(isNat(0))
   mark(U42(x0))
   isNat(active(x0))
   U21(mark(x0))
   mark(isNatList(x0))
   U51(mark(x0), x1)
   s(active(x0))
   U62(x0, mark(x1))
   active(U41(tt, x0))
   active(isNat(length(x0)))
   isNatIList(mark(x0))
   cons(x0, mark(x1))
   U11(mark(x0))
   cons(mark(x0), x1)
   U61(x0, x1, active(x2))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U51(tt, x0))
   mark(U51(x0, x1))
   mark(s(x0))
   U11(active(x0))
   active(isNatList(nil))
   cons(active(x0), x1)
   mark(U31(x0))
   s(mark(x0))
   U21(active(x0))
   U41(mark(x0), x1)
   mark(U52(x0))
   mark(nil)
   active(U62(tt, x0))
   isNatList(active(x0))
   U61(active(x0), x1, x2)
   active(isNatList(cons(x0, x1)))


----------------------------------------

(174)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U52(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U42(active(x0))
   U52(active(x0))
   U52(mark(x0))
   U42(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(175) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U42(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U52(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(176)
YES
