YES
proof of /home/ff862203/input_6Vo5osIeCs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) QReductionProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QReductionProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QReductionProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) QDP
        (48) UsableRulesProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) QDPOrderProof [EQUIVALENT, 46 ms]
        (51) QDP
        (52) QDPOrderProof [EQUIVALENT, 3 ms]
        (53) QDP
        (54) QDPOrderProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) DependencyGraphProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) UsableRulesProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) QReductionProof [EQUIVALENT, 0 ms]
        (61) QDP
        (62) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (63) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(fst(0, Z)) -> MARK(nil)
   ACTIVE(fst(s(X), cons(Y, Z))) -> MARK(cons(Y, fst(X, Z)))
   ACTIVE(fst(s(X), cons(Y, Z))) -> CONS(Y, fst(X, Z))
   ACTIVE(fst(s(X), cons(Y, Z))) -> FST(X, Z)
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   ACTIVE(from(X)) -> CONS(X, from(s(X)))
   ACTIVE(from(X)) -> FROM(s(X))
   ACTIVE(from(X)) -> S(X)
   ACTIVE(add(0, X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   ACTIVE(add(s(X), Y)) -> S(add(X, Y))
   ACTIVE(add(s(X), Y)) -> ADD(X, Y)
   ACTIVE(len(nil)) -> MARK(0)
   ACTIVE(len(cons(X, Z))) -> MARK(s(len(Z)))
   ACTIVE(len(cons(X, Z))) -> S(len(Z))
   ACTIVE(len(cons(X, Z))) -> LEN(Z)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   MARK(fst(X1, X2)) -> FST(mark(X1), mark(X2))
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(0) -> ACTIVE(0)
   MARK(nil) -> ACTIVE(nil)
   MARK(s(X)) -> ACTIVE(s(X))
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(from(X)) -> FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(add(X1, X2)) -> ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> ACTIVE(len(mark(X)))
   MARK(len(X)) -> LEN(mark(X))
   MARK(len(X)) -> MARK(X)
   FST(mark(X1), X2) -> FST(X1, X2)
   FST(X1, mark(X2)) -> FST(X1, X2)
   FST(active(X1), X2) -> FST(X1, X2)
   FST(X1, active(X2)) -> FST(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   FROM(mark(X)) -> FROM(X)
   FROM(active(X)) -> FROM(X)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)
   LEN(mark(X)) -> LEN(X)
   LEN(active(X)) -> LEN(X)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 21 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEN(active(X)) -> LEN(X)
   LEN(mark(X)) -> LEN(X)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEN(active(X)) -> LEN(X)
   LEN(mark(X)) -> LEN(X)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEN(active(X)) -> LEN(X)
   LEN(mark(X)) -> LEN(X)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEN(active(X)) -> LEN(X)
The graph contains the following edges 1 > 1


*LEN(mark(X)) -> LEN(X)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(X1, mark(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*ADD(mark(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(active(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(X1, active(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(active(X)) -> FROM(X)
   FROM(mark(X)) -> FROM(X)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(active(X)) -> FROM(X)
   FROM(mark(X)) -> FROM(X)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(active(X)) -> FROM(X)
   FROM(mark(X)) -> FROM(X)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FROM(active(X)) -> FROM(X)
The graph contains the following edges 1 > 1


*FROM(mark(X)) -> FROM(X)
The graph contains the following edges 1 > 1


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FST(X1, mark(X2)) -> FST(X1, X2)
   FST(mark(X1), X2) -> FST(X1, X2)
   FST(active(X1), X2) -> FST(X1, X2)
   FST(X1, active(X2)) -> FST(X1, X2)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FST(X1, mark(X2)) -> FST(X1, X2)
   FST(mark(X1), X2) -> FST(X1, X2)
   FST(active(X1), X2) -> FST(X1, X2)
   FST(X1, active(X2)) -> FST(X1, X2)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   cons(x0, active(x1))
   add(x0, mark(x1))
   add(mark(x0), x1)
   len(active(x0))
   cons(active(x0), x1)
   s(mark(x0))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FST(X1, mark(X2)) -> FST(X1, X2)
   FST(mark(X1), X2) -> FST(X1, X2)
   FST(active(X1), X2) -> FST(X1, X2)
   FST(X1, active(X2)) -> FST(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(from(x0))
   active(from(x0))
   active(add(0, x0))
   mark(0)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FST(X1, mark(X2)) -> FST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*FST(mark(X1), X2) -> FST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FST(active(X1), X2) -> FST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FST(X1, active(X2)) -> FST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(fst(s(X), cons(Y, Z))) -> MARK(cons(Y, fst(X, Z)))
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> ACTIVE(len(mark(X)))
   MARK(len(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(mark(X)) -> len(X)
   len(active(X)) -> len(X)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(fst(s(X), cons(Y, Z))) -> MARK(cons(Y, fst(X, Z)))
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> ACTIVE(len(mark(X)))
   MARK(len(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(fst(s(X), cons(Y, Z))) -> MARK(cons(Y, fst(X, Z)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

fst(x1, x2)  =  fst(x1, x2)

s(x1)  =  s

cons(x1, x2)  =  x1

MARK(x1)  =  x1

mark(x1)  =  x1

from(x1)  =  x1

add(x1, x2)  =  add(x1, x2)

0  =  0

len(x1)  =  x1

active(x1)  =  x1

nil  =  nil


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=3
   0=6
   fst_2=3
   add_2=1
   nil=8

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(len(X)) -> ACTIVE(len(mark(X)))
   MARK(len(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(len(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

cons(x1, x2)  =  x1

ACTIVE(x1)  =  x1

mark(x1)  =  x1

from(x1)  =  x1

fst(x1, x2)  =  x2

add(x1, x2)  =  add(x2)

len(x1)  =  len(x1)

active(x1)  =  x1

0  =  0

nil  =  nil

s(x1)  =  s


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=3
   0=3
   len_1=4
   add_1=3
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(len(X)) -> ACTIVE(len(mark(X)))

The TRS R consists of the following rules:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   MARK(from(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

cons(x1, x2)  =  x1

ACTIVE(x1)  =  x1

mark(x1)  =  x1

from(x1)  =  from(x1)

fst(x1, x2)  =  x2

add(x1, x2)  =  add(x2)

len(x1)  =  len

active(x1)  =  x1

0  =  0

nil  =  nil

s(x1)  =  s


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=3
   0=3
   from_1=1
   len=5
   add_1=3
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> ACTIVE(fst(mark(X1), mark(X2)))
   MARK(from(X)) -> ACTIVE(from(mark(X)))
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(len(X)) -> ACTIVE(len(mark(X)))

The TRS R consists of the following rules:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   mark(fst(X1, X2)) -> active(fst(mark(X1), mark(X2)))
   mark(from(X)) -> active(from(mark(X)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(len(X)) -> active(len(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   mark(s(X)) -> active(s(X))
   len(active(X)) -> len(X)
   len(mark(X)) -> len(X)
   active(fst(0, Z)) -> mark(nil)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   fst(X1, mark(X2)) -> fst(X1, X2)
   fst(mark(X1), X2) -> fst(X1, X2)
   fst(active(X1), X2) -> fst(X1, X2)
   fst(X1, active(X2)) -> fst(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)

The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   cons(x0, mark(x1))
   len(mark(x0))
   cons(mark(x0), x1)
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   cons(x0, active(x1))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fst(x0, mark(x1))
   fst(mark(x0), x1)
   from(active(x0))
   s(active(x0))
   mark(from(x0))
   add(x0, active(x1))
   fst(x0, active(x1))
   len(mark(x0))
   fst(active(x0), x1)
   add(active(x0), x1)
   from(mark(x0))
   active(from(x0))
   active(add(0, x0))
   add(x0, mark(x1))
   mark(0)
   add(mark(x0), x1)
   mark(fst(x0, x1))
   mark(len(x0))
   mark(s(x0))
   len(active(x0))
   mark(cons(x0, x1))
   mark(add(x0, x1))
   s(mark(x0))
   active(len(cons(x0, x1)))
   active(add(s(x0), x1))
   active(fst(s(x0), cons(x1, x2)))
   mark(nil)
   active(fst(0, x0))
   active(len(nil))


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   cons(x0, mark(x1))
   cons(mark(x0), x1)
   cons(x0, active(x1))
   cons(active(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(cons(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(63)
YES
