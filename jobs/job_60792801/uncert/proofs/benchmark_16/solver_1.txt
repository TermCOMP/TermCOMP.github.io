YES
proof of /home/ff862203/input_mGdqeVibi8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 23 ms]
        (18) QDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> 0
   if(false, x, y) -> s(minus(p(x), y))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   MINUS(x, y) -> IF(le(x, y), x, y)
   MINUS(x, y) -> LE(x, y)
   IF(false, x, y) -> MINUS(p(x), y)
   IF(false, x, y) -> P(x)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> 0
   if(false, x, y) -> s(minus(p(x), y))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> 0
   if(false, x, y) -> s(minus(p(x), y))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> IF(le(x, y), x, y)
   IF(false, x, y) -> MINUS(p(x), y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> 0
   if(false, x, y) -> s(minus(p(x), y))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> IF(le(x, y), x, y)
   IF(false, x, y) -> MINUS(p(x), y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   if(false, x0, x1)
   p(0)
   minus(x0, x1)
   if(true, x0, x1)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(false, x0, x1)
   minus(x0, x1)
   if(true, x0, x1)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> IF(le(x, y), x, y)
   IF(false, x, y) -> MINUS(p(x), y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   p(0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF(false, x, y) -> MINUS(p(x), y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3)) = [4]x_1 + [1/2]x_2
   POL(MINUS(x_1, x_2)) = [2]x_1
   POL(false) = [1/4]
   POL(le(x_1, x_2)) = [1/4]x_1
   POL(p(x_1)) = [1/4]x_1
   POL(s(x_1)) = [4] + [4]x_1
   POL(true) = 0
The value of delta used in the strict ordering is 1.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   p(0) -> 0
   p(s(x)) -> x


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> IF(le(x, y), x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   p(s(x0))
   p(0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(20)
TRUE
