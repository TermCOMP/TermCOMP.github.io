YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
if(ffalse,x,y) -> s(minus(p(x),y))
if(ftrue,x,y) -> num0
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
minus(x,y) -> if(le(x,y),x,y)
p(num0) -> num0
p(s(x)) -> x
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IF(ffalse,x,y) -> MINUS(p(x),y)
 IF(ffalse,x,y) -> P(x)
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,y) -> IF(le(x,y),x,y)
 MINUS(x,y) -> LE(x,y)
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ffalse,x,y) -> MINUS(p(x),y)
 IF(ffalse,x,y) -> P(x)
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,y) -> IF(le(x,y),x,y)
 MINUS(x,y) -> LE(x,y)
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
->->-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
->->Cycle:
->->-> Pairs:
 IF(ffalse,x,y) -> MINUS(p(x),y)
 MINUS(x,y) -> IF(le(x,y),x,y)
->->-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 IF(ffalse,x,y) -> MINUS(p(x),y)
 MINUS(x,y) -> IF(le(x,y),x,y)
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
-> Usable rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 p(num0) -> num0
 p(s(x)) -> x
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[if](X1,X2,X3) = 0
[le](X1,X2) = 1/2.X1 + 1/2
[minus](X1,X2) = 0
[p](X) = 1/2.X
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 1
[s](X) = 2.X + 2
[ftrue] = 0
[IF](X1,X2,X3) = 2.X1 + X2 + 2.X3
[LE](X1,X2) = 0
[MINUS](X1,X2) = 2.X1 + 2.X2 + 1
[P](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 MINUS(x,y) -> IF(le(x,y),x,y)
-> Rules:
 if(ffalse,x,y) -> s(minus(p(x),y))
 if(ftrue,x,y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,y) -> if(le(x,y),x,y)
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
