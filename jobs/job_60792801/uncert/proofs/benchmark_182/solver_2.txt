YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 X3 Y)
(RULES
active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
active(div(num0,s(Y))) -> mark(num0)
active(div(X1,X2)) -> div(active(X1),X2)
active(geq(s(X),s(Y))) -> mark(geq(X,Y))
active(geq(num0,s(Y))) -> mark(ffalse)
active(geq(X,num0)) -> mark(ftrue)
active(if(ffalse,X,Y)) -> mark(Y)
active(if(ftrue,X,Y)) -> mark(X)
active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
active(minus(s(X),s(Y))) -> mark(minus(X,Y))
active(minus(num0,Y)) -> mark(num0)
active(s(X)) -> s(active(X))
div(mark(X1),X2) -> mark(div(X1,X2))
div(ok(X1),ok(X2)) -> ok(div(X1,X2))
geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
proper(div(X1,X2)) -> div(proper(X1),proper(X2))
proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
proper(s(X)) -> s(proper(X))
proper(num0) -> ok(num0)
proper(ffalse) -> ok(ffalse)
proper(ftrue) -> ok(ftrue)
s(mark(X)) -> mark(s(X))
s(ok(X)) -> ok(s(X))
top(mark(X)) -> top(proper(X))
top(ok(X)) -> top(active(X))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(div(s(X),s(Y))) -> DIV(minus(X,Y),s(Y))
 ACTIVE(div(s(X),s(Y))) -> GEQ(X,Y)
 ACTIVE(div(s(X),s(Y))) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 ACTIVE(div(s(X),s(Y))) -> MINUS(X,Y)
 ACTIVE(div(s(X),s(Y))) -> S(div(minus(X,Y),s(Y)))
 ACTIVE(div(X1,X2)) -> ACTIVE(X1)
 ACTIVE(div(X1,X2)) -> DIV(active(X1),X2)
 ACTIVE(geq(s(X),s(Y))) -> GEQ(X,Y)
 ACTIVE(if(X1,X2,X3)) -> ACTIVE(X1)
 ACTIVE(if(X1,X2,X3)) -> IF(active(X1),X2,X3)
 ACTIVE(minus(s(X),s(Y))) -> MINUS(X,Y)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 DIV(mark(X1),X2) -> DIV(X1,X2)
 DIV(ok(X1),ok(X2)) -> DIV(X1,X2)
 GEQ(ok(X1),ok(X2)) -> GEQ(X1,X2)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(ok(X1),ok(X2),ok(X3)) -> IF(X1,X2,X3)
 MINUS(ok(X1),ok(X2)) -> MINUS(X1,X2)
 PROPER(div(X1,X2)) -> DIV(proper(X1),proper(X2))
 PROPER(div(X1,X2)) -> PROPER(X1)
 PROPER(div(X1,X2)) -> PROPER(X2)
 PROPER(geq(X1,X2)) -> GEQ(proper(X1),proper(X2))
 PROPER(geq(X1,X2)) -> PROPER(X1)
 PROPER(geq(X1,X2)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> IF(proper(X1),proper(X2),proper(X3))
 PROPER(if(X1,X2,X3)) -> PROPER(X1)
 PROPER(if(X1,X2,X3)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X3)
 PROPER(minus(X1,X2)) -> MINUS(proper(X1),proper(X2))
 PROPER(minus(X1,X2)) -> PROPER(X1)
 PROPER(minus(X1,X2)) -> PROPER(X2)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(div(s(X),s(Y))) -> DIV(minus(X,Y),s(Y))
 ACTIVE(div(s(X),s(Y))) -> GEQ(X,Y)
 ACTIVE(div(s(X),s(Y))) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 ACTIVE(div(s(X),s(Y))) -> MINUS(X,Y)
 ACTIVE(div(s(X),s(Y))) -> S(div(minus(X,Y),s(Y)))
 ACTIVE(div(X1,X2)) -> ACTIVE(X1)
 ACTIVE(div(X1,X2)) -> DIV(active(X1),X2)
 ACTIVE(geq(s(X),s(Y))) -> GEQ(X,Y)
 ACTIVE(if(X1,X2,X3)) -> ACTIVE(X1)
 ACTIVE(if(X1,X2,X3)) -> IF(active(X1),X2,X3)
 ACTIVE(minus(s(X),s(Y))) -> MINUS(X,Y)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 DIV(mark(X1),X2) -> DIV(X1,X2)
 DIV(ok(X1),ok(X2)) -> DIV(X1,X2)
 GEQ(ok(X1),ok(X2)) -> GEQ(X1,X2)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(ok(X1),ok(X2),ok(X3)) -> IF(X1,X2,X3)
 MINUS(ok(X1),ok(X2)) -> MINUS(X1,X2)
 PROPER(div(X1,X2)) -> DIV(proper(X1),proper(X2))
 PROPER(div(X1,X2)) -> PROPER(X1)
 PROPER(div(X1,X2)) -> PROPER(X2)
 PROPER(geq(X1,X2)) -> GEQ(proper(X1),proper(X2))
 PROPER(geq(X1,X2)) -> PROPER(X1)
 PROPER(geq(X1,X2)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> IF(proper(X1),proper(X2),proper(X3))
 PROPER(if(X1,X2,X3)) -> PROPER(X1)
 PROPER(if(X1,X2,X3)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X3)
 PROPER(minus(X1,X2)) -> MINUS(proper(X1),proper(X2))
 PROPER(minus(X1,X2)) -> PROPER(X1)
 PROPER(minus(X1,X2)) -> PROPER(X2)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 MINUS(ok(X1),ok(X2)) -> MINUS(X1,X2)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(ok(X1),ok(X2),ok(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 GEQ(ok(X1),ok(X2)) -> GEQ(X1,X2)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 DIV(mark(X1),X2) -> DIV(X1,X2)
 DIV(ok(X1),ok(X2)) -> DIV(X1,X2)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 PROPER(div(X1,X2)) -> PROPER(X1)
 PROPER(div(X1,X2)) -> PROPER(X2)
 PROPER(geq(X1,X2)) -> PROPER(X1)
 PROPER(geq(X1,X2)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X1)
 PROPER(if(X1,X2,X3)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X3)
 PROPER(minus(X1,X2)) -> PROPER(X1)
 PROPER(minus(X1,X2)) -> PROPER(X2)
 PROPER(s(X)) -> PROPER(X)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 ACTIVE(div(X1,X2)) -> ACTIVE(X1)
 ACTIVE(if(X1,X2,X3)) -> ACTIVE(X1)
 ACTIVE(s(X)) -> ACTIVE(X)
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))


The problem is decomposed in 8 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 MINUS(ok(X1),ok(X2)) -> MINUS(X1,X2)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(MINUS) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(ok(X1),ok(X2),ok(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(IF) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 GEQ(ok(X1),ok(X2)) -> GEQ(X1,X2)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(GEQ) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 DIV(mark(X1),X2) -> DIV(X1,X2)
 DIV(ok(X1),ok(X2)) -> DIV(X1,X2)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(DIV) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 PROPER(div(X1,X2)) -> PROPER(X1)
 PROPER(div(X1,X2)) -> PROPER(X2)
 PROPER(geq(X1,X2)) -> PROPER(X1)
 PROPER(geq(X1,X2)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X1)
 PROPER(if(X1,X2,X3)) -> PROPER(X2)
 PROPER(if(X1,X2,X3)) -> PROPER(X3)
 PROPER(minus(X1,X2)) -> PROPER(X1)
 PROPER(minus(X1,X2)) -> PROPER(X2)
 PROPER(s(X)) -> PROPER(X)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(PROPER) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 ACTIVE(div(X1,X2)) -> ACTIVE(X1)
 ACTIVE(if(X1,X2,X3)) -> ACTIVE(X1)
 ACTIVE(s(X)) -> ACTIVE(X)
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(ACTIVE) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[active](X) = X
[div](X1,X2) = 3.X1 + X2 + 3
[geq](X1,X2) = 1/2.X1 + 4/3
[if](X1,X2,X3) = X1 + X2 + X3 + 4/3
[minus](X1,X2) = 1/3.X1 + 4/3
[proper](X) = X
[s](X) = X + 4
[top](X) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[mark](X) = X + 4/3
[ok](X) = X
[ftrue] = 0
[ACTIVE](X) = 0
[DIV](X1,X2) = 0
[GEQ](X1,X2) = 0
[IF](X1,X2,X3) = 0
[MINUS](X1,X2) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = 1/3.X

Problem 1.8: 

SCC Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 1
[div](X1,X2) = X1
[geq](X1,X2) = 2.X1
[if](X1,X2,X3) = X1
[minus](X1,X2) = 2.X1 + 2.X2
[proper](X) = 0
[s](X) = X
[top](X) = 0
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[mark](X) = 1
[ok](X) = 2
[ftrue] = 1
[ACTIVE](X) = 0
[DIV](X1,X2) = 0
[GEQ](X1,X2) = 0
[IF](X1,X2,X3) = 0
[MINUS](X1,X2) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = 2.X

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(div(s(X),s(Y))) -> mark(if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0))
 active(div(num0,s(Y))) -> mark(num0)
 active(div(X1,X2)) -> div(active(X1),X2)
 active(geq(s(X),s(Y))) -> mark(geq(X,Y))
 active(geq(num0,s(Y))) -> mark(ffalse)
 active(geq(X,num0)) -> mark(ftrue)
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
 active(minus(s(X),s(Y))) -> mark(minus(X,Y))
 active(minus(num0,Y)) -> mark(num0)
 active(s(X)) -> s(active(X))
 div(mark(X1),X2) -> mark(div(X1,X2))
 div(ok(X1),ok(X2)) -> ok(div(X1,X2))
 geq(ok(X1),ok(X2)) -> ok(geq(X1,X2))
 if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
 if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
 minus(ok(X1),ok(X2)) -> ok(minus(X1,X2))
 proper(div(X1,X2)) -> div(proper(X1),proper(X2))
 proper(geq(X1,X2)) -> geq(proper(X1),proper(X2))
 proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
 proper(minus(X1,X2)) -> minus(proper(X1),proper(X2))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(ftrue) -> ok(ftrue)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
