YES
proof of /home/ff862203/input_I3aQH4s84s.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 82 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 12 ms]
(4) QTRS
(5) RisEmptyProof [EQUIVALENT, 0 ms]
(6) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a____(__(X, Y), Z) -> a____(mark(X), a____(mark(Y), mark(Z)))
   a____(X, nil) -> mark(X)
   a____(nil, X) -> mark(X)
   a__U11(tt) -> tt
   a__U21(tt, V2) -> a__U22(a__isList(V2))
   a__U22(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNeList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isList(V2))
   a__U52(tt) -> tt
   a__U61(tt) -> tt
   a__U71(tt, P) -> a__U72(a__isPal(P))
   a__U72(tt) -> tt
   a__U81(tt) -> tt
   a__isList(V) -> a__U11(a__isNeList(V))
   a__isList(nil) -> tt
   a__isList(__(V1, V2)) -> a__U21(a__isList(V1), V2)
   a__isNeList(V) -> a__U31(a__isQid(V))
   a__isNeList(__(V1, V2)) -> a__U41(a__isList(V1), V2)
   a__isNeList(__(V1, V2)) -> a__U51(a__isNeList(V1), V2)
   a__isNePal(V) -> a__U61(a__isQid(V))
   a__isNePal(__(I, __(P, I))) -> a__U71(a__isQid(I), P)
   a__isPal(V) -> a__U81(a__isNePal(V))
   a__isPal(nil) -> tt
   a__isQid(a) -> tt
   a__isQid(e) -> tt
   a__isQid(i) -> tt
   a__isQid(o) -> tt
   a__isQid(u) -> tt
   mark(__(X1, X2)) -> a____(mark(X1), mark(X2))
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isList(X)) -> a__isList(X)
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNeList(X)) -> a__isNeList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(U61(X)) -> a__U61(mark(X))
   mark(U71(X1, X2)) -> a__U71(mark(X1), X2)
   mark(U72(X)) -> a__U72(mark(X))
   mark(isPal(X)) -> a__isPal(X)
   mark(U81(X)) -> a__U81(mark(X))
   mark(isQid(X)) -> a__isQid(X)
   mark(isNePal(X)) -> a__isNePal(X)
   mark(nil) -> nil
   mark(tt) -> tt
   mark(a) -> a
   mark(e) -> e
   mark(i) -> i
   mark(o) -> o
   mark(u) -> u
   a____(X1, X2) -> __(X1, X2)
   a__U11(X) -> U11(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isList(X) -> isList(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNeList(X) -> isNeList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__U61(X) -> U61(X)
   a__U71(X1, X2) -> U71(X1, X2)
   a__U72(X) -> U72(X)
   a__isPal(X) -> isPal(X)
   a__U81(X) -> U81(X)
   a__isQid(X) -> isQid(X)
   a__isNePal(X) -> isNePal(X)

The set Q consists of the following terms:

   a__isNeList(x0)
   a__U41(x0, x1)
   mark(isList(x0))
   mark(isPal(x0))
   mark(U11(x0))
   mark(u)
   mark(isQid(x0))
   a__U51(x0, x1)
   a__isNePal(x0)
   mark(U61(x0))
   mark(a)
   mark(o)
   mark(tt)
   a__U22(x0)
   mark(e)
   mark(U41(x0, x1))
   mark(__(x0, x1))
   a__isList(x0)
   mark(U81(x0))
   a__U52(x0)
   mark(U22(x0))
   a__U81(x0)
   a__U21(x0, x1)
   a__U42(x0)
   a____(x0, x1)
   mark(U42(x0))
   a__isPal(x0)
   mark(U21(x0, x1))
   mark(i)
   a__isQid(x0)
   mark(U72(x0))
   a__U61(x0)
   a__U72(x0)
   a__U11(x0)
   mark(U51(x0, x1))
   mark(isNeList(x0))
   mark(U31(x0))
   mark(U71(x0, x1))
   mark(U52(x0))
   mark(nil)
   a__U71(x0, x1)
   mark(isNePal(x0))
   a__U31(x0)


----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1 + x_2
   POL(U22(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1)) = x_1
   POL(U71(x_1, x_2)) = x_1 + 2*x_2
   POL(U72(x_1)) = x_1
   POL(U81(x_1)) = 2*x_1
   POL(__(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(a) = 0
   POL(a__U11(x_1)) = x_1
   POL(a__U21(x_1, x_2)) = x_1 + x_2
   POL(a__U22(x_1)) = x_1
   POL(a__U31(x_1)) = x_1
   POL(a__U41(x_1, x_2)) = 2*x_1 + x_2
   POL(a__U42(x_1)) = x_1
   POL(a__U51(x_1, x_2)) = x_1 + x_2
   POL(a__U52(x_1)) = x_1
   POL(a__U61(x_1)) = x_1
   POL(a__U71(x_1, x_2)) = x_1 + 2*x_2
   POL(a__U72(x_1)) = x_1
   POL(a__U81(x_1)) = 2*x_1
   POL(a____(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(a__isList(x_1)) = x_1
   POL(a__isNeList(x_1)) = x_1
   POL(a__isNePal(x_1)) = x_1
   POL(a__isPal(x_1)) = 2*x_1
   POL(a__isQid(x_1)) = x_1
   POL(e) = 0
   POL(i) = 0
   POL(isList(x_1)) = x_1
   POL(isNeList(x_1)) = x_1
   POL(isNePal(x_1)) = x_1
   POL(isPal(x_1)) = 2*x_1
   POL(isQid(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(o) = 0
   POL(tt) = 0
   POL(u) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a____(__(X, Y), Z) -> a____(mark(X), a____(mark(Y), mark(Z)))
   a____(X, nil) -> mark(X)
   a____(nil, X) -> mark(X)
   a__isList(__(V1, V2)) -> a__U21(a__isList(V1), V2)
   a__isNeList(__(V1, V2)) -> a__U41(a__isList(V1), V2)
   a__isNeList(__(V1, V2)) -> a__U51(a__isNeList(V1), V2)
   a__isNePal(__(I, __(P, I))) -> a__U71(a__isQid(I), P)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__U11(tt) -> tt
   a__U21(tt, V2) -> a__U22(a__isList(V2))
   a__U22(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNeList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isList(V2))
   a__U52(tt) -> tt
   a__U61(tt) -> tt
   a__U71(tt, P) -> a__U72(a__isPal(P))
   a__U72(tt) -> tt
   a__U81(tt) -> tt
   a__isList(V) -> a__U11(a__isNeList(V))
   a__isList(nil) -> tt
   a__isNeList(V) -> a__U31(a__isQid(V))
   a__isNePal(V) -> a__U61(a__isQid(V))
   a__isPal(V) -> a__U81(a__isNePal(V))
   a__isPal(nil) -> tt
   a__isQid(a) -> tt
   a__isQid(e) -> tt
   a__isQid(i) -> tt
   a__isQid(o) -> tt
   a__isQid(u) -> tt
   mark(__(X1, X2)) -> a____(mark(X1), mark(X2))
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isList(X)) -> a__isList(X)
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNeList(X)) -> a__isNeList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(U61(X)) -> a__U61(mark(X))
   mark(U71(X1, X2)) -> a__U71(mark(X1), X2)
   mark(U72(X)) -> a__U72(mark(X))
   mark(isPal(X)) -> a__isPal(X)
   mark(U81(X)) -> a__U81(mark(X))
   mark(isQid(X)) -> a__isQid(X)
   mark(isNePal(X)) -> a__isNePal(X)
   mark(nil) -> nil
   mark(tt) -> tt
   mark(a) -> a
   mark(e) -> e
   mark(i) -> i
   mark(o) -> o
   mark(u) -> u
   a____(X1, X2) -> __(X1, X2)
   a__U11(X) -> U11(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isList(X) -> isList(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNeList(X) -> isNeList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__U61(X) -> U61(X)
   a__U71(X1, X2) -> U71(X1, X2)
   a__U72(X) -> U72(X)
   a__isPal(X) -> isPal(X)
   a__U81(X) -> U81(X)
   a__isQid(X) -> isQid(X)
   a__isNePal(X) -> isNePal(X)

The set Q consists of the following terms:

   a__isNeList(x0)
   a__U41(x0, x1)
   mark(isList(x0))
   mark(isPal(x0))
   mark(U11(x0))
   mark(u)
   mark(isQid(x0))
   a__U51(x0, x1)
   a__isNePal(x0)
   mark(U61(x0))
   mark(a)
   mark(o)
   mark(tt)
   a__U22(x0)
   mark(e)
   mark(U41(x0, x1))
   mark(__(x0, x1))
   a__isList(x0)
   mark(U81(x0))
   a__U52(x0)
   mark(U22(x0))
   a__U81(x0)
   a__U21(x0, x1)
   a__U42(x0)
   a____(x0, x1)
   mark(U42(x0))
   a__isPal(x0)
   mark(U21(x0, x1))
   mark(i)
   a__isQid(x0)
   mark(U72(x0))
   a__U61(x0)
   a__U72(x0)
   a__U11(x0)
   mark(U51(x0, x1))
   mark(isNeList(x0))
   mark(U31(x0))
   mark(U71(x0, x1))
   mark(U52(x0))
   mark(nil)
   a__U71(x0, x1)
   mark(isNePal(x0))
   a__U31(x0)


----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:mark_1 > u > i > a__isList_1 > a__isQid_1 > a__U51_2 > a__U52_1 > a__U11_1 > U11_1 > a__isNePal_1 > isNePal_1 > isQid_1 > a__U71_2 > a__U61_1 > a__U72_1 > U72_1 > a__isPal_1 > isPal_1 > tt > a__U21_2 > U61_1 > a__U22_1 > a__isNeList_1 > isNeList_1 > a__U31_1 > U21_2 > a__U41_2 > U41_2 > U22_1 > a__U81_1 > U81_1 > a__U42_1 > U71_2 > U52_1 > U51_2 > U42_1 > U31_1 > isList_1 > a_____2 > ___2 > o > e > a > nil

and weight map:

   tt=4
   nil=1
   a=3
   e=3
   i=3
   o=3
   u=3
   a__U11_1=1
   a__U22_1=1
   a__isList_1=3
   a__U31_1=1
   a__U42_1=2
   a__isNeList_1=2
   a__U52_1=1
   a__U61_1=1
   a__U72_1=1
   a__isPal_1=3
   a__U81_1=1
   a__isQid_1=1
   a__isNePal_1=2
   mark_1=0
   U11_1=1
   U22_1=1
   isList_1=3
   U31_1=1
   U42_1=2
   isNeList_1=2
   U52_1=1
   U61_1=1
   U72_1=1
   isPal_1=3
   U81_1=1
   isQid_1=1
   isNePal_1=2
   a__U21_2=0
   a__U41_2=0
   a__U51_2=0
   a__U71_2=0
   ___2=0
   a_____2=0
   U21_2=0
   U41_2=0
   U51_2=0
   U71_2=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__U11(tt) -> tt
   a__U21(tt, V2) -> a__U22(a__isList(V2))
   a__U22(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNeList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isList(V2))
   a__U52(tt) -> tt
   a__U61(tt) -> tt
   a__U71(tt, P) -> a__U72(a__isPal(P))
   a__U72(tt) -> tt
   a__U81(tt) -> tt
   a__isList(V) -> a__U11(a__isNeList(V))
   a__isList(nil) -> tt
   a__isNeList(V) -> a__U31(a__isQid(V))
   a__isNePal(V) -> a__U61(a__isQid(V))
   a__isPal(V) -> a__U81(a__isNePal(V))
   a__isPal(nil) -> tt
   a__isQid(a) -> tt
   a__isQid(e) -> tt
   a__isQid(i) -> tt
   a__isQid(o) -> tt
   a__isQid(u) -> tt
   mark(__(X1, X2)) -> a____(mark(X1), mark(X2))
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isList(X)) -> a__isList(X)
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNeList(X)) -> a__isNeList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(U61(X)) -> a__U61(mark(X))
   mark(U71(X1, X2)) -> a__U71(mark(X1), X2)
   mark(U72(X)) -> a__U72(mark(X))
   mark(isPal(X)) -> a__isPal(X)
   mark(U81(X)) -> a__U81(mark(X))
   mark(isQid(X)) -> a__isQid(X)
   mark(isNePal(X)) -> a__isNePal(X)
   mark(nil) -> nil
   mark(tt) -> tt
   mark(a) -> a
   mark(e) -> e
   mark(i) -> i
   mark(o) -> o
   mark(u) -> u
   a____(X1, X2) -> __(X1, X2)
   a__U11(X) -> U11(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isList(X) -> isList(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNeList(X) -> isNeList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__U61(X) -> U61(X)
   a__U71(X1, X2) -> U71(X1, X2)
   a__U72(X) -> U72(X)
   a__isPal(X) -> isPal(X)
   a__U81(X) -> U81(X)
   a__isQid(X) -> isQid(X)
   a__isNePal(X) -> isNePal(X)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
R is empty.
The set Q consists of the following terms:

   a__isNeList(x0)
   a__U41(x0, x1)
   mark(isList(x0))
   mark(isPal(x0))
   mark(U11(x0))
   mark(u)
   mark(isQid(x0))
   a__U51(x0, x1)
   a__isNePal(x0)
   mark(U61(x0))
   mark(a)
   mark(o)
   mark(tt)
   a__U22(x0)
   mark(e)
   mark(U41(x0, x1))
   mark(__(x0, x1))
   a__isList(x0)
   mark(U81(x0))
   a__U52(x0)
   mark(U22(x0))
   a__U81(x0)
   a__U21(x0, x1)
   a__U42(x0)
   a____(x0, x1)
   mark(U42(x0))
   a__isPal(x0)
   mark(U21(x0, x1))
   mark(i)
   a__isQid(x0)
   mark(U72(x0))
   a__U61(x0)
   a__U72(x0)
   a__U11(x0)
   mark(U51(x0, x1))
   mark(isNeList(x0))
   mark(U31(x0))
   mark(U71(x0, x1))
   mark(U52(x0))
   mark(nil)
   a__U71(x0, x1)
   mark(isNePal(x0))
   a__U31(x0)


----------------------------------------

(5) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(6)
YES
