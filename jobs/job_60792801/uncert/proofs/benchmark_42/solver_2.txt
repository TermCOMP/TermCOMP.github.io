YES

Problem 1: 

(VAR vu95NonEmpty f x xs y)
(RULES
app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
app(app(filter,f),nil) -> nil
app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
app(app(int,app(s,x)),num0) -> nil
app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
app(app(int,num0),num0) -> app(app(cons,num0),nil)
app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
app(app(map,f),nil) -> nil
app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
app(intlist,nil) -> nil
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(cons,x),app(app(filter,f),xs))
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(f,x)),f),x),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(filter2,app(f,x)),f),x)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(filter2,app(f,x)),f)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(filter2,app(f,x))
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(int,app(s,x)),app(s,y)) -> APP(app(int,x),y)
 APP(app(int,app(s,x)),app(s,y)) -> APP(intlist,app(app(int,x),y))
 APP(app(int,num0),app(s,y)) -> APP(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 APP(app(int,num0),app(s,y)) -> APP(app(int,app(s,num0)),app(s,y))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(intlist,app(app(cons,x),y)) -> APP(app(cons,app(s,x)),app(intlist,y))
 APP(intlist,app(app(cons,x),y)) -> APP(intlist,y)
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(cons,x),app(app(filter,f),xs))
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(f,x)),f),x),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(filter2,app(f,x)),f),x)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(filter2,app(f,x)),f)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(filter2,app(f,x))
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(int,app(s,x)),app(s,y)) -> APP(app(int,x),y)
 APP(app(int,app(s,x)),app(s,y)) -> APP(intlist,app(app(int,x),y))
 APP(app(int,num0),app(s,y)) -> APP(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 APP(app(int,num0),app(s,y)) -> APP(app(int,app(s,num0)),app(s,y))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(intlist,app(app(cons,x),y)) -> APP(app(cons,app(s,x)),app(intlist,y))
 APP(intlist,app(app(cons,x),y)) -> APP(intlist,y)
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(intlist,app(app(cons,x),y)) -> APP(intlist,y)
->->-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->->Cycle:
->->-> Pairs:
 APP(app(int,app(s,x)),app(s,y)) -> APP(app(int,x),y)
 APP(app(int,num0),app(s,y)) -> APP(app(int,app(s,num0)),app(s,y))
->->-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->->Cycle:
->->-> Pairs:
 APP(app(app(app(filter2,ffalse),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(f,x)),f),x),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(intlist,app(app(cons,x),y)) -> APP(intlist,y)
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(int,app(s,x)),app(s,y)) -> APP(app(int,x),y)
 APP(app(int,num0),app(s,y)) -> APP(app(int,app(s,num0)),app(s,y))
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 APP(app(int,num0),app(s,y)) -> APP(app(int,app(s,num0)),app(s,y))
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(f,x)),f),x),xs)
 APP(app(filter,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Projection:
 pi(APP) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),f),x),xs) -> APP(app(filter,f),xs)
 APP(app(app(app(filter2,ftrue),f),x),xs) -> APP(app(filter,f),xs)
-> Rules:
 app(app(app(app(filter2,ffalse),f),x),xs) -> app(app(filter,f),xs)
 app(app(app(app(filter2,ftrue),f),x),xs) -> app(app(cons,x),app(app(filter,f),xs))
 app(app(filter,f),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(f,x)),f),x),xs)
 app(app(filter,f),nil) -> nil
 app(app(int,app(s,x)),app(s,y)) -> app(intlist,app(app(int,x),y))
 app(app(int,app(s,x)),num0) -> nil
 app(app(int,num0),app(s,y)) -> app(app(cons,num0),app(app(int,app(s,num0)),app(s,y)))
 app(app(int,num0),num0) -> app(app(cons,num0),nil)
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(intlist,app(app(cons,x),y)) -> app(app(cons,app(s,x)),app(intlist,y))
 app(intlist,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
