YES
proof of /home/ff862203/input_LQnONcAFrb.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 2 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) Induction-Processor [SOUND, 18 ms]
        (27) AND
            (28) QDP
                (29) DependencyGraphProof [EQUIVALENT, 0 ms]
                (30) TRUE
            (31) QTRS
                (32) QTRSRRRProof [EQUIVALENT, 0 ms]
                (33) QTRS
                (34) RisEmptyProof [EQUIVALENT, 0 ms]
                (35) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, x, y) -> mod(minus(x, y), y)
   if_mod(false, s(x), s(y)) -> s(x)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   MINUS(s(x), s(y)) -> MINUS(x, y)
   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   MOD(s(x), s(y)) -> LE(y, x)
   IF_MOD(true, x, y) -> MOD(minus(x, y), y)
   IF_MOD(true, x, y) -> MINUS(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, x, y) -> mod(minus(x, y), y)
   if_mod(false, s(x), s(y)) -> s(x)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, x, y) -> mod(minus(x, y), y)
   if_mod(false, s(x), s(y)) -> s(x)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, x, y) -> mod(minus(x, y), y)
   if_mod(false, s(x), s(y)) -> s(x)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   IF_MOD(true, x, y) -> MOD(minus(x, y), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   mod(0, y) -> 0
   mod(s(x), 0) -> 0
   mod(s(x), s(y)) -> if_mod(le(y, x), s(x), s(y))
   if_mod(true, x, y) -> mod(minus(x, y), y)
   if_mod(false, s(x), s(y)) -> s(x)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   IF_MOD(true, x, y) -> MOD(minus(x, y), y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   if_mod(false, s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   minus(x0, 0)
   mod(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_mod(false, s(x0), s(x1))
   mod(0, x0)
   if_mod(true, x0, x1)
   mod(s(x0), s(x1))
   mod(s(x0), 0)


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   IF_MOD(true, x, y) -> MOD(minus(x, y), y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF_MOD(true, x, y) -> MOD(minus(x, y), y) we obtained the following new rules [LPAR04]:

   (IF_MOD(true, s(z0), s(z1)) -> MOD(minus(s(z0), s(z1)), s(z1)),IF_MOD(true, s(z0), s(z1)) -> MOD(minus(s(z0), s(z1)), s(z1)))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))
   IF_MOD(true, s(z0), s(z1)) -> MOD(minus(s(z0), s(z1)), s(z1))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) Induction-Processor (SOUND)

This DP could be deleted by the Induction-Processor:
IF_MOD(true_renamed, s(z0), s(z1)) -> MOD(minus(s(z0), s(z1)), s(z1))


This order was computed:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(IF_MOD(x_1, x_2, x_3)) = x_2
   POL(MOD(x_1, x_2)) = x_1
   POL(false_renamed) = 1
   POL(le(x_1, x_2)) = x_2
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 1 + x_1
   POL(true_renamed) = 0

At least one of these decreasing rules is always used after the deleted DP:
minus(s(x''), s(y')) -> minus(x'', y')


The following formula is valid:
z2:sort[a0],z3:sort[a0].((~(z2=0)/\~(z3=0))->minus'(z2, z3)=true)


The transformed set:
minus'(x', 0) -> false
minus'(s(x''), s(y')) -> true
minus'(0, s(v11)) -> false
minus(x', 0) -> x'
minus(s(x''), s(y')) -> minus(x'', y')
le(0, y'') -> true_renamed
le(s(x1), 0) -> false_renamed
le(s(x2), s(y1)) -> le(x2, y1)
minus(0, s(v11)) -> 0
equal_bool(true, false) -> false
equal_bool(false, true) -> false
equal_bool(true, true) -> true
equal_bool(false, false) -> true
and(true, x) -> x
and(false, x) -> false
or(true, x) -> true
or(false, x) -> x
not(false) -> true
not(true) -> false
isa_true(true) -> true
isa_true(false) -> false
isa_false(true) -> false
isa_false(false) -> true
equal_sort[a0](0, 0) -> true
equal_sort[a0](0, s(v18)) -> false
equal_sort[a0](s(v19), 0) -> false
equal_sort[a0](s(v19), s(v20)) -> equal_sort[a0](v19, v20)
equal_sort[a19](true_renamed, true_renamed) -> true
equal_sort[a19](true_renamed, false_renamed) -> false
equal_sort[a19](false_renamed, true_renamed) -> false
equal_sort[a19](false_renamed, false_renamed) -> true
equal_sort[a24](witness_sort[a24], witness_sort[a24]) -> true


The proof given by the theorem prover:
The following output was given by the internal theorem prover:proof of internal
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Partial correctness of the following Program

   [x, v18, v19, v20, x', x'', y', v11, y'', x1, x2, y1]
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   true and x -> x
   false and x -> false
   true or x -> true
   false or x -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](0, 0) -> true
   equal_sort[a0](0, s(v18)) -> false
   equal_sort[a0](s(v19), 0) -> false
   equal_sort[a0](s(v19), s(v20)) -> equal_sort[a0](v19, v20)
   equal_sort[a19](true_renamed, true_renamed) -> true
   equal_sort[a19](true_renamed, false_renamed) -> false
   equal_sort[a19](false_renamed, true_renamed) -> false
   equal_sort[a19](false_renamed, false_renamed) -> true
   equal_sort[a24](witness_sort[a24], witness_sort[a24]) -> true
   minus'(x', 0) -> false
   minus'(s(x''), s(y')) -> true
   minus'(0, s(v11)) -> false
   minus(x', 0) -> x'
   minus(s(x''), s(y')) -> minus(x'', y')
   minus(0, s(v11)) -> 0
   le(0, y'') -> true_renamed
   le(s(x1), 0) -> false_renamed
   le(s(x2), s(y1)) -> le(x2, y1)

using the following formula:
z2:sort[a0],z3:sort[a0].((~(z2=0)/\~(z3=0))->minus'(z2, z3)=true)

could be successfully shown:
(0) Formula
(1) Induction by data structure [EQUIVALENT, 1 ms]
(2) AND
    (3) Formula
        (4) Symbolic evaluation [EQUIVALENT, 0 ms]
        (5) YES
    (6) Formula
        (7) Symbolic evaluation [EQUIVALENT, 0 ms]
        (8) Formula
        (9) Case Analysis [EQUIVALENT, 0 ms]
        (10) AND
            (11) Formula
                (12) Symbolic evaluation [EQUIVALENT, 0 ms]
                (13) YES
            (14) Formula
                (15) Symbolic evaluation [EQUIVALENT, 0 ms]
                (16) YES


----------------------------------------

(0)
Obligation:
Formula:
z2:sort[a0],z3:sort[a0].((~(z2=0)/\~(z3=0))->minus'(z2, z3)=true)

There are no hypotheses.




----------------------------------------

(1) Induction by data structure (EQUIVALENT)
Induction by data structure sort[a0] generates the following cases:



1. Base Case:
Formula:
z3:sort[a0].((~(0=0)/\~(z3=0))->minus'(0, z3)=true)

There are no hypotheses.





1. Step Case:
Formula:
n:sort[a0],z3:sort[a0].((~(s(n)=0)/\~(z3=0))->minus'(s(n), z3)=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)






----------------------------------------

(2)
Complex Obligation (AND)

----------------------------------------

(3)
Obligation:
Formula:
z3:sort[a0].((~(0=0)/\~(z3=0))->minus'(0, z3)=true)

There are no hypotheses.




----------------------------------------

(4) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(5)
YES

----------------------------------------

(6)
Obligation:
Formula:
n:sort[a0],z3:sort[a0].((~(s(n)=0)/\~(z3=0))->minus'(s(n), z3)=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)




----------------------------------------

(7) Symbolic evaluation (EQUIVALENT)
Could be shown by simple symbolic evaluation.
----------------------------------------

(8)
Obligation:
Formula:
z3:sort[a0],n:sort[a0].(~(z3=0)->minus'(s(n), z3)=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)




----------------------------------------

(9) Case Analysis (EQUIVALENT)
Case analysis leads to the following new obligations:

Formula:
n:sort[a0].(~(0=0)->minus'(s(n), 0)=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)





Formula:
x_1:sort[a0],n:sort[a0].(~(s(x_1)=0)->minus'(s(n), s(x_1))=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)






----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Formula:
n:sort[a0].(~(0=0)->minus'(s(n), 0)=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)




----------------------------------------

(12) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Formula:
x_1:sort[a0],n:sort[a0].(~(s(x_1)=0)->minus'(s(n), s(x_1))=true)

Hypotheses:
n:sort[a0],!z3:sort[a0].((~(n=0)/\~(z3=0))->minus'(n, z3)=true)




----------------------------------------

(15) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(16)
YES

----------------------------------------

(27)
Complex Obligation (AND)

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(s(x), s(y)) -> IF_MOD(le(y, x), s(x), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE

----------------------------------------

(31)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus'(x', 0) -> false
   minus'(s(x''), s(y')) -> true
   minus'(0, s(v11)) -> false
   minus(x', 0) -> x'
   minus(s(x''), s(y')) -> minus(x'', y')
   le(0, y'') -> true_renamed
   le(s(x1), 0) -> false_renamed
   le(s(x2), s(y1)) -> le(x2, y1)
   minus(0, s(v11)) -> 0
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](0, 0) -> true
   equal_sort[a0](0, s(v18)) -> false
   equal_sort[a0](s(v19), 0) -> false
   equal_sort[a0](s(v19), s(v20)) -> equal_sort[a0](v19, v20)
   equal_sort[a19](true_renamed, true_renamed) -> true
   equal_sort[a19](true_renamed, false_renamed) -> false
   equal_sort[a19](false_renamed, true_renamed) -> false
   equal_sort[a19](false_renamed, false_renamed) -> true
   equal_sort[a24](witness_sort[a24], witness_sort[a24]) -> true

Q is empty.

----------------------------------------

(32) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:isa_true_1 > witness_sort[a24] > equal_sort[a24]_2 > equal_sort[a19]_2 > or_2 > le_2 > equal_sort[a0]_2 > not_1 > isa_false_1 > equal_bool_2 > minus_2 > 0 > false > minus'_2 > true > s_1 > true_renamed > and_2 > false_renamed

and weight map:

   0=4
   false=9
   true=9
   true_renamed=5
   false_renamed=6
   witness_sort[a24]=1
   s_1=1
   not_1=1
   isa_true_1=0
   isa_false_1=1
   minus'_2=5
   minus_2=0
   le_2=0
   equal_bool_2=0
   and_2=0
   or_2=0
   equal_sort[a0]_2=3
   equal_sort[a19]_2=0
   equal_sort[a24]_2=7

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   minus'(x', 0) -> false
   minus'(s(x''), s(y')) -> true
   minus'(0, s(v11)) -> false
   minus(x', 0) -> x'
   minus(s(x''), s(y')) -> minus(x'', y')
   le(0, y'') -> true_renamed
   le(s(x1), 0) -> false_renamed
   le(s(x2), s(y1)) -> le(x2, y1)
   minus(0, s(v11)) -> 0
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](0, 0) -> true
   equal_sort[a0](0, s(v18)) -> false
   equal_sort[a0](s(v19), 0) -> false
   equal_sort[a0](s(v19), s(v20)) -> equal_sort[a0](v19, v20)
   equal_sort[a19](true_renamed, true_renamed) -> true
   equal_sort[a19](true_renamed, false_renamed) -> false
   equal_sort[a19](false_renamed, true_renamed) -> false
   equal_sort[a19](false_renamed, false_renamed) -> true
   equal_sort[a24](witness_sort[a24], witness_sort[a24]) -> true




----------------------------------------

(33)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(34) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(35)
YES
