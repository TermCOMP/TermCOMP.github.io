YES
proof of /home/ff862203/input_jszYEH9xIu.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) QReductionProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QReductionProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QReductionProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) PisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) QDP
        (50) UsableRulesProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) QReductionProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) PisEmptyProof [EQUIVALENT, 0 ms]
        (57) YES
    (58) QDP
        (59) UsableRulesProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) QDPOrderProof [EQUIVALENT, 8 ms]
        (62) QDP
        (63) QDPOrderProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) QDPOrderProof [EQUIVALENT, 0 ms]
        (66) QDP
        (67) QDPOrderProof [EQUIVALENT, 7 ms]
        (68) QDP
        (69) QDPOrderProof [EQUIVALENT, 5 ms]
        (70) QDP
        (71) QDPOrderProof [EQUIVALENT, 4 ms]
        (72) QDP
        (73) DependencyGraphProof [EQUIVALENT, 0 ms]
        (74) QDP
        (75) UsableRulesProof [EQUIVALENT, 0 ms]
        (76) QDP
        (77) QReductionProof [EQUIVALENT, 0 ms]
        (78) QDP
        (79) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (80) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(0, Y)) -> MARK(0)
   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   ACTIVE(minus(s(X), s(Y))) -> MINUS(X, Y)
   ACTIVE(geq(X, 0)) -> MARK(true)
   ACTIVE(geq(0, s(Y))) -> MARK(false)
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   ACTIVE(geq(s(X), s(Y))) -> GEQ(X, Y)
   ACTIVE(div(0, s(Y))) -> MARK(0)
   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   ACTIVE(div(s(X), s(Y))) -> IF(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   ACTIVE(div(s(X), s(Y))) -> GEQ(X, Y)
   ACTIVE(div(s(X), s(Y))) -> S(div(minus(X, Y), s(Y)))
   ACTIVE(div(s(X), s(Y))) -> DIV(minus(X, Y), s(Y))
   ACTIVE(div(s(X), s(Y))) -> MINUS(X, Y)
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   MARK(0) -> ACTIVE(0)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   MARK(true) -> ACTIVE(true)
   MARK(false) -> ACTIVE(false)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(div(X1, X2)) -> DIV(mark(X1), X2)
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> IF(mark(X1), X2, X3)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 8 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   geq(active(x0), x1)
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   geq(x0, mark(x1))
   if(mark(x0), x1, x2)
   s(mark(x0))
   div(mark(x0), x1)
   if(active(x0), x1, x2)
   geq(mark(x0), x1)
   div(x0, mark(x1))
   if(x0, mark(x1), x2)


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   mark(true)
   active(div(s(x0), s(x1)))
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*IF(active(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, active(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(X1, X2, active(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   geq(active(x0), x1)
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   geq(x0, mark(x1))
   if(mark(x0), x1, x2)
   s(mark(x0))
   div(mark(x0), x1)
   if(active(x0), x1, x2)
   geq(mark(x0), x1)
   div(x0, mark(x1))
   if(x0, mark(x1), x2)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(true)
   active(div(s(x0), s(x1)))
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DIV(X1, mark(X2)) -> DIV(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*DIV(mark(X1), X2) -> DIV(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*DIV(active(X1), X2) -> DIV(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*DIV(X1, active(X2)) -> DIV(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   geq(active(x0), x1)
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   geq(x0, mark(x1))
   if(mark(x0), x1, x2)
   s(mark(x0))
   div(mark(x0), x1)
   if(active(x0), x1, x2)
   geq(mark(x0), x1)
   div(x0, mark(x1))
   if(x0, mark(x1), x2)


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(true)
   active(div(s(x0), s(x1)))
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GEQ(X1, mark(X2)) -> GEQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*GEQ(mark(X1), X2) -> GEQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*GEQ(active(X1), X2) -> GEQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*GEQ(X1, active(X2)) -> GEQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   geq(active(x0), x1)
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   geq(x0, mark(x1))
   if(mark(x0), x1, x2)
   s(mark(x0))
   div(mark(x0), x1)
   if(active(x0), x1, x2)
   geq(mark(x0), x1)
   div(x0, mark(x1))
   if(x0, mark(x1), x2)


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   mark(true)
   active(div(s(x0), s(x1)))
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   geq(active(x0), x1)
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   geq(x0, mark(x1))
   if(mark(x0), x1, x2)
   s(mark(x0))
   div(mark(x0), x1)
   if(active(x0), x1, x2)
   geq(mark(x0), x1)
   div(x0, mark(x1))
   if(x0, mark(x1), x2)


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(true)
   active(div(s(x0), s(x1)))
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(X1, mark(X2)) -> MINUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*MINUS(mark(X1), X2) -> MINUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*MINUS(active(X1), X2) -> MINUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*MINUS(X1, active(X2)) -> MINUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))

R is empty.
The set Q consists of the following terms:

   s(active(x0))
   geq(active(x0), x1)
   geq(x0, active(x1))
   geq(x0, mark(x1))
   s(mark(x0))
   geq(mark(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(geq(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(46)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   s(active(x0))
   geq(active(x0), x1)
   geq(x0, active(x1))
   geq(x0, mark(x1))
   s(mark(x0))
   geq(mark(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   active(div(s(x0), s(x1)))
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))

R is empty.
The set Q consists of the following terms:

   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   minus(x0, mark(x1))
   s(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(minus(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(55)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   minus(active(x0), x1)
   minus(x0, mark(x1))
   s(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(57)
YES

----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(s(X)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(s(X)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> ACTIVE(s(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(div(x_1, x_2)) = 1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = 1
   POL(mark(x_1)) = 0
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(s(X)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(div(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = 1 + x_1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = x_1
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(s(X)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = x_1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 1
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(div(x_1, x_2)) = 0
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = 1
   POL(mark(x_1)) = 0
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)


----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1 + x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = x_1 + x_2
   POL(false) = 1
   POL(geq(x_1, x_2)) = 1
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 1
   POL(true) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(if(false, X, Y)) -> mark(Y)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(minus(0, Y)) -> mark(0)
   active(div(0, s(Y))) -> mark(0)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)

The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(X1, X2, X3)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   if(x0, x1, mark(x2))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   if(mark(x0), x1, x2)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   if(active(x0), x1, x2)
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   if(x0, mark(x1), x2)
   active(minus(0, x0))
   active(geq(0, s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(active(x0), x1)
   mark(true)
   div(x0, active(x1))
   minus(x0, active(x1))
   minus(mark(x0), x1)
   s(active(x0))
   active(div(s(x0), s(x1)))
   minus(active(x0), x1)
   geq(active(x0), x1)
   active(div(0, s(x0)))
   mark(if(x0, x1, x2))
   minus(x0, mark(x1))
   geq(x0, active(x1))
   active(geq(x0, 0))
   mark(div(x0, x1))
   geq(x0, mark(x1))
   mark(0)
   active(if(true, x0, x1))
   mark(s(x0))
   active(geq(s(x0), s(x1)))
   s(mark(x0))
   mark(minus(x0, x1))
   div(mark(x0), x1)
   mark(geq(x0, x1))
   active(if(false, x0, x1))
   geq(mark(x0), x1)
   active(minus(s(x0), s(x1)))
   div(x0, mark(x1))
   mark(false)
   active(minus(0, x0))
   active(geq(0, s(x0)))


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(X1, X2, X3)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   if(x0, x1, active(x2))
   if(x0, active(x1), x2)
   if(x0, x1, mark(x2))
   if(mark(x0), x1, x2)
   if(active(x0), x1, x2)
   if(x0, mark(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(if(X1, X2, X3)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(80)
YES
