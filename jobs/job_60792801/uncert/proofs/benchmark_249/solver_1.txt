YES
proof of /home/ff862203/input_w4dUhKcvos.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 31 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 7 ms]
(10) QTRS
(11) QTRSRRRProof [EQUIVALENT, 0 ms]
(12) QTRS
(13) DependencyPairsProof [EQUIVALENT, 0 ms]
(14) QDP
(15) DependencyGraphProof [EQUIVALENT, 0 ms]
(16) QDP
(17) UsableRulesProof [EQUIVALENT, 0 ms]
(18) QDP
(19) QReductionProof [EQUIVALENT, 0 ms]
(20) QDP
(21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(0) -> cons(0, f(s(0)))
   a__f(s(0)) -> a__f(a__p(s(0)))
   a__p(s(X)) -> mark(X)
   mark(f(X)) -> a__f(mark(X))
   mark(p(X)) -> a__p(mark(X))
   mark(0) -> 0
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   a__f(X) -> f(X)
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__f(x_1)) = 2 + 2*x_1
   POL(a__p(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(f(x_1)) = 2 + 2*x_1
   POL(mark(x_1)) = 2*x_1
   POL(p(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(f(X)) -> a__f(mark(X))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(0) -> cons(0, f(s(0)))
   a__f(s(0)) -> a__f(a__p(s(0)))
   a__p(s(X)) -> mark(X)
   mark(p(X)) -> a__p(mark(X))
   mark(0) -> 0
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   a__f(X) -> f(X)
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__f(x_1)) = 1 + 2*x_1
   POL(a__p(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(p(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__f(0) -> cons(0, f(s(0)))
   a__f(X) -> f(X)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   a__p(s(X)) -> mark(X)
   mark(p(X)) -> a__p(mark(X))
   mark(0) -> 0
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__f(x_1)) = 2*x_1
   POL(a__p(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(mark(x_1)) = 2*x_1
   POL(p(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(cons(X1, X2)) -> cons(mark(X1), X2)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   a__p(s(X)) -> mark(X)
   mark(p(X)) -> a__p(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(a__f(x_1)) = 2*x_1
   POL(a__p(x_1)) = x_1
   POL(mark(x_1)) = 2*x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(0) -> 0




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   a__p(s(X)) -> mark(X)
   mark(p(X)) -> a__p(mark(X))
   mark(s(X)) -> s(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
a__f/1(YES)
s/1(YES)
0/0)
a__p/1)YES(
mark/1)YES(
p/1)YES(

Quasi precedence:
[a__f_1, 0] > s_1


Status:
a__f_1: multiset status
s_1: multiset status
0: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__p(s(X)) -> mark(X)




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   mark(p(X)) -> a__p(mark(X))
   mark(s(X)) -> s(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__f(x_1)) = x_1
   POL(a__p(x_1)) = x_1
   POL(mark(x_1)) = 2 + 2*x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(s(X)) -> s(mark(X))




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   mark(p(X)) -> a__p(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(13) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(s(0)) -> A__F(a__p(s(0)))
   A__F(s(0)) -> A__P(s(0))
   MARK(p(X)) -> A__P(mark(X))
   MARK(p(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   mark(p(X)) -> a__p(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(p(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__f(s(0)) -> a__f(a__p(s(0)))
   mark(p(X)) -> a__p(mark(X))
   a__p(X) -> p(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(p(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(cons(x0, x1))
   a__f(x0)
   mark(p(x0))
   mark(0)
   a__p(x0)
   mark(s(x0))
   mark(f(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(p(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(p(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES
