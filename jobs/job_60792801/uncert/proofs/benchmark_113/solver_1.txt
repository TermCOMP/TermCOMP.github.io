YES
proof of /home/ff862203/input_DtbqXPNFwy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 15 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) QReductionProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QReductionProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QReductionProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) QDP
        (48) UsableRulesProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) QReductionProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) PisEmptyProof [EQUIVALENT, 0 ms]
        (55) YES
    (56) QDP
        (57) UsableRulesProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) QReductionProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (62) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(0, 0)) -> MARK(true)
   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   ACTIVE(eq(s(X), s(Y))) -> EQ(X, Y)
   ACTIVE(eq(X, Y)) -> MARK(false)
   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   ACTIVE(inf(X)) -> CONS(X, inf(s(X)))
   ACTIVE(inf(X)) -> INF(s(X))
   ACTIVE(inf(X)) -> S(X)
   ACTIVE(take(0, X)) -> MARK(nil)
   ACTIVE(take(s(X), cons(Y, L))) -> MARK(cons(Y, take(X, L)))
   ACTIVE(take(s(X), cons(Y, L))) -> CONS(Y, take(X, L))
   ACTIVE(take(s(X), cons(Y, L))) -> TAKE(X, L)
   ACTIVE(length(nil)) -> MARK(0)
   ACTIVE(length(cons(X, L))) -> MARK(s(length(L)))
   ACTIVE(length(cons(X, L))) -> S(length(L))
   ACTIVE(length(cons(X, L))) -> LENGTH(L)
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   MARK(0) -> ACTIVE(0)
   MARK(true) -> ACTIVE(true)
   MARK(s(X)) -> ACTIVE(s(X))
   MARK(false) -> ACTIVE(false)
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))
   MARK(inf(X)) -> INF(mark(X))
   MARK(inf(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(nil) -> ACTIVE(nil)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   INF(mark(X)) -> INF(X)
   INF(active(X)) -> INF(X)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 8 SCCs with 27 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAKE(X1, mark(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*TAKE(mark(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(active(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(X1, active(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(active(X)) -> INF(X)
   INF(mark(X)) -> INF(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(active(X)) -> INF(X)
   INF(mark(X)) -> INF(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(active(X)) -> INF(X)
   INF(mark(X)) -> INF(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INF(active(X)) -> INF(X)
The graph contains the following edges 1 > 1


*INF(mark(X)) -> INF(X)
The graph contains the following edges 1 > 1


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inf(active(x0))
   s(active(x0))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   cons(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   cons(active(x0), x1)
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   active(take(s(x0), cons(x1, x2)))
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   mark(cons(x0, x1))
   mark(nil)
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(X1, mark(X2)) -> EQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*EQ(mark(X1), X2) -> EQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*EQ(active(X1), X2) -> EQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*EQ(X1, active(X2)) -> EQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   active(length(cons(x0, x1)))
   length(active(x0))
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   mark(take(x0, x1))
   cons(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))

R is empty.
The set Q consists of the following terms:

   s(active(x0))
   eq(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   eq(x0, active(x1))
   s(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(eq(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(53)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   s(active(x0))
   eq(mark(x0), x1)
   eq(x0, mark(x1))
   eq(active(x0), x1)
   eq(x0, active(x1))
   s(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(take(X1, X2)) -> MARK(X1)
   MARK(inf(X)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(take(X1, X2)) -> MARK(X1)
   MARK(inf(X)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(length(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   mark(inf(x0))
   inf(active(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   length(active(x0))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   take(mark(x0), x1)
   length(mark(x0))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   take(x0, mark(x1))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   inf(mark(x0))
   take(active(x0), x1)
   mark(nil)
   take(x0, active(x1))
   active(eq(x0, x1))
   mark(false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(inf(x0))
   mark(true)
   mark(eq(x0, x1))
   s(active(x0))
   active(length(cons(x0, x1)))
   eq(mark(x0), x1)
   cons(x0, mark(x1))
   active(take(s(x0), cons(x1, x2)))
   cons(mark(x0), x1)
   active(length(nil))
   active(take(0, x0))
   eq(x0, mark(x1))
   mark(take(x0, x1))
   eq(active(x0), x1)
   cons(x0, active(x1))
   eq(x0, active(x1))
   mark(0)
   active(inf(x0))
   mark(length(x0))
   mark(s(x0))
   cons(active(x0), x1)
   mark(cons(x0, x1))
   s(mark(x0))
   mark(nil)
   active(eq(x0, x1))
   mark(false)


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(take(X1, X2)) -> MARK(X1)
   MARK(inf(X)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(length(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   inf(active(x0))
   length(active(x0))
   take(mark(x0), x1)
   length(mark(x0))
   take(x0, mark(x1))
   inf(mark(x0))
   take(active(x0), x1)
   take(x0, active(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(take(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(inf(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(take(X1, X2)) -> MARK(X2)
The graph contains the following edges 1 > 1


*MARK(length(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(62)
YES
