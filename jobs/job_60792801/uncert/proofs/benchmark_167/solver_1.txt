YES
proof of /home/ff862203/input_D9emCkcXvy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) QDPOrderProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) DependencyGraphProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(g(X), Y)) -> MARK(f(X, f(g(X), Y)))
   ACTIVE(f(g(X), Y)) -> F(X, f(g(X), Y))
   MARK(f(X1, X2)) -> ACTIVE(f(mark(X1), X2))
   MARK(f(X1, X2)) -> F(mark(X1), X2)
   MARK(f(X1, X2)) -> MARK(X1)
   MARK(g(X)) -> ACTIVE(g(mark(X)))
   MARK(g(X)) -> G(mark(X))
   MARK(g(X)) -> MARK(X)
   F(mark(X1), X2) -> F(X1, X2)
   F(X1, mark(X2)) -> F(X1, X2)
   F(active(X1), X2) -> F(X1, X2)
   F(X1, active(X2)) -> F(X1, X2)
   G(mark(X)) -> G(X)
   G(active(X)) -> G(X)

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(active(X)) -> G(X)
   G(mark(X)) -> G(X)

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(active(X)) -> G(X)
   G(mark(X)) -> G(X)

R is empty.
The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   f(active(x0), x1)


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(active(X)) -> G(X)
   G(mark(X)) -> G(X)

R is empty.
The set Q consists of the following terms:

   active(f(g(x0), x1))
   mark(g(x0))
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G(active(X)) -> G(X)
The graph contains the following edges 1 > 1


*G(mark(X)) -> G(X)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2)) -> F(X1, X2)
   F(mark(X1), X2) -> F(X1, X2)
   F(active(X1), X2) -> F(X1, X2)
   F(X1, active(X2)) -> F(X1, X2)

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2)) -> F(X1, X2)
   F(mark(X1), X2) -> F(X1, X2)
   F(active(X1), X2) -> F(X1, X2)
   F(X1, active(X2)) -> F(X1, X2)

R is empty.
The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   f(active(x0), x1)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2)) -> F(X1, X2)
   F(mark(X1), X2) -> F(X1, X2)
   F(active(X1), X2) -> F(X1, X2)
   F(X1, active(X2)) -> F(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(f(g(x0), x1))
   mark(g(x0))
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(X1, mark(X2)) -> F(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*F(mark(X1), X2) -> F(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*F(active(X1), X2) -> F(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*F(X1, active(X2)) -> F(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2)) -> ACTIVE(f(mark(X1), X2))
   ACTIVE(f(g(X), Y)) -> MARK(f(X, f(g(X), Y)))
   MARK(f(X1, X2)) -> MARK(X1)
   MARK(g(X)) -> ACTIVE(g(mark(X)))
   MARK(g(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(f(g(X), Y)) -> MARK(f(X, f(g(X), Y)))
   MARK(g(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

f(x1, x2)  =  x1

ACTIVE(x1)  =  x1

mark(x1)  =  x1

g(x1)  =  g(x1)

active(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   g_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(g(X)) -> active(g(mark(X)))
   f(X1, mark(X2)) -> f(X1, X2)
   f(mark(X1), X2) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(active(X)) -> g(X)
   g(mark(X)) -> g(X)


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2)) -> ACTIVE(f(mark(X1), X2))
   MARK(f(X1, X2)) -> MARK(X1)
   MARK(g(X)) -> ACTIVE(g(mark(X)))

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   active(f(g(X), Y)) -> mark(f(X, f(g(X), Y)))
   mark(f(X1, X2)) -> active(f(mark(X1), X2))
   mark(g(X)) -> active(g(mark(X)))
   f(mark(X1), X2) -> f(X1, X2)
   f(X1, mark(X2)) -> f(X1, X2)
   f(active(X1), X2) -> f(X1, X2)
   f(X1, active(X2)) -> f(X1, X2)
   g(mark(X)) -> g(X)
   g(active(X)) -> g(X)

The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   g(mark(x0))
   g(active(x0))
   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   active(f(g(x0), x1))
   mark(g(x0))
   f(active(x0), x1)
   mark(f(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(mark(x0))
   g(active(x0))
   active(f(g(x0), x1))
   mark(g(x0))
   mark(f(x0, x1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   f(x0, active(x1))
   f(x0, mark(x1))
   f(mark(x0), x1)
   f(active(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(f(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES
