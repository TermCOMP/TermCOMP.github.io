YES

Problem 1: 

(VAR vu95NonEmpty L X X1 X2 XS Y YS)
(RULES
active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
active(app(nil,YS)) -> mark(YS)
active(from(X)) -> mark(cons(X,from(s(X))))
active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
active(zWadr(nil,YS)) -> mark(nil)
active(zWadr(XS,nil)) -> mark(nil)
app(active(X1),X2) -> app(X1,X2)
app(mark(X1),X2) -> app(X1,X2)
app(X1,active(X2)) -> app(X1,X2)
app(X1,mark(X2)) -> app(X1,X2)
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
from(active(X)) -> from(X)
from(mark(X)) -> from(X)
mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
mark(from(X)) -> active(from(mark(X)))
mark(prefix(X)) -> active(prefix(mark(X)))
mark(s(X)) -> active(s(mark(X)))
mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
mark(nil) -> active(nil)
prefix(active(X)) -> prefix(X)
prefix(mark(X)) -> prefix(X)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
zWadr(active(X1),X2) -> zWadr(X1,X2)
zWadr(mark(X1),X2) -> zWadr(X1,X2)
zWadr(X1,active(X2)) -> zWadr(X1,X2)
zWadr(X1,mark(X2)) -> zWadr(X1,X2)
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> APP(XS,YS)
 ACTIVE(app(cons(X,XS),YS)) -> CONS(X,app(XS,YS))
 ACTIVE(app(cons(X,XS),YS)) -> MARK(cons(X,app(XS,YS)))
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(prefix(L)) -> CONS(nil,zWadr(L,prefix(L)))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(prefix(L)) -> ZWADR(L,prefix(L))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> APP(Y,cons(X,nil))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(app(Y,cons(X,nil)),zWadr(XS,YS))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(X,nil)
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> ZWADR(XS,YS)
 ACTIVE(zWadr(nil,YS)) -> MARK(nil)
 ACTIVE(zWadr(XS,nil)) -> MARK(nil)
 APP(active(X1),X2) -> APP(X1,X2)
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(prefix(X)) -> PREFIX(mark(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
 MARK(zWadr(X1,X2)) -> ZWADR(mark(X1),mark(X2))
 PREFIX(active(X)) -> PREFIX(X)
 PREFIX(mark(X)) -> PREFIX(X)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 ZWADR(active(X1),X2) -> ZWADR(X1,X2)
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> APP(XS,YS)
 ACTIVE(app(cons(X,XS),YS)) -> CONS(X,app(XS,YS))
 ACTIVE(app(cons(X,XS),YS)) -> MARK(cons(X,app(XS,YS)))
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(prefix(L)) -> CONS(nil,zWadr(L,prefix(L)))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(prefix(L)) -> ZWADR(L,prefix(L))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> APP(Y,cons(X,nil))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(app(Y,cons(X,nil)),zWadr(XS,YS))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(X,nil)
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> ZWADR(XS,YS)
 ACTIVE(zWadr(nil,YS)) -> MARK(nil)
 ACTIVE(zWadr(XS,nil)) -> MARK(nil)
 APP(active(X1),X2) -> APP(X1,X2)
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> APP(mark(X1),mark(X2))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(prefix(X)) -> PREFIX(mark(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
 MARK(zWadr(X1,X2)) -> ZWADR(mark(X1),mark(X2))
 PREFIX(active(X)) -> PREFIX(X)
 PREFIX(mark(X)) -> PREFIX(X)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 ZWADR(active(X1),X2) -> ZWADR(X1,X2)
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZWADR(active(X1),X2) -> ZWADR(X1,X2)
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 PREFIX(active(X)) -> PREFIX(X)
 PREFIX(mark(X)) -> PREFIX(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 APP(active(X1),X2) -> APP(X1,X2)
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->->Cycle:
->->-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> MARK(cons(X,app(XS,YS)))
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)


The problem is decomposed in 7 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZWADR(active(X1),X2) -> ZWADR(X1,X2)
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(ZWADR) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZWADR(X1,active(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(ZWADR) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(S) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 PREFIX(active(X)) -> PREFIX(X)
 PREFIX(mark(X)) -> PREFIX(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(PREFIX) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(FROM) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(CONS) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 APP(active(X1),X2) -> APP(X1,X2)
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(APP) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 APP(X1,active(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(APP) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> MARK(cons(X,app(XS,YS)))
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[from](X) = 2.X + 2
[mark](X) = X
[prefix](X) = 2.X + 2
[s](X) = 2.X
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X + 2
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[MARK](X) = 2.X + 2
[PREFIX](X) = 0
[S](X) = 0
[ZWADR](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(app(nil,YS)) -> MARK(YS)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[from](X) = 2.X + 2
[mark](X) = X
[prefix](X) = 2.X + 2
[s](X) = 2.X + 1
[zWadr](X1,X2) = 2.X1 + 2.X2 + 1
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X + 2
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[MARK](X) = 2.X + 2
[PREFIX](X) = 0
[S](X) = 0
[ZWADR](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + X2
[cons](X1,X2) = 2.X1 + 1
[from](X) = 2.X + 2
[mark](X) = X
[prefix](X) = 2.X + 2
[s](X) = 2.X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 1
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X + 2
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[MARK](X) = 2.X + 2
[PREFIX](X) = 0
[S](X) = 0
[ZWADR](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(prefix(L)) -> MARK(cons(nil,zWadr(L,prefix(L))))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + 2.X2
[cons](X1,X2) = X1 + 1
[from](X) = X + 1
[mark](X) = X
[prefix](X) = 2.X + 2
[s](X) = 2.X + 1
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X + 2
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[MARK](X) = 2.X + 2
[PREFIX](X) = 0
[S](X) = 0
[ZWADR](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> MARK(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + X2
[cons](X1,X2) = 2.X1
[from](X) = 2.X + 2
[mark](X) = X
[prefix](X) = 2.X + 1
[s](X) = 2.X + 2
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[MARK](X) = 2.X
[PREFIX](X) = 0
[S](X) = 0
[ZWADR](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 MARK(app(X1,X2)) -> ACTIVE(app(mark(X1),mark(X2)))
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> ACTIVE(prefix(mark(X)))
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> ACTIVE(zWadr(mark(X1),mark(X2)))
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)

Problem 1.7: 

Subterm Processor:
-> Pairs:
 MARK(app(X1,X2)) -> MARK(X1)
 MARK(app(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(prefix(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(zWadr(X1,X2)) -> MARK(X1)
 MARK(zWadr(X1,X2)) -> MARK(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Projection:
 pi(MARK) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(XS,nil)) -> mark(nil)
 app(active(X1),X2) -> app(X1,X2)
 app(mark(X1),X2) -> app(X1,X2)
 app(X1,active(X2)) -> app(X1,X2)
 app(X1,mark(X2)) -> app(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 mark(app(X1,X2)) -> active(app(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(prefix(X)) -> active(prefix(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(zWadr(X1,X2)) -> active(zWadr(mark(X1),mark(X2)))
 mark(nil) -> active(nil)
 prefix(active(X)) -> prefix(X)
 prefix(mark(X)) -> prefix(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 zWadr(active(X1),X2) -> zWadr(X1,X2)
 zWadr(mark(X1),X2) -> zWadr(X1,X2)
 zWadr(X1,active(X2)) -> zWadr(X1,X2)
 zWadr(X1,mark(X2)) -> zWadr(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
