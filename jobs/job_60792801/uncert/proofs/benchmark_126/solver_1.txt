YES
proof of /home/ff862203/input_YXkhxT7Pog.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) QDP
        (18) UsableRulesProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 7 ms]
        (26) QDP
        (27) DependencyGraphProof [EQUIVALENT, 0 ms]
        (28) AND
            (29) QDP
                (30) QDPOrderProof [EQUIVALENT, 5 ms]
                (31) QDP
                (32) PisEmptyProof [EQUIVALENT, 0 ms]
                (33) YES
            (34) QDP
                (35) QDPOrderProof [EQUIVALENT, 7 ms]
                (36) QDP
                (37) PisEmptyProof [EQUIVALENT, 0 ms]
                (38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(g(X)) -> mark(h(X))
   active(c) -> mark(d)
   active(h(d)) -> mark(g(c))
   proper(g(X)) -> g(proper(X))
   proper(h(X)) -> h(proper(X))
   proper(c) -> ok(c)
   proper(d) -> ok(d)
   g(ok(X)) -> ok(g(X))
   h(ok(X)) -> ok(h(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   h(ok(x0))
   active(g(x0))
   proper(h(x0))
   active(h(d))
   g(ok(x0))
   active(c)
   top(ok(x0))
   proper(g(x0))
   top(mark(x0))
   proper(c)
   proper(d)


----------------------------------------

(1) QTRS Reverse (SOUND)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(active(X)) -> H(mark(X))
   G(active(X)) -> MARK(X)
   C'(active(x)) -> D'(mark(x))
   C'(active(x)) -> MARK(x)
   D'(h(active(x))) -> C'(g(mark(x)))
   D'(h(active(x))) -> G(mark(x))
   D'(h(active(x))) -> MARK(x)
   G(proper(X)) -> G(X)
   H(proper(X)) -> H(X)
   C'(proper(x)) -> C'(ok(x))
   C'(proper(x)) -> OK(x)
   D'(proper(x)) -> D'(ok(x))
   D'(proper(x)) -> OK(x)
   OK(g(X)) -> G(ok(X))
   OK(g(X)) -> OK(X)
   OK(h(X)) -> H(ok(X))
   OK(h(X)) -> OK(X)

The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(proper(X)) -> H(X)

The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(proper(X)) -> H(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*H(proper(X)) -> H(X)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(proper(X)) -> G(X)

The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(proper(X)) -> G(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G(proper(X)) -> G(X)
The graph contains the following edges 1 > 1


----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   OK(h(X)) -> OK(X)
   OK(g(X)) -> OK(X)

The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   OK(h(X)) -> OK(X)
   OK(g(X)) -> OK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*OK(h(X)) -> OK(X)
The graph contains the following edges 1 > 1


*OK(g(X)) -> OK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(active(x))) -> C'(g(mark(x)))
   C'(active(x)) -> D'(mark(x))
   D'(proper(x)) -> D'(ok(x))
   C'(proper(x)) -> C'(ok(x))

The TRS R consists of the following rules:

   g(active(X)) -> h(mark(X))
   c'(active(x)) -> d'(mark(x))
   d'(h(active(x))) -> c'(g(mark(x)))
   g(proper(X)) -> proper(g(X))
   h(proper(X)) -> proper(h(X))
   c'(proper(x)) -> c'(ok(x))
   d'(proper(x)) -> d'(ok(x))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   mark(top(X)) -> proper(top(X))
   ok(top(X)) -> active(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(active(x))) -> C'(g(mark(x)))
   C'(active(x)) -> D'(mark(x))
   D'(proper(x)) -> D'(ok(x))
   C'(proper(x)) -> C'(ok(x))

The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   D'(h(active(x))) -> C'(g(mark(x)))
   C'(active(x)) -> D'(mark(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(C'(x_1)) = 2*x_1
   POL(D'(x_1)) = 4
   POL(active(x_1)) = 4
   POL(g(x_1)) = 0
   POL(h(x_1)) = 0
   POL(mark(x_1)) = 0
   POL(ok(x_1)) = 4*x_1
   POL(proper(x_1)) = 4*x_1
   POL(top(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(proper(x)) -> D'(ok(x))
   C'(proper(x)) -> C'(ok(x))

The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(28)
Complex Obligation (AND)

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(proper(x)) -> C'(ok(x))

The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C'(proper(x)) -> C'(ok(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(C'(x_1)) = 2*x_1
   POL(active(x_1)) = 2
   POL(g(x_1)) = 3 + 4*x_1
   POL(h(x_1)) = 1 + 2*x_1
   POL(mark(x_1)) = 5
   POL(ok(x_1)) = 3 + 4*x_1
   POL(proper(x_1)) = 4 + 5*x_1
   POL(top(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))


----------------------------------------

(31)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(proper(x)) -> D'(ok(x))

The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   D'(proper(x)) -> D'(ok(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( D'_1(x_1) ) = x_1 + 1
POL( ok_1(x_1) ) = x_1
POL( g_1(x_1) ) = 2x_1 + 2
POL( h_1(x_1) ) = 2x_1
POL( top_1(x_1) ) = 0
POL( active_1(x_1) ) = max{0, -2}
POL( proper_1(x_1) ) = x_1 + 1
POL( mark_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))


----------------------------------------

(36)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   ok(g(X)) -> g(ok(X))
   ok(h(X)) -> h(ok(X))
   ok(top(X)) -> active(top(X))
   h(proper(X)) -> proper(h(X))
   g(active(X)) -> h(mark(X))
   g(proper(X)) -> proper(g(X))
   mark(top(X)) -> proper(top(X))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(38)
YES
