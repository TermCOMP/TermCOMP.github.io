YES
proof of /home/ff862203/input_3Gxi8NP4p4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPOrderProof [EQUIVALENT, 12 ms]
        (41) QDP
        (42) PisEmptyProof [EQUIVALENT, 0 ms]
        (43) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(n), s(m)) -> EQ(n, m)
   LE(s(n), s(m)) -> LE(n, m)
   MIN(cons(n, cons(m, x))) -> IF_MIN(le(n, m), cons(n, cons(m, x)))
   MIN(cons(n, cons(m, x))) -> LE(n, m)
   IF_MIN(true, cons(n, cons(m, x))) -> MIN(cons(n, x))
   IF_MIN(false, cons(n, cons(m, x))) -> MIN(cons(m, x))
   REPLACE(n, m, cons(k, x)) -> IF_REPLACE(eq(n, k), n, m, cons(k, x))
   REPLACE(n, m, cons(k, x)) -> EQ(n, k)
   IF_REPLACE(false, n, m, cons(k, x)) -> REPLACE(n, m, x)
   SORT(cons(n, x)) -> MIN(cons(n, x))
   SORT(cons(n, x)) -> SORT(replace(min(cons(n, x)), n, x))
   SORT(cons(n, x)) -> REPLACE(min(cons(n, x)), n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 4 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(n), s(m)) -> LE(n, m)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(n), s(m)) -> LE(n, m)

R is empty.
The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(n), s(m)) -> LE(n, m)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(n), s(m)) -> LE(n, m)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(n, cons(m, x))) -> IF_MIN(le(n, m), cons(n, cons(m, x)))
   IF_MIN(true, cons(n, cons(m, x))) -> MIN(cons(n, x))
   IF_MIN(false, cons(n, cons(m, x))) -> MIN(cons(m, x))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(n, cons(m, x))) -> IF_MIN(le(n, m), cons(n, cons(m, x)))
   IF_MIN(true, cons(n, cons(m, x))) -> MIN(cons(n, x))
   IF_MIN(false, cons(n, cons(m, x))) -> MIN(cons(m, x))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   sort(cons(x0, x1))
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(n, cons(m, x))) -> IF_MIN(le(n, m), cons(n, cons(m, x)))
   IF_MIN(true, cons(n, cons(m, x))) -> MIN(cons(n, x))
   IF_MIN(false, cons(n, cons(m, x))) -> MIN(cons(m, x))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), s(x1))
   le(s(x0), 0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_MIN(true, cons(n, cons(m, x))) -> MIN(cons(n, x))
   IF_MIN(false, cons(n, cons(m, x))) -> MIN(cons(m, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MIN(x1)  =  x1

cons(x1, x2)  =  cons(x2)

IF_MIN(x1, x2)  =  x2


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(n, cons(m, x))) -> IF_MIN(le(n, m), cons(n, cons(m, x)))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), s(x1))
   le(s(x0), 0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(20)
TRUE

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(n), s(m)) -> EQ(n, m)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(n), s(m)) -> EQ(n, m)

R is empty.
The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(n), s(m)) -> EQ(n, m)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(n), s(m)) -> EQ(n, m)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(n, m, cons(k, x)) -> IF_REPLACE(eq(n, k), n, m, cons(k, x))
   IF_REPLACE(false, n, m, cons(k, x)) -> REPLACE(n, m, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(n, m, cons(k, x)) -> IF_REPLACE(eq(n, k), n, m, cons(k, x))
   IF_REPLACE(false, n, m, cons(k, x)) -> REPLACE(n, m, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   min(cons(0, nil))
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(n, m, cons(k, x)) -> IF_REPLACE(eq(n, k), n, m, cons(k, x))
   IF_REPLACE(false, n, m, cons(k, x)) -> REPLACE(n, m, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)

The set Q consists of the following terms:

   eq(0, 0)
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF_REPLACE(false, n, m, cons(k, x)) -> REPLACE(n, m, x)
The graph contains the following edges 2 >= 1, 3 >= 2, 4 > 3


*REPLACE(n, m, cons(k, x)) -> IF_REPLACE(eq(n, k), n, m, cons(k, x))
The graph contains the following edges 1 >= 2, 2 >= 3, 3 >= 4


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SORT(cons(n, x)) -> SORT(replace(min(cons(n, x)), n, x))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)
   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   sort(nil) -> nil
   sort(cons(n, x)) -> cons(min(cons(n, x)), sort(replace(min(cons(n, x)), n, x)))

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SORT(cons(n, x)) -> SORT(replace(min(cons(n, x)), n, x))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   sort(nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   sort(cons(x0, x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   sort(nil)
   sort(cons(x0, x1))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SORT(cons(n, x)) -> SORT(replace(min(cons(n, x)), n, x))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SORT(cons(n, x)) -> SORT(replace(min(cons(n, x)), n, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( SORT_1(x_1) ) = 2x_1 + 2
POL( replace_3(x_1, ..., x_3) ) = 2x_2 + x_3 + 1
POL( min_1(x_1) ) = max{0, x_1 - 1}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( 0 ) = 2
POL( nil ) = 1
POL( s_1(x_1) ) = 2
POL( if_min_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}
POL( le_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( true ) = 0
POL( false ) = 0
POL( if_replace_4(x_1, ..., x_4) ) = 2x_3 + x_4 + 1
POL( eq_2(x_1, x_2) ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))


----------------------------------------

(41)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, nil)
   eq(0, 0)
   min(cons(0, nil))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   le(0, x0)
   le(s(x0), s(x1))
   le(s(x0), 0)
   if_min(true, cons(x0, cons(x1, x2)))
   if_min(false, cons(x0, cons(x1, x2)))
   min(cons(s(x0), nil))
   eq(s(x0), s(x1))
   eq(0, s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(43)
YES
