YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 X3 Y Z)
(RULES
au95u95add(num0,X) -> mark(X)
au95u95add(s(X),Y) -> s(add(X,Y))
au95u95add(X1,X2) -> add(X1,X2)
au95u95and(ffalse,Y) -> ffalse
au95u95and(ftrue,X) -> mark(X)
au95u95and(X1,X2) -> and(X1,X2)
au95u95first(num0,X) -> nil
au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
au95u95first(X1,X2) -> first(X1,X2)
au95u95from(X) -> cons(X,from(s(X)))
au95u95from(X) -> from(X)
au95u95if(ffalse,X,Y) -> mark(Y)
au95u95if(ftrue,X,Y) -> mark(X)
au95u95if(X1,X2,X3) -> if(X1,X2,X3)
mark(num0) -> num0
mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
mark(cons(X1,X2)) -> cons(X1,X2)
mark(ffalse) -> ffalse
mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
mark(from(X)) -> au95u95from(X)
mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
mark(nil) -> nil
mark(s(X)) -> s(X)
mark(ftrue) -> ftrue
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> AU95U95FIRST(mark(X1),mark(X2))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> AU95U95FROM(X)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> AU95U95FIRST(mark(X1),mark(X2))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> AU95U95FROM(X)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = 2.X1 + 2.X2 + 1
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95first](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95from](X) = 2
[au95u95if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X
[num0] = 2
[add](X1,X2) = 2.X1 + X2 + 1
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[ffalse] = 1
[first](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 1
[if](X1,X2,X3) = 2.X1 + 2.X2 + X3 + 1
[nil] = 0
[s](X) = 2.X + 2
[ftrue] = 2
[AU95U95ADD](X1,X2) = X1 + 2.X2 + 2
[AU95U95AND](X1,X2) = X1 + 2.X2
[AU95U95FIRST](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95IF](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95AND(ftrue,X) -> MARK(X)
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95first](X1,X2) = X1 + X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X + 2
[num0] = 2
[add](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + X2 + 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[ffalse] = 1
[first](X1,X2) = X1 + X2 + 2
[from](X) = X
[if](X1,X2,X3) = 2.X1 + X2 + X3 + 2
[nil] = 2
[s](X) = 2.X + 2
[ftrue] = 2
[AU95U95ADD](X1,X2) = 0
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95FIRST](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95IF](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue

Problem 1: 

Reduction Pairs Processor:
-> Pairs:
 AU95U95IF(ffalse,X,Y) -> MARK(Y)
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = 2.X1 + 2.X2 + 1
[au95u95and](X1,X2) = X1 + 2.X2
[au95u95first](X1,X2) = 2.X1 + X2 + 2
[au95u95from](X) = 2.X + 1
[au95u95if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X + 1
[num0] = 0
[add](X1,X2) = 2.X1 + 2.X2 + 1
[and](X1,X2) = X1 + X2
[cons](X1,X2) = 1
[fSNonEmpty] = 0
[ffalse] = 1
[first](X1,X2) = 2.X1 + X2 + 2
[from](X) = 2.X + 1
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[nil] = 2
[s](X) = X
[ftrue] = 1
[AU95U95ADD](X1,X2) = 0
[AU95U95AND](X1,X2) = 0
[AU95U95FIRST](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95IF](X1,X2,X3) = 2.X2 + 2.X3 + 1
[MARK](X) = 2.X

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue

Problem 1: 

Subterm Processor:
-> Pairs:
 AU95U95IF(ftrue,X,Y) -> MARK(X)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> AU95U95IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Projection:
 pi(AU95U95IF) = 2
 pi(MARK) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95IF(ftrue,X,Y) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95and(ffalse,Y) -> ffalse
 au95u95and(ftrue,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95first(num0,X) -> nil
 au95u95first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 au95u95first(X1,X2) -> first(X1,X2)
 au95u95from(X) -> cons(X,from(s(X)))
 au95u95from(X) -> from(X)
 au95u95if(ffalse,X,Y) -> mark(Y)
 au95u95if(ftrue,X,Y) -> mark(X)
 au95u95if(X1,X2,X3) -> if(X1,X2,X3)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),X2)
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(cons(X1,X2)) -> cons(X1,X2)
 mark(ffalse) -> ffalse
 mark(first(X1,X2)) -> au95u95first(mark(X1),mark(X2))
 mark(from(X)) -> au95u95from(X)
 mark(if(X1,X2,X3)) -> au95u95if(mark(X1),X2,X3)
 mark(nil) -> nil
 mark(s(X)) -> s(X)
 mark(ftrue) -> ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
