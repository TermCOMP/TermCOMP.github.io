YES
proof of /home/ff862203/input_HFkDH3ilPa.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 64 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) QReductionProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QReductionProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QReductionProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) QDP
        (48) UsableRulesProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) QReductionProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (53) YES
    (54) QDP
        (55) UsableRulesProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) QReductionProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (60) YES
    (61) QDP
        (62) UsableRulesProof [EQUIVALENT, 0 ms]
        (63) QDP
        (64) QReductionProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (67) YES
    (68) QDP
        (69) UsableRulesProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) QReductionProof [EQUIVALENT, 0 ms]
        (72) QDP
        (73) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (74) YES
    (75) QDP
        (76) UsableRulesProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) QReductionProof [EQUIVALENT, 0 ms]
        (79) QDP
        (80) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (81) YES
    (82) QDP
        (83) UsableRulesProof [EQUIVALENT, 0 ms]
        (84) QDP
        (85) QReductionProof [EQUIVALENT, 0 ms]
        (86) QDP
        (87) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (88) YES
    (89) QDP
        (90) UsableRulesProof [EQUIVALENT, 0 ms]
        (91) QDP
        (92) QReductionProof [EQUIVALENT, 0 ms]
        (93) QDP
        (94) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (95) YES
    (96) QDP
        (97) UsableRulesProof [EQUIVALENT, 0 ms]
        (98) QDP
        (99) QReductionProof [EQUIVALENT, 0 ms]
        (100) QDP
        (101) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (102) YES
    (103) QDP
        (104) UsableRulesProof [EQUIVALENT, 0 ms]
        (105) QDP
        (106) QReductionProof [EQUIVALENT, 0 ms]
        (107) QDP
        (108) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (109) YES
    (110) QDP
        (111) UsableRulesProof [EQUIVALENT, 0 ms]
        (112) QDP
        (113) QReductionProof [EQUIVALENT, 0 ms]
        (114) QDP
        (115) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (116) YES
    (117) QDP
        (118) UsableRulesProof [EQUIVALENT, 0 ms]
        (119) QDP
        (120) QReductionProof [EQUIVALENT, 0 ms]
        (121) QDP
        (122) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (123) YES
    (124) QDP
        (125) UsableRulesProof [EQUIVALENT, 0 ms]
        (126) QDP
        (127) QReductionProof [EQUIVALENT, 0 ms]
        (128) QDP
        (129) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (130) YES
    (131) QDP
        (132) UsableRulesProof [EQUIVALENT, 0 ms]
        (133) QDP
        (134) QReductionProof [EQUIVALENT, 0 ms]
        (135) QDP
        (136) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (137) YES
    (138) QDP
        (139) UsableRulesProof [EQUIVALENT, 0 ms]
        (140) QDP
        (141) QReductionProof [EQUIVALENT, 0 ms]
        (142) QDP
        (143) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (144) YES
    (145) QDP
        (146) UsableRulesProof [EQUIVALENT, 0 ms]
        (147) QDP
        (148) QReductionProof [EQUIVALENT, 0 ms]
        (149) QDP
        (150) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (151) YES
    (152) QDP
        (153) UsableRulesProof [EQUIVALENT, 0 ms]
        (154) QDP
        (155) QReductionProof [EQUIVALENT, 0 ms]
        (156) QDP
        (157) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (158) YES
    (159) QDP
        (160) UsableRulesProof [EQUIVALENT, 0 ms]
        (161) QDP
        (162) QDPOrderProof [EQUIVALENT, 356 ms]
        (163) QDP
        (164) QDPOrderProof [EQUIVALENT, 29 ms]
        (165) QDP
        (166) QDPOrderProof [EQUIVALENT, 25 ms]
        (167) QDP
        (168) QDPOrderProof [EQUIVALENT, 11 ms]
        (169) QDP
        (170) QDPQMonotonicMRRProof [EQUIVALENT, 201 ms]
        (171) QDP
        (172) QDPOrderProof [EQUIVALENT, 20 ms]
        (173) QDP
        (174) QDPQMonotonicMRRProof [EQUIVALENT, 178 ms]
        (175) QDP
        (176) QDPQMonotonicMRRProof [EQUIVALENT, 209 ms]
        (177) QDP
        (178) QDPQMonotonicMRRProof [EQUIVALENT, 176 ms]
        (179) QDP
        (180) DependencyGraphProof [EQUIVALENT, 0 ms]
        (181) QDP
        (182) QDPQMonotonicMRRProof [EQUIVALENT, 155 ms]
        (183) QDP
        (184) DependencyGraphProof [EQUIVALENT, 0 ms]
        (185) QDP
        (186) QDPOrderProof [EQUIVALENT, 307 ms]
        (187) QDP
        (188) DependencyGraphProof [EQUIVALENT, 0 ms]
        (189) QDP
        (190) QDPOrderProof [EQUIVALENT, 171 ms]
        (191) QDP
        (192) QDPOrderProof [EQUIVALENT, 159 ms]
        (193) QDP
        (194) QDPOrderProof [EQUIVALENT, 220 ms]
        (195) QDP
        (196) QDPOrderProof [EQUIVALENT, 341 ms]
        (197) QDP
        (198) QDPOrderProof [EQUIVALENT, 244 ms]
        (199) QDP
        (200) QDPOrderProof [EQUIVALENT, 170 ms]
        (201) QDP
        (202) QDPOrderProof [EQUIVALENT, 196 ms]
        (203) QDP
        (204) QDPQMonotonicMRRProof [EQUIVALENT, 151 ms]
        (205) QDP
        (206) QDPQMonotonicMRRProof [EQUIVALENT, 111 ms]
        (207) QDP
        (208) QDPQMonotonicMRRProof [EQUIVALENT, 185 ms]
        (209) QDP
        (210) QDPQMonotonicMRRProof [EQUIVALENT, 98 ms]
        (211) QDP
        (212) QDPQMonotonicMRRProof [EQUIVALENT, 156 ms]
        (213) QDP
        (214) QDPQMonotonicMRRProof [EQUIVALENT, 134 ms]
        (215) QDP
        (216) DependencyGraphProof [EQUIVALENT, 0 ms]
        (217) QDP
        (218) QDPQMonotonicMRRProof [EQUIVALENT, 149 ms]
        (219) QDP
        (220) QDPQMonotonicMRRProof [EQUIVALENT, 106 ms]
        (221) QDP
        (222) QDPQMonotonicMRRProof [EQUIVALENT, 81 ms]
        (223) QDP
        (224) DependencyGraphProof [EQUIVALENT, 0 ms]
        (225) QDP
        (226) QDPQMonotonicMRRProof [EQUIVALENT, 80 ms]
        (227) QDP
        (228) DependencyGraphProof [EQUIVALENT, 0 ms]
        (229) QDP
        (230) QDPQMonotonicMRRProof [EQUIVALENT, 67 ms]
        (231) QDP
        (232) QDPQMonotonicMRRProof [EQUIVALENT, 84 ms]
        (233) QDP
        (234) QDPQMonotonicMRRProof [EQUIVALENT, 80 ms]
        (235) QDP
        (236) UsableRulesProof [EQUIVALENT, 0 ms]
        (237) QDP
        (238) QDPOrderProof [EQUIVALENT, 123 ms]
        (239) QDP
        (240) QDPOrderProof [EQUIVALENT, 93 ms]
        (241) QDP
        (242) QDPOrderProof [EQUIVALENT, 73 ms]
        (243) QDP
        (244) QDPQMonotonicMRRProof [EQUIVALENT, 46 ms]
        (245) QDP
        (246) UsableRulesProof [EQUIVALENT, 0 ms]
        (247) QDP
        (248) QReductionProof [EQUIVALENT, 0 ms]
        (249) QDP
        (250) QDPQMonotonicMRRProof [EQUIVALENT, 44 ms]
        (251) QDP
        (252) UsableRulesProof [EQUIVALENT, 0 ms]
        (253) QDP
        (254) QDPQMonotonicMRRProof [EQUIVALENT, 40 ms]
        (255) QDP
        (256) QDPOrderProof [EQUIVALENT, 181 ms]
        (257) QDP
        (258) QDPOrderProof [EQUIVALENT, 112 ms]
        (259) QDP
        (260) DependencyGraphProof [EQUIVALENT, 0 ms]
        (261) QDP
        (262) UsableRulesProof [EQUIVALENT, 0 ms]
        (263) QDP
        (264) QReductionProof [EQUIVALENT, 0 ms]
        (265) QDP
        (266) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (267) QDP
        (268) DependencyGraphProof [EQUIVALENT, 0 ms]
        (269) QDP
        (270) QReductionProof [EQUIVALENT, 0 ms]
        (271) QDP
        (272) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (273) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   ACTIVE(U11(tt, V1, V2)) -> U12^1(isNatKind(V1), V1, V2)
   ACTIVE(U11(tt, V1, V2)) -> ISNATKIND(V1)
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   ACTIVE(U12(tt, V1, V2)) -> U13^1(isNatKind(V2), V1, V2)
   ACTIVE(U12(tt, V1, V2)) -> ISNATKIND(V2)
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   ACTIVE(U13(tt, V1, V2)) -> U14^1(isNatKind(V2), V1, V2)
   ACTIVE(U13(tt, V1, V2)) -> ISNATKIND(V2)
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   ACTIVE(U14(tt, V1, V2)) -> U15^1(isNat(V1), V2)
   ACTIVE(U14(tt, V1, V2)) -> ISNAT(V1)
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U15(tt, V2)) -> U16^1(isNat(V2))
   ACTIVE(U15(tt, V2)) -> ISNAT(V2)
   ACTIVE(U16(tt)) -> MARK(tt)
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   ACTIVE(U21(tt, V1)) -> U22^1(isNatKind(V1), V1)
   ACTIVE(U21(tt, V1)) -> ISNATKIND(V1)
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U22(tt, V1)) -> U23^1(isNat(V1))
   ACTIVE(U22(tt, V1)) -> ISNAT(V1)
   ACTIVE(U23(tt)) -> MARK(tt)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   ACTIVE(U31(tt, V2)) -> U32^1(isNatKind(V2))
   ACTIVE(U31(tt, V2)) -> ISNATKIND(V2)
   ACTIVE(U32(tt)) -> MARK(tt)
   ACTIVE(U41(tt)) -> MARK(tt)
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   ACTIVE(U51(tt, N)) -> U52^1(isNatKind(N), N)
   ACTIVE(U51(tt, N)) -> ISNATKIND(N)
   ACTIVE(U52(tt, N)) -> MARK(N)
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   ACTIVE(U61(tt, M, N)) -> U62^1(isNatKind(M), M, N)
   ACTIVE(U61(tt, M, N)) -> ISNATKIND(M)
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   ACTIVE(U62(tt, M, N)) -> U63^1(isNat(N), M, N)
   ACTIVE(U62(tt, M, N)) -> ISNAT(N)
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   ACTIVE(U63(tt, M, N)) -> U64^1(isNatKind(N), M, N)
   ACTIVE(U63(tt, M, N)) -> ISNATKIND(N)
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(U64(tt, M, N)) -> S(plus(N, M))
   ACTIVE(U64(tt, M, N)) -> PLUS(N, M)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(plus(V1, V2))) -> U11^1(isNatKind(V1), V1, V2)
   ACTIVE(isNat(plus(V1, V2))) -> ISNATKIND(V1)
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   ACTIVE(isNat(s(V1))) -> U21^1(isNatKind(V1), V1)
   ACTIVE(isNat(s(V1))) -> ISNATKIND(V1)
   ACTIVE(isNatKind(0)) -> MARK(tt)
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   ACTIVE(isNatKind(plus(V1, V2))) -> U31^1(isNatKind(V1), V2)
   ACTIVE(isNatKind(plus(V1, V2))) -> ISNATKIND(V1)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))
   ACTIVE(isNatKind(s(V1))) -> U41^1(isNatKind(V1))
   ACTIVE(isNatKind(s(V1))) -> ISNATKIND(V1)
   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
   ACTIVE(plus(N, 0)) -> U51^1(isNat(N), N)
   ACTIVE(plus(N, 0)) -> ISNAT(N)
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   ACTIVE(plus(N, s(M))) -> U61^1(isNat(M), M, N)
   ACTIVE(plus(N, s(M))) -> ISNAT(M)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U11(X1, X2, X3)) -> U11^1(mark(X1), X2, X3)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(tt) -> ACTIVE(tt)
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   MARK(U12(X1, X2, X3)) -> U12^1(mark(X1), X2, X3)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   MARK(U13(X1, X2, X3)) -> U13^1(mark(X1), X2, X3)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   MARK(U14(X1, X2, X3)) -> U14^1(mark(X1), X2, X3)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> U15^1(mark(X1), X2)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U16(X)) -> ACTIVE(U16(mark(X)))
   MARK(U16(X)) -> U16^1(mark(X))
   MARK(U16(X)) -> MARK(X)
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> U21^1(mark(X1), X2)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   MARK(U22(X1, X2)) -> U22^1(mark(X1), X2)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> ACTIVE(U23(mark(X)))
   MARK(U23(X)) -> U23^1(mark(X))
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> U31^1(mark(X1), X2)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   MARK(U32(X)) -> U32^1(mark(X))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> ACTIVE(U41(mark(X)))
   MARK(U41(X)) -> U41^1(mark(X))
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> U51^1(mark(X1), X2)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   MARK(U52(X1, X2)) -> U52^1(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> U61^1(mark(X1), X2, X3)
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   MARK(U62(X1, X2, X3)) -> U62^1(mark(X1), X2, X3)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   MARK(U63(X1, X2, X3)) -> U63^1(mark(X1), X2, X3)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   MARK(U64(X1, X2, X3)) -> U64^1(mark(X1), X2, X3)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> PLUS(mark(X1), mark(X2))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(0) -> ACTIVE(0)
   U11^1(mark(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, mark(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, mark(X3)) -> U11^1(X1, X2, X3)
   U11^1(active(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, active(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, active(X3)) -> U11^1(X1, X2, X3)
   U12^1(mark(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, mark(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, mark(X3)) -> U12^1(X1, X2, X3)
   U12^1(active(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, active(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, active(X3)) -> U12^1(X1, X2, X3)
   ISNATKIND(mark(X)) -> ISNATKIND(X)
   ISNATKIND(active(X)) -> ISNATKIND(X)
   U13^1(mark(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, mark(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, mark(X3)) -> U13^1(X1, X2, X3)
   U13^1(active(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, active(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, active(X3)) -> U13^1(X1, X2, X3)
   U14^1(mark(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, mark(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, mark(X3)) -> U14^1(X1, X2, X3)
   U14^1(active(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, active(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, active(X3)) -> U14^1(X1, X2, X3)
   U15^1(mark(X1), X2) -> U15^1(X1, X2)
   U15^1(X1, mark(X2)) -> U15^1(X1, X2)
   U15^1(active(X1), X2) -> U15^1(X1, X2)
   U15^1(X1, active(X2)) -> U15^1(X1, X2)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   U16^1(mark(X)) -> U16^1(X)
   U16^1(active(X)) -> U16^1(X)
   U21^1(mark(X1), X2) -> U21^1(X1, X2)
   U21^1(X1, mark(X2)) -> U21^1(X1, X2)
   U21^1(active(X1), X2) -> U21^1(X1, X2)
   U21^1(X1, active(X2)) -> U21^1(X1, X2)
   U22^1(mark(X1), X2) -> U22^1(X1, X2)
   U22^1(X1, mark(X2)) -> U22^1(X1, X2)
   U22^1(active(X1), X2) -> U22^1(X1, X2)
   U22^1(X1, active(X2)) -> U22^1(X1, X2)
   U23^1(mark(X)) -> U23^1(X)
   U23^1(active(X)) -> U23^1(X)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)
   U32^1(mark(X)) -> U32^1(X)
   U32^1(active(X)) -> U32^1(X)
   U41^1(mark(X)) -> U41^1(X)
   U41^1(active(X)) -> U41^1(X)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)
   U52^1(mark(X1), X2) -> U52^1(X1, X2)
   U52^1(X1, mark(X2)) -> U52^1(X1, X2)
   U52^1(active(X1), X2) -> U52^1(X1, X2)
   U52^1(X1, active(X2)) -> U52^1(X1, X2)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
   U62^1(mark(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, mark(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, mark(X3)) -> U62^1(X1, X2, X3)
   U62^1(active(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, active(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, active(X3)) -> U62^1(X1, X2, X3)
   U63^1(mark(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, mark(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, mark(X3)) -> U63^1(X1, X2, X3)
   U63^1(active(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, active(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, active(X3)) -> U63^1(X1, X2, X3)
   U64^1(mark(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, mark(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, mark(X3)) -> U64^1(X1, X2, X3)
   U64^1(active(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, active(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, active(X3)) -> U64^1(X1, X2, X3)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 23 SCCs with 66 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(X1, mark(X2)) -> PLUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*PLUS(mark(X1), X2) -> PLUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*PLUS(active(X1), X2) -> PLUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*PLUS(X1, active(X2)) -> PLUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U64^1(X1, mark(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(mark(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, mark(X3)) -> U64^1(X1, X2, X3)
   U64^1(active(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, active(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, active(X3)) -> U64^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U64^1(X1, mark(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(mark(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, mark(X3)) -> U64^1(X1, X2, X3)
   U64^1(active(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, active(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, active(X3)) -> U64^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U64^1(X1, mark(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(mark(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, mark(X3)) -> U64^1(X1, X2, X3)
   U64^1(active(X1), X2, X3) -> U64^1(X1, X2, X3)
   U64^1(X1, active(X2), X3) -> U64^1(X1, X2, X3)
   U64^1(X1, X2, active(X3)) -> U64^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U64^1(X1, mark(X2), X3) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U64^1(mark(X1), X2, X3) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U64^1(X1, X2, mark(X3)) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U64^1(active(X1), X2, X3) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U64^1(X1, active(X2), X3) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U64^1(X1, X2, active(X3)) -> U64^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U63^1(X1, mark(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(mark(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, mark(X3)) -> U63^1(X1, X2, X3)
   U63^1(active(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, active(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, active(X3)) -> U63^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U63^1(X1, mark(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(mark(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, mark(X3)) -> U63^1(X1, X2, X3)
   U63^1(active(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, active(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, active(X3)) -> U63^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U63^1(X1, mark(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(mark(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, mark(X3)) -> U63^1(X1, X2, X3)
   U63^1(active(X1), X2, X3) -> U63^1(X1, X2, X3)
   U63^1(X1, active(X2), X3) -> U63^1(X1, X2, X3)
   U63^1(X1, X2, active(X3)) -> U63^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U63^1(X1, mark(X2), X3) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U63^1(mark(X1), X2, X3) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U63^1(X1, X2, mark(X3)) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U63^1(active(X1), X2, X3) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U63^1(X1, active(X2), X3) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U63^1(X1, X2, active(X3)) -> U63^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(mark(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, mark(X3)) -> U62^1(X1, X2, X3)
   U62^1(active(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, active(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, active(X3)) -> U62^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(mark(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, mark(X3)) -> U62^1(X1, X2, X3)
   U62^1(active(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, active(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, active(X3)) -> U62^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(mark(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, mark(X3)) -> U62^1(X1, X2, X3)
   U62^1(active(X1), X2, X3) -> U62^1(X1, X2, X3)
   U62^1(X1, active(X2), X3) -> U62^1(X1, X2, X3)
   U62^1(X1, X2, active(X3)) -> U62^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U62^1(X1, mark(X2), X3) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U62^1(mark(X1), X2, X3) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U62^1(X1, X2, mark(X3)) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U62^1(active(X1), X2, X3) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U62^1(X1, active(X2), X3) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U62^1(X1, X2, active(X3)) -> U62^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(X1, mark(X2)) -> U52^1(X1, X2)
   U52^1(mark(X1), X2) -> U52^1(X1, X2)
   U52^1(active(X1), X2) -> U52^1(X1, X2)
   U52^1(X1, active(X2)) -> U52^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(X1, mark(X2)) -> U52^1(X1, X2)
   U52^1(mark(X1), X2) -> U52^1(X1, X2)
   U52^1(active(X1), X2) -> U52^1(X1, X2)
   U52^1(X1, active(X2)) -> U52^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(X1, mark(X2)) -> U52^1(X1, X2)
   U52^1(mark(X1), X2) -> U52^1(X1, X2)
   U52^1(active(X1), X2) -> U52^1(X1, X2)
   U52^1(X1, active(X2)) -> U52^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U52^1(X1, mark(X2)) -> U52^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U52^1(mark(X1), X2) -> U52^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U52^1(active(X1), X2) -> U52^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U52^1(X1, active(X2)) -> U52^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U51^1(X1, mark(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U51^1(mark(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(active(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(X1, active(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(60)
YES

----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(active(X)) -> U41^1(X)
   U41^1(mark(X)) -> U41^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(active(X)) -> U41^1(X)
   U41^1(mark(X)) -> U41^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(active(X)) -> U41^1(X)
   U41^1(mark(X)) -> U41^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U41^1(active(X)) -> U41^1(X)
The graph contains the following edges 1 > 1


*U41^1(mark(X)) -> U41^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(active(X)) -> U32^1(X)
   U32^1(mark(X)) -> U32^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(active(X)) -> U32^1(X)
   U32^1(mark(X)) -> U32^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(active(X)) -> U32^1(X)
   U32^1(mark(X)) -> U32^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U32^1(active(X)) -> U32^1(X)
The graph contains the following edges 1 > 1


*U32^1(mark(X)) -> U32^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(74)
YES

----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U31^1(X1, mark(X2)) -> U31^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U31^1(mark(X1), X2) -> U31^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U31^1(active(X1), X2) -> U31^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U31^1(X1, active(X2)) -> U31^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(81)
YES

----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23^1(active(X)) -> U23^1(X)
   U23^1(mark(X)) -> U23^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23^1(active(X)) -> U23^1(X)
   U23^1(mark(X)) -> U23^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23^1(active(X)) -> U23^1(X)
   U23^1(mark(X)) -> U23^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(87) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U23^1(active(X)) -> U23^1(X)
The graph contains the following edges 1 > 1


*U23^1(mark(X)) -> U23^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(88)
YES

----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22^1(X1, mark(X2)) -> U22^1(X1, X2)
   U22^1(mark(X1), X2) -> U22^1(X1, X2)
   U22^1(active(X1), X2) -> U22^1(X1, X2)
   U22^1(X1, active(X2)) -> U22^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(91)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22^1(X1, mark(X2)) -> U22^1(X1, X2)
   U22^1(mark(X1), X2) -> U22^1(X1, X2)
   U22^1(active(X1), X2) -> U22^1(X1, X2)
   U22^1(X1, active(X2)) -> U22^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(92) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22^1(X1, mark(X2)) -> U22^1(X1, X2)
   U22^1(mark(X1), X2) -> U22^1(X1, X2)
   U22^1(active(X1), X2) -> U22^1(X1, X2)
   U22^1(X1, active(X2)) -> U22^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(94) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U22^1(X1, mark(X2)) -> U22^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U22^1(mark(X1), X2) -> U22^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U22^1(active(X1), X2) -> U22^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U22^1(X1, active(X2)) -> U22^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(95)
YES

----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(X1, mark(X2)) -> U21^1(X1, X2)
   U21^1(mark(X1), X2) -> U21^1(X1, X2)
   U21^1(active(X1), X2) -> U21^1(X1, X2)
   U21^1(X1, active(X2)) -> U21^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(X1, mark(X2)) -> U21^1(X1, X2)
   U21^1(mark(X1), X2) -> U21^1(X1, X2)
   U21^1(active(X1), X2) -> U21^1(X1, X2)
   U21^1(X1, active(X2)) -> U21^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(X1, mark(X2)) -> U21^1(X1, X2)
   U21^1(mark(X1), X2) -> U21^1(X1, X2)
   U21^1(active(X1), X2) -> U21^1(X1, X2)
   U21^1(X1, active(X2)) -> U21^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U21^1(X1, mark(X2)) -> U21^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U21^1(mark(X1), X2) -> U21^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U21^1(active(X1), X2) -> U21^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U21^1(X1, active(X2)) -> U21^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(102)
YES

----------------------------------------

(103)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U16^1(active(X)) -> U16^1(X)
   U16^1(mark(X)) -> U16^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(104) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U16^1(active(X)) -> U16^1(X)
   U16^1(mark(X)) -> U16^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(106) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U16^1(active(X)) -> U16^1(X)
   U16^1(mark(X)) -> U16^1(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(108) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U16^1(active(X)) -> U16^1(X)
The graph contains the following edges 1 > 1


*U16^1(mark(X)) -> U16^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(109)
YES

----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(111) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(113) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(115) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(116)
YES

----------------------------------------

(117)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U15^1(X1, mark(X2)) -> U15^1(X1, X2)
   U15^1(mark(X1), X2) -> U15^1(X1, X2)
   U15^1(active(X1), X2) -> U15^1(X1, X2)
   U15^1(X1, active(X2)) -> U15^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(118) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(119)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U15^1(X1, mark(X2)) -> U15^1(X1, X2)
   U15^1(mark(X1), X2) -> U15^1(X1, X2)
   U15^1(active(X1), X2) -> U15^1(X1, X2)
   U15^1(X1, active(X2)) -> U15^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(120) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U15^1(X1, mark(X2)) -> U15^1(X1, X2)
   U15^1(mark(X1), X2) -> U15^1(X1, X2)
   U15^1(active(X1), X2) -> U15^1(X1, X2)
   U15^1(X1, active(X2)) -> U15^1(X1, X2)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(122) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U15^1(X1, mark(X2)) -> U15^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U15^1(mark(X1), X2) -> U15^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U15^1(active(X1), X2) -> U15^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U15^1(X1, active(X2)) -> U15^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(123)
YES

----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14^1(X1, mark(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(mark(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, mark(X3)) -> U14^1(X1, X2, X3)
   U14^1(active(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, active(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, active(X3)) -> U14^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(125) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14^1(X1, mark(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(mark(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, mark(X3)) -> U14^1(X1, X2, X3)
   U14^1(active(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, active(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, active(X3)) -> U14^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(127) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14^1(X1, mark(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(mark(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, mark(X3)) -> U14^1(X1, X2, X3)
   U14^1(active(X1), X2, X3) -> U14^1(X1, X2, X3)
   U14^1(X1, active(X2), X3) -> U14^1(X1, X2, X3)
   U14^1(X1, X2, active(X3)) -> U14^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(129) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U14^1(X1, mark(X2), X3) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U14^1(mark(X1), X2, X3) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U14^1(X1, X2, mark(X3)) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U14^1(active(X1), X2, X3) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U14^1(X1, active(X2), X3) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U14^1(X1, X2, active(X3)) -> U14^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(130)
YES

----------------------------------------

(131)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13^1(X1, mark(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(mark(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, mark(X3)) -> U13^1(X1, X2, X3)
   U13^1(active(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, active(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, active(X3)) -> U13^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(132) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(133)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13^1(X1, mark(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(mark(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, mark(X3)) -> U13^1(X1, X2, X3)
   U13^1(active(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, active(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, active(X3)) -> U13^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(134) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13^1(X1, mark(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(mark(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, mark(X3)) -> U13^1(X1, X2, X3)
   U13^1(active(X1), X2, X3) -> U13^1(X1, X2, X3)
   U13^1(X1, active(X2), X3) -> U13^1(X1, X2, X3)
   U13^1(X1, X2, active(X3)) -> U13^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(136) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U13^1(X1, mark(X2), X3) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U13^1(mark(X1), X2, X3) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U13^1(X1, X2, mark(X3)) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U13^1(active(X1), X2, X3) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U13^1(X1, active(X2), X3) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U13^1(X1, X2, active(X3)) -> U13^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(137)
YES

----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATKIND(active(X)) -> ISNATKIND(X)
   ISNATKIND(mark(X)) -> ISNATKIND(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(139) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATKIND(active(X)) -> ISNATKIND(X)
   ISNATKIND(mark(X)) -> ISNATKIND(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(141) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(142)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATKIND(active(X)) -> ISNATKIND(X)
   ISNATKIND(mark(X)) -> ISNATKIND(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(143) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATKIND(active(X)) -> ISNATKIND(X)
The graph contains the following edges 1 > 1


*ISNATKIND(mark(X)) -> ISNATKIND(X)
The graph contains the following edges 1 > 1


----------------------------------------

(144)
YES

----------------------------------------

(145)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U12^1(X1, mark(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(mark(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, mark(X3)) -> U12^1(X1, X2, X3)
   U12^1(active(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, active(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, active(X3)) -> U12^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(146) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(147)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U12^1(X1, mark(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(mark(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, mark(X3)) -> U12^1(X1, X2, X3)
   U12^1(active(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, active(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, active(X3)) -> U12^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(148) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(149)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U12^1(X1, mark(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(mark(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, mark(X3)) -> U12^1(X1, X2, X3)
   U12^1(active(X1), X2, X3) -> U12^1(X1, X2, X3)
   U12^1(X1, active(X2), X3) -> U12^1(X1, X2, X3)
   U12^1(X1, X2, active(X3)) -> U12^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(150) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U12^1(X1, mark(X2), X3) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U12^1(mark(X1), X2, X3) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U12^1(X1, X2, mark(X3)) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U12^1(active(X1), X2, X3) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U12^1(X1, active(X2), X3) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U12^1(X1, X2, active(X3)) -> U12^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(151)
YES

----------------------------------------

(152)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(X1, mark(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(mark(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, mark(X3)) -> U11^1(X1, X2, X3)
   U11^1(active(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, active(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, active(X3)) -> U11^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(153) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(154)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(X1, mark(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(mark(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, mark(X3)) -> U11^1(X1, X2, X3)
   U11^1(active(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, active(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, active(X3)) -> U11^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(155) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U22(mark(x0), x1)
   U15(active(x0), x1)
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   U64(x0, x1, mark(x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   plus(active(x0), x1)
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   U61(active(x0), x1, x2)
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   U22(x0, mark(x1))
   U51(active(x0), x1)
   U63(active(x0), x1, x2)
   U41(mark(x0))
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   U32(active(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   U14(mark(x0), x1, x2)


----------------------------------------

(156)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(X1, mark(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(mark(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, mark(X3)) -> U11^1(X1, X2, X3)
   U11^1(active(X1), X2, X3) -> U11^1(X1, X2, X3)
   U11^1(X1, active(X2), X3) -> U11^1(X1, X2, X3)
   U11^1(X1, X2, active(X3)) -> U11^1(X1, X2, X3)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   active(U16(tt))
   mark(U23(x0))
   mark(0)
   mark(U63(x0, x1, x2))
   active(U52(tt, x0))
   mark(U16(x0))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   mark(U11(x0, x1, x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   active(U22(tt, x0))
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   mark(U14(x0, x1, x2))
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(isNat(x0))
   mark(U21(x0, x1))
   active(isNatKind(plus(x0, x1)))
   mark(U51(x0, x1))
   active(U51(tt, x0))
   active(U15(tt, x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   mark(U41(x0))
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(157) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U11^1(X1, mark(X2), X3) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U11^1(mark(X1), X2, X3) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U11^1(X1, X2, mark(X3)) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U11^1(active(X1), X2, X3) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U11^1(X1, active(X2), X3) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U11^1(X1, X2, active(X3)) -> U11^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(158)
YES

----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> ACTIVE(U16(mark(X)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> ACTIVE(U23(mark(X)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> ACTIVE(U41(mark(X)))
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   active(U16(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   active(U23(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   active(U52(tt, N)) -> mark(N)
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(tt) -> active(tt)
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(U16(X)) -> active(U16(mark(X)))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   mark(U23(X)) -> active(U23(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(0) -> active(0)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   isNatKind(mark(X)) -> isNatKind(X)
   isNatKind(active(X)) -> isNatKind(X)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(160) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(161)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> ACTIVE(U16(mark(X)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> ACTIVE(U23(mark(X)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> ACTIVE(U41(mark(X)))
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(162) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U16(X)) -> ACTIVE(U16(mark(X)))
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(U41(X)) -> ACTIVE(U41(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_3(x_1, ..., x_3) ) = 2
POL( U12_3(x_1, ..., x_3) ) = 2
POL( U13_3(x_1, ..., x_3) ) = 2
POL( U14_3(x_1, ..., x_3) ) = 2
POL( U15_2(x_1, x_2) ) = 2
POL( U16_1(x_1) ) = 0
POL( U21_2(x_1, x_2) ) = 2
POL( U22_2(x_1, x_2) ) = 2
POL( U23_1(x_1) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( U32_1(x_1) ) = max{0, -2}
POL( U41_1(x_1) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U52_2(x_1, x_2) ) = 2
POL( U61_3(x_1, ..., x_3) ) = 2
POL( U62_3(x_1, ..., x_3) ) = 2
POL( U63_3(x_1, ..., x_3) ) = 2
POL( U64_3(x_1, ..., x_3) ) = 2
POL( plus_2(x_1, x_2) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)


----------------------------------------

(163)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> ACTIVE(U23(mark(X)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(164) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U23(X)) -> ACTIVE(U23(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(U11(x_1, x_2, x_3)) = 1
   POL(U12(x_1, x_2, x_3)) = 1
   POL(U13(x_1, x_2, x_3)) = 1
   POL(U14(x_1, x_2, x_3)) = 1
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 1
   POL(U22(x_1, x_2)) = 1
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 1
   POL(U52(x_1, x_2)) = 1
   POL(U61(x_1, x_2, x_3)) = 1
   POL(U62(x_1, x_2, x_3)) = 1
   POL(U63(x_1, x_2, x_3)) = 1
   POL(U64(x_1, x_2, x_3)) = 1
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 1
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(tt) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)


----------------------------------------

(165)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(166) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(plus(N, 0)) -> MARK(U51(isNat(N), N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = x_1
   POL(U12(x_1, x_2, x_3)) = x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1, x_2)) = x_1 + x_2
   POL(U61(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U64(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)


----------------------------------------

(167)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(168) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U51(tt, N)) -> MARK(U52(isNatKind(N), N))
   MARK(U51(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = x_1
   POL(U12(x_1, x_2, x_3)) = x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 1 + x_1 + x_2
   POL(U52(x_1, x_2)) = x_1 + x_2
   POL(U61(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U64(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)


----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(170) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 1
   POL(U12(x_1, x_2, x_3)) = 1
   POL(U13(x_1, x_2, x_3)) = 1
   POL(U14(x_1, x_2, x_3)) = 1
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 1
   POL(U22(x_1, x_2)) = 1
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 1
   POL(U61(x_1, x_2, x_3)) = 1
   POL(U62(x_1, x_2, x_3)) = 1
   POL(U63(x_1, x_2, x_3)) = 1
   POL(U64(x_1, x_2, x_3)) = 1
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 1
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(172) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2, X3)) -> MARK(X1)
   MARK(U63(X1, X2, X3)) -> MARK(X1)
   MARK(U64(X1, X2, X3)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = x_1
   POL(U12(x_1, x_2, x_3)) = x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_2
   POL(U52(x_1, x_2)) = x_1 + x_2
   POL(U61(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U64(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 1 + x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(174) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   ACTIVE(U52(tt, N)) -> MARK(N)
   MARK(U52(X1, X2)) -> MARK(X1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 1 + x_2
   POL(U52(x_1, x_2)) = 1 + x_1 + x_2
   POL(U61(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U64(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(176) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U52(X1, X2)) -> ACTIVE(U52(mark(X1), X2))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 1
   POL(U12(x_1, x_2, x_3)) = 1
   POL(U13(x_1, x_2, x_3)) = 1
   POL(U14(x_1, x_2, x_3)) = 1
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 1
   POL(U22(x_1, x_2)) = 1
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 1
   POL(U62(x_1, x_2, x_3)) = 1
   POL(U63(x_1, x_2, x_3)) = 1
   POL(U64(x_1, x_2, x_3)) = 1
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 1
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(178) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   ACTIVE(plus(N, s(M))) -> MARK(U61(isNat(M), M, N))
   MARK(s(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_2
   POL(U52(x_1, x_2)) = x_2
   POL(U61(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U64(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 0


----------------------------------------

(179)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   ACTIVE(U64(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U16(X)) -> MARK(X)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(180) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(181)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(182) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U64(X1, X2, X3)) -> ACTIVE(U64(mark(X1), X2, X3))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 1
   POL(U12(x_1, x_2, x_3)) = 1
   POL(U13(x_1, x_2, x_3)) = 1
   POL(U14(x_1, x_2, x_3)) = 1
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 1
   POL(U22(x_1, x_2)) = 1
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 1
   POL(U62(x_1, x_2, x_3)) = 1
   POL(U63(x_1, x_2, x_3)) = 1
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 1
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(183)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   ACTIVE(U63(tt, M, N)) -> MARK(U64(isNatKind(N), M, N))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(184) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(185)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(186) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U63(X1, X2, X3)) -> ACTIVE(U63(mark(X1), X2, X3))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 1}
POL( U11_3(x_1, ..., x_3) ) = 1
POL( U12_3(x_1, ..., x_3) ) = 1
POL( U13_3(x_1, ..., x_3) ) = 1
POL( U14_3(x_1, ..., x_3) ) = 1
POL( U15_2(x_1, x_2) ) = 1
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = 1
POL( U31_2(x_1, x_2) ) = 1
POL( U61_3(x_1, ..., x_3) ) = 1
POL( U62_3(x_1, ..., x_3) ) = 1
POL( U63_3(x_1, ..., x_3) ) = 0
POL( plus_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = 2
POL( active_1(x_1) ) = 2
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 1
POL( isNat_1(x_1) ) = 1
POL( U16_1(x_1) ) = max{0, 2x_1 - 2}
POL( U23_1(x_1) ) = max{0, x_1 - 2}
POL( U32_1(x_1) ) = max{0, 2x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U52_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U64_3(x_1, ..., x_3) ) = 2x_2 + 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( U41_1(x_1) ) = max{0, 2x_1 - 2}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)


----------------------------------------

(187)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   ACTIVE(U62(tt, M, N)) -> MARK(U63(isNat(N), M, N))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(188) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(189)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(190) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U11_3(x_1, ..., x_3) ) = x_1 + 1
POL( U12_3(x_1, ..., x_3) ) = 2x_1 + 1
POL( U13_3(x_1, ..., x_3) ) = 2x_1 + 1
POL( U14_3(x_1, ..., x_3) ) = 2x_1 + 1
POL( U15_2(x_1, x_2) ) = x_1 + 1
POL( U21_2(x_1, x_2) ) = 2x_1 + 1
POL( U22_2(x_1, x_2) ) = x_1 + 1
POL( U31_2(x_1, x_2) ) = 2x_1 + 1
POL( U61_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 2
POL( U62_3(x_1, ..., x_3) ) = 0
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( U16_1(x_1) ) = x_1 + 1
POL( U23_1(x_1) ) = 2x_1 + 1
POL( U32_1(x_1) ) = 2x_1 + 1
POL( U51_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( U52_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( U63_3(x_1, ..., x_3) ) = x_1 + x_3 + 2
POL( U64_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( s_1(x_1) ) = 2
POL( plus_2(x_1, x_2) ) = 2x_1 + 2
POL( U41_1(x_1) ) = 2x_1 + 1
POL( 0 ) = 2
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(191)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(192) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U61(tt, M, N)) -> MARK(U62(isNatKind(M), M, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U11_3(x_1, ..., x_3) ) = max{0, -2}
POL( U12_3(x_1, ..., x_3) ) = 1
POL( U13_3(x_1, ..., x_3) ) = max{0, -2}
POL( U14_3(x_1, ..., x_3) ) = max{0, -2}
POL( U15_2(x_1, x_2) ) = max{0, -2}
POL( U21_2(x_1, x_2) ) = max{0, -2}
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U62_3(x_1, ..., x_3) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, -2}
POL( tt ) = 2
POL( isNatKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 1
POL( U16_1(x_1) ) = 0
POL( U23_1(x_1) ) = 0
POL( U32_1(x_1) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U52_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U61_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_2 - 2}
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U41_1(x_1) ) = max{0, -2}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)


----------------------------------------

(193)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(194) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U62(X1, X2, X3)) -> ACTIVE(U62(mark(X1), X2, X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 1}
POL( U11_3(x_1, ..., x_3) ) = 1
POL( U12_3(x_1, ..., x_3) ) = 1
POL( U13_3(x_1, ..., x_3) ) = 1
POL( U14_3(x_1, ..., x_3) ) = 1
POL( U15_2(x_1, x_2) ) = 1
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = 1
POL( U31_2(x_1, x_2) ) = 1
POL( U62_3(x_1, ..., x_3) ) = max{0, -2}
POL( mark_1(x_1) ) = 2
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 1
POL( isNat_1(x_1) ) = 1
POL( U16_1(x_1) ) = max{0, x_1 - 2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U32_1(x_1) ) = max{0, x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U52_2(x_1, x_2) ) = 2
POL( U61_3(x_1, ..., x_3) ) = x_2 + x_3
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + x_3 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, x_3 - 2}
POL( s_1(x_1) ) = max{0, 2x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U41_1(x_1) ) = max{0, x_1 - 2}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)


----------------------------------------

(195)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(196) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U21(tt, V1)) -> MARK(U22(isNatKind(V1), V1))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNatKind(V1), V1))
   MARK(U21(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U11_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + 2x_3
POL( U12_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + 2x_3
POL( U13_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + 2x_3
POL( U14_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + 2x_3
POL( U15_2(x_1, x_2) ) = x_1 + 2x_2
POL( U21_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( U22_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U31_2(x_1, x_2) ) = 2x_1
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 2x_1
POL( U16_1(x_1) ) = x_1
POL( U23_1(x_1) ) = x_1
POL( U32_1(x_1) ) = x_1
POL( U51_2(x_1, x_2) ) = x_2 + 2
POL( U52_2(x_1, x_2) ) = x_2
POL( U61_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U62_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U63_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U64_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( plus_2(x_1, x_2) ) = x_1 + x_2
POL( U41_1(x_1) ) = 2x_1
POL( 0 ) = 2
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)


----------------------------------------

(197)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(198) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U21(X1, X2)) -> ACTIVE(U21(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U11_3(x_1, ..., x_3) ) = 2
POL( U12_3(x_1, ..., x_3) ) = 2
POL( U13_3(x_1, ..., x_3) ) = 2
POL( U14_3(x_1, ..., x_3) ) = 2
POL( U15_2(x_1, x_2) ) = 2
POL( U21_2(x_1, x_2) ) = 0
POL( U22_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 2
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( U16_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, x_1 - 2}
POL( U32_1(x_1) ) = max{0, x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U52_2(x_1, x_2) ) = 1
POL( U61_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( U62_3(x_1, ..., x_3) ) = max{0, x_2 - 2}
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( U64_3(x_1, ..., x_3) ) = 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U41_1(x_1) ) = max{0, -2}
POL( 0 ) = 2
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)


----------------------------------------

(199)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U22(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(200) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U22(X1, X2)) -> ACTIVE(U22(mark(X1), X2))
   MARK(U22(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U11_3(x_1, ..., x_3) ) = 2x_1 + 1
POL( U12_3(x_1, ..., x_3) ) = 2x_1 + 1
POL( U13_3(x_1, ..., x_3) ) = x_1 + 1
POL( U14_3(x_1, ..., x_3) ) = x_1 + 1
POL( U15_2(x_1, x_2) ) = 2x_1 + 1
POL( U22_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( U31_2(x_1, x_2) ) = x_1 + 1
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( tt ) = 0
POL( isNatKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( U16_1(x_1) ) = 2x_1 + 1
POL( U21_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U23_1(x_1) ) = 2x_1 + 1
POL( U32_1(x_1) ) = x_1 + 1
POL( U51_2(x_1, x_2) ) = x_2 + 2
POL( U52_2(x_1, x_2) ) = x_2 + 2
POL( U61_3(x_1, ..., x_3) ) = 2x_2 + 2
POL( U62_3(x_1, ..., x_3) ) = x_1 + x_2 + x_3 + 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_2 - 2}
POL( U64_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = x_1 + 2
POL( U41_1(x_1) ) = x_1 + 1
POL( 0 ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(201)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(202) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U22(tt, V1)) -> MARK(U23(isNat(V1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_3(x_1, ..., x_3) ) = 2
POL( U12_3(x_1, ..., x_3) ) = 2
POL( U13_3(x_1, ..., x_3) ) = 2
POL( U14_3(x_1, ..., x_3) ) = 2
POL( U15_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 2
POL( isNatKind_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( U16_1(x_1) ) = max{0, 2x_1 - 1}
POL( U21_2(x_1, x_2) ) = x_2 + 2
POL( U22_2(x_1, x_2) ) = 2x_1 + 2
POL( U23_1(x_1) ) = max{0, 2x_1 - 2}
POL( U32_1(x_1) ) = x_1 + 1
POL( U51_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U52_2(x_1, x_2) ) = x_1 + 2
POL( U61_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U62_3(x_1, ..., x_3) ) = x_1 + x_2 + 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 2}
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U41_1(x_1) ) = max{0, x_1 - 1}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)


----------------------------------------

(203)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U52(tt, N)) -> mark(N)
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(204) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(U52(tt, N)) -> mark(N)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(U52(x_1, x_2)) = 2 + x_1 + x_2
   POL(U61(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(U64(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2*x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(205)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   active(plus(N, 0)) -> mark(U51(isNat(N), N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(206) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(plus(N, 0)) -> mark(U51(isNat(N), N))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U64(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(207)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(208) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(U61(tt, M, N)) -> mark(U62(isNatKind(M), M, N))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + x_3
   POL(U64(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 0


----------------------------------------

(209)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(U64(tt, M, N)) -> mark(s(plus(N, M)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(210) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(U64(tt, M, N)) -> mark(s(plus(N, M)))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + x_3
   POL(U62(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U64(x_1, x_2, x_3)) = 2 + x_1 + x_2 + x_3
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(211)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(212) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(plus(N, s(M))) -> mark(U61(isNat(M), M, N))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2, x_3)) = x_1 + 2*x_2
   POL(U63(x_1, x_2, x_3)) = x_1
   POL(U64(x_1, x_2, x_3)) = 2*x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2*x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 0


----------------------------------------

(213)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(214) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNatKind(V1), V1, V2))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U12(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U13(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U14(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U15(x_1, x_2)) = x_1 + 2*x_2
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = 2*x_2
   POL(U22(x_1, x_2)) = 2*x_2
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 0
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 2*x_1
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1
   POL(tt) = 0


----------------------------------------

(215)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   MARK(U23(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(216) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(217)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(218) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   active(U62(tt, M, N)) -> mark(U63(isNat(N), M, N))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = 2*x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2, x_3)) = 1 + x_1
   POL(U63(x_1, x_2, x_3)) = x_1
   POL(U64(x_1, x_2, x_3)) = x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(219)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> MARK(X1)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(220) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U12(X1, X2, X3)) -> MARK(X1)
   ACTIVE(U13(tt, V1, V2)) -> MARK(U14(isNatKind(V2), V1, V2))
   ACTIVE(U14(tt, V1, V2)) -> MARK(U15(isNat(V1), V2))
   MARK(U11(X1, X2, X3)) -> MARK(X1)
   MARK(U13(X1, X2, X3)) -> MARK(X1)
   MARK(U14(X1, X2, X3)) -> MARK(X1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3
   POL(U12(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + x_3
   POL(U13(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + x_3
   POL(U14(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + x_3
   POL(U15(x_1, x_2)) = 2*x_1 + x_2
   POL(U16(x_1)) = x_1
   POL(U21(x_1, x_2)) = x_2
   POL(U22(x_1, x_2)) = x_2
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 0
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = x_1
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 0


----------------------------------------

(221)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(222) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U13(X1, X2, X3)) -> ACTIVE(U13(mark(X1), X2, X3))
   MARK(U14(X1, X2, X3)) -> ACTIVE(U14(mark(X1), X2, X3))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 2
   POL(U12(x_1, x_2, x_3)) = 2
   POL(U13(x_1, x_2, x_3)) = 0
   POL(U14(x_1, x_2, x_3)) = 0
   POL(U15(x_1, x_2)) = 2
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 0
   POL(U22(x_1, x_2)) = 0
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 2
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 0
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 2
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(223)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U12(tt, V1, V2)) -> MARK(U13(isNatKind(V2), V1, V2))
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(224) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(225)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(226) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U12(X1, X2, X3)) -> ACTIVE(U12(mark(X1), X2, X3))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 1
   POL(U12(x_1, x_2, x_3)) = 0
   POL(U13(x_1, x_2, x_3)) = 0
   POL(U14(x_1, x_2, x_3)) = 0
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 0
   POL(U22(x_1, x_2)) = 0
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 0
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(227)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V1, V2)) -> MARK(U12(isNatKind(V1), V1, V2))
   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(228) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(229)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(230) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U11(X1, X2, X3)) -> ACTIVE(U11(mark(X1), X2, X3))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2
   POL(U11(x_1, x_2, x_3)) = 0
   POL(U12(x_1, x_2, x_3)) = 0
   POL(U13(x_1, x_2, x_3)) = 0
   POL(U14(x_1, x_2, x_3)) = 0
   POL(U15(x_1, x_2)) = 1
   POL(U16(x_1)) = 0
   POL(U21(x_1, x_2)) = 0
   POL(U22(x_1, x_2)) = 0
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U62(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 0
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(231)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(232) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mark(0) -> active(0)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2
   POL(U62(x_1, x_2, x_3)) = x_1
   POL(U63(x_1, x_2, x_3)) = x_1 + 2*x_3
   POL(U64(x_1, x_2, x_3)) = x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(plus(x_1, x_2)) = 2*x_1 + x_2
   POL(s(x_1)) = x_1
   POL(tt) = 0


----------------------------------------

(233)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(234) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mark(s(X)) -> active(s(mark(X)))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2, x_3)) = x_1
   POL(U63(x_1, x_2, x_3)) = x_1
   POL(U64(x_1, x_2, x_3)) = x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(tt) = 0


----------------------------------------

(235)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(236) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(237)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U23(X)) -> MARK(X)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(238) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U23(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U15_2(x_1, x_2) ) = 2x_1 + x_2 + 1
POL( U31_2(x_1, x_2) ) = 2x_1 + 1
POL( active_1(x_1) ) = 2
POL( U11_3(x_1, ..., x_3) ) = x_1 + 2x_3 + 2
POL( tt ) = 0
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( U12_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_3 - 2}
POL( isNatKind_1(x_1) ) = 0
POL( U13_3(x_1, ..., x_3) ) = x_1 + 2
POL( U14_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( isNat_1(x_1) ) = 0
POL( U16_1(x_1) ) = 2x_1 + 1
POL( U21_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U22_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U23_1(x_1) ) = 2x_1 + 2
POL( U32_1(x_1) ) = x_1 + 1
POL( U51_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( U52_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( plus_2(x_1, x_2) ) = 2x_1 + 2
POL( s_1(x_1) ) = 0
POL( U41_1(x_1) ) = 2x_1 + 1
POL( U62_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 2}
POL( U61_3(x_1, ..., x_3) ) = x_1 + x_3 + 1
POL( 0 ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(239)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(240) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U15(X1, X2)) -> ACTIVE(U15(mark(X1), X2))
   MARK(U15(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U15_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( U31_2(x_1, x_2) ) = 2x_1 + 1
POL( active_1(x_1) ) = max{0, -2}
POL( U11_3(x_1, ..., x_3) ) = x_1 + 2
POL( tt ) = 2
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( U12_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( isNatKind_1(x_1) ) = 0
POL( U13_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_3 - 2}
POL( U14_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( isNat_1(x_1) ) = 0
POL( U16_1(x_1) ) = x_1 + 1
POL( U21_2(x_1, x_2) ) = 2x_1 + 2
POL( U22_2(x_1, x_2) ) = 2
POL( U23_1(x_1) ) = 2
POL( U32_1(x_1) ) = 2x_1 + 1
POL( U51_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U52_2(x_1, x_2) ) = 2x_1 + 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 - 2}
POL( U64_3(x_1, ..., x_3) ) = 2
POL( plus_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( s_1(x_1) ) = 0
POL( U41_1(x_1) ) = x_1 + 1
POL( U62_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 1
POL( U61_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( 0 ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(241)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(242) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U15(tt, V2)) -> MARK(U16(isNat(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U31_2(x_1, x_2) ) = 0
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( U11_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 2x_3 + 2
POL( tt ) = 2
POL( mark_1(x_1) ) = max{0, 2x_1 - 1}
POL( U12_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( isNatKind_1(x_1) ) = 1
POL( U13_3(x_1, ..., x_3) ) = max{0, x_2 + 2x_3 - 2}
POL( U14_3(x_1, ..., x_3) ) = max{0, 2x_3 - 2}
POL( U15_2(x_1, x_2) ) = 2x_1 + 2
POL( isNat_1(x_1) ) = 0
POL( U16_1(x_1) ) = max{0, 2x_1 - 2}
POL( U21_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U22_2(x_1, x_2) ) = x_1 + 2
POL( U23_1(x_1) ) = max{0, x_1 - 2}
POL( U32_1(x_1) ) = max{0, 2x_1 - 2}
POL( U51_2(x_1, x_2) ) = 2x_1 + 2
POL( U52_2(x_1, x_2) ) = 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_3 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, 2x_3 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( s_1(x_1) ) = 0
POL( U41_1(x_1) ) = max{0, x_1 - 2}
POL( U62_3(x_1, ..., x_3) ) = x_1 + x_3 + 2
POL( U61_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 2}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)


----------------------------------------

(243)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(244) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mark(U62(X1, X2, X3)) -> active(U62(mark(X1), X2, X3))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = 2*x_1
   POL(U13(x_1, x_2, x_3)) = 2*x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U62(x_1, x_2, x_3)) = 2 + x_1
   POL(U63(x_1, x_2, x_3)) = 2*x_1
   POL(U64(x_1, x_2, x_3)) = x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(245)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U62(mark(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, mark(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, mark(X3)) -> U62(X1, X2, X3)
   U62(active(X1), X2, X3) -> U62(X1, X2, X3)
   U62(X1, active(X2), X3) -> U62(X1, X2, X3)
   U62(X1, X2, active(X3)) -> U62(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(246) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(247)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U62(mark(x0), x1, x2)
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U62(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U21(x0, mark(x1))
   U62(active(x0), x1, x2)
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U62(x0, x1, mark(x2))
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(248) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U62(mark(x0), x1, x2)
   U62(x0, active(x1), x2)
   U62(x0, mark(x1), x2)
   U62(x0, x1, active(x2))
   U62(active(x0), x1, x2)
   U62(x0, x1, mark(x2))


----------------------------------------

(249)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(250) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2, x_3)) = 2*x_1
   POL(U12(x_1, x_2, x_3)) = x_1
   POL(U13(x_1, x_2, x_3)) = x_1
   POL(U14(x_1, x_2, x_3)) = x_1
   POL(U15(x_1, x_2)) = 2*x_1
   POL(U16(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = 2*x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1, x_2)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1
   POL(U63(x_1, x_2, x_3)) = 2*x_1
   POL(U64(x_1, x_2, x_3)) = 2*x_1
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = 2*x_1
   POL(plus(x_1, x_2)) = 2 + x_1 + x_2
   POL(s(x_1)) = 0
   POL(tt) = 0


----------------------------------------

(251)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(active(X)) -> U16(X)
   U16(mark(X)) -> U16(X)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(active(X)) -> U23(X)
   U23(mark(X)) -> U23(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(active(X)) -> U41(X)
   U41(mark(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(252) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(253)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U16(X)) -> MARK(X)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(254) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MARK(U16(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = 0
   POL(MARK(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U12(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U13(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U14(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U15(x_1, x_2)) = 2 + 2*x_2
   POL(U16(x_1)) = 1 + 2*x_1
   POL(U21(x_1, x_2)) = 0
   POL(U22(x_1, x_2)) = 0
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2
   POL(U52(x_1, x_2)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U63(x_1, x_2, x_3)) = 2*x_2
   POL(U64(x_1, x_2, x_3)) = 0
   POL(active(x_1)) = x_1
   POL(isNat(x_1)) = x_1
   POL(isNatKind(x_1)) = 0
   POL(mark(x_1)) = x_1
   POL(plus(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(s(x_1)) = 1 + 2*x_1
   POL(tt) = 0


----------------------------------------

(255)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(256) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatKind(plus(V1, V2))) -> MARK(U31(isNatKind(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U31_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( active_1(x_1) ) = x_1
POL( U11_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 2
POL( tt ) = 2
POL( mark_1(x_1) ) = x_1
POL( U12_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( isNatKind_1(x_1) ) = 2x_1 + 2
POL( U13_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U14_3(x_1, ..., x_3) ) = 2x_3 + 1
POL( U15_2(x_1, x_2) ) = 2x_2 + 1
POL( isNat_1(x_1) ) = x_1
POL( U16_1(x_1) ) = 2x_1
POL( U21_2(x_1, x_2) ) = 2x_2 + 1
POL( U22_2(x_1, x_2) ) = 2x_2
POL( U23_1(x_1) ) = x_1
POL( U32_1(x_1) ) = x_1 + 2
POL( U51_2(x_1, x_2) ) = 2
POL( U52_2(x_1, x_2) ) = 2
POL( U63_3(x_1, ..., x_3) ) = 2
POL( U64_3(x_1, ..., x_3) ) = 2
POL( plus_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( s_1(x_1) ) = 2x_1 + 1
POL( U41_1(x_1) ) = x_1 + 2
POL( U61_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 2x_3 + 2
POL( 0 ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)


----------------------------------------

(257)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(258) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( active_1(x_1) ) = 2
POL( U11_3(x_1, ..., x_3) ) = x_1 + x_3
POL( tt ) = 0
POL( mark_1(x_1) ) = max{0, 2x_1 - 2}
POL( U12_3(x_1, ..., x_3) ) = max{0, 2x_3 - 2}
POL( isNatKind_1(x_1) ) = 0
POL( U13_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_2 - 2}
POL( U14_3(x_1, ..., x_3) ) = x_1 + x_2 + 2x_3 + 2
POL( U15_2(x_1, x_2) ) = x_1 + 2
POL( isNat_1(x_1) ) = 1
POL( U16_1(x_1) ) = max{0, 2x_1 - 2}
POL( U21_2(x_1, x_2) ) = max{0, x_2 - 1}
POL( U22_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U23_1(x_1) ) = 2
POL( U32_1(x_1) ) = 2x_1 + 1
POL( U51_2(x_1, x_2) ) = 2
POL( U52_2(x_1, x_2) ) = 2
POL( U63_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( U64_3(x_1, ..., x_3) ) = max{0, x_2 - 2}
POL( plus_2(x_1, x_2) ) = 0
POL( s_1(x_1) ) = 0
POL( U41_1(x_1) ) = 2x_1 + 1
POL( U61_3(x_1, ..., x_3) ) = max{0, 2x_1 - 2}
POL( 0 ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(259)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U31(tt, V2)) -> MARK(U32(isNatKind(V2)))
   MARK(U32(X)) -> MARK(X)
   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   MARK(U41(X)) -> MARK(X)
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(260) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(261)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))
   MARK(U41(X)) -> MARK(X)
   MARK(U32(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNatKind(V1), V1, V2))
   mark(U12(X1, X2, X3)) -> active(U12(mark(X1), X2, X3))
   active(U12(tt, V1, V2)) -> mark(U13(isNatKind(V2), V1, V2))
   mark(U13(X1, X2, X3)) -> active(U13(mark(X1), X2, X3))
   active(U13(tt, V1, V2)) -> mark(U14(isNatKind(V2), V1, V2))
   mark(U14(X1, X2, X3)) -> active(U14(mark(X1), X2, X3))
   active(U14(tt, V1, V2)) -> mark(U15(isNat(V1), V2))
   mark(U15(X1, X2)) -> active(U15(mark(X1), X2))
   active(U15(tt, V2)) -> mark(U16(isNat(V2)))
   mark(U16(X)) -> active(U16(mark(X)))
   active(U21(tt, V1)) -> mark(U22(isNatKind(V1), V1))
   mark(U22(X1, X2)) -> active(U22(mark(X1), X2))
   active(U22(tt, V1)) -> mark(U23(isNat(V1)))
   mark(U23(X)) -> active(U23(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNatKind(V2)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U51(tt, N)) -> mark(U52(isNatKind(N), N))
   mark(U52(X1, X2)) -> active(U52(mark(X1), X2))
   active(U63(tt, M, N)) -> mark(U64(isNatKind(N), M, N))
   mark(U64(X1, X2, X3)) -> active(U64(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNatKind(V1), V1, V2))
   mark(U11(X1, X2, X3)) -> active(U11(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   mark(U21(X1, X2)) -> active(U21(mark(X1), X2))
   active(isNatKind(plus(V1, V2))) -> mark(U31(isNatKind(V1), V2))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(isNatKind(s(V1))) -> mark(U41(isNatKind(V1)))
   mark(U41(X)) -> active(U41(mark(X)))
   mark(U63(X1, X2, X3)) -> active(U63(mark(X1), X2, X3))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(isNatKind(X)) -> active(isNatKind(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(tt) -> active(tt)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatKind(0)) -> mark(tt)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   active(U16(tt)) -> mark(tt)
   active(U23(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U41(tt)) -> mark(tt)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U63(mark(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, mark(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, mark(X3)) -> U63(X1, X2, X3)
   U63(active(X1), X2, X3) -> U63(X1, X2, X3)
   U63(X1, active(X2), X3) -> U63(X1, X2, X3)
   U63(X1, X2, active(X3)) -> U63(X1, X2, X3)
   U12(mark(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, mark(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, mark(X3)) -> U12(X1, X2, X3)
   U12(active(X1), X2, X3) -> U12(X1, X2, X3)
   U12(X1, active(X2), X3) -> U12(X1, X2, X3)
   U12(X1, X2, active(X3)) -> U12(X1, X2, X3)
   U13(mark(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, mark(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, mark(X3)) -> U13(X1, X2, X3)
   U13(active(X1), X2, X3) -> U13(X1, X2, X3)
   U13(X1, active(X2), X3) -> U13(X1, X2, X3)
   U13(X1, X2, active(X3)) -> U13(X1, X2, X3)
   U14(mark(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, mark(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, mark(X3)) -> U14(X1, X2, X3)
   U14(active(X1), X2, X3) -> U14(X1, X2, X3)
   U14(X1, active(X2), X3) -> U14(X1, X2, X3)
   U14(X1, X2, active(X3)) -> U14(X1, X2, X3)
   U15(mark(X1), X2) -> U15(X1, X2)
   U15(X1, mark(X2)) -> U15(X1, X2)
   U15(active(X1), X2) -> U15(X1, X2)
   U15(X1, active(X2)) -> U15(X1, X2)
   U16(mark(X)) -> U16(X)
   U16(active(X)) -> U16(X)
   U22(mark(X1), X2) -> U22(X1, X2)
   U22(X1, mark(X2)) -> U22(X1, X2)
   U22(active(X1), X2) -> U22(X1, X2)
   U22(X1, active(X2)) -> U22(X1, X2)
   U23(mark(X)) -> U23(X)
   U23(active(X)) -> U23(X)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U52(mark(X1), X2) -> U52(X1, X2)
   U52(X1, mark(X2)) -> U52(X1, X2)
   U52(active(X1), X2) -> U52(X1, X2)
   U52(X1, active(X2)) -> U52(X1, X2)
   U64(mark(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, mark(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, mark(X3)) -> U64(X1, X2, X3)
   U64(active(X1), X2, X3) -> U64(X1, X2, X3)
   U64(X1, active(X2), X3) -> U64(X1, X2, X3)
   U64(X1, X2, active(X3)) -> U64(X1, X2, X3)
   U11(mark(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, mark(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, mark(X3)) -> U11(X1, X2, X3)
   U11(active(X1), X2, X3) -> U11(X1, X2, X3)
   U11(X1, active(X2), X3) -> U11(X1, X2, X3)
   U11(X1, X2, active(X3)) -> U11(X1, X2, X3)
   U21(mark(X1), X2) -> U21(X1, X2)
   U21(X1, mark(X2)) -> U21(X1, X2)
   U21(active(X1), X2) -> U21(X1, X2)
   U21(X1, active(X2)) -> U21(X1, X2)
   U41(mark(X)) -> U41(X)
   U41(active(X)) -> U41(X)

The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(262) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(263)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))
   MARK(U41(X)) -> MARK(X)
   MARK(U32(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U41(active(x0))
   isNatKind(mark(x0))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   s(active(x0))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   s(mark(x0))
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   U41(mark(x0))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   U32(active(x0))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   U32(mark(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   isNatKind(active(x0))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(264) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   active(U12(tt, x0, x1))
   active(U23(tt))
   U22(mark(x0), x1)
   U15(active(x0), x1)
   mark(U62(x0, x1, x2))
   mark(U22(x0, x1))
   mark(U15(x0, x1))
   isNat(mark(x0))
   U51(x0, active(x1))
   U21(mark(x0), x1)
   U63(x0, active(x1), x2)
   U14(x0, x1, mark(x2))
   U61(mark(x0), x1, x2)
   U11(x0, x1, active(x2))
   U63(x0, x1, mark(x2))
   active(U16(tt))
   U52(x0, active(x1))
   U64(x0, active(x1), x2)
   U11(active(x0), x1, x2)
   mark(U23(x0))
   mark(0)
   U64(x0, x1, mark(x2))
   mark(U63(x0, x1, x2))
   U13(mark(x0), x1, x2)
   U64(mark(x0), x1, x2)
   active(U52(tt, x0))
   U61(x0, active(x1), x2)
   U12(x0, x1, mark(x2))
   U22(x0, active(x1))
   mark(U16(x0))
   plus(mark(x0), x1)
   U31(x0, mark(x1))
   U13(x0, x1, active(x2))
   U61(x0, x1, mark(x2))
   U51(x0, mark(x1))
   U14(x0, x1, active(x2))
   active(isNat(0))
   mark(U32(x0))
   active(isNatKind(0))
   U21(x0, active(x1))
   U13(x0, active(x1), x2)
   active(U64(tt, x0, x1))
   active(U13(tt, x0, x1))
   mark(U61(x0, x1, x2))
   plus(active(x0), x1)
   active(isNat(s(x0)))
   active(U41(tt))
   active(U11(tt, x0, x1))
   active(isNatKind(s(x0)))
   U15(mark(x0), x1)
   U12(mark(x0), x1, x2)
   mark(U11(x0, x1, x2))
   U16(active(x0))
   U52(active(x0), x1)
   U12(active(x0), x1, x2)
   U11(x0, x1, mark(x2))
   U63(x0, x1, active(x2))
   mark(U12(x0, x1, x2))
   mark(plus(x0, x1))
   U61(active(x0), x1, x2)
   active(plus(x0, 0))
   active(U21(tt, x0))
   active(U31(tt, x0))
   mark(U13(x0, x1, x2))
   U16(mark(x0))
   U61(x0, mark(x1), x2)
   U64(x0, x1, active(x2))
   U64(active(x0), x1, x2)
   U14(x0, mark(x1), x2)
   U13(x0, mark(x1), x2)
   active(U22(tt, x0))
   U22(x0, mark(x1))
   U51(active(x0), x1)
   active(isNat(plus(x0, x1)))
   active(U62(tt, x0, x1))
   U63(active(x0), x1, x2)
   active(plus(x0, s(x1)))
   active(U63(tt, x0, x1))
   active(U14(tt, x0, x1))
   active(U32(tt))
   mark(tt)
   U63(x0, mark(x1), x2)
   U21(x0, mark(x1))
   U31(active(x0), x1)
   mark(U14(x0, x1, x2))
   U11(x0, mark(x1), x2)
   U52(mark(x0), x1)
   mark(U31(x0, x1))
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   U15(x0, active(x1))
   U12(x0, active(x1), x2)
   U14(x0, active(x1), x2)
   U21(active(x0), x1)
   mark(isNat(x0))
   isNat(active(x0))
   U13(active(x0), x1, x2)
   U14(active(x0), x1, x2)
   U51(mark(x0), x1)
   U22(active(x0), x1)
   mark(U21(x0, x1))
   U11(mark(x0), x1, x2)
   U31(x0, active(x1))
   U61(x0, x1, active(x2))
   plus(x0, active(x1))
   U23(active(x0))
   active(isNatKind(plus(x0, x1)))
   U31(mark(x0), x1)
   U63(mark(x0), x1, x2)
   mark(U51(x0, x1))
   U13(x0, x1, mark(x2))
   active(U51(tt, x0))
   active(U15(tt, x0))
   U12(x0, x1, active(x2))
   U15(x0, mark(x1))
   U12(x0, mark(x1), x2)
   U23(mark(x0))
   mark(s(x0))
   mark(U64(x0, x1, x2))
   plus(x0, mark(x1))
   U11(x0, active(x1), x2)
   U52(x0, mark(x1))
   U64(x0, mark(x1), x2)
   mark(U41(x0))
   U14(mark(x0), x1, x2)
   active(U61(tt, x0, x1))


----------------------------------------

(265)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))
   MARK(U41(X)) -> MARK(X)
   MARK(U32(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U41(active(x0))
   isNatKind(mark(x0))
   s(active(x0))
   s(mark(x0))
   U41(mark(x0))
   U32(active(x0))
   U32(mark(x0))
   isNatKind(active(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(266) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(isNatKind(s(V1))) -> MARK(U41(isNatKind(V1)))
   MARK(U32(X)) -> MARK(X)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U32(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(isNatKind(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1


----------------------------------------

(267)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(isNatKind(X)) -> ACTIVE(isNatKind(X))
   MARK(U41(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U41(active(x0))
   isNatKind(mark(x0))
   s(active(x0))
   s(mark(x0))
   U41(mark(x0))
   U32(active(x0))
   U32(mark(x0))
   isNatKind(active(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(268) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(269)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U41(active(x0))
   isNatKind(mark(x0))
   s(active(x0))
   s(mark(x0))
   U41(mark(x0))
   U32(active(x0))
   U32(mark(x0))
   isNatKind(active(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(270) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isNatKind(mark(x0))
   s(active(x0))
   s(mark(x0))
   U32(active(x0))
   U32(mark(x0))
   isNatKind(active(x0))


----------------------------------------

(271)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   U41(active(x0))
   U41(mark(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(272) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U41(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(273)
YES
