YES
proof of /home/ff862203/input_nWUZBlHZDC.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) QDPOrderProof [EQUIVALENT, 1 ms]
        (14) QDP
        (15) DependencyGraphProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FROM(X) -> MARK(X)
   A__LENGTH(cons(X, Y)) -> A__LENGTH1(Y)
   A__LENGTH1(X) -> A__LENGTH(X)
   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(length(X)) -> A__LENGTH(X)
   MARK(length1(X)) -> A__LENGTH1(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH1(X) -> A__LENGTH(X)
   A__LENGTH(cons(X, Y)) -> A__LENGTH1(Y)

The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH1(X) -> A__LENGTH(X)
   A__LENGTH(cons(X, Y)) -> A__LENGTH1(Y)

R is empty.
The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH1(X) -> A__LENGTH(X)
   A__LENGTH(cons(X, Y)) -> A__LENGTH1(Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A__LENGTH(cons(X, Y)) -> A__LENGTH1(Y)
The graph contains the following edges 1 > 1


*A__LENGTH1(X) -> A__LENGTH(X)
The graph contains the following edges 1 >= 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(from(X)) -> A__FROM(mark(X))
   A__FROM(X) -> MARK(X)
   MARK(from(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__FROM_1(x_1) ) = 2x_1
POL( mark_1(x_1) ) = 2x_1
POL( from_1(x_1) ) = 2x_1 + 2
POL( a__from_1(x_1) ) = 2x_1 + 2
POL( length_1(x_1) ) = 0
POL( a__length_1(x_1) ) = 0
POL( length1_1(x_1) ) = 0
POL( a__length1_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = x_1 + 1
POL( s_1(x_1) ) = 2x_1
POL( nil ) = 1
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length(X) -> length(X)
   a__length1(X) -> a__length(X)
   a__length1(X) -> length1(X)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FROM(X) -> MARK(X)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__from(X) -> cons(mark(X), from(s(X)))
   a__length(nil) -> 0
   a__length(cons(X, Y)) -> s(a__length1(Y))
   a__length1(X) -> a__length(X)
   mark(from(X)) -> a__from(mark(X))
   mark(length(X)) -> a__length(X)
   mark(length1(X)) -> a__length1(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(0) -> 0
   a__from(X) -> from(X)
   a__length(X) -> length(X)
   a__length1(X) -> length1(X)

The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(cons(x0, x1))
   a__length(x0)
   a__from(x0)
   mark(nil)
   mark(from(x0))
   mark(0)
   mark(length(x0))
   mark(length1(x0))
   a__length1(x0)
   mark(s(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES
