YES
proof of /home/ff862203/input_0wM3hN7bLU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QReductionProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) Induction-Processor [SOUND, 3 ms]
        (25) AND
            (26) QDP
                (27) PisEmptyProof [EQUIVALENT, 0 ms]
                (28) YES
            (29) QTRS
                (30) QTRSRRRProof [EQUIVALENT, 0 ms]
                (31) QTRS
                (32) RisEmptyProof [EQUIVALENT, 0 ms]
                (33) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(s(x), s(y)), s(y)))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   LE(s(x), s(y)) -> LE(x, y)
   QUOT(s(x), s(y)) -> QUOT(minus(s(x), s(y)), s(y))
   QUOT(s(x), s(y)) -> MINUS(s(x), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(s(x), s(y)), s(y)))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 1 less node.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(s(x), s(y)), s(y)))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(s(x), s(y)), s(y)))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(s(x), s(y)), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(s(x), s(y)), s(y)))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(s(x), s(y)), s(y))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   minus(s(x0), s(x1))
   minus(x0, 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(s(x0), s(x1))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(s(x), s(y)), s(y))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(s(x0), s(x1))
   minus(x0, 0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) Induction-Processor (SOUND)

This DP could be deleted by the Induction-Processor:
QUOT(s(x), s(y)) -> QUOT(minus(s(x), s(y)), s(y))


This order was computed:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(QUOT(x_1, x_2)) = x_1
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 1 + x_1

At least one of these decreasing rules is always used after the deleted DP:
minus(s(x'), s(y')) -> minus(x', y')


The following formula is valid:
x:sort[a0],y:sort[a0].minus'(s(x), s(y))=true


The transformed set:
minus'(s(x'), s(y')) -> true
minus'(x'', 0) -> false
minus'(0, s(v4)) -> false
minus(s(x'), s(y')) -> minus(x', y')
minus(x'', 0) -> x''
minus(0, s(v4)) -> 0
equal_bool(true, false) -> false
equal_bool(false, true) -> false
equal_bool(true, true) -> true
equal_bool(false, false) -> true
and(true, x) -> x
and(false, x) -> false
or(true, x) -> true
or(false, x) -> x
not(false) -> true
not(true) -> false
isa_true(true) -> true
isa_true(false) -> false
isa_false(true) -> false
isa_false(false) -> true
equal_sort[a0](s(v5), s(v6)) -> equal_sort[a0](v5, v6)
equal_sort[a0](s(v5), 0) -> false
equal_sort[a0](0, s(v7)) -> false
equal_sort[a0](0, 0) -> true
equal_sort[a13](witness_sort[a13], witness_sort[a13]) -> true


The proof given by the theorem prover:
The following output was given by the internal theorem prover:proof of internal
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Partial correctness of the following Program

   [x, v5, v6, v7, x', y', x'', v4]
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   true and x -> x
   false and x -> false
   true or x -> true
   false or x -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](s(v5), s(v6)) -> equal_sort[a0](v5, v6)
   equal_sort[a0](s(v5), 0) -> false
   equal_sort[a0](0, s(v7)) -> false
   equal_sort[a0](0, 0) -> true
   equal_sort[a13](witness_sort[a13], witness_sort[a13]) -> true
   minus'(s(x'), s(y')) -> true
   minus'(x'', 0) -> false
   minus'(0, s(v4)) -> false
   minus(s(x'), s(y')) -> minus(x', y')
   minus(x'', 0) -> x''
   minus(0, s(v4)) -> 0

using the following formula:
x:sort[a0],y:sort[a0].minus'(s(x), s(y))=true

could be successfully shown:
(0) Formula
(1) Symbolic evaluation [EQUIVALENT, 0 ms]
(2) YES


----------------------------------------

(0)
Obligation:
Formula:
x:sort[a0],y:sort[a0].minus'(s(x), s(y))=true

There are no hypotheses.




----------------------------------------

(1) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(2)
YES

----------------------------------------

(25)
Complex Obligation (AND)

----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(s(x0), s(x1))
   minus(x0, 0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus'(s(x'), s(y')) -> true
   minus'(x'', 0) -> false
   minus'(0, s(v4)) -> false
   minus(s(x'), s(y')) -> minus(x', y')
   minus(x'', 0) -> x''
   minus(0, s(v4)) -> 0
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](s(v5), s(v6)) -> equal_sort[a0](v5, v6)
   equal_sort[a0](s(v5), 0) -> false
   equal_sort[a0](0, s(v7)) -> false
   equal_sort[a0](0, 0) -> true
   equal_sort[a13](witness_sort[a13], witness_sort[a13]) -> true

Q is empty.

----------------------------------------

(30) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:isa_true_1 > witness_sort[a13] > equal_sort[a13]_2 > minus'_2 > equal_sort[a0]_2 > isa_false_1 > minus_2 > not_1 > or_2 > false > true > equal_bool_2 > and_2 > 0 > s_1

and weight map:

   true=4
   0=3
   false=3
   witness_sort[a13]=1
   s_1=1
   not_1=1
   isa_true_1=0
   isa_false_1=2
   minus'_2=0
   minus_2=0
   equal_bool_2=0
   and_2=0
   or_2=0
   equal_sort[a0]_2=0
   equal_sort[a13]_2=3

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   minus'(s(x'), s(y')) -> true
   minus'(x'', 0) -> false
   minus'(0, s(v4)) -> false
   minus(s(x'), s(y')) -> minus(x', y')
   minus(x'', 0) -> x''
   minus(0, s(v4)) -> 0
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a0](s(v5), s(v6)) -> equal_sort[a0](v5, v6)
   equal_sort[a0](s(v5), 0) -> false
   equal_sort[a0](0, s(v7)) -> false
   equal_sort[a0](0, 0) -> true
   equal_sort[a13](witness_sort[a13], witness_sort[a13]) -> true




----------------------------------------

(31)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(32) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(33)
YES
