YES
proof of /home/ff862203/input_AjoCD6y7Gj.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 7 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) TransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) TransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) TransformationProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) TransformationProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) TransformationProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 10 ms]
        (36) QDP
        (37) QDPOrderProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) PisEmptyProof [EQUIVALENT, 0 ms]
        (40) YES
    (41) QDP
        (42) UsableRulesProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) QReductionProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPOrderProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPOrderProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) PisEmptyProof [EQUIVALENT, 0 ms]
        (51) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(s(x), s(y)) -> IF(gt(x, y), x, y)
   PLUS(s(x), s(y)) -> GT(x, y)
   PLUS(s(x), s(y)) -> IF(not(gt(x, y)), id(x), id(y))
   PLUS(s(x), s(y)) -> NOT(gt(x, y))
   PLUS(s(x), s(y)) -> ID(x)
   PLUS(s(x), s(y)) -> ID(y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), x) -> IF(gt(x, x), id(x), id(x))
   PLUS(s(x), x) -> GT(x, x)
   PLUS(s(x), x) -> ID(x)
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))
   PLUS(id(x), s(y)) -> IF(gt(s(y), y), y, s(y))
   PLUS(id(x), s(y)) -> GT(s(y), y)
   NOT(x) -> IF(x, false, true)
   GT(s(x), s(y)) -> GT(x, y)
   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(x, 0, s(z)) -> PLUS(z, s(0))

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 14 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   id(x) -> x

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   plus(s(x0), x0)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   not(x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x)) at position [0,1] we obtained the following new rules [LPAR04]:

   (PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x)),PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x)))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   not(x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y))) at position [1,0] we obtained the following new rules [LPAR04]:

   (PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y))),PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   not(x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   not(x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   not(x0)


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule PLUS(s(x), x) -> PLUS(if(gt(x, x), x, id(x)), s(x)) at position [0,2] we obtained the following new rules [LPAR04]:

   (PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x)),PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x)))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y)))
   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), id(x), id(y))) at position [1,1] we obtained the following new rules [LPAR04]:

   (PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, id(y))),PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, id(y))))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, id(y)))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, id(y))) at position [1,2] we obtained the following new rules [LPAR04]:

   (PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y)),PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y)))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   id(x0)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), x) -> PLUS(if(gt(x, x), x, x), s(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(PLUS(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[3A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(false) =  	[[0A]]
>>>

   <<<
 POL(true) =  	[[5A]]
>>>

   <<<
 POL(zero) =  	[[2A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(true, x, y) -> x
   if(false, x, y) -> y


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y))

The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(if(gt(x, y), false, true), x, y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( PLUS_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( if_3(x_1, ..., x_3) ) = x_2 + x_3
POL( gt_2(x_1, x_2) ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( zero ) = 0
POL( true ) = 0
POL( false ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(true, x, y) -> x
   if(false, x, y) -> y


----------------------------------------

(38)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(40)
YES

----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   gt(s(x), zero) -> true
   not(x) -> if(x, false, true)

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   quot(s(x0), s(x1), x2)
   plus(s(x0), s(x1))
   plus(zero, x0)
   quot(x0, 0, s(x1))
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   quot(x0, 0, s(x1))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   gt(s(x), zero) -> true
   not(x) -> if(x, false, true)

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   plus(s(x0), s(x1))
   plus(zero, x0)
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2, x3)  =  x1

s(x1)  =  s(x1)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))

The TRS R consists of the following rules:

   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   gt(s(x), zero) -> true
   not(x) -> if(x, false, true)

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   plus(s(x0), s(x1))
   plus(zero, x0)
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2, x3)  =  x2

0  =  0

plus(x1, x2)  =  x2

s(x1)  =  s


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=1
   0=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y


----------------------------------------

(49)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   gt(s(x), zero) -> true
   not(x) -> if(x, false, true)

The set Q consists of the following terms:

   gt(zero, x0)
   if(false, x0, x1)
   id(x0)
   gt(s(x0), s(x1))
   if(true, x0, x1)
   plus(s(x0), s(x1))
   plus(zero, x0)
   not(x0)
   plus(s(x0), x0)
   gt(s(x0), zero)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(51)
YES
