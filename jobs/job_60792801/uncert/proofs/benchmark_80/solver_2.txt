YES

Problem 1: 

(VAR vu95NonEmpty x y z)
(RULES
gt(s(x),s(y)) -> gt(x,y)
gt(s(x),zero) -> ftrue
gt(zero,y) -> ffalse
id(x) -> x
if(ffalse,x,y) -> y
if(ftrue,x,y) -> x
not(x) -> if(x,ffalse,ftrue)
plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
plus(zero,y) -> y
quot(num0,s(y),s(z)) -> num0
quot(s(x),s(y),z) -> quot(x,y,z)
quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
 NOT(x) -> IF(x,ffalse,ftrue)
 PLUS(s(x),s(y)) -> GT(x,y)
 PLUS(s(x),s(y)) -> ID(x)
 PLUS(s(x),s(y)) -> ID(y)
 PLUS(s(x),s(y)) -> IF(gt(x,y),x,y)
 PLUS(s(x),s(y)) -> IF(not(gt(x,y)),id(x),id(y))
 PLUS(s(x),s(y)) -> NOT(gt(x,y))
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> GT(x,x)
 PLUS(s(x),x) -> ID(x)
 PLUS(s(x),x) -> IF(gt(x,x),id(x),id(x))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
 QUOT(s(x),s(y),z) -> QUOT(x,y,z)
 QUOT(x,num0,s(z)) -> PLUS(z,s(num0))
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))

Problem 1: 

SCC Processor:
-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
 NOT(x) -> IF(x,ffalse,ftrue)
 PLUS(s(x),s(y)) -> GT(x,y)
 PLUS(s(x),s(y)) -> ID(x)
 PLUS(s(x),s(y)) -> ID(y)
 PLUS(s(x),s(y)) -> IF(gt(x,y),x,y)
 PLUS(s(x),s(y)) -> IF(not(gt(x,y)),id(x),id(y))
 PLUS(s(x),s(y)) -> NOT(gt(x,y))
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> GT(x,x)
 PLUS(s(x),x) -> ID(x)
 PLUS(s(x),x) -> IF(gt(x,x),id(x),id(x))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
 QUOT(s(x),s(y),z) -> QUOT(x,y,z)
 QUOT(x,num0,s(z)) -> PLUS(z,s(num0))
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
->->-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->->Cycle:
->->-> Pairs:
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
->->-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->->Cycle:
->->-> Pairs:
 QUOT(s(x),s(y),z) -> QUOT(x,y,z)
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
->->-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 GT(s(x),s(y)) -> GT(x,y)
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Projection:
 pi(GT) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 PLUS(s(x),s(y)) -> PLUS(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
-> Usable rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[gt](X1,X2) = 3.X1 + 1
[id](X) = X
[if](X1,X2,X3) = X2 + X3
[not](X) = 3.X + 4
[plus](X1,X2) = 0
[quot](X1,X2,X3) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 3
[s](X) = 4.X + 3/2
[ftrue] = 0
[zero] = 3/4
[GT](X1,X2) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[NOT](X) = 0
[PLUS](X1,X2) = 4.X1 + 2.X2
[QUOT](X1,X2,X3) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
->->-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 PLUS(s(x),x) -> PLUS(if(gt(x,x),id(x),id(x)),s(x))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
-> Usable rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gt](X1,X2) = 2.X1 + 2
[id](X) = X
[if](X1,X2,X3) = X2 + X3
[not](X) = 0
[plus](X1,X2) = 0
[quot](X1,X2,X3) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[s](X) = 2.X + 1
[ftrue] = 1
[zero] = 2
[GT](X1,X2) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[NOT](X) = 0
[PLUS](X1,X2) = 2.X1
[QUOT](X1,X2,X3) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 QUOT(s(x),s(y),z) -> QUOT(x,y,z)
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Projection:
 pi(QUOT) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
->->-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 QUOT(x,num0,s(z)) -> QUOT(x,plus(z,s(num0)),s(z))
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
-> Usable rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gt](X1,X2) = 2
[id](X) = X + 2
[if](X1,X2,X3) = 2.X2 + X3
[not](X) = 2
[plus](X1,X2) = X2
[quot](X1,X2,X3) = 0
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 0
[ftrue] = 2
[zero] = 2
[GT](X1,X2) = 0
[ID](X) = 0
[IF](X1,X2,X3) = 0
[NOT](X) = 0
[PLUS](X1,X2) = 0
[QUOT](X1,X2,X3) = 2.X2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gt(s(x),s(y)) -> gt(x,y)
 gt(s(x),zero) -> ftrue
 gt(zero,y) -> ffalse
 id(x) -> x
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 not(x) -> if(x,ffalse,ftrue)
 plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
 plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
 plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
 plus(zero,y) -> y
 quot(num0,s(y),s(z)) -> num0
 quot(s(x),s(y),z) -> quot(x,y,z)
 quot(x,num0,s(z)) -> s(quot(x,plus(z,s(num0)),s(z)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
