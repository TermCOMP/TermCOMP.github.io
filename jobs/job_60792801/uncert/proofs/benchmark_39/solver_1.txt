YES
proof of /home/ff862203/input_SZQY8ApFsv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 9 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) ATransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) TransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(f, app(g, x)), app(s, 0)), y) -> app(app(app(f, app(g, app(s, 0))), y), app(g, x))
   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(app(app(f, app(g, app(s, 0))), y), app(g, x))
   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(app(f, app(g, app(s, 0))), y)
   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(f, app(g, app(s, 0)))
   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(g, app(s, 0))
   APP(g, app(s, x)) -> APP(s, app(g, x))
   APP(g, app(s, x)) -> APP(g, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(cons, app(fun, x)), app(app(map, fun), xs))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(cons, app(fun, x))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(filter2, app(fun, x)), fun), x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(filter2, app(fun, x)), fun)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(filter2, app(fun, x))
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(cons, x), app(app(filter, fun), xs))
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(filter, fun)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(filter, fun)

The TRS R consists of the following rules:

   app(app(app(f, app(g, x)), app(s, 0)), y) -> app(app(app(f, app(g, app(s, 0))), y), app(g, x))
   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 14 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(g, app(s, x)) -> APP(g, x)

The TRS R consists of the following rules:

   app(app(app(f, app(g, x)), app(s, 0)), y) -> app(app(app(f, app(g, app(s, 0))), y), app(g, x))
   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(g, app(s, x)) -> APP(g, x)

R is empty.
The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   g1(s(x)) -> g1(x)

R is empty.
The set Q consists of the following terms:

   f(g(x0), s(0), x1)
   g(0)
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   g(s(x0))
   filter2(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(g(x0), s(0), x1)
   g(0)
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   g(s(x0))
   filter2(true, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   g1(s(x)) -> g1(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*g1(s(x)) -> g1(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(app(app(f, app(g, app(s, 0))), y), app(g, x))

The TRS R consists of the following rules:

   app(app(app(f, app(g, x)), app(s, 0)), y) -> app(app(app(f, app(g, app(s, 0))), y), app(g, x))
   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(f, app(g, x)), app(s, 0)), y) -> APP(app(app(f, app(g, app(s, 0))), y), app(g, x))

The TRS R consists of the following rules:

   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(g(x), s(0), y) -> f1(g(s(0)), y, g(x))

The TRS R consists of the following rules:

   g(s(x)) -> s(g(x))
   g(0) -> 0

The set Q consists of the following terms:

   f(g(x0), s(0), x1)
   g(0)
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   g(s(x0))
   filter2(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(g(x0), s(0), x1)
   map(x0, nil)
   filter(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, cons(x1, x2))
   filter2(false, x0, x1, x2)
   filter2(true, x0, x1, x2)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(g(x), s(0), y) -> f1(g(s(0)), y, g(x))

The TRS R consists of the following rules:

   g(s(x)) -> s(g(x))
   g(0) -> 0

The set Q consists of the following terms:

   g(0)
   g(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule f1(g(x), s(0), y) -> f1(g(s(0)), y, g(x)) at position [0] we obtained the following new rules [LPAR04]:

   (f1(g(x), s(0), y) -> f1(s(g(0)), y, g(x)),f1(g(x), s(0), y) -> f1(s(g(0)), y, g(x)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(g(x), s(0), y) -> f1(s(g(0)), y, g(x))

The TRS R consists of the following rules:

   g(s(x)) -> s(g(x))
   g(0) -> 0

The set Q consists of the following terms:

   g(0)
   g(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

The TRS R consists of the following rules:

   app(app(app(f, app(g, x)), app(s, 0)), y) -> app(app(app(f, app(g, app(s, 0))), y), app(g, x))
   app(g, app(s, x)) -> app(s, app(g, x))
   app(g, 0) -> 0
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

R is empty.
The set Q consists of the following terms:

   app(app(app(f, app(g, x0)), app(s, 0)), x1)
   app(g, 0)
   app(app(map, x0), nil)
   app(app(filter, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(g, app(s, x0))
   app(app(app(app(filter2, true), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(29)
YES
