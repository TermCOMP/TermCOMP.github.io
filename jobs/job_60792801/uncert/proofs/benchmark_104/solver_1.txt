YES
proof of /home/ff862203/input_JyluZhKNPa.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 20 ms]
(4) CSR
(5) CSDependencyPairsProof [EQUIVALENT, 0 ms]
(6) QCSDP
(7) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(X, X)) -> mark(f(a, b))
   active(b) -> mark(a)
   active(f(X1, X2)) -> f(active(X1), X2)
   f(mark(X1), X2) -> mark(f(X1, X2))
   proper(f(X1, X2)) -> f(proper(X1), proper(X2))
   proper(a) -> ok(a)
   proper(b) -> ok(b)
   f(ok(X1), ok(X2)) -> ok(f(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(a)
   proper(b)
   f(ok(x0), ok(x1))
   active(b)
   f(mark(x0), x1)
   active(f(x0, x1))
   top(ok(x0))
   top(mark(x0))
   proper(f(x0, x1))


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(X, X)) -> mark(f(a, b))
   active(b) -> mark(a)
   active(f(X1, X2)) -> f(active(X1), X2)
   f(mark(X1), X2) -> mark(f(X1, X2))
   proper(f(X1, X2)) -> f(proper(X1), proper(X2))
   proper(a) -> ok(a)
   proper(b) -> ok(b)
   f(ok(X1), ok(X2)) -> ok(f(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(a)
   proper(b)
   f(ok(x0), ok(x1))
   active(b)
   f(mark(x0), x1)
   active(f(x0, x1))
   top(ok(x0))
   top(mark(x0))
   proper(f(x0, x1))

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

f: {1}
a: empty set
b: empty set
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   f(X, X) -> f(a, b)
   b -> a

The replacement map contains the following entries:

f: {1}
a: empty set
b: empty set

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   f(X, X) -> f(a, b)
   b -> a

The replacement map contains the following entries:

f: {1}
a: empty set
b: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(a) = 0
   POL(b) = 2
   POL(f(x_1, x_2)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   b -> a




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   f(X, X) -> f(a, b)

The replacement map contains the following entries:

f: {1}
a: empty set
b: empty set

----------------------------------------

(5) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(6)
Obligation:
Q-restricted context-sensitive dependency pair problem:
For all symbols f in {f_2, F_2} we have mu(f) = {1}.

The ordinary context-sensitive dependency pairs DP_o are:
   F(X, X) -> F(a, b)

The TRS R consists of the following rules:

   f(X, X) -> f(a, b)

Q is empty.

----------------------------------------

(7) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs.
The rules F(z0, z0) -> F(a, b) and F(x0, x0) -> F(a, b) form no chain, because ECap^mu(F(a, b)) = F(a, b) does not unify with F(x0, x0). 
----------------------------------------

(8)
TRUE
