YES
proof of /home/ff862203/input_8TU8KTku8k.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QReductionProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(c(s(x), y)) -> f(c(x, s(y)))
   g(c(x, s(y))) -> g(c(s(x), y))

The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> F(c(x, s(y)))
   G(c(x, s(y))) -> G(c(s(x), y))

The TRS R consists of the following rules:

   f(c(s(x), y)) -> f(c(x, s(y)))
   g(c(x, s(y))) -> g(c(s(x), y))

The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))

The TRS R consists of the following rules:

   f(c(s(x), y)) -> f(c(x, s(y)))
   g(c(x, s(y))) -> g(c(s(x), y))

The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))

R is empty.
The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(c(s(x0), x1))
   g(c(x0, s(x1)))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(c(x, s(y))) -> G(c(s(x), y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   G(c(x, s(y))) -> G(c(s(x), y))


Used ordering: Polynomial interpretation [POLO]:

   POL(G(x_1)) = 2*x_1
   POL(c(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 2 + x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> F(c(x, s(y)))

The TRS R consists of the following rules:

   f(c(s(x), y)) -> f(c(x, s(y)))
   g(c(x, s(y))) -> g(c(s(x), y))

The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> F(c(x, s(y)))

R is empty.
The set Q consists of the following terms:

   f(c(s(x0), x1))
   g(c(x0, s(x1)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(c(s(x0), x1))
   g(c(x0, s(x1)))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> F(c(x, s(y)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F(c(s(x), y)) -> F(c(x, s(y)))


Used ordering: Knuth-Bendix order [KBO] with precedence:s_1 > c_2 > F_1

and weight map:

   F_1=1
   s_1=1
   c_2=0

The variable weight is 1

----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
