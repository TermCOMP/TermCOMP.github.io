YES

Problem 1: 

(VAR vu95NonEmpty N X X1 X2 XS Y YS)
(RULES
active(cons(X1,X2)) -> cons(active(X1),X2)
active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
active(incr(X)) -> incr(active(X))
active(pair(X1,X2)) -> pair(active(X1),X2)
active(pair(X1,X2)) -> pair(X1,active(X2))
active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
active(repItems(nil)) -> mark(nil)
active(repItems(X)) -> repItems(active(X))
active(s(X)) -> s(active(X))
active(tail(cons(X,XS))) -> mark(XS)
active(tail(X)) -> tail(active(X))
active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
active(take(num0,XS)) -> mark(nil)
active(take(X1,X2)) -> take(active(X1),X2)
active(take(X1,X2)) -> take(X1,active(X2))
active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
active(zip(nil,XS)) -> mark(nil)
active(zip(X,nil)) -> mark(nil)
active(zip(X1,X2)) -> zip(active(X1),X2)
active(zip(X1,X2)) -> zip(X1,active(X2))
active(oddNs) -> mark(incr(pairNs))
active(pairNs) -> mark(cons(num0,incr(oddNs)))
cons(mark(X1),X2) -> mark(cons(X1,X2))
cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
incr(mark(X)) -> mark(incr(X))
incr(ok(X)) -> ok(incr(X))
pair(mark(X1),X2) -> mark(pair(X1,X2))
pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
pair(X1,mark(X2)) -> mark(pair(X1,X2))
proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
proper(incr(X)) -> incr(proper(X))
proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
proper(repItems(X)) -> repItems(proper(X))
proper(s(X)) -> s(proper(X))
proper(tail(X)) -> tail(proper(X))
proper(take(X1,X2)) -> take(proper(X1),proper(X2))
proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
proper(num0) -> ok(num0)
proper(nil) -> ok(nil)
proper(oddNs) -> ok(oddNs)
proper(pairNs) -> ok(pairNs)
repItems(mark(X)) -> mark(repItems(X))
repItems(ok(X)) -> ok(repItems(X))
s(mark(X)) -> mark(s(X))
s(ok(X)) -> ok(s(X))
tail(mark(X)) -> mark(tail(X))
tail(ok(X)) -> ok(tail(X))
take(mark(X1),X2) -> mark(take(X1,X2))
take(ok(X1),ok(X2)) -> ok(take(X1,X2))
take(X1,mark(X2)) -> mark(take(X1,X2))
top(mark(X)) -> top(proper(X))
top(ok(X)) -> top(active(X))
zip(mark(X1),X2) -> mark(zip(X1,X2))
zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
zip(X1,mark(X2)) -> mark(zip(X1,X2))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(incr(cons(X,XS))) -> CONS(s(X),incr(XS))
 ACTIVE(incr(cons(X,XS))) -> INCR(XS)
 ACTIVE(incr(cons(X,XS))) -> S(X)
 ACTIVE(incr(X)) -> ACTIVE(X)
 ACTIVE(incr(X)) -> INCR(active(X))
 ACTIVE(pair(X1,X2)) -> ACTIVE(X1)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X2)
 ACTIVE(pair(X1,X2)) -> PAIR(active(X1),X2)
 ACTIVE(pair(X1,X2)) -> PAIR(X1,active(X2))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,cons(X,repItems(XS)))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,repItems(XS))
 ACTIVE(repItems(cons(X,XS))) -> REPITEMS(XS)
 ACTIVE(repItems(X)) -> ACTIVE(X)
 ACTIVE(repItems(X)) -> REPITEMS(active(X))
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 ACTIVE(tail(X)) -> ACTIVE(X)
 ACTIVE(tail(X)) -> TAIL(active(X))
 ACTIVE(take(s(N),cons(X,XS))) -> CONS(X,take(N,XS))
 ACTIVE(take(s(N),cons(X,XS))) -> TAKE(N,XS)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(take(X1,X2)) -> TAKE(active(X1),X2)
 ACTIVE(take(X1,X2)) -> TAKE(X1,active(X2))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> CONS(pair(X,Y),zip(XS,YS))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> PAIR(X,Y)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> ZIP(XS,YS)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zip(X1,X2)) -> ZIP(active(X1),X2)
 ACTIVE(zip(X1,X2)) -> ZIP(X1,active(X2))
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 INCR(mark(X)) -> INCR(X)
 INCR(ok(X)) -> INCR(X)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(ok(X1),ok(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(incr(X)) -> INCR(proper(X))
 PROPER(incr(X)) -> PROPER(X)
 PROPER(pair(X1,X2)) -> PAIR(proper(X1),proper(X2))
 PROPER(pair(X1,X2)) -> PROPER(X1)
 PROPER(pair(X1,X2)) -> PROPER(X2)
 PROPER(repItems(X)) -> PROPER(X)
 PROPER(repItems(X)) -> REPITEMS(proper(X))
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(tail(X)) -> PROPER(X)
 PROPER(tail(X)) -> TAIL(proper(X))
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(take(X1,X2)) -> TAKE(proper(X1),proper(X2))
 PROPER(zip(X1,X2)) -> PROPER(X1)
 PROPER(zip(X1,X2)) -> PROPER(X2)
 PROPER(zip(X1,X2)) -> ZIP(proper(X1),proper(X2))
 REPITEMS(mark(X)) -> REPITEMS(X)
 REPITEMS(ok(X)) -> REPITEMS(X)
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TAIL(mark(X)) -> TAIL(X)
 TAIL(ok(X)) -> TAIL(X)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(ok(X1),ok(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(incr(cons(X,XS))) -> CONS(s(X),incr(XS))
 ACTIVE(incr(cons(X,XS))) -> INCR(XS)
 ACTIVE(incr(cons(X,XS))) -> S(X)
 ACTIVE(incr(X)) -> ACTIVE(X)
 ACTIVE(incr(X)) -> INCR(active(X))
 ACTIVE(pair(X1,X2)) -> ACTIVE(X1)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X2)
 ACTIVE(pair(X1,X2)) -> PAIR(active(X1),X2)
 ACTIVE(pair(X1,X2)) -> PAIR(X1,active(X2))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,cons(X,repItems(XS)))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,repItems(XS))
 ACTIVE(repItems(cons(X,XS))) -> REPITEMS(XS)
 ACTIVE(repItems(X)) -> ACTIVE(X)
 ACTIVE(repItems(X)) -> REPITEMS(active(X))
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 ACTIVE(tail(X)) -> ACTIVE(X)
 ACTIVE(tail(X)) -> TAIL(active(X))
 ACTIVE(take(s(N),cons(X,XS))) -> CONS(X,take(N,XS))
 ACTIVE(take(s(N),cons(X,XS))) -> TAKE(N,XS)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(take(X1,X2)) -> TAKE(active(X1),X2)
 ACTIVE(take(X1,X2)) -> TAKE(X1,active(X2))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> CONS(pair(X,Y),zip(XS,YS))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> PAIR(X,Y)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> ZIP(XS,YS)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zip(X1,X2)) -> ZIP(active(X1),X2)
 ACTIVE(zip(X1,X2)) -> ZIP(X1,active(X2))
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 INCR(mark(X)) -> INCR(X)
 INCR(ok(X)) -> INCR(X)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(ok(X1),ok(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(incr(X)) -> INCR(proper(X))
 PROPER(incr(X)) -> PROPER(X)
 PROPER(pair(X1,X2)) -> PAIR(proper(X1),proper(X2))
 PROPER(pair(X1,X2)) -> PROPER(X1)
 PROPER(pair(X1,X2)) -> PROPER(X2)
 PROPER(repItems(X)) -> PROPER(X)
 PROPER(repItems(X)) -> REPITEMS(proper(X))
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(tail(X)) -> PROPER(X)
 PROPER(tail(X)) -> TAIL(proper(X))
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(take(X1,X2)) -> TAKE(proper(X1),proper(X2))
 PROPER(zip(X1,X2)) -> PROPER(X1)
 PROPER(zip(X1,X2)) -> PROPER(X2)
 PROPER(zip(X1,X2)) -> ZIP(proper(X1),proper(X2))
 REPITEMS(mark(X)) -> REPITEMS(X)
 REPITEMS(ok(X)) -> REPITEMS(X)
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TAIL(mark(X)) -> TAIL(X)
 TAIL(ok(X)) -> TAIL(X)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(ok(X1),ok(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(ok(X1),ok(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 TAIL(mark(X)) -> TAIL(X)
 TAIL(ok(X)) -> TAIL(X)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 REPITEMS(mark(X)) -> REPITEMS(X)
 REPITEMS(ok(X)) -> REPITEMS(X)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(ok(X1),ok(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 INCR(mark(X)) -> INCR(X)
 INCR(ok(X)) -> INCR(X)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(incr(X)) -> PROPER(X)
 PROPER(pair(X1,X2)) -> PROPER(X1)
 PROPER(pair(X1,X2)) -> PROPER(X2)
 PROPER(repItems(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(tail(X)) -> PROPER(X)
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(zip(X1,X2)) -> PROPER(X1)
 PROPER(zip(X1,X2)) -> PROPER(X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(incr(X)) -> ACTIVE(X)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X1)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X2)
 ACTIVE(repItems(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(tail(X)) -> ACTIVE(X)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->->Cycle:
->->-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))


The problem is decomposed in 11 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(ok(X1),ok(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(ZIP) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(ZIP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(TAKE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))

Problem 1.2: 

Subterm Processor:
-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(TAKE) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 TAIL(mark(X)) -> TAIL(X)
 TAIL(ok(X)) -> TAIL(X)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(TAIL) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(S) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 REPITEMS(mark(X)) -> REPITEMS(X)
 REPITEMS(ok(X)) -> REPITEMS(X)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(REPITEMS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(ok(X1),ok(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(PAIR) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))

Problem 1.6: 

Subterm Processor:
-> Pairs:
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(PAIR) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 INCR(mark(X)) -> INCR(X)
 INCR(ok(X)) -> INCR(X)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(INCR) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(CONS) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Subterm Processor:
-> Pairs:
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(incr(X)) -> PROPER(X)
 PROPER(pair(X1,X2)) -> PROPER(X1)
 PROPER(pair(X1,X2)) -> PROPER(X2)
 PROPER(repItems(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(tail(X)) -> PROPER(X)
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(zip(X1,X2)) -> PROPER(X1)
 PROPER(zip(X1,X2)) -> PROPER(X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(PROPER) = 1

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.10: 

Subterm Processor:
-> Pairs:
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(incr(X)) -> ACTIVE(X)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X1)
 ACTIVE(pair(X1,X2)) -> ACTIVE(X2)
 ACTIVE(repItems(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(tail(X)) -> ACTIVE(X)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zip(X1,X2)) -> ACTIVE(X2)
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Projection:
 pi(ACTIVE) = 1

Problem 1.10: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.11: 

Reduction Pairs Processor:
-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
-> Usable rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 3/2.X1 + 1/4.X2
[incr](X) = 4/3.X + 1/2
[pair](X1,X2) = X1 + 4/3.X2
[proper](X) = X
[repItems](X) = 3.X + 1
[s](X) = 4/3.X
[tail](X) = 4.X + 2/3
[take](X1,X2) = 4.X1 + 3/2.X2 + 4
[top](X) = 0
[zip](X1,X2) = X1 + 4/3.X2 + 4/3
[num0] = 0
[fSNonEmpty] = 0
[mark](X) = X + 1/3
[nil] = 3
[oddNs] = 4
[ok](X) = X
[pairNs] = 2
[ACTIVE](X) = 0
[CONS](X1,X2) = 0
[INCR](X) = 0
[PAIR](X1,X2) = 0
[PROPER](X) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[TOP](X) = 1/3.X
[ZIP](X1,X2) = 0

Problem 1.11: 

SCC Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))

Problem 1.11: 

Reduction Pairs Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
-> Usable rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X
[cons](X1,X2) = 2.X1
[incr](X) = 2.X + 2
[pair](X1,X2) = 2.X1 + 2.X2 + 2
[proper](X) = 0
[repItems](X) = 2.X + 1
[s](X) = 2.X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[top](X) = 0
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 2
[fSNonEmpty] = 0
[mark](X) = 1
[nil] = 2
[oddNs] = 1
[ok](X) = 2.X + 2
[pairNs] = 2
[ACTIVE](X) = 0
[CONS](X1,X2) = 0
[INCR](X) = 0
[PAIR](X1,X2) = 0
[PROPER](X) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[TOP](X) = 2.X
[ZIP](X1,X2) = 0

Problem 1.11: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(incr(X)) -> incr(active(X))
 active(pair(X1,X2)) -> pair(active(X1),X2)
 active(pair(X1,X2)) -> pair(X1,active(X2))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(repItems(X)) -> repItems(active(X))
 active(s(X)) -> s(active(X))
 active(tail(cons(X,XS))) -> mark(XS)
 active(tail(X)) -> tail(active(X))
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(zip(X1,X2)) -> zip(active(X1),X2)
 active(zip(X1,X2)) -> zip(X1,active(X2))
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 incr(mark(X)) -> mark(incr(X))
 incr(ok(X)) -> ok(incr(X))
 pair(mark(X1),X2) -> mark(pair(X1,X2))
 pair(ok(X1),ok(X2)) -> ok(pair(X1,X2))
 pair(X1,mark(X2)) -> mark(pair(X1,X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(incr(X)) -> incr(proper(X))
 proper(pair(X1,X2)) -> pair(proper(X1),proper(X2))
 proper(repItems(X)) -> repItems(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(tail(X)) -> tail(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(zip(X1,X2)) -> zip(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 proper(oddNs) -> ok(oddNs)
 proper(pairNs) -> ok(pairNs)
 repItems(mark(X)) -> mark(repItems(X))
 repItems(ok(X)) -> ok(repItems(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 tail(mark(X)) -> mark(tail(X))
 tail(ok(X)) -> ok(tail(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zip(mark(X1),X2) -> mark(zip(X1,X2))
 zip(ok(X1),ok(X2)) -> ok(zip(X1,X2))
 zip(X1,mark(X2)) -> mark(zip(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
