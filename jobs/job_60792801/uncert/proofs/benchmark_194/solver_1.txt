YES
proof of /home/ff862203/input_FjJU4bJeWT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 41 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) CSRRRRProof [EQUIVALENT, 1 ms]
(12) CSR
(13) CSRRRRProof [EQUIVALENT, 0 ms]
(14) CSR
(15) CSRRRRProof [EQUIVALENT, 0 ms]
(16) CSR
(17) RisEmptyProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(pairNs) -> mark(cons(0, incr(oddNs)))
   active(oddNs) -> mark(incr(pairNs))
   active(incr(cons(X, XS))) -> mark(cons(s(X), incr(XS)))
   active(take(0, XS)) -> mark(nil)
   active(take(s(N), cons(X, XS))) -> mark(cons(X, take(N, XS)))
   active(zip(nil, XS)) -> mark(nil)
   active(zip(X, nil)) -> mark(nil)
   active(zip(cons(X, XS), cons(Y, YS))) -> mark(cons(pair(X, Y), zip(XS, YS)))
   active(tail(cons(X, XS))) -> mark(XS)
   active(repItems(nil)) -> mark(nil)
   active(repItems(cons(X, XS))) -> mark(cons(X, cons(X, repItems(XS))))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(incr(X)) -> incr(active(X))
   active(s(X)) -> s(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   active(zip(X1, X2)) -> zip(active(X1), X2)
   active(zip(X1, X2)) -> zip(X1, active(X2))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(tail(X)) -> tail(active(X))
   active(repItems(X)) -> repItems(active(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   incr(mark(X)) -> mark(incr(X))
   s(mark(X)) -> mark(s(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   zip(mark(X1), X2) -> mark(zip(X1, X2))
   zip(X1, mark(X2)) -> mark(zip(X1, X2))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   tail(mark(X)) -> mark(tail(X))
   repItems(mark(X)) -> mark(repItems(X))
   proper(pairNs) -> ok(pairNs)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(incr(X)) -> incr(proper(X))
   proper(oddNs) -> ok(oddNs)
   proper(s(X)) -> s(proper(X))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(zip(X1, X2)) -> zip(proper(X1), proper(X2))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(tail(X)) -> tail(proper(X))
   proper(repItems(X)) -> repItems(proper(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   incr(ok(X)) -> ok(incr(X))
   s(ok(X)) -> ok(s(X))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   zip(ok(X1), ok(X2)) -> ok(zip(X1, X2))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   tail(ok(X)) -> ok(tail(X))
   repItems(ok(X)) -> ok(repItems(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   active(pairNs)
   active(tail(x0))
   take(ok(x0), ok(x1))
   proper(cons(x0, x1))
   proper(pair(x0, x1))
   active(incr(x0))
   active(take(x0, x1))
   active(zip(x0, x1))
   active(pair(x0, x1))
   proper(0)
   pair(ok(x0), ok(x1))
   s(ok(x0))
   repItems(mark(x0))
   zip(ok(x0), ok(x1))
   active(cons(x0, x1))
   proper(take(x0, x1))
   pair(mark(x0), x1)
   take(x0, mark(x1))
   proper(zip(x0, x1))
   active(s(x0))
   cons(ok(x0), ok(x1))
   proper(pairNs)
   incr(mark(x0))
   proper(s(x0))
   zip(x0, mark(x1))
   zip(mark(x0), x1)
   top(mark(x0))
   incr(ok(x0))
   cons(mark(x0), x1)
   proper(repItems(x0))
   proper(nil)
   active(oddNs)
   tail(ok(x0))
   take(mark(x0), x1)
   active(repItems(x0))
   proper(incr(x0))
   proper(oddNs)
   tail(mark(x0))
   repItems(ok(x0))
   s(mark(x0))
   top(ok(x0))
   pair(x0, mark(x1))
   proper(tail(x0))


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(pairNs) -> mark(cons(0, incr(oddNs)))
   active(oddNs) -> mark(incr(pairNs))
   active(incr(cons(X, XS))) -> mark(cons(s(X), incr(XS)))
   active(take(0, XS)) -> mark(nil)
   active(take(s(N), cons(X, XS))) -> mark(cons(X, take(N, XS)))
   active(zip(nil, XS)) -> mark(nil)
   active(zip(X, nil)) -> mark(nil)
   active(zip(cons(X, XS), cons(Y, YS))) -> mark(cons(pair(X, Y), zip(XS, YS)))
   active(tail(cons(X, XS))) -> mark(XS)
   active(repItems(nil)) -> mark(nil)
   active(repItems(cons(X, XS))) -> mark(cons(X, cons(X, repItems(XS))))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(incr(X)) -> incr(active(X))
   active(s(X)) -> s(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   active(zip(X1, X2)) -> zip(active(X1), X2)
   active(zip(X1, X2)) -> zip(X1, active(X2))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(tail(X)) -> tail(active(X))
   active(repItems(X)) -> repItems(active(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   incr(mark(X)) -> mark(incr(X))
   s(mark(X)) -> mark(s(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   zip(mark(X1), X2) -> mark(zip(X1, X2))
   zip(X1, mark(X2)) -> mark(zip(X1, X2))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   tail(mark(X)) -> mark(tail(X))
   repItems(mark(X)) -> mark(repItems(X))
   proper(pairNs) -> ok(pairNs)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(incr(X)) -> incr(proper(X))
   proper(oddNs) -> ok(oddNs)
   proper(s(X)) -> s(proper(X))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(zip(X1, X2)) -> zip(proper(X1), proper(X2))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(tail(X)) -> tail(proper(X))
   proper(repItems(X)) -> repItems(proper(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   incr(ok(X)) -> ok(incr(X))
   s(ok(X)) -> ok(s(X))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   zip(ok(X1), ok(X2)) -> ok(zip(X1, X2))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   tail(ok(X)) -> ok(tail(X))
   repItems(ok(X)) -> ok(repItems(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   active(pairNs)
   active(tail(x0))
   take(ok(x0), ok(x1))
   proper(cons(x0, x1))
   proper(pair(x0, x1))
   active(incr(x0))
   active(take(x0, x1))
   active(zip(x0, x1))
   active(pair(x0, x1))
   proper(0)
   pair(ok(x0), ok(x1))
   s(ok(x0))
   repItems(mark(x0))
   zip(ok(x0), ok(x1))
   active(cons(x0, x1))
   proper(take(x0, x1))
   pair(mark(x0), x1)
   take(x0, mark(x1))
   proper(zip(x0, x1))
   active(s(x0))
   cons(ok(x0), ok(x1))
   proper(pairNs)
   incr(mark(x0))
   proper(s(x0))
   zip(x0, mark(x1))
   zip(mark(x0), x1)
   top(mark(x0))
   incr(ok(x0))
   cons(mark(x0), x1)
   proper(repItems(x0))
   proper(nil)
   active(oddNs)
   tail(ok(x0))
   take(mark(x0), x1)
   active(repItems(x0))
   proper(incr(x0))
   proper(oddNs)
   tail(mark(x0))
   repItems(ok(x0))
   s(mark(x0))
   top(ok(x0))
   pair(x0, mark(x1))
   proper(tail(x0))

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
zip: {1, 2}
pair: {1, 2}
tail: {1}
repItems: {1}
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, take(N, XS))
   zip(nil, XS) -> nil
   zip(X, nil) -> nil
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), zip(XS, YS))
   tail(cons(X, XS)) -> XS
   repItems(nil) -> nil
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
zip: {1, 2}
pair: {1, 2}
tail: {1}
repItems: {1}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, take(N, XS))
   zip(nil, XS) -> nil
   zip(X, nil) -> nil
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), zip(XS, YS))
   tail(cons(X, XS)) -> XS
   repItems(nil) -> nil
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
zip: {1, 2}
pair: {1, 2}
tail: {1}
repItems: {1}
Used ordering:
Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(pairNs) =  	[[0], [1]]
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[0], [0]] 	 +  	[[1, 0], [1, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 1]] 	* 	x_2
>>>

   <<<
 POL(0) =  	[[0], [1]]
>>>

   <<<
 POL(incr(x_1)) =  	[[0], [0]] 	 +  	[[1, 0], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(oddNs) =  	[[0], [1]]
>>>

   <<<
 POL(s(x_1)) =  	[[0], [0]] 	 +  	[[1, 0], [1, 1]] 	* 	x_1
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[0], [0]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1 	 +  	[[1, 1], [1, 1]] 	* 	x_2
>>>

   <<<
 POL(nil) =  	[[1], [1]]
>>>

   <<<
 POL(zip(x_1, x_2)) =  	[[0], [0]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1 	 +  	[[1, 1], [1, 1]] 	* 	x_2
>>>

   <<<
 POL(pair(x_1, x_2)) =  	[[0], [1]] 	 +  	[[1, 0], [1, 1]] 	* 	x_1 	 +  	[[1, 0], [1, 1]] 	* 	x_2
>>>

   <<<
 POL(tail(x_1)) =  	[[1], [1]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1
>>>

   <<<
 POL(repItems(x_1)) =  	[[1], [1]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1
>>>

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   zip(nil, XS) -> nil
   zip(X, nil) -> nil
   tail(cons(X, XS)) -> XS
   repItems(nil) -> nil




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, take(N, XS))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), zip(XS, YS))
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
zip: {1, 2}
pair: {1, 2}
repItems: {1}

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, take(N, XS))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), zip(XS, YS))
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
zip: {1, 2}
pair: {1, 2}
repItems: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = 1 + x_1
   POL(incr(x_1)) = x_1
   POL(nil) = 1
   POL(oddNs) = 1
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 1
   POL(repItems(x_1)) = x_1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(zip(x_1, x_2)) = 1 + x_1 + x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(s(N), cons(X, XS)) -> cons(X, take(N, XS))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), zip(XS, YS))




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
repItems: {1}

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   take(0, XS) -> nil
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
take: {1, 2}
nil: empty set
repItems: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(cons(x_1, x_2)) = x_1
   POL(incr(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 1
   POL(pairNs) = 1
   POL(repItems(x_1)) = x_1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(0, XS) -> nil




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
repItems: {1}

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))
   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
repItems: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = x_1
   POL(incr(x_1)) = 1 + x_1
   POL(oddNs) = 1
   POL(pairNs) = 0
   POL(repItems(x_1)) = 1 + x_1
   POL(s(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   repItems(cons(X, XS)) -> cons(X, cons(X, repItems(XS)))




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}

----------------------------------------

(11) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
0: empty set
incr: {1}
oddNs: empty set
s: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = x_1
   POL(incr(x_1)) = x_1
   POL(oddNs) = 1
   POL(pairNs) = 1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   pairNs -> cons(0, incr(oddNs))




----------------------------------------

(12)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
incr: {1}
oddNs: empty set
s: {1}

----------------------------------------

(13) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), incr(XS))

The replacement map contains the following entries:

pairNs: empty set
cons: {1}
incr: {1}
oddNs: empty set
s: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(cons(x_1, x_2)) = x_1
   POL(incr(x_1)) = 1 + x_1
   POL(oddNs) = 1
   POL(pairNs) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   incr(cons(X, XS)) -> cons(s(X), incr(XS))




----------------------------------------

(14)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   oddNs -> incr(pairNs)

The replacement map contains the following entries:

pairNs: empty set
incr: {1}
oddNs: empty set

----------------------------------------

(15) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   oddNs -> incr(pairNs)

The replacement map contains the following entries:

pairNs: empty set
incr: {1}
oddNs: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(incr(x_1)) = 1 + 2*x_1
   POL(oddNs) = 2
   POL(pairNs) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   oddNs -> incr(pairNs)




----------------------------------------

(16)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(17) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(18)
YES
