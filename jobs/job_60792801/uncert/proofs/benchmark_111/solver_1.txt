YES
proof of /home/ff862203/input_uoEG96Y8AX.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 18 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) RisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   active(inf(X)) -> inf(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   active(length(X)) -> length(active(X))
   inf(mark(X)) -> mark(inf(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   length(mark(X)) -> mark(length(X))
   proper(eq(X1, X2)) -> eq(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(true) -> ok(true)
   proper(s(X)) -> s(proper(X))
   proper(false) -> ok(false)
   proper(inf(X)) -> inf(proper(X))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(length(X)) -> length(proper(X))
   eq(ok(X1), ok(X2)) -> ok(eq(X1, X2))
   s(ok(X)) -> ok(s(X))
   inf(ok(X)) -> ok(inf(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   length(ok(X)) -> ok(length(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(true)
   proper(inf(x0))
   proper(eq(x0, x1))
   top(mark(x0))
   take(ok(x0), ok(x1))
   proper(cons(x0, x1))
   active(take(x0, x1))
   proper(nil)
   length(ok(x0))
   proper(0)
   s(ok(x0))
   take(mark(x0), x1)
   length(mark(x0))
   proper(take(x0, x1))
   active(inf(x0))
   take(x0, mark(x1))
   active(length(x0))
   proper(false)
   inf(mark(x0))
   inf(ok(x0))
   cons(ok(x0), ok(x1))
   proper(length(x0))
   eq(ok(x0), ok(x1))
   top(ok(x0))
   active(eq(x0, x1))
   proper(s(x0))


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   active(inf(X)) -> inf(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   active(length(X)) -> length(active(X))
   inf(mark(X)) -> mark(inf(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   length(mark(X)) -> mark(length(X))
   proper(eq(X1, X2)) -> eq(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(true) -> ok(true)
   proper(s(X)) -> s(proper(X))
   proper(false) -> ok(false)
   proper(inf(X)) -> inf(proper(X))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(length(X)) -> length(proper(X))
   eq(ok(X1), ok(X2)) -> ok(eq(X1, X2))
   s(ok(X)) -> ok(s(X))
   inf(ok(X)) -> ok(inf(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   length(ok(X)) -> ok(length(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   proper(true)
   proper(inf(x0))
   proper(eq(x0, x1))
   top(mark(x0))
   take(ok(x0), ok(x1))
   proper(cons(x0, x1))
   active(take(x0, x1))
   proper(nil)
   length(ok(x0))
   proper(0)
   s(ok(x0))
   take(mark(x0), x1)
   length(mark(x0))
   proper(take(x0, x1))
   active(inf(x0))
   take(x0, mark(x1))
   active(length(x0))
   proper(false)
   inf(mark(x0))
   inf(ok(x0))
   cons(ok(x0), ok(x1))
   proper(length(x0))
   eq(ok(x0), ok(x1))
   top(ok(x0))
   active(eq(x0, x1))
   proper(s(x0))

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

eq: empty set
0: empty set
true: empty set
s: empty set
false: empty set
inf: {1}
cons: empty set
take: {1, 2}
nil: empty set
length: {1}
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(X), s(Y)) -> eq(X, Y)
   eq(X, Y) -> false
   inf(X) -> cons(X, inf(s(X)))
   take(0, X) -> nil
   take(s(X), cons(Y, L)) -> cons(Y, take(X, L))
   length(nil) -> 0
   length(cons(X, L)) -> s(length(L))

The replacement map contains the following entries:

eq: empty set
0: empty set
true: empty set
s: empty set
false: empty set
inf: {1}
cons: empty set
take: {1, 2}
nil: empty set
length: {1}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(X), s(Y)) -> eq(X, Y)
   eq(X, Y) -> false
   inf(X) -> cons(X, inf(s(X)))
   take(0, X) -> nil
   take(s(X), cons(Y, L)) -> cons(Y, take(X, L))
   length(nil) -> 0
   length(cons(X, L)) -> s(length(L))

The replacement map contains the following entries:

eq: empty set
0: empty set
true: empty set
s: empty set
false: empty set
inf: {1}
cons: empty set
take: {1, 2}
nil: empty set
length: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(cons(x_1, x_2)) = 1 + x_1
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(inf(x_1)) = 2 + x_1
   POL(length(x_1)) = 2 + x_1
   POL(nil) = 1
   POL(s(x_1)) = 0
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   inf(X) -> cons(X, inf(s(X)))
   take(0, X) -> nil
   take(s(X), cons(Y, L)) -> cons(Y, take(X, L))
   length(nil) -> 0
   length(cons(X, L)) -> s(length(L))




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(X), s(Y)) -> eq(X, Y)
   eq(X, Y) -> false

The replacement map contains the following entries:

eq: empty set
0: empty set
true: empty set
s: empty set
false: empty set

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(X), s(Y)) -> eq(X, Y)
   eq(X, Y) -> false

The replacement map contains the following entries:

eq: empty set
0: empty set
true: empty set
s: empty set
false: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(eq(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(false) = 1
   POL(s(x_1)) = 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   eq(0, 0) -> true
   eq(X, Y) -> false




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(s(X), s(Y)) -> eq(X, Y)

The replacement map contains the following entries:

eq: empty set
s: empty set

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   eq(s(X), s(Y)) -> eq(X, Y)

The replacement map contains the following entries:

eq: empty set
s: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(eq(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   eq(s(X), s(Y)) -> eq(X, Y)




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(9) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(10)
YES
