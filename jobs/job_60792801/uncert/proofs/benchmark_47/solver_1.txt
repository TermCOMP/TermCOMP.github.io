YES
proof of /home/ff862203/input_bwkw19i6vs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 11 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) ATransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) ATransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) ATransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (42) YES
    (43) QDP
        (44) UsableRulesProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) ATransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QReductionProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) QDPOrderProof [EQUIVALENT, 35 ms]
        (51) QDP
        (52) PisEmptyProof [EQUIVALENT, 0 ms]
        (53) YES
    (54) QDP
        (55) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (56) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, n)), app(s, m)) -> APP(app(eq, n), m)
   APP(app(eq, app(s, n)), app(s, m)) -> APP(eq, n)
   APP(app(le, app(s, n)), app(s, m)) -> APP(app(le, n), m)
   APP(app(le, app(s, n)), app(s, m)) -> APP(le, n)
   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(if_min, app(app(le, n), m))
   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(app(le, n), m)
   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(le, n)
   APP(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, n), x))
   APP(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> APP(app(cons, n), x)
   APP(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, m), x))
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(app(if_replace, app(app(eq, n), k)), n), m)
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(if_replace, app(app(eq, n), k)), n)
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(if_replace, app(app(eq, n), k))
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(eq, n), k)
   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(eq, n)
   APP(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> APP(app(cons, m), x)
   APP(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> APP(cons, m)
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(app(cons, k), app(app(app(replace, n), m), x))
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(app(app(replace, n), m), x)
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(app(replace, n), m)
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(replace, n)
   APP(sort, app(app(cons, n), x)) -> APP(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   APP(sort, app(app(cons, n), x)) -> APP(cons, app(min, app(app(cons, n), x)))
   APP(sort, app(app(cons, n), x)) -> APP(min, app(app(cons, n), x))
   APP(sort, app(app(cons, n), x)) -> APP(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x))
   APP(sort, app(app(cons, n), x)) -> APP(app(app(replace, app(min, app(app(cons, n), x))), n), x)
   APP(sort, app(app(cons, n), x)) -> APP(app(replace, app(min, app(app(cons, n), x))), n)
   APP(sort, app(app(cons, n), x)) -> APP(replace, app(min, app(app(cons, n), x)))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 31 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, n)), app(s, m)) -> APP(app(le, n), m)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, n)), app(s, m)) -> APP(app(le, n), m)

R is empty.
The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(n), s(m)) -> le1(n, m)

R is empty.
The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(n), s(m)) -> le1(n, m)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*le1(s(n), s(m)) -> le1(n, m)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   APP(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, n), x))
   APP(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, m), x))

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(min, app(app(cons, n), app(app(cons, m), x))) -> APP(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   APP(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, n), x))
   APP(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> APP(min, app(app(cons, m), x))

The TRS R consists of the following rules:

   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   min1(cons(n, cons(m, x))) -> if_min1(le(n, m), cons(n, cons(m, x)))
   if_min1(true, cons(n, cons(m, x))) -> min1(cons(n, x))
   if_min1(false, cons(n, cons(m, x))) -> min1(cons(m, x))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   min1(cons(n, cons(m, x))) -> if_min1(le(n, m), cons(n, cons(m, x)))
   if_min1(true, cons(n, cons(m, x))) -> min1(cons(n, x))
   if_min1(false, cons(n, cons(m, x))) -> min1(cons(m, x))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   if_min1(true, cons(n, cons(m, x))) -> min1(cons(n, x))
   if_min1(false, cons(n, cons(m, x))) -> min1(cons(m, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
min1(x1)  =  x1

cons(x1, x2)  =  cons(x2)

if_min1(x1, x2)  =  x2


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   min1(cons(n, cons(m, x))) -> if_min1(le(n, m), cons(n, cons(m, x)))

The TRS R consists of the following rules:

   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, n)), app(s, m)) -> APP(app(eq, n), m)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, n)), app(s, m)) -> APP(app(eq, n), m)

R is empty.
The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   eq1(s(n), s(m)) -> eq1(n, m)

R is empty.
The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   eq1(s(n), s(m)) -> eq1(n, m)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*eq1(s(n), s(m)) -> eq1(n, m)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(app(app(replace, n), m), x)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(replace, n), m), app(app(cons, k), x)) -> APP(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   APP(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> APP(app(app(replace, n), m), x)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   replace1(n, m, cons(k, x)) -> if_replace1(eq(n, k), n, m, cons(k, x))
   if_replace1(false, n, m, cons(k, x)) -> replace1(n, m, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if_replace(true, x0, x1, cons(x2, x3))
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   min(cons(s(x0), nil))
   le(0, x0)
   replace(x0, x1, nil)
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   replace1(n, m, cons(k, x)) -> if_replace1(eq(n, k), n, m, cons(k, x))
   if_replace1(false, n, m, cons(k, x)) -> replace1(n, m, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)

The set Q consists of the following terms:

   eq(s(x0), 0)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*if_replace1(false, n, m, cons(k, x)) -> replace1(n, m, x)
The graph contains the following edges 2 >= 1, 3 >= 2, 4 > 3


*replace1(n, m, cons(k, x)) -> if_replace1(eq(n, k), n, m, cons(k, x))
The graph contains the following edges 1 >= 2, 2 >= 3, 3 >= 4


----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(sort, app(app(cons, n), x)) -> APP(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x))

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(sort, app(app(cons, n), x)) -> APP(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x))

The TRS R consists of the following rules:

   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   sort1(cons(n, x)) -> sort1(replace(min(cons(n, x)), n, x))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   filter2(true, x0, x1, x2)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   map(x0, nil)
   min(cons(x0, cons(x1, x2)))
   filter(x0, cons(x1, x2))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   filter2(true, x0, x1, x2)
   map(x0, nil)
   filter(x0, cons(x1, x2))
   sort(cons(x0, x1))
   filter2(false, x0, x1, x2)
   sort(nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   sort1(cons(n, x)) -> sort1(replace(min(cons(n, x)), n, x))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   sort1(cons(n, x)) -> sort1(replace(min(cons(n, x)), n, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
sort1(x1)  =  sort1(x1)

cons(x1, x2)  =  cons(x2)

replace(x1, x2, x3)  =  x3

min(x1)  =  min

0  =  0

nil  =  nil

s(x1)  =  s

if_min(x1, x2)  =  if_min(x1, x2)

le(x1, x2)  =  x1

true  =  true

false  =  false

if_replace(x1, x2, x3, x4)  =  x4

eq(x1, x2)  =  eq(x1, x2)


Recursive path order with status [RPO].
Quasi-Precedence: if_min_2 > [sort1_1, cons_1, min]
[false, eq_2] > [0, true] > [sort1_1, cons_1, min]

Status: sort1_1: multiset status
cons_1: [1]
min: multiset status
0: multiset status
nil: multiset status
s: []
if_min_2: multiset status
true: multiset status
false: multiset status
eq_2: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))


----------------------------------------

(51)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(n), nil)) -> s(n)
   min(cons(n, cons(m, x))) -> if_min(le(n, m), cons(n, cons(m, x)))
   if_min(true, cons(n, cons(m, x))) -> min(cons(n, x))
   if_min(false, cons(n, cons(m, x))) -> min(cons(m, x))
   replace(n, m, nil) -> nil
   replace(n, m, cons(k, x)) -> if_replace(eq(n, k), n, m, cons(k, x))
   eq(0, 0) -> true
   eq(0, s(m)) -> false
   eq(s(n), 0) -> false
   eq(s(n), s(m)) -> eq(n, m)
   if_replace(true, n, m, cons(k, x)) -> cons(m, x)
   if_replace(false, n, m, cons(k, x)) -> cons(k, replace(n, m, x))
   le(0, m) -> true
   le(s(n), 0) -> false
   le(s(n), s(m)) -> le(n, m)

The set Q consists of the following terms:

   if_replace(true, x0, x1, cons(x2, x3))
   eq(s(x0), 0)
   replace(x0, x1, cons(x2, x3))
   le(s(x0), 0)
   min(cons(0, nil))
   if_min(true, cons(x0, cons(x1, x2)))
   min(cons(x0, cons(x1, x2)))
   if_replace(false, x0, x1, cons(x2, x3))
   eq(0, 0)
   min(cons(s(x0), nil))
   eq(0, s(x0))
   le(0, x0)
   replace(x0, x1, nil)
   eq(s(x0), s(x1))
   le(s(x0), s(x1))
   if_min(false, cons(x0, cons(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, m)) -> false
   app(app(eq, app(s, n)), 0) -> false
   app(app(eq, app(s, n)), app(s, m)) -> app(app(eq, n), m)
   app(app(le, 0), m) -> true
   app(app(le, app(s, n)), 0) -> false
   app(app(le, app(s, n)), app(s, m)) -> app(app(le, n), m)
   app(min, app(app(cons, 0), nil)) -> 0
   app(min, app(app(cons, app(s, n)), nil)) -> app(s, n)
   app(min, app(app(cons, n), app(app(cons, m), x))) -> app(app(if_min, app(app(le, n), m)), app(app(cons, n), app(app(cons, m), x)))
   app(app(if_min, true), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, n), x))
   app(app(if_min, false), app(app(cons, n), app(app(cons, m), x))) -> app(min, app(app(cons, m), x))
   app(app(app(replace, n), m), nil) -> nil
   app(app(app(replace, n), m), app(app(cons, k), x)) -> app(app(app(app(if_replace, app(app(eq, n), k)), n), m), app(app(cons, k), x))
   app(app(app(app(if_replace, true), n), m), app(app(cons, k), x)) -> app(app(cons, m), x)
   app(app(app(app(if_replace, false), n), m), app(app(cons, k), x)) -> app(app(cons, k), app(app(app(replace, n), m), x))
   app(sort, nil) -> nil
   app(sort, app(app(cons, n), x)) -> app(app(cons, app(min, app(app(cons, n), x))), app(sort, app(app(app(replace, app(min, app(app(cons, n), x))), n), x)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(app(if_replace, true), x0), x1), app(app(cons, x2), x3))
   app(app(eq, app(s, x0)), 0)
   app(app(app(replace, x0), x1), app(app(cons, x2), x3))
   app(app(le, app(s, x0)), 0)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(min, app(app(cons, 0), nil))
   app(app(if_min, true), app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(map, x0), nil)
   app(min, app(app(cons, x0), app(app(cons, x1), x2)))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(if_replace, false), x0), x1), app(app(cons, x2), x3))
   app(app(eq, 0), 0)
   app(min, app(app(cons, app(s, x0)), nil))
   app(app(eq, 0), app(s, x0))
   app(app(le, 0), x0)
   app(app(app(replace, x0), x1), nil)
   app(app(eq, app(s, x0)), app(s, x1))
   app(sort, app(app(cons, x0), x1))
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(if_min, false), app(app(cons, x0), app(app(cons, x1), x2)))
   app(sort, nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(56)
YES
