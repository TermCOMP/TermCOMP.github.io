YES
proof of /home/ff862203/input_9IYYQgZ2K4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 30 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) CSRRRRProof [EQUIVALENT, 0 ms]
(12) CSR
(13) CSRRRRProof [EQUIVALENT, 3 ms]
(14) CSR
(15) CSRRRRProof [EQUIVALENT, 0 ms]
(16) CSR
(17) RisEmptyProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(__(__(X, Y), Z)) -> mark(__(X, __(Y, Z)))
   active(__(X, nil)) -> mark(X)
   active(__(nil, X)) -> mark(X)
   active(and(tt, X)) -> mark(X)
   active(isList(V)) -> mark(isNeList(V))
   active(isList(nil)) -> mark(tt)
   active(isList(__(V1, V2))) -> mark(and(isList(V1), isList(V2)))
   active(isNeList(V)) -> mark(isQid(V))
   active(isNeList(__(V1, V2))) -> mark(and(isList(V1), isNeList(V2)))
   active(isNeList(__(V1, V2))) -> mark(and(isNeList(V1), isList(V2)))
   active(isNePal(V)) -> mark(isQid(V))
   active(isNePal(__(I, __(P, I)))) -> mark(and(isQid(I), isPal(P)))
   active(isPal(V)) -> mark(isNePal(V))
   active(isPal(nil)) -> mark(tt)
   active(isQid(a)) -> mark(tt)
   active(isQid(e)) -> mark(tt)
   active(isQid(i)) -> mark(tt)
   active(isQid(o)) -> mark(tt)
   active(isQid(u)) -> mark(tt)
   active(__(X1, X2)) -> __(active(X1), X2)
   active(__(X1, X2)) -> __(X1, active(X2))
   active(and(X1, X2)) -> and(active(X1), X2)
   __(mark(X1), X2) -> mark(__(X1, X2))
   __(X1, mark(X2)) -> mark(__(X1, X2))
   and(mark(X1), X2) -> mark(and(X1, X2))
   proper(__(X1, X2)) -> __(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(tt) -> ok(tt)
   proper(isList(X)) -> isList(proper(X))
   proper(isNeList(X)) -> isNeList(proper(X))
   proper(isQid(X)) -> isQid(proper(X))
   proper(isNePal(X)) -> isNePal(proper(X))
   proper(isPal(X)) -> isPal(proper(X))
   proper(a) -> ok(a)
   proper(e) -> ok(e)
   proper(i) -> ok(i)
   proper(o) -> ok(o)
   proper(u) -> ok(u)
   __(ok(X1), ok(X2)) -> ok(__(X1, X2))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   isList(ok(X)) -> ok(isList(X))
   isNeList(ok(X)) -> ok(isNeList(X))
   isQid(ok(X)) -> ok(isQid(X))
   isNePal(ok(X)) -> ok(isNePal(X))
   isPal(ok(X)) -> ok(isPal(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   isNeList(ok(x0))
   active(isPal(x0))
   active(and(x0, x1))
   proper(isList(x0))
   isQid(ok(x0))
   top(mark(x0))
   active(__(x0, x1))
   active(isNeList(x0))
   proper(i)
   __(x0, mark(x1))
   active(isList(x0))
   and(ok(x0), ok(x1))
   proper(nil)
   proper(isPal(x0))
   isList(ok(x0))
   proper(__(x0, x1))
   proper(o)
   proper(a)
   proper(tt)
   proper(isNePal(x0))
   proper(isQid(x0))
   __(mark(x0), x1)
   proper(and(x0, x1))
   active(isNePal(x0))
   isPal(ok(x0))
   proper(e)
   active(isQid(o))
   __(ok(x0), ok(x1))
   top(ok(x0))
   active(isQid(a))
   active(isQid(e))
   active(isQid(i))
   active(isQid(u))
   and(mark(x0), x1)
   proper(isNeList(x0))
   isNePal(ok(x0))
   proper(u)


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(__(__(X, Y), Z)) -> mark(__(X, __(Y, Z)))
   active(__(X, nil)) -> mark(X)
   active(__(nil, X)) -> mark(X)
   active(and(tt, X)) -> mark(X)
   active(isList(V)) -> mark(isNeList(V))
   active(isList(nil)) -> mark(tt)
   active(isList(__(V1, V2))) -> mark(and(isList(V1), isList(V2)))
   active(isNeList(V)) -> mark(isQid(V))
   active(isNeList(__(V1, V2))) -> mark(and(isList(V1), isNeList(V2)))
   active(isNeList(__(V1, V2))) -> mark(and(isNeList(V1), isList(V2)))
   active(isNePal(V)) -> mark(isQid(V))
   active(isNePal(__(I, __(P, I)))) -> mark(and(isQid(I), isPal(P)))
   active(isPal(V)) -> mark(isNePal(V))
   active(isPal(nil)) -> mark(tt)
   active(isQid(a)) -> mark(tt)
   active(isQid(e)) -> mark(tt)
   active(isQid(i)) -> mark(tt)
   active(isQid(o)) -> mark(tt)
   active(isQid(u)) -> mark(tt)
   active(__(X1, X2)) -> __(active(X1), X2)
   active(__(X1, X2)) -> __(X1, active(X2))
   active(and(X1, X2)) -> and(active(X1), X2)
   __(mark(X1), X2) -> mark(__(X1, X2))
   __(X1, mark(X2)) -> mark(__(X1, X2))
   and(mark(X1), X2) -> mark(and(X1, X2))
   proper(__(X1, X2)) -> __(proper(X1), proper(X2))
   proper(nil) -> ok(nil)
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(tt) -> ok(tt)
   proper(isList(X)) -> isList(proper(X))
   proper(isNeList(X)) -> isNeList(proper(X))
   proper(isQid(X)) -> isQid(proper(X))
   proper(isNePal(X)) -> isNePal(proper(X))
   proper(isPal(X)) -> isPal(proper(X))
   proper(a) -> ok(a)
   proper(e) -> ok(e)
   proper(i) -> ok(i)
   proper(o) -> ok(o)
   proper(u) -> ok(u)
   __(ok(X1), ok(X2)) -> ok(__(X1, X2))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   isList(ok(X)) -> ok(isList(X))
   isNeList(ok(X)) -> ok(isNeList(X))
   isQid(ok(X)) -> ok(isQid(X))
   isNePal(ok(X)) -> ok(isNePal(X))
   isPal(ok(X)) -> ok(isPal(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   isNeList(ok(x0))
   active(isPal(x0))
   active(and(x0, x1))
   proper(isList(x0))
   isQid(ok(x0))
   top(mark(x0))
   active(__(x0, x1))
   active(isNeList(x0))
   proper(i)
   __(x0, mark(x1))
   active(isList(x0))
   and(ok(x0), ok(x1))
   proper(nil)
   proper(isPal(x0))
   isList(ok(x0))
   proper(__(x0, x1))
   proper(o)
   proper(a)
   proper(tt)
   proper(isNePal(x0))
   proper(isQid(x0))
   __(mark(x0), x1)
   proper(and(x0, x1))
   active(isNePal(x0))
   isPal(ok(x0))
   proper(e)
   active(isQid(o))
   __(ok(x0), ok(x1))
   top(ok(x0))
   active(isQid(a))
   active(isQid(e))
   active(isQid(i))
   active(isQid(u))
   and(mark(x0), x1)
   proper(isNeList(x0))
   isNePal(ok(x0))
   proper(u)

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
i: empty set
o: empty set
u: empty set
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(i) -> tt
   isQid(o) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
i: empty set
o: empty set
u: empty set

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(i) -> tt
   isQid(o) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
i: empty set
o: empty set
u: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(a) = 0
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(e) = 0
   POL(i) = 1
   POL(isList(x_1)) = 1 + x_1
   POL(isNeList(x_1)) = 1 + x_1
   POL(isNePal(x_1)) = 1 + x_1
   POL(isPal(x_1)) = 1 + x_1
   POL(isQid(x_1)) = 1 + x_1
   POL(nil) = 0
   POL(o) = 1
   POL(tt) = 1
   POL(u) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isQid(i) -> tt
   isQid(o) -> tt




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
u: empty set

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
u: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = x_1 + x_2
   POL(a) = 1
   POL(and(x_1, x_2)) = x_1
   POL(e) = 1
   POL(isList(x_1)) = 1
   POL(isNeList(x_1)) = 1
   POL(isNePal(x_1)) = 1 + x_1
   POL(isPal(x_1)) = 1 + x_1
   POL(isQid(x_1)) = 1
   POL(nil) = 0
   POL(tt) = 0
   POL(u) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isList(nil) -> tt
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(u) -> tt




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 1 + x_1
   POL(isList(x_1)) = 1 + x_1
   POL(isNeList(x_1)) = 1 + x_1
   POL(isNePal(x_1)) = x_1
   POL(isPal(x_1)) = x_1
   POL(isQid(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNeList(V) -> isQid(V)




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 1 + x_1
   POL(isList(x_1)) = 1 + x_1
   POL(isNeList(x_1)) = 1 + x_1
   POL(isNePal(x_1)) = 1 + x_1
   POL(isPal(x_1)) = 1 + x_1
   POL(isQid(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNePal(V) -> isQid(V)




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isNePal: empty set
isPal: empty set

----------------------------------------

(11) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isPal(V) -> isNePal(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isNePal: empty set
isPal: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 1 + x_1
   POL(isList(x_1)) = 1 + x_1
   POL(isNeList(x_1)) = 1 + x_1
   POL(isNePal(x_1)) = x_1
   POL(isPal(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isPal(V) -> isNePal(V)




----------------------------------------

(12)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set

----------------------------------------

(13) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(V) -> isNeList(V)
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(and(x_1, x_2)) = 2*x_1
   POL(isList(x_1)) = 1 + 2*x_1
   POL(isNeList(x_1)) = 1 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))




----------------------------------------

(14)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(V) -> isNeList(V)

The replacement map contains the following entries:

isList: empty set
isNeList: empty set

----------------------------------------

(15) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(V) -> isNeList(V)

The replacement map contains the following entries:

isList: empty set
isNeList: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(isList(x_1)) = 1 + 2*x_1
   POL(isNeList(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isList(V) -> isNeList(V)




----------------------------------------

(16)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(17) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(18)
YES
