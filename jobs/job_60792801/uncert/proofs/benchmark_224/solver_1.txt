YES
proof of /home/ff862203/input_HM0xf5gLhz.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) TransformationProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 27 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) UsableRulesProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QReductionProof [EQUIVALENT, 0 ms]
(16) QDP
(17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> A__F(mark(X), X, mark(X))
   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(c) -> A__C

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   A__F(a, b, X) -> A__F(mark(X), X, mark(X))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule A__F(a, b, X) -> A__F(mark(X), X, mark(X)) at position [0] we obtained the following new rules [LPAR04]:

   (A__F(a, b, f(x0, x1, x2)) -> A__F(a__f(mark(x0), x1, mark(x2)), f(x0, x1, x2), mark(f(x0, x1, x2))),A__F(a, b, f(x0, x1, x2)) -> A__F(a__f(mark(x0), x1, mark(x2)), f(x0, x1, x2), mark(f(x0, x1, x2))))
   (A__F(a, b, c) -> A__F(a__c, c, mark(c)),A__F(a, b, c) -> A__F(a__c, c, mark(c)))
   (A__F(a, b, a) -> A__F(a, a, mark(a)),A__F(a, b, a) -> A__F(a, a, mark(a)))
   (A__F(a, b, b) -> A__F(b, b, mark(b)),A__F(a, b, b) -> A__F(b, b, mark(b)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)
   A__F(a, b, f(x0, x1, x2)) -> A__F(a__f(mark(x0), x1, mark(x2)), f(x0, x1, x2), mark(f(x0, x1, x2)))
   A__F(a, b, c) -> A__F(a__c, c, mark(c))
   A__F(a, b, a) -> A__F(a, a, mark(a))
   A__F(a, b, b) -> A__F(b, b, mark(b))

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__F(a, b, X) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(MARK(x_1)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(f(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(A__F(x_1, x_2, x_3)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[5A]] 	* 	x_3
>>>

   <<<
 POL(mark(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(a) =  	[[5A]]
>>>

   <<<
 POL(b) =  	[[0A]]
>>>

   <<<
 POL(a__f(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(c) =  	[[5A]]
>>>

   <<<
 POL(a__c) =  	[[5A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   a__c -> c


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(f(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(f(X1, X2, X3)) -> MARK(X1)

R is empty.
The set Q consists of the following terms:

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(c)
   mark(b)
   mark(f(x0, x1, x2))
   a__f(x0, x1, x2)
   mark(a)
   a__c


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(f(X1, X2, X3)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(f(X1, X2, X3)) -> MARK(X3)
The graph contains the following edges 1 > 1


*MARK(f(X1, X2, X3)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES
