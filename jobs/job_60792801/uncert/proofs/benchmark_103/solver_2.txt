YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 X3 Y Z)
(RULES
active(add(s(X),Y)) -> mark(s(add(X,Y)))
active(add(num0,X)) -> mark(X)
active(and(ffalse,Y)) -> mark(ffalse)
active(and(ftrue,X)) -> mark(X)
active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
active(first(num0,X)) -> mark(nil)
active(from(X)) -> mark(cons(X,from(s(X))))
active(if(ffalse,X,Y)) -> mark(Y)
active(if(ftrue,X,Y)) -> mark(X)
add(active(X1),X2) -> add(X1,X2)
add(mark(X1),X2) -> add(X1,X2)
add(X1,active(X2)) -> add(X1,X2)
add(X1,mark(X2)) -> add(X1,X2)
and(active(X1),X2) -> and(X1,X2)
and(mark(X1),X2) -> and(X1,X2)
and(X1,active(X2)) -> and(X1,X2)
and(X1,mark(X2)) -> and(X1,X2)
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
first(active(X1),X2) -> first(X1,X2)
first(mark(X1),X2) -> first(X1,X2)
first(X1,active(X2)) -> first(X1,X2)
first(X1,mark(X2)) -> first(X1,X2)
from(active(X)) -> from(X)
from(mark(X)) -> from(X)
if(active(X1),X2,X3) -> if(X1,X2,X3)
if(mark(X1),X2,X3) -> if(X1,X2,X3)
if(X1,active(X2),X3) -> if(X1,X2,X3)
if(X1,mark(X2),X3) -> if(X1,X2,X3)
if(X1,X2,active(X3)) -> if(X1,X2,X3)
if(X1,X2,mark(X3)) -> if(X1,X2,X3)
mark(add(X1,X2)) -> active(add(mark(X1),X2))
mark(and(X1,X2)) -> active(and(mark(X1),X2))
mark(cons(X1,X2)) -> active(cons(X1,X2))
mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
mark(from(X)) -> active(from(X))
mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
mark(s(X)) -> active(s(X))
mark(num0) -> active(num0)
mark(ffalse) -> active(ffalse)
mark(nil) -> active(nil)
mark(ftrue) -> active(ftrue)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ffalse,Y)) -> MARK(ffalse)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> CONS(Y,first(X,Z))
 ACTIVE(first(s(X),cons(Y,Z))) -> FIRST(X,Z)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(first(num0,X)) -> MARK(nil)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FIRST(active(X1),X2) -> FIRST(X1,X2)
 FIRST(mark(X1),X2) -> FIRST(X1,X2)
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> FIRST(mark(X1),mark(X2))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(s(X)) -> ACTIVE(s(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ffalse,Y)) -> MARK(ffalse)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> CONS(Y,first(X,Z))
 ACTIVE(first(s(X),cons(Y,Z))) -> FIRST(X,Z)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(first(num0,X)) -> MARK(nil)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FIRST(active(X1),X2) -> FIRST(X1,X2)
 FIRST(mark(X1),X2) -> FIRST(X1,X2)
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> ADD(mark(X1),X2)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> FIRST(mark(X1),mark(X2))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> IF(mark(X1),X2,X3)
 MARK(if(X1,X2,X3)) -> MARK(X1)
 MARK(s(X)) -> ACTIVE(s(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 FIRST(active(X1),X2) -> FIRST(X1,X2)
 FIRST(mark(X1),X2) -> FIRST(X1,X2)
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)


The problem is decomposed in 8 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 IF(active(X1),X2,X3) -> IF(X1,X2,X3)
 IF(mark(X1),X2,X3) -> IF(X1,X2,X3)
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(IF) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 IF(X1,active(X2),X3) -> IF(X1,X2,X3)
 IF(X1,mark(X2),X3) -> IF(X1,X2,X3)
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(IF) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 IF(X1,X2,active(X3)) -> IF(X1,X2,X3)
 IF(X1,X2,mark(X3)) -> IF(X1,X2,X3)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(IF) = 3

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FROM) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FIRST(active(X1),X2) -> FIRST(X1,X2)
 FIRST(mark(X1),X2) -> FIRST(X1,X2)
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FIRST) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FIRST(X1,active(X2)) -> FIRST(X1,X2)
 FIRST(X1,mark(X2)) -> FIRST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FIRST) = 2

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(AND) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(AND) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(ADD) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Subterm Processor:
-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(ADD) = 2

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = 0
[first](X1,X2) = X1 + 2.X2 + 2
[from](X) = X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 1
[mark](X) = 2.X + 1
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 1
[ftrue] = 0
[ACTIVE](X) = X + 1
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 1
[and](X1,X2) = X1 + 2.X2 + 2
[cons](X1,X2) = 0
[first](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 1
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 0
[ftrue] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(and(ftrue,X)) -> MARK(X)
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[add](X1,X2) = 2.X1 + 2.X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[first](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 2
[if](X1,X2,X3) = X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(first(s(X),cons(Y,Z))) -> MARK(cons(Y,first(X,Z)))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[add](X1,X2) = X1 + 2.X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[first](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 1
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = 0
[first](X1,X2) = 2.X1 + X2 + 2
[from](X) = 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X + 1
[s](X) = 1
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 1
[ACTIVE](X) = X + 1
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(from(X)) -> ACTIVE(from(X))
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(if(ffalse,X,Y)) -> MARK(Y)
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = 0
[first](X1,X2) = X1 + X2 + 2
[from](X) = 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X + 2
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 1
[ftrue] = 2
[ACTIVE](X) = X
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Reduction Pairs Processor:
-> Pairs:
 ACTIVE(if(ftrue,X,Y)) -> MARK(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = X1 + 2.X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 1
[first](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 2
[if](X1,X2,X3) = 2.X1 + 2.X2 + 2.X3 + 2
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[CONS](X1,X2) = 0
[FIRST](X1,X2) = 0
[FROM](X) = 0
[IF](X1,X2,X3) = 0
[MARK](X) = 2.X + 1
[S](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> ACTIVE(first(mark(X1),mark(X2)))
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> ACTIVE(if(mark(X1),X2,X3))
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> MARK(X1)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.8: 

Subterm Processor:
-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X1)
 MARK(first(X1,X2)) -> MARK(X2)
 MARK(if(X1,X2,X3)) -> MARK(X1)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(MARK) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(and(ffalse,Y)) -> mark(ffalse)
 active(and(ftrue,X)) -> mark(X)
 active(first(s(X),cons(Y,Z))) -> mark(cons(Y,first(X,Z)))
 active(first(num0,X)) -> mark(nil)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(if(ffalse,X,Y)) -> mark(Y)
 active(if(ftrue,X,Y)) -> mark(X)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 first(active(X1),X2) -> first(X1,X2)
 first(mark(X1),X2) -> first(X1,X2)
 first(X1,active(X2)) -> first(X1,X2)
 first(X1,mark(X2)) -> first(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 if(active(X1),X2,X3) -> if(X1,X2,X3)
 if(mark(X1),X2,X3) -> if(X1,X2,X3)
 if(X1,active(X2),X3) -> if(X1,X2,X3)
 if(X1,mark(X2),X3) -> if(X1,X2,X3)
 if(X1,X2,active(X3)) -> if(X1,X2,X3)
 if(X1,X2,mark(X3)) -> if(X1,X2,X3)
 mark(add(X1,X2)) -> active(add(mark(X1),X2))
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(first(X1,X2)) -> active(first(mark(X1),mark(X2)))
 mark(from(X)) -> active(from(X))
 mark(if(X1,X2,X3)) -> active(if(mark(X1),X2,X3))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
