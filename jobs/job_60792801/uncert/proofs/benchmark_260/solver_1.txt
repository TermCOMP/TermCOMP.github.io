YES
proof of /home/ff862203/input_XdZC5hj9GO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 1 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 161 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 130 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 130 ms]
        (13) QDP
        (14) DependencyGraphProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QReductionProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 78 ms]
        (24) QDP
        (25) DependencyGraphProof [EQUIVALENT, 0 ms]
        (26) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V1) -> A__U12(a__isNatList(V1))
   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__U21(tt, V1) -> A__U22(a__isNat(V1))
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__U31(tt, V) -> A__U32(a__isNatList(V))
   A__U31(tt, V) -> A__ISNATLIST(V)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__U42(tt, V2) -> A__U43(a__isNatIList(V2))
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   A__U52(tt, V2) -> A__U53(a__isNatList(V2))
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__U61(tt, L) -> A__LENGTH(mark(L))
   A__U61(tt, L) -> MARK(L)
   A__AND(tt, X) -> MARK(X)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__LENGTH(cons(N, L)) -> A__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   A__LENGTH(cons(N, L)) -> A__AND(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N)))
   A__LENGTH(cons(N, L)) -> A__AND(a__isNatList(L), isNatIListKind(L))
   A__LENGTH(cons(N, L)) -> A__ISNATLIST(L)
   MARK(zeros) -> A__ZEROS
   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> A__U12(mark(X))
   MARK(U12(X)) -> MARK(X)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X)) -> A__U22(mark(X))
   MARK(U22(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> A__U32(mark(X))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(U43(X)) -> A__U43(mark(X))
   MARK(U43(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U53(X)) -> A__U53(mark(X))
   MARK(U53(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> A__U61(mark(X1), X2)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> A__LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 11 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__AND(tt, X) -> MARK(X)
   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, V) -> A__ISNATLIST(V)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(U43(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U53(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> A__U61(mark(X1), X2)
   A__U61(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   A__U61(tt, L) -> MARK(L)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> A__LENGTH(mark(X))
   A__LENGTH(cons(N, L)) -> A__AND(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N)))
   A__LENGTH(cons(N, L)) -> A__AND(a__isNatList(L), isNatIListKind(L))
   A__LENGTH(cons(N, L)) -> A__ISNATLIST(L)
   MARK(length(X)) -> MARK(X)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U61(X1, X2)) -> A__U61(mark(X1), X2)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> A__LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__AND_2(x_1, x_2) ) = x_2
POL( A__LENGTH_1(x_1) ) = x_1
POL( A__U11_2(x_1, x_2) ) = max{0, -2}
POL( A__U21_2(x_1, x_2) ) = max{0, -2}
POL( A__U31_2(x_1, x_2) ) = max{0, -2}
POL( A__U41_3(x_1, ..., x_3) ) = max{0, -2}
POL( A__U42_2(x_1, x_2) ) = max{0, -2}
POL( A__U51_3(x_1, ..., x_3) ) = max{0, -2}
POL( A__U52_2(x_1, x_2) ) = max{0, -2}
POL( A__U61_2(x_1, x_2) ) = x_2
POL( a__isNatKind_1(x_1) ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( mark_1(x_1) ) = x_1
POL( and_2(x_1, x_2) ) = x_1 + x_2
POL( a__and_2(x_1, x_2) ) = x_1 + x_2
POL( isNatIListKind_1(x_1) ) = 0
POL( a__isNatIListKind_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNatKind_1(x_1) ) = 0
POL( length_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = x_1
POL( a__isNat_1(x_1) ) = 0
POL( a__U11_2(x_1, x_2) ) = x_1
POL( a__U21_2(x_1, x_2) ) = 2x_1
POL( isNat_1(x_1) ) = 0
POL( zeros ) = 0
POL( a__zeros ) = 0
POL( U11_2(x_1, x_2) ) = x_1
POL( U12_1(x_1) ) = x_1
POL( a__U12_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 0
POL( a__isNatList_1(x_1) ) = 0
POL( U21_2(x_1, x_2) ) = 2x_1
POL( U22_1(x_1) ) = 2x_1
POL( a__U22_1(x_1) ) = 2x_1
POL( U31_2(x_1, x_2) ) = x_1
POL( a__U31_2(x_1, x_2) ) = x_1
POL( U32_1(x_1) ) = 2x_1
POL( a__U32_1(x_1) ) = 2x_1
POL( U41_3(x_1, ..., x_3) ) = x_1
POL( a__U41_3(x_1, ..., x_3) ) = x_1
POL( U42_2(x_1, x_2) ) = x_1
POL( a__U42_2(x_1, x_2) ) = x_1
POL( U43_1(x_1) ) = 2x_1
POL( a__U43_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( a__isNatIList_1(x_1) ) = 0
POL( U51_3(x_1, ..., x_3) ) = 2x_1
POL( a__U51_3(x_1, ..., x_3) ) = 2x_1
POL( U52_2(x_1, x_2) ) = 2x_1
POL( a__U52_2(x_1, x_2) ) = 2x_1
POL( U53_1(x_1) ) = 2x_1
POL( a__U53_1(x_1) ) = 2x_1
POL( U61_2(x_1, x_2) ) = 2x_1 + x_2 + 1
POL( a__U61_2(x_1, x_2) ) = 2x_1 + x_2 + 1
POL( a__length_1(x_1) ) = x_1 + 1
POL( nil ) = 0
POL( A__ISNATLIST_1(x_1) ) = 0
POL( MARK_1(x_1) ) = x_1
POL( A__ISNATKIND_1(x_1) ) = 0
POL( A__ISNATILISTKIND_1(x_1) ) = 0
POL( A__ISNAT_1(x_1) ) = 0
POL( A__ISNATILIST_1(x_1) ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a__isNatKind(0) -> tt
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   a__and(tt, X) -> mark(X)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   mark(isNatKind(X)) -> a__isNatKind(X)
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatKind(X) -> isNatKind(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNat(X) -> isNat(X)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatList(X) -> isNatList(X)
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(tt) -> tt
   a__U12(X) -> U12(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(tt) -> tt
   a__U22(X) -> U22(X)
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(tt) -> tt
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(tt) -> tt
   a__U43(X) -> U43(X)
   a__isNatIList(zeros) -> tt
   a__isNatIList(X) -> isNatIList(X)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U53(tt) -> tt
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__AND(tt, X) -> MARK(X)
   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, V) -> A__ISNATLIST(V)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(U43(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U53(X)) -> MARK(X)
   A__U61(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   A__U61(tt, L) -> MARK(L)
   A__LENGTH(cons(N, L)) -> A__AND(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N)))
   A__LENGTH(cons(N, L)) -> A__AND(a__isNatList(L), isNatIListKind(L))
   A__LENGTH(cons(N, L)) -> A__ISNATLIST(L)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__AND(tt, X) -> MARK(X)
   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, V) -> A__ISNATLIST(V)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(U43(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U53(X)) -> MARK(X)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__AND_2(x_1, x_2) ) = 2x_2
POL( A__U11_2(x_1, x_2) ) = max{0, -2}
POL( A__U21_2(x_1, x_2) ) = max{0, -2}
POL( A__U31_2(x_1, x_2) ) = max{0, -2}
POL( A__U41_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( A__U42_2(x_1, x_2) ) = max{0, -2}
POL( A__U51_3(x_1, ..., x_3) ) = max{0, -2}
POL( A__U52_2(x_1, x_2) ) = max{0, -2}
POL( a__isNatKind_1(x_1) ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( mark_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = 2x_1 + x_2
POL( a__and_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNatIListKind_1(x_1) ) = 0
POL( a__isNatIListKind_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( isNatKind_1(x_1) ) = 0
POL( length_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = x_1
POL( a__isNat_1(x_1) ) = 2x_1
POL( a__U11_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__U21_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNat_1(x_1) ) = 2x_1
POL( zeros ) = 0
POL( a__zeros ) = 0
POL( U11_2(x_1, x_2) ) = x_1 + 2x_2 + 1
POL( U12_1(x_1) ) = x_1 + 2
POL( a__U12_1(x_1) ) = x_1 + 2
POL( isNatList_1(x_1) ) = 2x_1
POL( a__isNatList_1(x_1) ) = 2x_1
POL( U21_2(x_1, x_2) ) = 2x_1 + x_2
POL( U22_1(x_1) ) = x_1
POL( a__U22_1(x_1) ) = x_1
POL( U31_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__U31_2(x_1, x_2) ) = x_1 + 2x_2
POL( U32_1(x_1) ) = x_1
POL( a__U32_1(x_1) ) = x_1
POL( U41_3(x_1, ..., x_3) ) = x_1 + x_2 + 2x_3
POL( a__U41_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 2x_3
POL( U42_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__U42_2(x_1, x_2) ) = x_1 + 2x_2
POL( U43_1(x_1) ) = x_1
POL( a__U43_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 2x_1
POL( a__isNatIList_1(x_1) ) = 2x_1
POL( U51_3(x_1, ..., x_3) ) = x_1 + x_2 + x_3
POL( a__U51_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 2x_3
POL( U52_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__U52_2(x_1, x_2) ) = x_1 + 2x_2
POL( U53_1(x_1) ) = x_1
POL( a__U53_1(x_1) ) = x_1
POL( U61_2(x_1, x_2) ) = x_2 + 1
POL( a__U61_2(x_1, x_2) ) = 2x_2 + 2
POL( a__length_1(x_1) ) = x_1 + 2
POL( nil ) = 0
POL( A__ISNATLIST_1(x_1) ) = 0
POL( MARK_1(x_1) ) = 2x_1
POL( A__ISNATKIND_1(x_1) ) = 0
POL( A__ISNATILISTKIND_1(x_1) ) = 0
POL( A__ISNAT_1(x_1) ) = 0
POL( A__ISNATILIST_1(x_1) ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a__isNatKind(0) -> tt
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   a__and(tt, X) -> mark(X)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   mark(isNatKind(X)) -> a__isNatKind(X)
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatKind(X) -> isNatKind(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNat(X) -> isNat(X)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(tt) -> tt
   a__U12(X) -> U12(X)
   a__isNatList(nil) -> tt
   a__isNatList(X) -> isNatList(X)
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(tt) -> tt
   a__U22(X) -> U22(X)
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(tt) -> tt
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(tt) -> tt
   a__U43(X) -> U43(X)
   a__isNatIList(zeros) -> tt
   a__isNatIList(X) -> isNatIList(X)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U53(tt) -> tt
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__AND(tt, X) -> MARK(X)
   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(U22(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, V) -> A__ISNATLIST(V)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(U43(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(U53(X)) -> MARK(X)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U52(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__AND(tt, X) -> MARK(X)
   A__U11(tt, V1) -> A__ISNATLIST(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNATILISTKIND(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILISTKIND(cons(V1, V2)) -> A__ISNATKIND(V1)
   A__ISNATKIND(s(V1)) -> A__ISNATKIND(V1)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   MARK(U21(X1, X2)) -> A__U21(mark(X1), X2)
   A__U21(tt, V1) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__U11(a__isNatIListKind(V1), V1)
   A__ISNAT(length(V1)) -> A__ISNATILISTKIND(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNatKind(V1), V1)
   A__ISNAT(s(V1)) -> A__ISNATKIND(V1)
   MARK(U21(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, V) -> A__ISNATLIST(V)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__ISNATILIST(V) -> A__ISNATILISTKIND(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   A__U41(tt, V1, V2) -> A__ISNAT(V1)
   A__ISNATILIST(cons(V1, V2)) -> A__AND(a__isNatKind(V1), isNatIListKind(V2))
   A__ISNATILIST(cons(V1, V2)) -> A__ISNATKIND(V1)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2)) -> A__U42(mark(X1), X2)
   MARK(U42(X1, X2)) -> MARK(X1)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2, X3)) -> A__U51(mark(X1), X2, X3)
   A__U51(tt, V1, V2) -> A__ISNAT(V1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2)) -> A__U52(mark(X1), X2)
   MARK(U52(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> A__AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(isNatKind(X)) -> A__ISNATKIND(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__AND_2(x_1, x_2) ) = 2x_2 + 2
POL( A__U11_2(x_1, x_2) ) = 2x_2 + 1
POL( A__U21_2(x_1, x_2) ) = 2x_2 + 1
POL( A__U31_2(x_1, x_2) ) = 2x_2 + 2
POL( A__U41_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( A__U42_2(x_1, x_2) ) = 2x_2 + 2
POL( A__U51_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( A__U52_2(x_1, x_2) ) = 2x_2 + 2
POL( a__isNatKind_1(x_1) ) = 0
POL( 0 ) = 2
POL( tt ) = 0
POL( mark_1(x_1) ) = 0
POL( and_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( a__and_2(x_1, x_2) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = 2x_1
POL( a__isNatIListKind_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( isNatKind_1(x_1) ) = x_1 + 1
POL( length_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = 2x_1 + 2
POL( a__isNat_1(x_1) ) = 0
POL( a__U11_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( a__U21_2(x_1, x_2) ) = 1
POL( isNat_1(x_1) ) = 2x_1 + 1
POL( zeros ) = 0
POL( a__zeros ) = 0
POL( U11_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( U12_1(x_1) ) = 2x_1 + 2
POL( a__U12_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 2x_1 + 1
POL( a__isNatList_1(x_1) ) = 0
POL( U21_2(x_1, x_2) ) = 2x_1 + x_2 + 1
POL( U22_1(x_1) ) = x_1
POL( a__U22_1(x_1) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( a__U31_2(x_1, x_2) ) = 2
POL( U32_1(x_1) ) = 2x_1 + 1
POL( a__U32_1(x_1) ) = 0
POL( U41_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 2x_3 + 2
POL( a__U41_3(x_1, ..., x_3) ) = max{0, x_3 - 2}
POL( U42_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__U42_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U43_1(x_1) ) = x_1
POL( a__U43_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = 2x_1 + 2
POL( a__isNatIList_1(x_1) ) = 0
POL( U51_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 2x_3 + 2
POL( a__U51_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 1
POL( U52_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__U52_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U53_1(x_1) ) = 2x_1
POL( a__U53_1(x_1) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( a__U61_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( a__length_1(x_1) ) = max{0, x_1 - 2}
POL( nil ) = 2
POL( A__ISNATLIST_1(x_1) ) = 2x_1
POL( MARK_1(x_1) ) = 2x_1 + 1
POL( A__ISNATKIND_1(x_1) ) = 2x_1
POL( A__ISNATILISTKIND_1(x_1) ) = 2x_1 + 1
POL( A__ISNAT_1(x_1) ) = 2x_1
POL( A__ISNATILIST_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U51(tt, V1, V2) -> A__U52(a__isNat(V1), V2)
   MARK(U22(X)) -> MARK(X)
   A__U41(tt, V1, V2) -> A__U42(a__isNat(V1), V2)
   A__U42(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__U31(a__isNatIListKind(V), V)
   MARK(U43(X)) -> MARK(X)
   MARK(U53(X)) -> MARK(X)
   MARK(isNatIListKind(X)) -> A__ISNATILISTKIND(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U43(X)) -> MARK(X)
   MARK(U22(X)) -> MARK(X)
   MARK(U53(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U43(X)) -> MARK(X)
   MARK(U22(X)) -> MARK(X)
   MARK(U53(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U43(X)) -> MARK(X)
   MARK(U22(X)) -> MARK(X)
   MARK(U53(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U43(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U22(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U53(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U61(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__U61(tt, L) -> A__LENGTH(mark(L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__LENGTH_1(x_1) ) = max{0, 2x_1 - 2}
POL( A__U61_2(x_1, x_2) ) = x_1 + 2x_2 + 1
POL( mark_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( a__zeros ) = 2
POL( U11_2(x_1, x_2) ) = 0
POL( a__U11_2(x_1, x_2) ) = 2
POL( U12_1(x_1) ) = 0
POL( a__U12_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = x_1
POL( a__isNatList_1(x_1) ) = x_1
POL( U21_2(x_1, x_2) ) = x_1
POL( a__U21_2(x_1, x_2) ) = x_1
POL( U22_1(x_1) ) = x_1
POL( a__U22_1(x_1) ) = x_1
POL( isNat_1(x_1) ) = 1
POL( a__isNat_1(x_1) ) = 2
POL( U31_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__U31_2(x_1, x_2) ) = x_1 + 2x_2
POL( U32_1(x_1) ) = 0
POL( a__U32_1(x_1) ) = 2
POL( U41_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( a__U41_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U42_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__U42_2(x_1, x_2) ) = x_1 + 2x_2
POL( U43_1(x_1) ) = x_1
POL( a__U43_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 2x_1
POL( a__isNatIList_1(x_1) ) = 2x_1 + 2
POL( U51_3(x_1, ..., x_3) ) = x_3
POL( a__U51_3(x_1, ..., x_3) ) = x_3 + 2
POL( U52_2(x_1, x_2) ) = x_2
POL( a__U52_2(x_1, x_2) ) = x_2 + 2
POL( U53_1(x_1) ) = x_1
POL( a__U53_1(x_1) ) = x_1
POL( U61_2(x_1, x_2) ) = 2
POL( a__U61_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 1
POL( a__length_1(x_1) ) = 2
POL( and_2(x_1, x_2) ) = x_1 + x_2
POL( a__and_2(x_1, x_2) ) = x_1 + x_2
POL( tt ) = 2
POL( isNatIListKind_1(x_1) ) = 0
POL( a__isNatIListKind_1(x_1) ) = 2
POL( cons_2(x_1, x_2) ) = 2x_2 + 2
POL( a__isNatKind_1(x_1) ) = 2
POL( isNatKind_1(x_1) ) = 0
POL( s_1(x_1) ) = 2
POL( 0 ) = 0
POL( nil ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   a__and(tt, X) -> mark(X)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   mark(isNatKind(X)) -> a__isNatKind(X)
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatList(X) -> isNatList(X)
   a__and(X1, X2) -> and(X1, X2)
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(tt) -> tt
   a__U12(X) -> U12(X)
   a__isNatKind(0) -> tt
   a__isNatKind(X) -> isNatKind(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__isNat(0) -> tt
   a__isNat(X) -> isNat(X)
   a__U52(X1, X2) -> U52(X1, X2)
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(tt) -> tt
   a__U22(X) -> U22(X)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(tt) -> tt
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(tt) -> tt
   a__U43(X) -> U43(X)
   a__isNatIList(zeros) -> tt
   a__isNatIList(X) -> isNatIList(X)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U53(tt) -> tt
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt, V1) -> a__U12(a__isNatList(V1))
   a__U12(tt) -> tt
   a__U21(tt, V1) -> a__U22(a__isNat(V1))
   a__U22(tt) -> tt
   a__U31(tt, V) -> a__U32(a__isNatList(V))
   a__U32(tt) -> tt
   a__U41(tt, V1, V2) -> a__U42(a__isNat(V1), V2)
   a__U42(tt, V2) -> a__U43(a__isNatIList(V2))
   a__U43(tt) -> tt
   a__U51(tt, V1, V2) -> a__U52(a__isNat(V1), V2)
   a__U52(tt, V2) -> a__U53(a__isNatList(V2))
   a__U53(tt) -> tt
   a__U61(tt, L) -> s(a__length(mark(L)))
   a__and(tt, X) -> mark(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatIListKind(V1), V1)
   a__isNat(s(V1)) -> a__U21(a__isNatKind(V1), V1)
   a__isNatIList(V) -> a__U31(a__isNatIListKind(V), V)
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__isNatIListKind(nil) -> tt
   a__isNatIListKind(zeros) -> tt
   a__isNatIListKind(cons(V1, V2)) -> a__and(a__isNatKind(V1), isNatIListKind(V2))
   a__isNatKind(0) -> tt
   a__isNatKind(length(V1)) -> a__isNatIListKind(V1)
   a__isNatKind(s(V1)) -> a__isNatKind(V1)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__and(a__isNatKind(V1), isNatIListKind(V2)), V1, V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U61(a__and(a__and(a__isNatList(L), isNatIListKind(L)), and(isNat(N), isNatKind(N))), L)
   mark(zeros) -> a__zeros
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U21(X1, X2)) -> a__U21(mark(X1), X2)
   mark(U22(X)) -> a__U22(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U32(X)) -> a__U32(mark(X))
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2)) -> a__U42(mark(X1), X2)
   mark(U43(X)) -> a__U43(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2, X3)) -> a__U51(mark(X1), X2, X3)
   mark(U52(X1, X2)) -> a__U52(mark(X1), X2)
   mark(U53(X)) -> a__U53(mark(X))
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(isNatIListKind(X)) -> a__isNatIListKind(X)
   mark(isNatKind(X)) -> a__isNatKind(X)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNatList(X) -> isNatList(X)
   a__U21(X1, X2) -> U21(X1, X2)
   a__U22(X) -> U22(X)
   a__isNat(X) -> isNat(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U32(X) -> U32(X)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2) -> U42(X1, X2)
   a__U43(X) -> U43(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2, X3) -> U51(X1, X2, X3)
   a__U52(X1, X2) -> U52(X1, X2)
   a__U53(X) -> U53(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__length(X) -> length(X)
   a__and(X1, X2) -> and(X1, X2)
   a__isNatIListKind(X) -> isNatIListKind(X)
   a__isNatKind(X) -> isNatKind(X)

The set Q consists of the following terms:

   a__and(x0, x1)
   mark(isNatIListKind(x0))
   a__U53(x0)
   mark(U42(x0, x1))
   mark(isNatIList(x0))
   a__U43(x0)
   a__U52(x0, x1)
   mark(U53(x0))
   a__isNatIListKind(x0)
   a__length(x0)
   mark(tt)
   a__U22(x0)
   mark(zeros)
   mark(0)
   mark(length(x0))
   a__U11(x0, x1)
   a__isNatList(x0)
   a__isNatKind(x0)
   a__isNatIList(x0)
   mark(cons(x0, x1))
   mark(U43(x0))
   mark(U31(x0, x1))
   mark(U12(x0))
   a__U32(x0)
   a__U31(x0, x1)
   mark(U52(x0, x1))
   mark(isNatKind(x0))
   mark(U22(x0))
   a__U21(x0, x1)
   mark(isNat(x0))
   mark(U51(x0, x1, x2))
   mark(U32(x0))
   mark(U41(x0, x1, x2))
   mark(isNatList(x0))
   a__U51(x0, x1, x2)
   mark(U21(x0, x1))
   a__U41(x0, x1, x2)
   mark(U11(x0, x1))
   mark(and(x0, x1))
   a__U12(x0)
   a__U61(x0, x1)
   a__zeros
   mark(U61(x0, x1))
   mark(s(x0))
   mark(nil)
   a__U42(x0, x1)
   a__isNat(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(26)
TRUE
