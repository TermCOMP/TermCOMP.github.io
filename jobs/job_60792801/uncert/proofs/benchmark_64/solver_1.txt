NO
proof of /home/ff862203/input_3TIA15bpz8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QReductionProof [EQUIVALENT, 0 ms]
(8) QDP
(9) NonTerminationLoopProof [COMPLETE, 0 ms]
(10) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(f(f(x))) -> h(f(g(f(x))))
   f(g(f(x))) -> f(f(x))

The set Q consists of the following terms:

   f(g(f(x0)))
   h(f(f(x0)))


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(f(x))) -> H(f(g(f(x))))
   H(f(f(x))) -> F(g(f(x)))
   F(g(f(x))) -> F(f(x))

The TRS R consists of the following rules:

   h(f(f(x))) -> h(f(g(f(x))))
   f(g(f(x))) -> f(f(x))

The set Q consists of the following terms:

   f(g(f(x0)))
   h(f(f(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(f(x))) -> H(f(g(f(x))))

The TRS R consists of the following rules:

   h(f(f(x))) -> h(f(g(f(x))))
   f(g(f(x))) -> f(f(x))

The set Q consists of the following terms:

   f(g(f(x0)))
   h(f(f(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(f(x))) -> H(f(g(f(x))))

The TRS R consists of the following rules:

   f(g(f(x))) -> f(f(x))

The set Q consists of the following terms:

   f(g(f(x0)))
   h(f(f(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   h(f(f(x0)))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(f(x))) -> H(f(g(f(x))))

The TRS R consists of the following rules:

   f(g(f(x))) -> f(f(x))

The set Q consists of the following terms:

   f(g(f(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = H(f(g(f(x')))) evaluates to  t =H(f(g(f(x'))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

H(f(g(f(x')))) -> H(f(f(x')))
with rule f(g(f(x''))) -> f(f(x'')) at position [0] and matcher [x'' / x']

H(f(f(x'))) -> H(f(g(f(x'))))
with rule H(f(f(x))) -> H(f(g(f(x))))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(10)
NO
