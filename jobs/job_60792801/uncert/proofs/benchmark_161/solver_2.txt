YES

Problem 1: 

(VAR vu95NonEmpty L X X1 X2 XS Y YS)
(RULES
active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
active(app(nil,YS)) -> mark(YS)
active(app(X1,X2)) -> app(active(X1),X2)
active(app(X1,X2)) -> app(X1,active(X2))
active(cons(X1,X2)) -> cons(active(X1),X2)
active(from(X)) -> from(active(X))
active(from(X)) -> mark(cons(X,from(s(X))))
active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
active(prefix(X)) -> prefix(active(X))
active(s(X)) -> s(active(X))
active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
active(zWadr(nil,YS)) -> mark(nil)
active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
active(zWadr(XS,nil)) -> mark(nil)
app(mark(X1),X2) -> mark(app(X1,X2))
app(ok(X1),ok(X2)) -> ok(app(X1,X2))
app(X1,mark(X2)) -> mark(app(X1,X2))
cons(mark(X1),X2) -> mark(cons(X1,X2))
cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
from(mark(X)) -> mark(from(X))
from(ok(X)) -> ok(from(X))
prefix(mark(X)) -> mark(prefix(X))
prefix(ok(X)) -> ok(prefix(X))
proper(app(X1,X2)) -> app(proper(X1),proper(X2))
proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
proper(from(X)) -> from(proper(X))
proper(prefix(X)) -> prefix(proper(X))
proper(s(X)) -> s(proper(X))
proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
proper(nil) -> ok(nil)
s(mark(X)) -> mark(s(X))
s(ok(X)) -> ok(s(X))
top(mark(X)) -> top(proper(X))
top(ok(X)) -> top(active(X))
zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
)
 
(STRATEGY INNERMOST)

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> APP(XS,YS)
 ACTIVE(app(cons(X,XS),YS)) -> CONS(X,app(XS,YS))
 ACTIVE(app(X1,X2)) -> ACTIVE(X1)
 ACTIVE(app(X1,X2)) -> ACTIVE(X2)
 ACTIVE(app(X1,X2)) -> APP(active(X1),X2)
 ACTIVE(app(X1,X2)) -> APP(X1,active(X2))
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(active(X))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(prefix(L)) -> CONS(nil,zWadr(L,prefix(L)))
 ACTIVE(prefix(L)) -> ZWADR(L,prefix(L))
 ACTIVE(prefix(X)) -> ACTIVE(X)
 ACTIVE(prefix(X)) -> PREFIX(active(X))
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> APP(Y,cons(X,nil))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(app(Y,cons(X,nil)),zWadr(XS,YS))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(X,nil)
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> ZWADR(XS,YS)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zWadr(X1,X2)) -> ZWADR(active(X1),X2)
 ACTIVE(zWadr(X1,X2)) -> ZWADR(X1,active(X2))
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(ok(X1),ok(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
 PREFIX(mark(X)) -> PREFIX(X)
 PREFIX(ok(X)) -> PREFIX(X)
 PROPER(app(X1,X2)) -> APP(proper(X1),proper(X2))
 PROPER(app(X1,X2)) -> PROPER(X1)
 PROPER(app(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> FROM(proper(X))
 PROPER(from(X)) -> PROPER(X)
 PROPER(prefix(X)) -> PREFIX(proper(X))
 PROPER(prefix(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(zWadr(X1,X2)) -> PROPER(X1)
 PROPER(zWadr(X1,X2)) -> PROPER(X2)
 PROPER(zWadr(X1,X2)) -> ZWADR(proper(X1),proper(X2))
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(ok(X1),ok(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(app(cons(X,XS),YS)) -> APP(XS,YS)
 ACTIVE(app(cons(X,XS),YS)) -> CONS(X,app(XS,YS))
 ACTIVE(app(X1,X2)) -> ACTIVE(X1)
 ACTIVE(app(X1,X2)) -> ACTIVE(X2)
 ACTIVE(app(X1,X2)) -> APP(active(X1),X2)
 ACTIVE(app(X1,X2)) -> APP(X1,active(X2))
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(active(X))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(prefix(L)) -> CONS(nil,zWadr(L,prefix(L)))
 ACTIVE(prefix(L)) -> ZWADR(L,prefix(L))
 ACTIVE(prefix(X)) -> ACTIVE(X)
 ACTIVE(prefix(X)) -> PREFIX(active(X))
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> S(active(X))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> APP(Y,cons(X,nil))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(app(Y,cons(X,nil)),zWadr(XS,YS))
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> CONS(X,nil)
 ACTIVE(zWadr(cons(X,XS),cons(Y,YS))) -> ZWADR(XS,YS)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X2)
 ACTIVE(zWadr(X1,X2)) -> ZWADR(active(X1),X2)
 ACTIVE(zWadr(X1,X2)) -> ZWADR(X1,active(X2))
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(ok(X1),ok(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
 PREFIX(mark(X)) -> PREFIX(X)
 PREFIX(ok(X)) -> PREFIX(X)
 PROPER(app(X1,X2)) -> APP(proper(X1),proper(X2))
 PROPER(app(X1,X2)) -> PROPER(X1)
 PROPER(app(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> FROM(proper(X))
 PROPER(from(X)) -> PROPER(X)
 PROPER(prefix(X)) -> PREFIX(proper(X))
 PROPER(prefix(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(zWadr(X1,X2)) -> PROPER(X1)
 PROPER(zWadr(X1,X2)) -> PROPER(X2)
 PROPER(zWadr(X1,X2)) -> ZWADR(proper(X1),proper(X2))
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(ok(X1),ok(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(ok(X1),ok(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 PREFIX(mark(X)) -> PREFIX(X)
 PREFIX(ok(X)) -> PREFIX(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(ok(X1),ok(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 PROPER(app(X1,X2)) -> PROPER(X1)
 PROPER(app(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> PROPER(X)
 PROPER(prefix(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(zWadr(X1,X2)) -> PROPER(X1)
 PROPER(zWadr(X1,X2)) -> PROPER(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 ACTIVE(app(X1,X2)) -> ACTIVE(X1)
 ACTIVE(app(X1,X2)) -> ACTIVE(X2)
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(prefix(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->->Cycle:
->->-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))


The problem is decomposed in 9 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZWADR(mark(X1),X2) -> ZWADR(X1,X2)
 ZWADR(ok(X1),ok(X2)) -> ZWADR(X1,X2)
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(ZWADR) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZWADR(X1,mark(X2)) -> ZWADR(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(ZWADR) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 S(mark(X)) -> S(X)
 S(ok(X)) -> S(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(S) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 PREFIX(mark(X)) -> PREFIX(X)
 PREFIX(ok(X)) -> PREFIX(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(PREFIX) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(FROM) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 APP(mark(X1),X2) -> APP(X1,X2)
 APP(ok(X1),ok(X2)) -> APP(X1,X2)
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(APP) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(X1,mark(X2)) -> APP(X1,X2)
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))

Problem 1.6: 

Subterm Processor:
-> Pairs:
 APP(X1,mark(X2)) -> APP(X1,X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(APP) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 PROPER(app(X1,X2)) -> PROPER(X1)
 PROPER(app(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> PROPER(X)
 PROPER(prefix(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(zWadr(X1,X2)) -> PROPER(X1)
 PROPER(zWadr(X1,X2)) -> PROPER(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(PROPER) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 ACTIVE(app(X1,X2)) -> ACTIVE(X1)
 ACTIVE(app(X1,X2)) -> ACTIVE(X2)
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(prefix(X)) -> ACTIVE(X)
 ACTIVE(s(X)) -> ACTIVE(X)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X1)
 ACTIVE(zWadr(X1,X2)) -> ACTIVE(X2)
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Projection:
 pi(ACTIVE) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Reduction Pairs Processor:
-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[app](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 1
[from](X) = 2.X + 2
[prefix](X) = 2.X + 2
[proper](X) = X
[s](X) = X
[top](X) = 0
[zWadr](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[mark](X) = X + 1
[nil] = 0
[ok](X) = X
[ACTIVE](X) = 0
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[PREFIX](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = 2.X
[ZWADR](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))

Problem 1.9: 

Reduction Pairs Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
-> Usable rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X + 1
[app](X1,X2) = 2.X1 + X2 + 2
[cons](X1,X2) = X1
[from](X) = 2.X + 1
[prefix](X) = X
[proper](X) = 0
[s](X) = 2.X + 2
[top](X) = 0
[zWadr](X1,X2) = X1 + 2.X2 + 1
[fSNonEmpty] = 0
[mark](X) = X + 1
[nil] = 0
[ok](X) = 2.X + 2
[ACTIVE](X) = 0
[APP](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[PREFIX](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = X
[ZWADR](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(app(cons(X,XS),YS)) -> mark(cons(X,app(XS,YS)))
 active(app(nil,YS)) -> mark(YS)
 active(app(X1,X2)) -> app(active(X1),X2)
 active(app(X1,X2)) -> app(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(prefix(L)) -> mark(cons(nil,zWadr(L,prefix(L))))
 active(prefix(X)) -> prefix(active(X))
 active(s(X)) -> s(active(X))
 active(zWadr(cons(X,XS),cons(Y,YS))) -> mark(cons(app(Y,cons(X,nil)),zWadr(XS,YS)))
 active(zWadr(nil,YS)) -> mark(nil)
 active(zWadr(X1,X2)) -> zWadr(active(X1),X2)
 active(zWadr(X1,X2)) -> zWadr(X1,active(X2))
 active(zWadr(XS,nil)) -> mark(nil)
 app(mark(X1),X2) -> mark(app(X1,X2))
 app(ok(X1),ok(X2)) -> ok(app(X1,X2))
 app(X1,mark(X2)) -> mark(app(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 prefix(mark(X)) -> mark(prefix(X))
 prefix(ok(X)) -> ok(prefix(X))
 proper(app(X1,X2)) -> app(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(prefix(X)) -> prefix(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(zWadr(X1,X2)) -> zWadr(proper(X1),proper(X2))
 proper(nil) -> ok(nil)
 s(mark(X)) -> mark(s(X))
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
 zWadr(mark(X1),X2) -> mark(zWadr(X1,X2))
 zWadr(ok(X1),ok(X2)) -> ok(zWadr(X1,X2))
 zWadr(X1,mark(X2)) -> mark(zWadr(X1,X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
