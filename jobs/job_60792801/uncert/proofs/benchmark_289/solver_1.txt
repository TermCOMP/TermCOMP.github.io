YES
proof of /home/ff862203/input_pfsDV2vNAH.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [SOUND, 0 ms]
(2) CSR
(3) CSRInnermostProof [EQUIVALENT, 0 ms]
(4) CSR
(5) CSDependencyPairsProof [EQUIVALENT, 0 ms]
(6) QCSDP
(7) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QCSDP
        (10) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (11) QCSDP
        (12) PIsEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QCSDP
        (15) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (16) QCSDP
        (17) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (18) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, N, X, XS)) -> mark(U12(splitAt(N, XS), X))
   active(U12(pair(YS, ZS), X)) -> mark(pair(cons(X, YS), ZS))
   active(afterNth(N, XS)) -> mark(snd(splitAt(N, XS)))
   active(and(tt, X)) -> mark(X)
   active(fst(pair(X, Y))) -> mark(X)
   active(head(cons(N, XS))) -> mark(N)
   active(natsFrom(N)) -> mark(cons(N, natsFrom(s(N))))
   active(sel(N, XS)) -> mark(head(afterNth(N, XS)))
   active(snd(pair(X, Y))) -> mark(Y)
   active(splitAt(0, XS)) -> mark(pair(nil, XS))
   active(splitAt(s(N), cons(X, XS))) -> mark(U11(tt, N, X, XS))
   active(tail(cons(N, XS))) -> mark(XS)
   active(take(N, XS)) -> mark(fst(splitAt(N, XS)))
   active(U11(X1, X2, X3, X4)) -> U11(active(X1), X2, X3, X4)
   active(U12(X1, X2)) -> U12(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(X1, active(X2))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(X1, active(X2))
   active(snd(X)) -> snd(active(X))
   active(and(X1, X2)) -> and(active(X1), X2)
   active(fst(X)) -> fst(active(X))
   active(head(X)) -> head(active(X))
   active(natsFrom(X)) -> natsFrom(active(X))
   active(s(X)) -> s(active(X))
   active(sel(X1, X2)) -> sel(active(X1), X2)
   active(sel(X1, X2)) -> sel(X1, active(X2))
   active(tail(X)) -> tail(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   U11(mark(X1), X2, X3, X4) -> mark(U11(X1, X2, X3, X4))
   U12(mark(X1), X2) -> mark(U12(X1, X2))
   splitAt(mark(X1), X2) -> mark(splitAt(X1, X2))
   splitAt(X1, mark(X2)) -> mark(splitAt(X1, X2))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   afterNth(mark(X1), X2) -> mark(afterNth(X1, X2))
   afterNth(X1, mark(X2)) -> mark(afterNth(X1, X2))
   snd(mark(X)) -> mark(snd(X))
   and(mark(X1), X2) -> mark(and(X1, X2))
   fst(mark(X)) -> mark(fst(X))
   head(mark(X)) -> mark(head(X))
   natsFrom(mark(X)) -> mark(natsFrom(X))
   s(mark(X)) -> mark(s(X))
   sel(mark(X1), X2) -> mark(sel(X1, X2))
   sel(X1, mark(X2)) -> mark(sel(X1, X2))
   tail(mark(X)) -> mark(tail(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(U11(X1, X2, X3, X4)) -> U11(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(tt) -> ok(tt)
   proper(U12(X1, X2)) -> U12(proper(X1), proper(X2))
   proper(splitAt(X1, X2)) -> splitAt(proper(X1), proper(X2))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(afterNth(X1, X2)) -> afterNth(proper(X1), proper(X2))
   proper(snd(X)) -> snd(proper(X))
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(fst(X)) -> fst(proper(X))
   proper(head(X)) -> head(proper(X))
   proper(natsFrom(X)) -> natsFrom(proper(X))
   proper(s(X)) -> s(proper(X))
   proper(sel(X1, X2)) -> sel(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(nil) -> ok(nil)
   proper(tail(X)) -> tail(proper(X))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   U11(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U11(X1, X2, X3, X4))
   U12(ok(X1), ok(X2)) -> ok(U12(X1, X2))
   splitAt(ok(X1), ok(X2)) -> ok(splitAt(X1, X2))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   afterNth(ok(X1), ok(X2)) -> ok(afterNth(X1, X2))
   snd(ok(X)) -> ok(snd(X))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   fst(ok(X)) -> ok(fst(X))
   head(ok(X)) -> ok(head(X))
   natsFrom(ok(X)) -> ok(natsFrom(X))
   s(ok(X)) -> ok(s(X))
   sel(ok(X1), ok(X2)) -> ok(sel(X1, X2))
   tail(ok(X)) -> ok(tail(X))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   active(and(x0, x1))
   splitAt(ok(x0), ok(x1))
   head(mark(x0))
   active(U11(x0, x1, x2, x3))
   snd(mark(x0))
   U12(mark(x0), x1)
   active(tail(x0))
   take(ok(x0), ok(x1))
   proper(pair(x0, x1))
   proper(cons(x0, x1))
   active(take(x0, x1))
   active(sel(x0, x1))
   and(ok(x0), ok(x1))
   active(afterNth(x0, x1))
   proper(sel(x0, x1))
   head(ok(x0))
   active(pair(x0, x1))
   proper(U11(x0, x1, x2, x3))
   proper(0)
   pair(ok(x0), ok(x1))
   U11(mark(x0), x1, x2, x3)
   afterNth(ok(x0), ok(x1))
   natsFrom(ok(x0))
   s(ok(x0))
   splitAt(x0, mark(x1))
   active(U12(x0, x1))
   active(cons(x0, x1))
   proper(take(x0, x1))
   pair(mark(x0), x1)
   U12(ok(x0), ok(x1))
   proper(natsFrom(x0))
   take(x0, mark(x1))
   fst(mark(x0))
   active(s(x0))
   proper(snd(x0))
   cons(ok(x0), ok(x1))
   proper(U12(x0, x1))
   snd(ok(x0))
   active(snd(x0))
   active(natsFrom(x0))
   and(mark(x0), x1)
   sel(x0, mark(x1))
   proper(s(x0))
   afterNth(x0, mark(x1))
   active(splitAt(x0, x1))
   proper(head(x0))
   U11(ok(x0), ok(x1), ok(x2), ok(x3))
   top(mark(x0))
   active(fst(x0))
   cons(mark(x0), x1)
   proper(nil)
   sel(ok(x0), ok(x1))
   tail(ok(x0))
   take(mark(x0), x1)
   proper(splitAt(x0, x1))
   proper(tt)
   sel(mark(x0), x1)
   proper(fst(x0))
   natsFrom(mark(x0))
   tail(mark(x0))
   splitAt(mark(x0), x1)
   proper(afterNth(x0, x1))
   afterNth(mark(x0), x1)
   s(mark(x0))
   proper(and(x0, x1))
   top(ok(x0))
   pair(x0, mark(x1))
   fst(ok(x0))
   active(head(x0))
   proper(tail(x0))


----------------------------------------

(1) QTRSToCSRProof (SOUND)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, N, X, XS)) -> mark(U12(splitAt(N, XS), X))
   active(U12(pair(YS, ZS), X)) -> mark(pair(cons(X, YS), ZS))
   active(afterNth(N, XS)) -> mark(snd(splitAt(N, XS)))
   active(and(tt, X)) -> mark(X)
   active(fst(pair(X, Y))) -> mark(X)
   active(head(cons(N, XS))) -> mark(N)
   active(natsFrom(N)) -> mark(cons(N, natsFrom(s(N))))
   active(sel(N, XS)) -> mark(head(afterNth(N, XS)))
   active(snd(pair(X, Y))) -> mark(Y)
   active(splitAt(0, XS)) -> mark(pair(nil, XS))
   active(splitAt(s(N), cons(X, XS))) -> mark(U11(tt, N, X, XS))
   active(tail(cons(N, XS))) -> mark(XS)
   active(take(N, XS)) -> mark(fst(splitAt(N, XS)))
   active(U11(X1, X2, X3, X4)) -> U11(active(X1), X2, X3, X4)
   active(U12(X1, X2)) -> U12(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(X1, active(X2))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(X1, active(X2))
   active(snd(X)) -> snd(active(X))
   active(and(X1, X2)) -> and(active(X1), X2)
   active(fst(X)) -> fst(active(X))
   active(head(X)) -> head(active(X))
   active(natsFrom(X)) -> natsFrom(active(X))
   active(s(X)) -> s(active(X))
   active(sel(X1, X2)) -> sel(active(X1), X2)
   active(sel(X1, X2)) -> sel(X1, active(X2))
   active(tail(X)) -> tail(active(X))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   U11(mark(X1), X2, X3, X4) -> mark(U11(X1, X2, X3, X4))
   U12(mark(X1), X2) -> mark(U12(X1, X2))
   splitAt(mark(X1), X2) -> mark(splitAt(X1, X2))
   splitAt(X1, mark(X2)) -> mark(splitAt(X1, X2))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   afterNth(mark(X1), X2) -> mark(afterNth(X1, X2))
   afterNth(X1, mark(X2)) -> mark(afterNth(X1, X2))
   snd(mark(X)) -> mark(snd(X))
   and(mark(X1), X2) -> mark(and(X1, X2))
   fst(mark(X)) -> mark(fst(X))
   head(mark(X)) -> mark(head(X))
   natsFrom(mark(X)) -> mark(natsFrom(X))
   s(mark(X)) -> mark(s(X))
   sel(mark(X1), X2) -> mark(sel(X1, X2))
   sel(X1, mark(X2)) -> mark(sel(X1, X2))
   tail(mark(X)) -> mark(tail(X))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(U11(X1, X2, X3, X4)) -> U11(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(tt) -> ok(tt)
   proper(U12(X1, X2)) -> U12(proper(X1), proper(X2))
   proper(splitAt(X1, X2)) -> splitAt(proper(X1), proper(X2))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(afterNth(X1, X2)) -> afterNth(proper(X1), proper(X2))
   proper(snd(X)) -> snd(proper(X))
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(fst(X)) -> fst(proper(X))
   proper(head(X)) -> head(proper(X))
   proper(natsFrom(X)) -> natsFrom(proper(X))
   proper(s(X)) -> s(proper(X))
   proper(sel(X1, X2)) -> sel(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(nil) -> ok(nil)
   proper(tail(X)) -> tail(proper(X))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   U11(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(U11(X1, X2, X3, X4))
   U12(ok(X1), ok(X2)) -> ok(U12(X1, X2))
   splitAt(ok(X1), ok(X2)) -> ok(splitAt(X1, X2))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   afterNth(ok(X1), ok(X2)) -> ok(afterNth(X1, X2))
   snd(ok(X)) -> ok(snd(X))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   fst(ok(X)) -> ok(fst(X))
   head(ok(X)) -> ok(head(X))
   natsFrom(ok(X)) -> ok(natsFrom(X))
   s(ok(X)) -> ok(s(X))
   sel(ok(X1), ok(X2)) -> ok(sel(X1, X2))
   tail(ok(X)) -> ok(tail(X))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

The set Q consists of the following terms:

   active(and(x0, x1))
   splitAt(ok(x0), ok(x1))
   head(mark(x0))
   active(U11(x0, x1, x2, x3))
   snd(mark(x0))
   U12(mark(x0), x1)
   active(tail(x0))
   take(ok(x0), ok(x1))
   proper(pair(x0, x1))
   proper(cons(x0, x1))
   active(take(x0, x1))
   active(sel(x0, x1))
   and(ok(x0), ok(x1))
   active(afterNth(x0, x1))
   proper(sel(x0, x1))
   head(ok(x0))
   active(pair(x0, x1))
   proper(U11(x0, x1, x2, x3))
   proper(0)
   pair(ok(x0), ok(x1))
   U11(mark(x0), x1, x2, x3)
   afterNth(ok(x0), ok(x1))
   natsFrom(ok(x0))
   s(ok(x0))
   splitAt(x0, mark(x1))
   active(U12(x0, x1))
   active(cons(x0, x1))
   proper(take(x0, x1))
   pair(mark(x0), x1)
   U12(ok(x0), ok(x1))
   proper(natsFrom(x0))
   take(x0, mark(x1))
   fst(mark(x0))
   active(s(x0))
   proper(snd(x0))
   cons(ok(x0), ok(x1))
   proper(U12(x0, x1))
   snd(ok(x0))
   active(snd(x0))
   active(natsFrom(x0))
   and(mark(x0), x1)
   sel(x0, mark(x1))
   proper(s(x0))
   afterNth(x0, mark(x1))
   active(splitAt(x0, x1))
   proper(head(x0))
   U11(ok(x0), ok(x1), ok(x2), ok(x3))
   top(mark(x0))
   active(fst(x0))
   cons(mark(x0), x1)
   proper(nil)
   sel(ok(x0), ok(x1))
   tail(ok(x0))
   take(mark(x0), x1)
   proper(splitAt(x0, x1))
   proper(tt)
   sel(mark(x0), x1)
   proper(fst(x0))
   natsFrom(mark(x0))
   tail(mark(x0))
   splitAt(mark(x0), x1)
   proper(afterNth(x0, x1))
   afterNth(mark(x0), x1)
   s(mark(x0))
   proper(and(x0, x1))
   top(ok(x0))
   pair(x0, mark(x1))
   fst(ok(x0))
   active(head(x0))
   proper(tail(x0))

Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

U11: {1}
tt: empty set
U12: {1}
splitAt: {1, 2}
pair: {1, 2}
cons: {1}
afterNth: {1, 2}
snd: {1}
and: {1}
fst: {1}
head: {1}
natsFrom: {1}
s: {1}
sel: {1, 2}
0: empty set
nil: empty set
tail: {1}
take: {1, 2}
The QTRS contained just a subset of rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is sound, but not necessarily complete.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The replacement map contains the following entries:

U11: {1}
tt: empty set
U12: {1}
splitAt: {1, 2}
pair: {1, 2}
cons: {1}
afterNth: {1, 2}
snd: {1}
and: {1}
fst: {1}
head: {1}
natsFrom: {1}
s: {1}
sel: {1, 2}
0: empty set
nil: empty set
tail: {1}
take: {1, 2}

----------------------------------------

(3) CSRInnermostProof (EQUIVALENT)
The CSR is orthogonal. By [CS_Inn] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The replacement map contains the following entries:

U11: {1}
tt: empty set
U12: {1}
splitAt: {1, 2}
pair: {1, 2}
cons: {1}
afterNth: {1, 2}
snd: {1}
and: {1}
fst: {1}
head: {1}
natsFrom: {1}
s: {1}
sel: {1, 2}
0: empty set
nil: empty set
tail: {1}
take: {1, 2}


Innermost Strategy.

----------------------------------------

(5) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(6)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {splitAt_2, pair_2, afterNth_2, snd_1, fst_1, head_1, natsFrom_1, s_1, sel_2, tail_1, take_2, SPLITAT_2, SND_1, AFTERNTH_2, HEAD_1, SEL_2, FST_1, TAKE_2, TAIL_1, NATSFROM_1} are replacing on all positions.
For all symbols f in {U11_4, U12_2, cons_2, and_2, U12'_2, U11'_4, AND_2} we have mu(f) = {1}.
The symbols in {U_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   U11'(tt, N, X, XS) -> U12'(splitAt(N, XS), X)
   U11'(tt, N, X, XS) -> SPLITAT(N, XS)
   AFTERNTH(N, XS) -> SND(splitAt(N, XS))
   AFTERNTH(N, XS) -> SPLITAT(N, XS)
   SEL(N, XS) -> HEAD(afterNth(N, XS))
   SEL(N, XS) -> AFTERNTH(N, XS)
   SPLITAT(s(N), cons(X, XS)) -> U11'(tt, N, X, XS)
   TAKE(N, XS) -> FST(splitAt(N, XS))
   TAKE(N, XS) -> SPLITAT(N, XS)

The collapsing dependency pairs are DP_c:
   U11'(tt, N, X, XS) -> N
   U11'(tt, N, X, XS) -> XS
   U12'(pair(YS, ZS), X) -> X
   AND(tt, X) -> X
   TAIL(cons(N, XS)) -> XS


The hidden terms of R are:

   natsFrom(s(x0))

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@3c02e42
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@61cedb14

Hence, the new unhiding pairs DP_u are :
   U11'(tt, N, X, XS) -> U(N)
   U11'(tt, N, X, XS) -> U(XS)
   U12'(pair(YS, ZS), X) -> U(X)
   AND(tt, X) -> U(X)
   TAIL(cons(N, XS)) -> U(XS)
   U(s(x_0)) -> U(x_0)
   U(natsFrom(x_0)) -> U(x_0)
   U(natsFrom(s(x0))) -> NATSFROM(s(x0))

The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The set Q consists of the following terms:

   U11(tt, x0, x1, x2)
   U12(pair(x0, x1), x2)
   afterNth(x0, x1)
   and(tt, x0)
   fst(pair(x0, x1))
   head(cons(x0, x1))
   natsFrom(x0)
   sel(x0, x1)
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   tail(cons(x0, x1))
   take(x0, x1)


----------------------------------------

(7) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 2 SCCs with 11 less nodes.

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {splitAt_2, pair_2, afterNth_2, snd_1, fst_1, head_1, natsFrom_1, s_1, sel_2, tail_1, take_2} are replacing on all positions.
For all symbols f in {U11_4, U12_2, cons_2, and_2} we have mu(f) = {1}.
The symbols in {U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U(s(x_0)) -> U(x_0)
   U(natsFrom(x_0)) -> U(x_0)

The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The set Q consists of the following terms:

   U11(tt, x0, x1, x2)
   U12(pair(x0, x1), x2)
   afterNth(x0, x1)
   and(tt, x0)
   fst(pair(x0, x1))
   head(cons(x0, x1))
   natsFrom(x0)
   sel(x0, x1)
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   tail(cons(x0, x1))
   take(x0, x1)


----------------------------------------

(10) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   U(s(x_0)) -> U(x_0)
   U(natsFrom(x_0)) -> U(x_0)
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Combined order from the following AFS and order.
U(x1)  =  x1


Subterm Order

----------------------------------------

(11)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {splitAt_2, pair_2, afterNth_2, snd_1, fst_1, head_1, natsFrom_1, s_1, sel_2, tail_1, take_2} are replacing on all positions.
For all symbols f in {U11_4, U12_2, cons_2, and_2} we have mu(f) = {1}.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The set Q consists of the following terms:

   U11(tt, x0, x1, x2)
   U12(pair(x0, x1), x2)
   afterNth(x0, x1)
   and(tt, x0)
   fst(pair(x0, x1))
   head(cons(x0, x1))
   natsFrom(x0)
   sel(x0, x1)
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   tail(cons(x0, x1))
   take(x0, x1)


----------------------------------------

(12) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {splitAt_2, pair_2, afterNth_2, snd_1, fst_1, head_1, natsFrom_1, s_1, sel_2, tail_1, take_2, SPLITAT_2} are replacing on all positions.
For all symbols f in {U11_4, U12_2, cons_2, and_2, U11'_4} we have mu(f) = {1}.

The TRS P consists of the following rules:

   U11'(tt, N, X, XS) -> SPLITAT(N, XS)
   SPLITAT(s(N), cons(X, XS)) -> U11'(tt, N, X, XS)

The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The set Q consists of the following terms:

   U11(tt, x0, x1, x2)
   U12(pair(x0, x1), x2)
   afterNth(x0, x1)
   and(tt, x0)
   fst(pair(x0, x1))
   head(cons(x0, x1))
   natsFrom(x0)
   sel(x0, x1)
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   tail(cons(x0, x1))
   take(x0, x1)


----------------------------------------

(15) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   SPLITAT(s(N), cons(X, XS)) -> U11'(tt, N, X, XS)
The remaining pairs can at least be oriented weakly.

   U11'(tt, N, X, XS) -> SPLITAT(N, XS)
Used ordering:  Combined order from the following AFS and order.
SPLITAT(x1, x2)  =  x1

U11'(x1, x2, x3, x4)  =  x2


Subterm Order

----------------------------------------

(16)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {splitAt_2, pair_2, afterNth_2, snd_1, fst_1, head_1, natsFrom_1, s_1, sel_2, tail_1, take_2, SPLITAT_2} are replacing on all positions.
For all symbols f in {U11_4, U12_2, cons_2, and_2, U11'_4} we have mu(f) = {1}.

The TRS P consists of the following rules:

   U11'(tt, N, X, XS) -> SPLITAT(N, XS)

The TRS R consists of the following rules:

   U11(tt, N, X, XS) -> U12(splitAt(N, XS), X)
   U12(pair(YS, ZS), X) -> pair(cons(X, YS), ZS)
   afterNth(N, XS) -> snd(splitAt(N, XS))
   and(tt, X) -> X
   fst(pair(X, Y)) -> X
   head(cons(N, XS)) -> N
   natsFrom(N) -> cons(N, natsFrom(s(N)))
   sel(N, XS) -> head(afterNth(N, XS))
   snd(pair(X, Y)) -> Y
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U11(tt, N, X, XS)
   tail(cons(N, XS)) -> XS
   take(N, XS) -> fst(splitAt(N, XS))

The set Q consists of the following terms:

   U11(tt, x0, x1, x2)
   U12(pair(x0, x1), x2)
   afterNth(x0, x1)
   and(tt, x0)
   fst(pair(x0, x1))
   head(cons(x0, x1))
   natsFrom(x0)
   sel(x0, x1)
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   tail(cons(x0, x1))
   take(x0, x1)


----------------------------------------

(17) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 1 less node.

----------------------------------------

(18)
TRUE
