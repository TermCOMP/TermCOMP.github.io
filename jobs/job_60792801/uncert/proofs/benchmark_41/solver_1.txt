YES
proof of /home/ff862203/input_qEc4CZoUuI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 3 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(quot, 0), app(s, y)), app(s, z)) -> 0
   app(app(app(quot, app(s, x)), app(s, y)), z) -> app(app(app(quot, x), y), z)
   app(app(app(quot, x), 0), app(s, z)) -> app(s, app(app(app(quot, x), app(s, z)), app(s, z)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)


----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(quot, app(s, x)), app(s, y)), z) -> APP(app(app(quot, x), y), z)
   APP(app(app(quot, app(s, x)), app(s, y)), z) -> APP(app(quot, x), y)
   APP(app(app(quot, app(s, x)), app(s, y)), z) -> APP(quot, x)
   APP(app(app(quot, x), 0), app(s, z)) -> APP(s, app(app(app(quot, x), app(s, z)), app(s, z)))
   APP(app(app(quot, x), 0), app(s, z)) -> APP(app(app(quot, x), app(s, z)), app(s, z))
   APP(app(app(quot, x), 0), app(s, z)) -> APP(app(quot, x), app(s, z))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(app(quot, 0), app(s, y)), app(s, z)) -> 0
   app(app(app(quot, app(s, x)), app(s, y)), z) -> app(app(app(quot, x), y), z)
   app(app(app(quot, x), 0), app(s, z)) -> app(s, app(app(app(quot, x), app(s, z)), app(s, z)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 14 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(quot, x), 0), app(s, z)) -> APP(app(app(quot, x), app(s, z)), app(s, z))
   APP(app(app(quot, app(s, x)), app(s, y)), z) -> APP(app(app(quot, x), y), z)

The TRS R consists of the following rules:

   app(app(app(quot, 0), app(s, y)), app(s, z)) -> 0
   app(app(app(quot, app(s, x)), app(s, y)), z) -> app(app(app(quot, x), y), z)
   app(app(app(quot, x), 0), app(s, z)) -> app(s, app(app(app(quot, x), app(s, z)), app(s, z)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(quot, x), 0), app(s, z)) -> APP(app(app(quot, x), app(s, z)), app(s, z))
   APP(app(app(quot, app(s, x)), app(s, y)), z) -> APP(app(app(quot, x), y), z)

R is empty.
The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   quot1(x, 0, s(z)) -> quot1(x, s(z), s(z))
   quot1(s(x), s(y), z) -> quot1(x, y, z)

R is empty.
The set Q consists of the following terms:

   quot(s(x0), s(x1), x2)
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)
   quot(0, s(x0), s(x1))
   map(x0, nil)
   quot(x0, 0, s(x1))
   filter(x0, cons(x1, x2))
   map(x0, cons(x1, x2))
   filter(x0, nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(s(x0), s(x1), x2)
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)
   quot(0, s(x0), s(x1))
   map(x0, nil)
   quot(x0, 0, s(x1))
   filter(x0, cons(x1, x2))
   map(x0, cons(x1, x2))
   filter(x0, nil)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   quot1(x, 0, s(z)) -> quot1(x, s(z), s(z))
   quot1(s(x), s(y), z) -> quot1(x, y, z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*quot1(s(x), s(y), z) -> quot1(x, y, z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*quot1(x, 0, s(z)) -> quot1(x, s(z), s(z))
The graph contains the following edges 1 >= 1, 3 >= 2, 3 >= 3


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(app(quot, 0), app(s, y)), app(s, z)) -> 0
   app(app(app(quot, app(s, x)), app(s, y)), z) -> app(app(app(quot, x), y), z)
   app(app(app(quot, x), 0), app(s, z)) -> app(s, app(app(app(quot, x), app(s, z)), app(s, z)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

R is empty.
The set Q consists of the following terms:

   app(app(app(quot, app(s, x0)), app(s, x1)), x2)
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)
   app(app(app(quot, 0), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(app(quot, x0), 0), app(s, x1))
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(18)
YES
