YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4dQs6.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be proven:

(0) ETRS
(1) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(2) EDP
(3) EDependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) EDP
        (6) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (7) EDP
        (8) PisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) EDP
        (11) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (12) EDP
        (13) EDPPoloProof [EQUIVALENT, 0 ms]
        (14) EDP
        (15) PisEmptyProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) EDP
        (18) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (19) EDP
        (20) EDPPoloProof [EQUIVALENT, 0 ms]
        (21) EDP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)


----------------------------------------

(1) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   RM(n, add(m, x)) -> EQ(n, m)
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)
   PURGE(add(n, x)) -> PURGE(rm(n, x))
   PURGE(add(n, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(2)
Obligation:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   RM(n, add(m, x)) -> EQ(n, m)
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)
   PURGE(add(n, x)) -> PURGE(rm(n, x))
   PURGE(add(n, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(3) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 3 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(6) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the improved usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding improved usable rules can be oriented non-strictly, the improved  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and improved usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   EQ(s(x), s(y)) -> EQ(x, y)
The following rules are removed from R:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))
The following equations are removed from E:

   eq(x, y) == eq(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(EQ(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(s(x_1)) = 3*x_1


----------------------------------------

(7)
Obligation:
P is empty.
R is empty.
E is empty.
The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(8) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
The TRS P consists of the following rules:

   IF_RM(true, n, add(m, x)) -> RM(n, x)
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(false, n, add(m, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(11) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   EQ(x, y) == EQ(y, x)

----------------------------------------

(12)
Obligation:
The TRS P consists of the following rules:

   IF_RM(true, n, add(m, x)) -> RM(n, x)
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(false, n, add(m, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(13) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   IF_RM(true, n, add(m, x)) -> RM(n, x)
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(false, n, add(m, x)) -> RM(n, x)
With the implicit AFS there is no usable rule of R.


There is no equation of E#.


With the implicit AFS there is no usable equation of E.


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF_RM(x_1, x_2, x_3)) = 3*x_2 + 2*x_3
   POL(RM(x_1, x_2)) = 3 + 3*x_1 + 2*x_2
   POL(add(x_1, x_2)) = 2 + x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(s(x_1)) = 0
   POL(true) = 0


----------------------------------------

(14)
Obligation:
P is empty.
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(15) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
The TRS P consists of the following rules:

   PURGE(add(n, x)) -> PURGE(rm(n, x))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

The set E# consists of the following equations:

   EQ(x, y) == EQ(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(18) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   EQ(x, y) == EQ(y, x)

----------------------------------------

(19)
Obligation:
The TRS P consists of the following rules:

   PURGE(add(n, x)) -> PURGE(rm(n, x))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(20) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   PURGE(add(n, x)) -> PURGE(rm(n, x))
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
There is no equation of E#.


With the implicit AFS there is no usable equation of E.


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(PURGE(x_1)) = 2*x_1
   POL(add(x_1, x_2)) = 1 + 3*x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(if_rm(x_1, x_2, x_3)) = 2*x_3
   POL(nil) = 0
   POL(rm(x_1, x_2)) = 2*x_2
   POL(s(x_1)) = 0
   POL(true) = 0


----------------------------------------

(21)
Obligation:
P is empty.
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   purge(nil) -> nil
   purge(add(n, x)) -> add(n, purge(rm(n, x)))

The set E consists of the following equations:

   eq(x, y) == eq(y, x)

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(23)
YES
