YES

Problem 1: 

(VAR vu95NonEmpty m n x y)
(THEORY 
(C eq))
(RULES
app(add(n,x),y) -> add(n,app(x,y))
app(nil,y) -> y
eq(num0,num0) -> ftrue
eq(num0,s(x)) -> ffalse
eq(s(x),num0) -> ffalse
eq(s(x),s(y)) -> eq(x,y)
ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
min(add(n,nil)) -> n
minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
minsort(nil,nil) -> nil
rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
rm(n,nil) -> nil
)


Problem 1: 

Dependency Pairs Processor:
-> FAxioms:
 EQ(x5,x6) = EQ(x6,x5)
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 EQ(s(x),s(y)) -> EQ(x,y)
 IFU95MIN(ffalse,add(n,add(m,x))) -> MIN(add(m,x))
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 IFU95MINSORT(ftrue,add(n,x),y) -> APP(rm(n,x),y)
 IFU95MINSORT(ftrue,add(n,x),y) -> MINSORT(app(rm(n,x),y),nil)
 IFU95MINSORT(ftrue,add(n,x),y) -> RM(n,x)
 IFU95RM(ffalse,n,add(m,x)) -> RM(n,x)
 IFU95RM(ftrue,n,add(m,x)) -> RM(n,x)
 LE(s(x),s(y)) -> LE(x,y)
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
 MIN(add(n,add(m,x))) -> LE(n,m)
 MINSORT(add(n,x),y) -> EQ(n,min(add(n,x)))
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
 MINSORT(add(n,x),y) -> MIN(add(n,x))
 RM(n,add(m,x)) -> EQ(n,m)
 RM(n,add(m,x)) -> IFU95RM(eq(n,m),n,add(m,x))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty

Problem 1: 

SCC Processor:
-> FAxioms:
 EQ(x5,x6) = EQ(x6,x5)
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 EQ(s(x),s(y)) -> EQ(x,y)
 IFU95MIN(ffalse,add(n,add(m,x))) -> MIN(add(m,x))
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 IFU95MINSORT(ftrue,add(n,x),y) -> APP(rm(n,x),y)
 IFU95MINSORT(ftrue,add(n,x),y) -> MINSORT(app(rm(n,x),y),nil)
 IFU95MINSORT(ftrue,add(n,x),y) -> RM(n,x)
 IFU95RM(ffalse,n,add(m,x)) -> RM(n,x)
 IFU95RM(ftrue,n,add(m,x)) -> RM(n,x)
 LE(s(x),s(y)) -> LE(x,y)
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
 MIN(add(n,add(m,x))) -> LE(n,m)
 MINSORT(add(n,x),y) -> EQ(n,min(add(n,x)))
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
 MINSORT(add(n,x),y) -> MIN(add(n,x))
 RM(n,add(m,x)) -> EQ(n,m)
 RM(n,add(m,x)) -> IFU95RM(eq(n,m),n,add(m,x))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 IFU95MIN(ffalse,add(n,add(m,x))) -> MIN(add(m,x))
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 EQ(s(x),s(y)) -> EQ(x,y)
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
 EQ(x5,x6) -> EQ(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 IFU95RM(ffalse,n,add(m,x)) -> RM(n,x)
 IFU95RM(ftrue,n,add(m,x)) -> RM(n,x)
 RM(n,add(m,x)) -> IFU95RM(eq(n,m),n,add(m,x))
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 IFU95MINSORT(ftrue,add(n,x),y) -> MINSORT(app(rm(n,x),y),nil)
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty


The problem is decomposed in 6 subproblems.

Problem 1.1: 

Subterm Processor:
-> FAxioms:
 Empty
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Projection:
 pi(LE) = [1]

Problem 1.1: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 Empty
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MIN(ffalse,add(n,add(m,x))) -> MIN(add(m,x))
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Usable Equations:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> Usable Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ifu95min](X1,X2) = 0
[ifu95minsort](X1,X2,X3) = 0
[ifu95rm](X1,X2,X3) = 0
[le](X1,X2) = 1
[min](X) = 0
[minsort](X1,X2) = 0
[rm](X1,X2) = 0
[num0] = 2
[add](X1,X2) = X2 + 2
[fSNonEmpty] = 0
[ffalse] = 1
[nil] = 0
[s](X) = X + 1
[ftrue] = 1
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 2.X1 + 2.X2
[IFU95MINSORT](X1,X2,X3) = 0
[IFU95RM](X1,X2,X3) = 0
[LE](X1,X2) = 0
[MIN](X) = 2.X + 2
[MINSORT](X1,X2) = 0
[RM](X1,X2) = 0

Problem 1.2: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty

Problem 1.2: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MIN(ftrue,add(n,add(m,x))) -> MIN(add(n,x))
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Usable Equations:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> Usable Rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ifu95min](X1,X2) = 0
[ifu95minsort](X1,X2,X3) = 0
[ifu95rm](X1,X2,X3) = 0
[le](X1,X2) = 2
[min](X) = 0
[minsort](X1,X2) = 0
[rm](X1,X2) = 0
[num0] = 0
[add](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[s](X) = 2.X + 2
[ftrue] = 2
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 2.X1 + X2 + 2
[IFU95MINSORT](X1,X2,X3) = 0
[IFU95RM](X1,X2,X3) = 0
[LE](X1,X2) = 0
[MIN](X) = 2.X + 2
[MINSORT](X1,X2) = 0
[RM](X1,X2) = 0

Problem 1.2: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 MIN(add(n,add(m,x))) -> IFU95MIN(le(n,m),add(n,add(m,x)))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> FAxioms:
 EQ(x5,x6) = EQ(x6,x5)
-> Pairs:
 EQ(s(x),s(y)) -> EQ(x,y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Projection:
 pi(EQ) = [1,2]

Problem 1.3: 

SCC Processor:
-> FAxioms:
 EQ(x5,x6) = EQ(x6,x5)
-> Pairs:
 Empty
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95RM(ffalse,n,add(m,x)) -> RM(n,x)
 IFU95RM(ftrue,n,add(m,x)) -> RM(n,x)
 RM(n,add(m,x)) -> IFU95RM(eq(n,m),n,add(m,x))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Projection:
 pi(IFU95RM) = [3]
 pi(RM) = [2]

Problem 1.4: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 RM(n,add(m,x)) -> IFU95RM(eq(n,m),n,add(m,x))
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> FAxioms:
 Empty
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Projection:
 pi(APP) = [1]

Problem 1.5: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 Empty
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 IFU95MINSORT(ftrue,add(n,x),y) -> MINSORT(app(rm(n,x),y),nil)
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Usable Equations:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> Usable Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = X1 + X2
[eq](X1,X2) = 2
[ifu95min](X1,X2) = 2.X2 + 2
[ifu95minsort](X1,X2,X3) = 0
[ifu95rm](X1,X2,X3) = X2 + X3
[le](X1,X2) = X2 + 2
[min](X) = 2.X + 2
[minsort](X1,X2) = 0
[rm](X1,X2) = X1 + X2
[num0] = 0
[add](X1,X2) = 2.X1 + X2 + 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 1
[s](X) = 2.X
[ftrue] = 2
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 0
[IFU95MINSORT](X1,X2,X3) = X1 + 2.X2 + 2.X3
[IFU95RM](X1,X2,X3) = 0
[LE](X1,X2) = 0
[MIN](X) = 0
[MINSORT](X1,X2) = 2.X1 + 2.X2 + 2
[RM](X1,X2) = 0

Problem 1.6: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> FAxioms:
 eq(x5,x6) -> eq(x6,x5)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty

Problem 1.6: 

Subterm Processor:
-> FAxioms:
 Empty
-> Pairs:
 IFU95MINSORT(ffalse,add(n,x),y) -> MINSORT(x,add(n,y))
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Projection:
 pi(IFU95MINSORT) = [2]
 pi(MINSORT) = [1]

Problem 1.6: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 MINSORT(add(n,x),y) -> IFU95MINSORT(eq(n,min(add(n,x))),add(n,x),y)
-> EAxioms:
 eq(x5,x6) = eq(x6,x5)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 eq(num0,num0) -> ftrue
 eq(num0,s(x)) -> ffalse
 eq(s(x),num0) -> ffalse
 eq(s(x),s(y)) -> eq(x,y)
 ifu95min(ffalse,add(n,add(m,x))) -> min(add(m,x))
 ifu95min(ftrue,add(n,add(m,x))) -> min(add(n,x))
 ifu95minsort(ffalse,add(n,x),y) -> minsort(x,add(n,y))
 ifu95minsort(ftrue,add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil))
 ifu95rm(ffalse,n,add(m,x)) -> add(m,rm(n,x))
 ifu95rm(ftrue,n,add(m,x)) -> rm(n,x)
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 min(add(n,add(m,x))) -> ifu95min(le(n,m),add(n,add(m,x)))
 min(add(n,nil)) -> n
 minsort(add(n,x),y) -> ifu95minsort(eq(n,min(add(n,x))),add(n,x),y)
 minsort(nil,nil) -> nil
 rm(n,add(m,x)) -> ifu95rm(eq(n,m),n,add(m,x))
 rm(n,nil) -> nil
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
