YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wjq1M.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be proven:

(0) ETRS
(1) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(2) EDP
(3) EDependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) EDP
        (6) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (7) EDP
        (8) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (9) EDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) EDP
        (13) ESharpUsableEquationsProof [EQUIVALENT, 8 ms]
        (14) EDP
        (15) EDPPoloProof [EQUIVALENT, 43 ms]
        (16) EDP
        (17) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (18) EDP
        (19) EDPPoloProof [EQUIVALENT, 0 ms]
        (20) EDP
        (21) EDPPoloProof [EQUIVALENT, 13 ms]
        (22) EDP
        (23) EDPPoloProof [EQUIVALENT, 0 ms]
        (24) EDP
        (25) EDPPoloProof [EQUIVALENT, 13 ms]
        (26) EDP
        (27) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (28) EDP
        (29) EDPPoloProof [EQUIVALENT, 0 ms]
        (30) EDP
        (31) PisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) EDP
        (34) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (35) EDP
        (36) EDPPoloProof [EQUIVALENT, 451 ms]
        (37) EDP
        (38) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (39) EDP
        (40) EDPPoloProof [EQUIVALENT, 20 ms]
        (41) EDP
        (42) EDPPoloProof [EQUIVALENT, 0 ms]
        (43) EDP
        (44) PisEmptyProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) EDP
        (47) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (48) EDP
        (49) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (50) EDP
        (51) PisEmptyProof [EQUIVALENT, 0 ms]
        (52) YES
    (53) EDP
        (54) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (55) EDP
        (56) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (57) EDP
        (58) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (59) TRUE


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))


----------------------------------------

(1) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   U111^1(tt, A, B) -> PLUS(sum(A), sum(B))
   U111^1(tt, A, B) -> SUM(A)
   U111^1(tt, A, B) -> SUM(B)
   U21^1(tt, X, Y) -> 0^1(mult(X, Y))
   U21^1(tt, X, Y) -> MULT(X, Y)
   U31^1(tt, X, Y) -> PLUS(0(mult(X, Y)), Y)
   U31^1(tt, X, Y) -> 0^1(mult(X, Y))
   U31^1(tt, X, Y) -> MULT(X, Y)
   U51^1(tt, X, Y) -> 0^1(plus(X, Y))
   U51^1(tt, X, Y) -> PLUS(X, Y)
   U61^1(tt, X, Y) -> PLUS(X, Y)
   U71^1(tt, X, Y) -> 0^1(plus(plus(X, Y), 1(z)))
   U71^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U71^1(tt, X, Y) -> PLUS(X, Y)
   U91^1(tt, A, B) -> MULT(prod(A), prod(B))
   U91^1(tt, A, B) -> PROD(A)
   U91^1(tt, A, B) -> PROD(B)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> AND(isBag(V1), isBag(V2))
   ISBAG(union(V1, V2)) -> ISBAG(V1)
   ISBAG(union(V1, V2)) -> ISBAG(V2)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> AND(isBin(V1), isBin(V2))
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> ISBIN(V2)
   ISBIN(plus(V1, V2)) -> AND(isBin(V1), isBin(V2))
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V2)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   MULT(z, X) -> U11^1(isBin(X))
   MULT(z, X) -> ISBIN(X)
   MULT(0(X), Y) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(0(X), Y) -> AND(isBin(X), isBin(Y))
   MULT(0(X), Y) -> ISBIN(X)
   MULT(0(X), Y) -> ISBIN(Y)
   MULT(1(X), Y) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(1(X), Y) -> AND(isBin(X), isBin(Y))
   MULT(1(X), Y) -> ISBIN(X)
   MULT(1(X), Y) -> ISBIN(Y)
   PLUS(z, X) -> U41^1(isBin(X), X)
   PLUS(z, X) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(0(X), 0(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(0(X), 0(Y)) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> ISBIN(Y)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(0(X), 1(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(0(X), 1(Y)) -> ISBIN(X)
   PLUS(0(X), 1(Y)) -> ISBIN(Y)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(1(X), 1(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(1(X), 1(Y)) -> ISBIN(X)
   PLUS(1(X), 1(Y)) -> ISBIN(Y)
   PROD(singl(X)) -> U81^1(isBin(X), X)
   PROD(singl(X)) -> ISBIN(X)
   PROD(union(A, B)) -> U91^1(and(isBag(A), isBag(B)), A, B)
   PROD(union(A, B)) -> AND(isBag(A), isBag(B))
   PROD(union(A, B)) -> ISBAG(A)
   PROD(union(A, B)) -> ISBAG(B)
   SUM(empty) -> 0^1(z)
   SUM(singl(X)) -> U101^1(isBin(X), X)
   SUM(singl(X)) -> ISBIN(X)
   SUM(union(A, B)) -> U111^1(and(isBag(A), isBag(B)), A, B)
   SUM(union(A, B)) -> AND(isBag(A), isBag(B))
   SUM(union(A, B)) -> ISBAG(A)
   SUM(union(A, B)) -> ISBAG(B)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   MULT(mult(z, X), ext) -> U11^1(isBin(X))
   MULT(mult(z, X), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(mult(0(X), Y), ext) -> AND(isBin(X), isBin(Y))
   MULT(mult(0(X), Y), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> ISBIN(Y)
   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(1(X), Y), ext) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(mult(1(X), Y), ext) -> AND(isBin(X), isBin(Y))
   MULT(mult(1(X), Y), ext) -> ISBIN(X)
   MULT(mult(1(X), Y), ext) -> ISBIN(Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(z, X), ext) -> U41^1(isBin(X), X)
   PLUS(plus(z, X), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(Y)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(1(X), 1(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(2)
Obligation:
The TRS P consists of the following rules:

   U111^1(tt, A, B) -> PLUS(sum(A), sum(B))
   U111^1(tt, A, B) -> SUM(A)
   U111^1(tt, A, B) -> SUM(B)
   U21^1(tt, X, Y) -> 0^1(mult(X, Y))
   U21^1(tt, X, Y) -> MULT(X, Y)
   U31^1(tt, X, Y) -> PLUS(0(mult(X, Y)), Y)
   U31^1(tt, X, Y) -> 0^1(mult(X, Y))
   U31^1(tt, X, Y) -> MULT(X, Y)
   U51^1(tt, X, Y) -> 0^1(plus(X, Y))
   U51^1(tt, X, Y) -> PLUS(X, Y)
   U61^1(tt, X, Y) -> PLUS(X, Y)
   U71^1(tt, X, Y) -> 0^1(plus(plus(X, Y), 1(z)))
   U71^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U71^1(tt, X, Y) -> PLUS(X, Y)
   U91^1(tt, A, B) -> MULT(prod(A), prod(B))
   U91^1(tt, A, B) -> PROD(A)
   U91^1(tt, A, B) -> PROD(B)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> AND(isBag(V1), isBag(V2))
   ISBAG(union(V1, V2)) -> ISBAG(V1)
   ISBAG(union(V1, V2)) -> ISBAG(V2)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> AND(isBin(V1), isBin(V2))
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> ISBIN(V2)
   ISBIN(plus(V1, V2)) -> AND(isBin(V1), isBin(V2))
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V2)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   MULT(z, X) -> U11^1(isBin(X))
   MULT(z, X) -> ISBIN(X)
   MULT(0(X), Y) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(0(X), Y) -> AND(isBin(X), isBin(Y))
   MULT(0(X), Y) -> ISBIN(X)
   MULT(0(X), Y) -> ISBIN(Y)
   MULT(1(X), Y) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(1(X), Y) -> AND(isBin(X), isBin(Y))
   MULT(1(X), Y) -> ISBIN(X)
   MULT(1(X), Y) -> ISBIN(Y)
   PLUS(z, X) -> U41^1(isBin(X), X)
   PLUS(z, X) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(0(X), 0(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(0(X), 0(Y)) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> ISBIN(Y)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(0(X), 1(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(0(X), 1(Y)) -> ISBIN(X)
   PLUS(0(X), 1(Y)) -> ISBIN(Y)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(1(X), 1(Y)) -> AND(isBin(X), isBin(Y))
   PLUS(1(X), 1(Y)) -> ISBIN(X)
   PLUS(1(X), 1(Y)) -> ISBIN(Y)
   PROD(singl(X)) -> U81^1(isBin(X), X)
   PROD(singl(X)) -> ISBIN(X)
   PROD(union(A, B)) -> U91^1(and(isBag(A), isBag(B)), A, B)
   PROD(union(A, B)) -> AND(isBag(A), isBag(B))
   PROD(union(A, B)) -> ISBAG(A)
   PROD(union(A, B)) -> ISBAG(B)
   SUM(empty) -> 0^1(z)
   SUM(singl(X)) -> U101^1(isBin(X), X)
   SUM(singl(X)) -> ISBIN(X)
   SUM(union(A, B)) -> U111^1(and(isBag(A), isBag(B)), A, B)
   SUM(union(A, B)) -> AND(isBag(A), isBag(B))
   SUM(union(A, B)) -> ISBAG(A)
   SUM(union(A, B)) -> ISBAG(B)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   MULT(mult(z, X), ext) -> U11^1(isBin(X))
   MULT(mult(z, X), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(mult(0(X), Y), ext) -> AND(isBin(X), isBin(Y))
   MULT(mult(0(X), Y), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> ISBIN(Y)
   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(1(X), Y), ext) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(mult(1(X), Y), ext) -> AND(isBin(X), isBin(Y))
   MULT(mult(1(X), Y), ext) -> ISBIN(X)
   MULT(mult(1(X), Y), ext) -> ISBIN(Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(z, X), ext) -> U41^1(isBin(X), X)
   PLUS(plus(z, X), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(Y)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(1(X), 1(Y)), ext) -> AND(isBin(X), isBin(Y))
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(3) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 5 SCCs with 59 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
The TRS P consists of the following rules:

   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V2)
   ISBAG(union(V1, V2)) -> ISBAG(V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> ISBIN(V2)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> ISBAG(V1)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(6) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(7)
Obligation:
The TRS P consists of the following rules:

   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V2)
   ISBAG(union(V1, V2)) -> ISBAG(V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> ISBIN(V2)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> ISBAG(V1)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(8) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBIN(plus(V1, V2)) -> ISBIN(V2)
   ISBAG(union(V1, V2)) -> ISBAG(V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> ISBIN(V2)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> ISBAG(V1)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 3*x_1
   POL(1(x_1)) = 3*x_1
   POL(ISBAG(x_1)) = 2*x_1
   POL(ISBIN(x_1)) = x_1
   POL(mult(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(plus(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 3*x_1
   POL(sum(x_1)) = 3*x_1
   POL(union(x_1, x_2)) = 3*x_1 + 3*x_2


----------------------------------------

(9)
Obligation:
P is empty.
R is empty.
E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   U61^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   U71^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   U71^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(13) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(14)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   U61^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   U71^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   U71^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(15) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   U61^1(tt, X, Y) -> PLUS(X, Y)
   U71^1(tt, X, Y) -> PLUS(X, Y)
   U71^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U51(tt, X, Y) -> 0(plus(X, Y))
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   U61(tt, X, Y) -> 1(plus(X, Y))
   0(z) -> z
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U41(tt, X) -> X
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 2*x_1
   POL(1(x_1)) = 1 + 2*x_1
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U51^1(x_1, x_2, x_3)) = x_2 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 1 + 2*x_2 + 2*x_3
   POL(U61^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U71^1(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(16)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(1(X), 1(Y)), ext) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(1(X), 1(Y)) -> U71^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 1(Y)) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U61^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(17) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 4 less nodes.
----------------------------------------

(18)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(19) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U71(and(isBin(X), isBin(Y)), X, Y), ext)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   U41(tt, X) -> X
   U61(tt, X, Y) -> 1(plus(X, Y))
   U51(tt, X, Y) -> 0(plus(X, Y))
   0(z) -> z
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = x_2 + x_3
   POL(U51^1(x_1, x_2, x_3)) = x_2 + x_3
   POL(U61(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 3*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(20)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(21) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(z, X), ext) -> PLUS(U41(isBin(X), X), ext)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U51(tt, X, Y) -> 0(plus(X, Y))
   U41(tt, X) -> X
   0(z) -> z
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 2 + x_1
   POL(PLUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = x_2 + x_3
   POL(U51^1(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 3 + x_2 + x_3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 3*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 1


----------------------------------------

(22)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(23) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(0(X), 0(Y)), ext) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   0(z) -> z
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U51^1(x_1, x_2, x_3)) = x_2 + x_3
   POL(U61(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 3 + x_2 + x_3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = 1 + x_1 + x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(24)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
   U51^1(tt, X, Y) -> PLUS(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(25) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(0(X), 0(Y)) -> U51^1(and(isBin(X), isBin(Y)), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   U51^1(tt, X, Y) -> PLUS(X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   0(z) -> z
   U61(tt, X, Y) -> 1(plus(X, Y))
   U41(tt, X) -> X
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U51(tt, X, Y) -> 0(plus(X, Y))
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 1 + x_1
   POL(1(x_1)) = 1 + x_1
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U51^1(x_1, x_2, x_3)) = x_2 + x_3
   POL(U61(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 3*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(26)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   U51^1(tt, X, Y) -> PLUS(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(27) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 1 less node.
----------------------------------------

(28)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(29) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U51(and(isBin(X), isBin(Y)), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U51(tt, X, Y) -> 0(plus(X, Y))
   U41(tt, X) -> X
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   0(z) -> z
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(PLUS(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 0
   POL(U61(x_1, x_2, x_3)) = 0
   POL(U71(x_1, x_2, x_3)) = 3
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = 3 + x_1 + x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(30)
Obligation:
P is empty.
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(0(X), Y) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   U31^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   U21^1(tt, X, Y) -> MULT(X, Y)
   MULT(1(X), Y) -> U31^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(34) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(35)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(0(X), Y) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   U31^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   U21^1(tt, X, Y) -> MULT(X, Y)
   MULT(1(X), Y) -> U31^1(and(isBin(X), isBin(Y)), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(36) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(0(X), Y), ext) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(0(X), Y) -> U21^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(mult(1(X), Y), ext) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
   MULT(1(X), Y) -> U31^1(and(isBin(X), isBin(Y)), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   U31^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   U21^1(tt, X, Y) -> MULT(X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(z, X) -> U11(isBin(X))
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   U41(tt, X) -> X
   isBag(singl(V1)) -> isBin(V1)
   isBag(empty) -> tt
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   0(z) -> z
   U21(tt, X, Y) -> 0(mult(X, Y))
   isBin(sum(V1)) -> isBag(V1)
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(prod(V1)) -> isBag(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(z) -> tt
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   and(tt, X) -> X
   U11(tt) -> z
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 1 + x_1
   POL(1(x_1)) = 1 + x_1
   POL(MULT(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(U11(x_1)) = 0
   POL(U21(x_1, x_2, x_3)) = 1 + x_2 + x_2*x_3 + x_3
   POL(U21^1(x_1, x_2, x_3)) = x_2 + x_2*x_3 + x_3
   POL(U31(x_1, x_2, x_3)) = x_1 + x_1*x_2 + x_1*x_2*x_3 + x_1*x_3 + x_3
   POL(U31^1(x_1, x_2, x_3)) = x_1*x_2*x_3 + x_2 + x_3
   POL(U41(x_1, x_2)) = x_1*x_2
   POL(U51(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U61(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U71(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(and(x_1, x_2)) = x_2
   POL(empty) = 1
   POL(isBag(x_1)) = 1
   POL(isBin(x_1)) = 1
   POL(mult(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 1 + x_1 + x_1^2
   POL(singl(x_1)) = 1 + x_1 + x_1^2
   POL(sum(x_1)) = 1 + x_1 + x_1^2
   POL(tt) = 1
   POL(union(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(z) = 0


----------------------------------------

(37)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   U31^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
   U21^1(tt, X, Y) -> MULT(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(38) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 2 less nodes.
----------------------------------------

(39)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(40) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(1(X), Y), ext) -> MULT(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   MULT(mult(z, X), ext) -> MULT(U11(isBin(X)), ext)
The remaining Dependency Pairs were at least non-strictly oriented.


   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U51(tt, X, Y) -> 0(plus(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U41(tt, X) -> X
   U61(tt, X, Y) -> 1(plus(X, Y))
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(z, X) -> U11(isBin(X))
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   0(z) -> z
   U11(tt) -> z
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 3
   POL(MULT(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(U11(x_1)) = 0
   POL(U21(x_1, x_2, x_3)) = 3 + x_3
   POL(U31(x_1, x_2, x_3)) = x_3
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 0
   POL(U61(x_1, x_2, x_3)) = 3
   POL(U71(x_1, x_2, x_3)) = 0
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 3 + x_1 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(41)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(42) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(0(X), Y), ext) -> MULT(U21(and(isBin(X), isBin(Y)), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U21(tt, X, Y) -> 0(mult(X, Y))
   U51(tt, X, Y) -> 0(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   0(z) -> z
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(z, X) -> U11(isBin(X))
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U61(tt, X, Y) -> 1(plus(X, Y))
   U11(tt) -> z
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(MULT(x_1, x_2)) = x_1 + x_2
   POL(U11(x_1)) = 0
   POL(U21(x_1, x_2, x_3)) = x_3
   POL(U31(x_1, x_2, x_3)) = 1 + x_3
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 1
   POL(U61(x_1, x_2, x_3)) = 1
   POL(U71(x_1, x_2, x_3)) = 0
   POL(and(x_1, x_2)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 1 + x_1 + x_2
   POL(plus(x_1, x_2)) = 1 + x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 3*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(43)
Obligation:
P is empty.
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(44) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
The TRS P consists of the following rules:

   U91^1(tt, A, B) -> PROD(A)
   PROD(union(A, B)) -> U91^1(and(isBag(A), isBag(B)), A, B)
   U91^1(tt, A, B) -> PROD(B)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(47) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(48)
Obligation:
The TRS P consists of the following rules:

   U91^1(tt, A, B) -> PROD(A)
   PROD(union(A, B)) -> U91^1(and(isBag(A), isBag(B)), A, B)
   U91^1(tt, A, B) -> PROD(B)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(49) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   U91^1(tt, A, B) -> PROD(A)
   PROD(union(A, B)) -> U91^1(and(isBag(A), isBag(B)), A, B)
   U91^1(tt, A, B) -> PROD(B)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 3*x_1
   POL(1(x_1)) = x_1
   POL(PROD(x_1)) = 2 + 2*x_1
   POL(U91^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(and(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(empty) = 2
   POL(isBag(x_1)) = x_1
   POL(isBin(x_1)) = 2*x_1
   POL(mult(x_1, x_2)) = 2 + 3*x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 2 + 3*x_1 + 2*x_2
   POL(prod(x_1)) = 3*x_1
   POL(singl(x_1)) = 3*x_1
   POL(sum(x_1)) = 3*x_1
   POL(tt) = 2
   POL(union(x_1, x_2)) = 3 + 3*x_1 + 3*x_2
   POL(z) = 2


----------------------------------------

(50)
Obligation:
P is empty.
R is empty.
E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(51) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(52)
YES

----------------------------------------

(53)
Obligation:
The TRS P consists of the following rules:

   SUM(union(A, B)) -> U111^1(and(isBag(A), isBag(B)), A, B)
   U111^1(tt, A, B) -> SUM(B)
   U111^1(tt, A, B) -> SUM(A)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(54) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(55)
Obligation:
The TRS P consists of the following rules:

   SUM(union(A, B)) -> U111^1(and(isBag(A), isBag(B)), A, B)
   U111^1(tt, A, B) -> SUM(B)
   U111^1(tt, A, B) -> SUM(A)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   and(tt, X) -> X
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(56) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   SUM(union(A, B)) -> U111^1(and(isBag(A), isBag(B)), A, B)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X) -> X
   U11(tt) -> z
   U111(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, X, Y) -> 0(mult(X, Y))
   U31(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt, X) -> X
   U51(tt, X, Y) -> 0(plus(X, Y))
   U61(tt, X, Y) -> 1(plus(X, Y))
   U71(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt, X) -> X
   U91(tt, A, B) -> mult(prod(A), prod(B))
   isBag(empty) -> tt
   isBag(singl(V1)) -> isBin(V1)
   isBag(union(V1, V2)) -> and(isBag(V1), isBag(V2))
   isBin(z) -> tt
   isBin(0(V1)) -> isBin(V1)
   isBin(1(V1)) -> isBin(V1)
   isBin(mult(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(plus(V1, V2)) -> and(isBin(V1), isBin(V2))
   isBin(prod(V1)) -> isBag(V1)
   isBin(sum(V1)) -> isBag(V1)
   mult(z, X) -> U11(isBin(X))
   mult(0(X), Y) -> U21(and(isBin(X), isBin(Y)), X, Y)
   mult(1(X), Y) -> U31(and(isBin(X), isBin(Y)), X, Y)
   plus(z, X) -> U41(isBin(X), X)
   plus(0(X), 0(Y)) -> U51(and(isBin(X), isBin(Y)), X, Y)
   plus(0(X), 1(Y)) -> U61(and(isBin(X), isBin(Y)), X, Y)
   plus(1(X), 1(Y)) -> U71(and(isBin(X), isBin(Y)), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U81(isBin(X), X)
   prod(union(A, B)) -> U91(and(isBag(A), isBag(B)), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U101(isBin(X), X)
   sum(union(A, B)) -> U111(and(isBag(A), isBag(B)), A, B)
   mult(mult(z, X), ext) -> mult(U11(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U21(and(isBin(X), isBin(Y)), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U31(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U41(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U51(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U61(and(isBin(X), isBin(Y)), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U71(and(isBin(X), isBin(Y)), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 3*x_1
   POL(1(x_1)) = 3*x_1
   POL(SUM(x_1)) = 2*x_1
   POL(U111^1(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(and(x_1, x_2)) = 2*x_1 + x_2
   POL(empty) = 0
   POL(isBag(x_1)) = 2 + 2*x_1
   POL(isBin(x_1)) = 2*x_1
   POL(mult(x_1, x_2)) = 3 + 3*x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 2 + 3*x_1 + 2*x_2
   POL(prod(x_1)) = 1 + 3*x_1
   POL(singl(x_1)) = 3 + 3*x_1
   POL(sum(x_1)) = 2 + 3*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 3 + 3*x_1 + 3*x_2
   POL(z) = 0


----------------------------------------

(57)
Obligation:
The TRS P consists of the following rules:

   U111^1(tt, A, B) -> SUM(B)
   U111^1(tt, A, B) -> SUM(A)

The TRS R consists of the following rules:

   and(tt, X) -> X

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(58) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 0 SCCs with 2 less nodes.
----------------------------------------

(59)
TRUE
