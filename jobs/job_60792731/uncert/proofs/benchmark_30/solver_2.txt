YES

Problem 1: 

(VAR vu95NonEmpty k l x y)
(THEORY 
(AC plus))
(RULES
app(cons(x,l),k) -> cons(x,app(l,k))
app(nil,k) -> k
app(l,nil) -> l
plus(num0,y) -> y
plus(s(x),y) -> s(plus(x,y))
pred(cons(s(x),nil)) -> cons(x,nil)
sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
sum(cons(x,nil)) -> cons(x,nil)
)


Problem 1: 

Dependency Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 APP(cons(x,l),k) -> APP(l,k)
 PLUS(plus(num0,y),x5) -> PLUS(y,x5)
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
 SUM(app(l,cons(x,cons(y,k)))) -> APP(l,sum(cons(x,cons(y,k))))
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(app(l,sum(cons(x,cons(y,k)))))
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(cons(x,cons(y,k)))
 SUM(cons(num0,cons(plus(x,y),l))) -> PRED(sum(cons(s(x),cons(y,l))))
 SUM(cons(num0,cons(plus(x,y),l))) -> SUM(cons(s(x),cons(y,l)))
 SUM(cons(x,cons(y,l))) -> PLUS(x,y)
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)

Problem 1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 APP(cons(x,l),k) -> APP(l,k)
 PLUS(plus(num0,y),x5) -> PLUS(y,x5)
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
 SUM(app(l,cons(x,cons(y,k)))) -> APP(l,sum(cons(x,cons(y,k))))
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(app(l,sum(cons(x,cons(y,k)))))
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(cons(x,cons(y,k)))
 SUM(cons(num0,cons(plus(x,y),l))) -> PRED(sum(cons(s(x),cons(y,l))))
 SUM(cons(num0,cons(plus(x,y),l))) -> SUM(cons(s(x),cons(y,l)))
 SUM(cons(x,cons(y,l))) -> PLUS(x,y)
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(plus(num0,y),x5) -> PLUS(y,x5)
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
 PLUS(plus(x5,x6),x7) -> PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) -> PLUS(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->->Cycle:
->->-> Pairs:
 SUM(cons(num0,cons(plus(x,y),l))) -> SUM(cons(s(x),cons(y,l)))
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 APP(cons(x,l),k) -> APP(l,k)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->->Cycle:
->->-> Pairs:
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(app(l,sum(cons(x,cons(y,k)))))
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Reduction Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(num0,y),x5) -> PLUS(y,x5)
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2
[pred](X) = 0
[sum](X) = 0
[num0] = 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X
[APP](X1,X2) = 0
[PLUS](X1,X2) = X1 + X2
[PRED](X) = 0
[SUM](X) = 0

Problem 1.1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
 PLUS(plus(x5,x6),x7) -> PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) -> PLUS(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)

Problem 1.1: 

Reduction Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(plus(s(x),y),x5) -> PLUS(x,y)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2
[pred](X) = 0
[sum](X) = 0
[num0] = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X + 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 2.X1 + 2.X2
[PRED](X) = 0
[SUM](X) = 0

Problem 1.1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
 PLUS(plus(x5,x6),x7) -> PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) -> PLUS(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)

Problem 1.1: 

Reduction Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 PLUS(plus(x5,x6),x7) -> PLUS(x5,x6)
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2 + 1
[pred](X) = 0
[sum](X) = 0
[num0] = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X + 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 2.X1 + 2.X2
[PRED](X) = 0
[SUM](X) = 0

Problem 1.1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
 PLUS(plus(x5,x6),x7) -> PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) -> PLUS(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)

Problem 1.1: 

Reduction Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
 PLUS(s(x),y) -> PLUS(x,y)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2 + 1
[pred](X) = 0
[sum](X) = 0
[num0] = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X + 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 2.X1 + 2.X2
[PRED](X) = 0
[SUM](X) = 0

Problem 1.1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
 PLUS(plus(x5,x6),x7) -> PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) -> PLUS(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)

Problem 1.1: 

Reduction Pairs Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 PLUS(plus(s(x),y),x5) -> PLUS(s(plus(x,y)),x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2 + 2
[pred](X) = 0
[sum](X) = 0
[num0] = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 2.X1 + 2.X2
[PRED](X) = 0
[SUM](X) = 0

Problem 1.1: 

SCC Processor:
-> FAxioms:
 PLUS(plus(x5,x6),x7) = PLUS(x5,plus(x6,x7))
 PLUS(x5,x6) = PLUS(x6,x5)
-> Pairs:
 Empty
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 PLUS(x5,plus(x6,x7)) -> PLUS(x6,x7)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 SUM(cons(num0,cons(plus(x,y),l))) -> SUM(cons(s(x),cons(y,l)))
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2 + 2
[pred](X) = 0
[sum](X) = 0
[num0] = 2
[cons](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X + 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 0
[PRED](X) = 0
[SUM](X) = X

Problem 1.2: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> FAxioms:
 plus(plus(x5,x6),x7) -> plus(x5,plus(x6,x7))
 plus(x5,x6) -> plus(x6,x5)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
->->-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty

Problem 1.2: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 SUM(cons(x,cons(y,l))) -> SUM(cons(plus(x,y),l))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[plus](X1,X2) = X1 + X2
[pred](X) = 0
[sum](X) = 0
[num0] = 0
[cons](X1,X2) = 2.X1 + X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[s](X) = 2
[APP](X1,X2) = 0
[PLUS](X1,X2) = 0
[PRED](X) = 0
[SUM](X) = X

Problem 1.2: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 Empty
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> FAxioms:
 Empty
-> Pairs:
 APP(cons(x,l),k) -> APP(l,k)
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Projection:
 pi(APP) = [1]

Problem 1.3: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 Empty
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pairs Processor:
-> FAxioms:
 Empty
-> Pairs:
 SUM(app(l,cons(x,cons(y,k)))) -> SUM(app(l,sum(cons(x,cons(y,k)))))
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Usable Equations:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> Usable Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 2.X1 + 2.X2 + 2
[plus](X1,X2) = X1 + X2 + 1
[pred](X) = 2
[sum](X) = 2
[num0] = 2
[cons](X1,X2) = X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X
[APP](X1,X2) = 0
[PLUS](X1,X2) = 0
[PRED](X) = 0
[SUM](X) = 2.X

Problem 1.4: 

SCC Processor:
-> FAxioms:
 Empty
-> Pairs:
 Empty
-> EAxioms:
 plus(plus(x5,x6),x7) = plus(x5,plus(x6,x7))
 plus(x5,x6) = plus(x6,x5)
-> Rules:
 app(cons(x,l),k) -> cons(x,app(l,k))
 app(nil,k) -> k
 app(l,nil) -> l
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 pred(cons(s(x),nil)) -> cons(x,nil)
 sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
 sum(cons(num0,cons(plus(x,y),l))) -> pred(sum(cons(s(x),cons(y,l))))
 sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
 sum(cons(x,nil)) -> cons(x,nil)
-> SRules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
