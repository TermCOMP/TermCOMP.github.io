NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/ptEel.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be disproven:

(0) ETRS
(1) RRRPoloETRSProof [EQUIVALENT, 111 ms]
(2) ETRS
(3) RRRPoloETRSProof [EQUIVALENT, 39 ms]
(4) ETRS
(5) RRRPoloETRSProof [EQUIVALENT, 35 ms]
(6) ETRS
(7) RRRPoloETRSProof [EQUIVALENT, 0 ms]
(8) ETRS
(9) RRRPoloETRSProof [EQUIVALENT, 7 ms]
(10) ETRS
(11) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(12) EDP
(13) EDependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) EDP
        (16) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (17) EDP
        (18) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (19) EDP
        (20) EDPProblemToQDPProblemProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) TransformationProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) TransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) NonTerminationLoopProof [COMPLETE, 0 ms]
        (31) NO
    (32) EDP


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U21(tt, A, B) -> U22(tt, A, B)
   U22(tt, A, B) -> not_(_xor_(A, _and_(A, B)))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> U21(tt, A, B)
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)
   not_(false) -> true
   not_(true) -> false

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(1) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U21(tt, A, B) -> U22(tt, A, B)
   U22(tt, A, B) -> not_(_xor_(A, _and_(A, B)))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> U21(tt, A, B)
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)
   not_(false) -> true
   not_(true) -> false

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   U21(tt, A, B) -> U22(tt, A, B)
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   not_(false) -> true
   not_(true) -> false
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U12(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U13(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U21(x_1, x_2, x_3)) = 3 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(U22(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + 3*x_2*x_3 + 2*x_3
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U51(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + 3*x_2*x_3 + 2*x_3
   POL(U52(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + 3*x_2*x_3 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U64(x_1, x_2)) = x_1 + x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(_and_(x_1, x_2)) = x_1 + 3*x_1*x_2 + x_2
   POL(_implies_(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 2 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_1*x_2*x_3 + 2*x_2 + 2*x_2*x_3 + 2*x_3
   POL(not_(x_1)) = 1 + x_1
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(2)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U22(tt, A, B) -> not_(_xor_(A, _and_(A, B)))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> U21(tt, A, B)
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(3) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U22(tt, A, B) -> not_(_xor_(A, _and_(A, B)))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> U21(tt, A, B)
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   U22(tt, A, B) -> not_(_xor_(A, _and_(A, B)))
   _implies_(A, B) -> U21(tt, A, B)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U12(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U13(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U21(x_1, x_2, x_3)) = 1 + 2*x_1 + 3*x_1*x_2 + 3*x_1*x_2*x_3 + 3*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(U22(x_1, x_2, x_3)) = 3 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 3*x_2 + 2*x_2*x_3 + 2*x_3
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U51(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_2*x_3 + 2*x_3
   POL(U52(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_2*x_3 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U64(x_1, x_2)) = x_1 + x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_implies_(x_1, x_2)) = 2 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_or_(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(not_(x_1)) = 1 + x_1
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(4)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(5) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U51(tt, A, B) -> U52(tt, A, B)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   U51(tt, A, B) -> U52(tt, A, B)
   not_(A) -> _xor_(A, true)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U12(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U13(x_1, x_2, x_3, x_4)) = 1 + 3*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + x_2*x_3 + x_2*x_4 + x_3 + x_4
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U51(x_1, x_2, x_3)) = 3 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_2*x_3 + 2*x_3
   POL(U52(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_2*x_3 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U64(x_1, x_2)) = x_1 + x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_or_(x_1, x_2)) = 3 + 3*x_1 + 2*x_1*x_2 + 3*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(not_(x_1)) = 2 + 3*x_1 + 3*x_1^2
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(6)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(7) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> U51(tt, A, B)
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   _or_(A, B) -> U51(tt, A, B)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 3*x_2 + 2*x_2*x_3 + 2*x_2*x_4 + x_3 + x_4
   POL(U12(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 3*x_2 + 2*x_2*x_3 + 2*x_2*x_4 + x_3 + x_4
   POL(U13(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 2*x_2*x_3 + 2*x_2*x_4 + x_3 + x_4
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U51(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U52(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 3*x_2 + 2*x_2*x_3 + 3*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U64(x_1, x_2)) = x_1 + 2*x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(_and_(x_1, x_2)) = x_1 + 2*x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 1 + x_1 + x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(8)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(9) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   U52(tt, A, B) -> _xor_(_and_(A, B), _xor_(A, B))
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U12(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U13(x_1, x_2, x_3, x_4)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 3*x_1*x_2*x_3*x_4 + 2*x_1*x_2*x_4 + 2*x_1*x_3 + 3*x_1*x_3*x_4 + 2*x_1*x_4 + 2*x_2 + 3*x_2*x_3 + 3*x_2*x_4 + x_3 + x_4
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U52(x_1, x_2, x_3)) = 3 + 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 3*x_2 + 3*x_2*x_3 + 3*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U64(x_1, x_2)) = x_1 + 2*x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(_and_(x_1, x_2)) = x_1 + 3*x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 3 + 3*x_1 + 2*x_1*x_2 + 3*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(10)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(11) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   U11^1(tt, A, B, C) -> U12^1(tt, A, B, C)
   U12^1(tt, A, B, C) -> U13^1(tt, A, B, C)
   U13^1(tt, A, B, C) -> _AND_(A, B)
   U13^1(tt, A, B, C) -> _AND_(A, C)
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U32^1(tt, U', U) -> U33^1(equal(_isNotEqualTo_(U, U'), true))
   U32^1(tt, U', U) -> EQUAL(_isNotEqualTo_(U, U'), true)
   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   U63^1(tt, B, U') -> U64^1(equal(_isNotEqualTo_(B, true), true), U')
   U63^1(tt, B, U') -> EQUAL(_isNotEqualTo_(B, true), true)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U71^1(tt, U) -> U72^1(tt, U)
   _AND_(A, _xor_(B, C)) -> U11^1(tt, A, B, C)
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   IF_THEN_ELSE_FI(true, U, U') -> U71^1(tt, U)
   _AND_(_and_(A, A), ext) -> _AND_(A, ext)
   _AND_(_and_(A, _xor_(B, C)), ext) -> _AND_(U11(tt, A, B, C), ext)
   _AND_(_and_(A, _xor_(B, C)), ext) -> U11^1(tt, A, B, C)
   _AND_(_and_(false, A), ext) -> _AND_(false, ext)

The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The set E# consists of the following equations:

   _AND_(x, y) == _AND_(y, x)
   _AND_(_and_(x, y), z) == _AND_(x, _and_(y, z))

We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(12)
Obligation:
The TRS P consists of the following rules:

   U11^1(tt, A, B, C) -> U12^1(tt, A, B, C)
   U12^1(tt, A, B, C) -> U13^1(tt, A, B, C)
   U13^1(tt, A, B, C) -> _AND_(A, B)
   U13^1(tt, A, B, C) -> _AND_(A, C)
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U32^1(tt, U', U) -> U33^1(equal(_isNotEqualTo_(U, U'), true))
   U32^1(tt, U', U) -> EQUAL(_isNotEqualTo_(U, U'), true)
   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   U63^1(tt, B, U') -> U64^1(equal(_isNotEqualTo_(B, true), true), U')
   U63^1(tt, B, U') -> EQUAL(_isNotEqualTo_(B, true), true)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U71^1(tt, U) -> U72^1(tt, U)
   _AND_(A, _xor_(B, C)) -> U11^1(tt, A, B, C)
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   IF_THEN_ELSE_FI(true, U, U') -> U71^1(tt, U)
   _AND_(_and_(A, A), ext) -> _AND_(A, ext)
   _AND_(_and_(A, _xor_(B, C)), ext) -> _AND_(U11(tt, A, B, C), ext)
   _AND_(_and_(A, _xor_(B, C)), ext) -> U11^1(tt, A, B, C)
   _AND_(_and_(false, A), ext) -> _AND_(false, ext)

The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The set E# consists of the following equations:

   _AND_(x, y) == _AND_(y, x)
   _AND_(_and_(x, y), z) == _AND_(x, _and_(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(13) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 2 SCCs with 6 less nodes.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)

The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The set E# consists of the following equations:

   _AND_(x, y) == _AND_(y, x)
   _AND_(_and_(x, y), z) == _AND_(x, _and_(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(16) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   _AND_(x, y) == _AND_(y, x)
   _AND_(_and_(x, y), z) == _AND_(x, _and_(y, z))

----------------------------------------

(17)
Obligation:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)

The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(18) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)
The following equations are removed from E:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(IF_THEN_ELSE_FI(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U31(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U31^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U32(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U32^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U41^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U42^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(U61^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(U62^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U63(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(U63^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U64(x_1, x_2)) = x_1 + 2*x_2
   POL(U71(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U72(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(_ISEQUALTO_(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(_ISNOTEQUALTO_(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0


----------------------------------------

(19)
Obligation:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(20) EDPProblemToQDPProblemProof (EQUIVALENT)
The EDP problem does not contain equations anymore, so we can transform it with the EDP to QDP problem processor [DA_STEIN] into a QDP problem.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U')
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF_THEN_ELSE_FI(B, U, U') -> U61^1(tt, B, U') we obtained the following new rules [LPAR04]:

   (IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true),IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U61^1(tt, B, U') -> U62^1(tt, B, U')
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U61^1(tt, B, U') -> U62^1(tt, B, U') we obtained the following new rules [LPAR04]:

   (U61^1(tt, y_0, true) -> U62^1(tt, y_0, true),U61^1(tt, y_0, true) -> U62^1(tt, y_0, true))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   U62^1(tt, B, U') -> U63^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true)
   U61^1(tt, y_0, true) -> U62^1(tt, y_0, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U62^1(tt, B, U') -> U63^1(tt, B, U') we obtained the following new rules [LPAR04]:

   (U62^1(tt, y_0, true) -> U63^1(tt, y_0, true),U62^1(tt, y_0, true) -> U63^1(tt, y_0, true))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true)
   U61^1(tt, y_0, true) -> U62^1(tt, y_0, true)
   U62^1(tt, y_0, true) -> U63^1(tt, y_0, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U63^1(tt, B, U') -> _ISNOTEQUALTO_(B, true) we obtained the following new rules [LPAR04]:

   (U63^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true),U63^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U31^1(tt, U', U) -> U32^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> U41^1(tt, U', U)
   U42^1(tt, U', U) -> _ISEQUALTO_(U, U')
   _ISEQUALTO_(U, U') -> U31^1(tt, U', U)
   U41^1(tt, U', U) -> U42^1(tt, U', U)
   U42^1(tt, U', U) -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   IF_THEN_ELSE_FI(y_2, false, true) -> U61^1(tt, y_2, true)
   U61^1(tt, y_0, true) -> U62^1(tt, y_0, true)
   U62^1(tt, y_0, true) -> U63^1(tt, y_0, true)
   U63^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true)

The TRS R consists of the following rules:

   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U72(tt, U) -> U
   U41(tt, U', U) -> U42(tt, U', U)
   U33(tt) -> false
   U31(tt, U', U) -> U32(tt, U', U)
   U62(tt, B, U') -> U63(tt, B, U')
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   equal(X, X) -> tt
   _isNotEqualTo_(U, U) -> false
   _isEqualTo_(U, U') -> U31(tt, U', U)
   if_then_else_fi(true, U, U') -> U71(tt, U)
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   U61(tt, B, U') -> U62(tt, B, U')
   U71(tt, U) -> U72(tt, U)
   _isEqualTo_(U, U) -> true
   U64(tt, U') -> U'

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the right:

s = U32^1(tt, U'', U1) evaluates to  t =U32^1(tt, U'', U1)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U32^1(tt, U'', U1) -> _ISNOTEQUALTO_(U1, U'')
 with rule U32^1(tt, U', U) -> _ISNOTEQUALTO_(U, U') and matcher [U' / U'', U / U1].

_ISNOTEQUALTO_(U1, U'') -> U41^1(tt, U'', U1)
with rule _ISNOTEQUALTO_(U''', U'''') -> U41^1(tt, U'''', U''') at position [] and matcher [U''' / U1, U'''' / U'']

U41^1(tt, U'', U1) -> U42^1(tt, U'', U1)
with rule U41^1(tt, U', U) -> U42^1(tt, U', U) at position [] and matcher [U' / U'', U / U1]

U42^1(tt, U'', U1) -> _ISEQUALTO_(U1, U'')
with rule U42^1(tt, U''', U1') -> _ISEQUALTO_(U1', U''') at position [] and matcher [U''' / U'', U1' / U1]

_ISEQUALTO_(U1, U'') -> U31^1(tt, U'', U1)
with rule _ISEQUALTO_(U, U') -> U31^1(tt, U', U) at position [] and matcher [U / U1, U' / U'']

U31^1(tt, U'', U1) -> U32^1(tt, U'', U1)
with rule U31^1(tt, U''', U1') -> U32^1(tt, U''', U1') at position [] and matcher [U''' / U'', U1' / U1]

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(31)
NO

----------------------------------------

(32)
Obligation:
The TRS P consists of the following rules:

   U13^1(tt, A, B, C) -> _AND_(A, B)
   _AND_(_and_(A, _xor_(B, C)), ext) -> U11^1(tt, A, B, C)
   _AND_(_and_(A, A), ext) -> _AND_(A, ext)
   U12^1(tt, A, B, C) -> U13^1(tt, A, B, C)
   _AND_(A, _xor_(B, C)) -> U11^1(tt, A, B, C)
   U11^1(tt, A, B, C) -> U12^1(tt, A, B, C)
   _AND_(_and_(A, _xor_(B, C)), ext) -> _AND_(U11(tt, A, B, C), ext)
   _AND_(_and_(false, A), ext) -> _AND_(false, ext)
   U13^1(tt, A, B, C) -> _AND_(A, C)

The TRS R consists of the following rules:

   U11(tt, A, B, C) -> U12(tt, A, B, C)
   U12(tt, A, B, C) -> U13(tt, A, B, C)
   U13(tt, A, B, C) -> _xor_(_and_(A, B), _and_(A, C))
   U31(tt, U', U) -> U32(tt, U', U)
   U32(tt, U', U) -> U33(equal(_isNotEqualTo_(U, U'), true))
   U33(tt) -> false
   U41(tt, U', U) -> U42(tt, U', U)
   U42(tt, U', U) -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   U61(tt, B, U') -> U62(tt, B, U')
   U62(tt, B, U') -> U63(tt, B, U')
   U63(tt, B, U') -> U64(equal(_isNotEqualTo_(B, true), true), U')
   U64(tt, U') -> U'
   U71(tt, U) -> U72(tt, U)
   U72(tt, U) -> U
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> U11(tt, A, B, C)
   _and_(false, A) -> false
   _and_(true, A) -> A
   _isEqualTo_(U, U') -> U31(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> U41(tt, U', U)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U61(tt, B, U')
   if_then_else_fi(true, U, U') -> U71(tt, U)
   _and_(_and_(A, A), ext) -> _and_(A, ext)
   _and_(_and_(A, _xor_(B, C)), ext) -> _and_(U11(tt, A, B, C), ext)
   _and_(_and_(false, A), ext) -> _and_(false, ext)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The set E# consists of the following equations:

   _AND_(x, y) == _AND_(y, x)
   _AND_(_and_(x, y), z) == _AND_(x, _and_(y, z))

We have to consider all minimal (P,E#,R,E)-chains