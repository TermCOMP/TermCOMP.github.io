YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0ZtUW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be proven:

(0) ETRS
(1) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(2) EDP
(3) EDependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) EDP
        (6) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (7) EDP
        (8) EUsableRulesReductionPairsProof [EQUIVALENT, 5 ms]
        (9) EDP
        (10) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (11) TRUE
    (12) EDP
        (13) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (14) EDP
        (15) EDPPoloProof [EQUIVALENT, 36 ms]
        (16) EDP
        (17) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (18) EDP
        (19) EDPPoloProof [EQUIVALENT, 0 ms]
        (20) EDP
        (21) EDPPoloProof [EQUIVALENT, 16 ms]
        (22) EDP
        (23) EDPPoloProof [EQUIVALENT, 21 ms]
        (24) EDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) EDP
        (28) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (29) EDP
        (30) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (31) EDP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) EDP
        (35) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (36) EDP
        (37) EDPPoloProof [EQUIVALENT, 92 ms]
        (38) EDP
        (39) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (40) EDP
        (41) EDPPoloProof [EQUIVALENT, 114 ms]
        (42) EDP
        (43) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (44) EDP
        (45) EDPPoloProof [EQUIVALENT, 17 ms]
        (46) EDP
        (47) PisEmptyProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) EDP
        (50) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (51) EDP
        (52) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (53) EDP
        (54) EDependencyGraphProof [EQUIVALENT, 0 ms]
        (55) TRUE


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))


----------------------------------------

(1) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   U101^1(tt, X, Y) -> ISBIN(Y)
   U102^1(tt, X, Y) -> 0^1(mult(X, Y))
   U102^1(tt, X, Y) -> MULT(X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   U111^1(tt, X, Y) -> ISBIN(Y)
   U112^1(tt, X, Y) -> PLUS(0(mult(X, Y)), Y)
   U112^1(tt, X, Y) -> 0^1(mult(X, Y))
   U112^1(tt, X, Y) -> MULT(X, Y)
   U131^1(tt, X, Y) -> U132^1(isBin(Y), X, Y)
   U131^1(tt, X, Y) -> ISBIN(Y)
   U132^1(tt, X, Y) -> 0^1(plus(X, Y))
   U132^1(tt, X, Y) -> PLUS(X, Y)
   U141^1(tt, X, Y) -> U142^1(isBin(Y), X, Y)
   U141^1(tt, X, Y) -> ISBIN(Y)
   U142^1(tt, X, Y) -> PLUS(X, Y)
   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   U151^1(tt, X, Y) -> ISBIN(Y)
   U152^1(tt, X, Y) -> 0^1(plus(plus(X, Y), 1(z)))
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U152^1(tt, X, Y) -> PLUS(X, Y)
   U171^1(tt, A, B) -> U172^1(isBag(B), A, B)
   U171^1(tt, A, B) -> ISBAG(B)
   U172^1(tt, A, B) -> MULT(prod(A), prod(B))
   U172^1(tt, A, B) -> PROD(A)
   U172^1(tt, A, B) -> PROD(B)
   U191^1(tt, A, B) -> U192^1(isBag(B), A, B)
   U191^1(tt, A, B) -> ISBAG(B)
   U192^1(tt, A, B) -> PLUS(sum(A), sum(B))
   U192^1(tt, A, B) -> SUM(A)
   U192^1(tt, A, B) -> SUM(B)
   U21^1(tt, V2) -> U22^1(isBag(V2))
   U21^1(tt, V2) -> ISBAG(V2)
   U51^1(tt, V2) -> U52^1(isBin(V2))
   U51^1(tt, V2) -> ISBIN(V2)
   U61^1(tt, V2) -> U62^1(isBin(V2))
   U61^1(tt, V2) -> ISBIN(V2)
   ISBAG(singl(V1)) -> U11^1(isBin(V1))
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> U21^1(isBag(V1), V2)
   ISBAG(union(V1, V2)) -> ISBAG(V1)
   ISBIN(0(V1)) -> U31^1(isBin(V1))
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(1(V1)) -> U41^1(isBin(V1))
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> U51^1(isBin(V1), V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> U61^1(isBin(V1), V2)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(prod(V1)) -> U71^1(isBag(V1))
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(sum(V1)) -> U81^1(isBag(V1))
   ISBIN(sum(V1)) -> ISBAG(V1)
   MULT(z, X) -> U91^1(isBin(X))
   MULT(z, X) -> ISBIN(X)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)
   MULT(0(X), Y) -> ISBIN(X)
   MULT(1(X), Y) -> U111^1(isBin(X), X, Y)
   MULT(1(X), Y) -> ISBIN(X)
   PLUS(z, X) -> U121^1(isBin(X), X)
   PLUS(z, X) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> U131^1(isBin(X), X, Y)
   PLUS(0(X), 0(Y)) -> ISBIN(X)
   PLUS(0(X), 1(Y)) -> U141^1(isBin(X), X, Y)
   PLUS(0(X), 1(Y)) -> ISBIN(X)
   PLUS(1(X), 1(Y)) -> U151^1(isBin(X), X, Y)
   PLUS(1(X), 1(Y)) -> ISBIN(X)
   PROD(singl(X)) -> U161^1(isBin(X), X)
   PROD(singl(X)) -> ISBIN(X)
   PROD(union(A, B)) -> U171^1(isBag(A), A, B)
   PROD(union(A, B)) -> ISBAG(A)
   SUM(empty) -> 0^1(z)
   SUM(singl(X)) -> U181^1(isBin(X), X)
   SUM(singl(X)) -> ISBIN(X)
   SUM(union(A, B)) -> U191^1(isBag(A), A, B)
   SUM(union(A, B)) -> ISBAG(A)
   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(z, X), ext) -> U91^1(isBin(X))
   MULT(mult(z, X), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   MULT(mult(0(X), Y), ext) -> ISBIN(X)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   MULT(mult(1(X), Y), ext) -> U111^1(isBin(X), X, Y)
   MULT(mult(1(X), Y), ext) -> ISBIN(X)
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   PLUS(plus(z, X), ext) -> U121^1(isBin(X), X)
   PLUS(plus(z, X), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> U131^1(isBin(X), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U141^1(isBin(X), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U151^1(isBin(X), X, Y)
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(X)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(2)
Obligation:
The TRS P consists of the following rules:

   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   U101^1(tt, X, Y) -> ISBIN(Y)
   U102^1(tt, X, Y) -> 0^1(mult(X, Y))
   U102^1(tt, X, Y) -> MULT(X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   U111^1(tt, X, Y) -> ISBIN(Y)
   U112^1(tt, X, Y) -> PLUS(0(mult(X, Y)), Y)
   U112^1(tt, X, Y) -> 0^1(mult(X, Y))
   U112^1(tt, X, Y) -> MULT(X, Y)
   U131^1(tt, X, Y) -> U132^1(isBin(Y), X, Y)
   U131^1(tt, X, Y) -> ISBIN(Y)
   U132^1(tt, X, Y) -> 0^1(plus(X, Y))
   U132^1(tt, X, Y) -> PLUS(X, Y)
   U141^1(tt, X, Y) -> U142^1(isBin(Y), X, Y)
   U141^1(tt, X, Y) -> ISBIN(Y)
   U142^1(tt, X, Y) -> PLUS(X, Y)
   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   U151^1(tt, X, Y) -> ISBIN(Y)
   U152^1(tt, X, Y) -> 0^1(plus(plus(X, Y), 1(z)))
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U152^1(tt, X, Y) -> PLUS(X, Y)
   U171^1(tt, A, B) -> U172^1(isBag(B), A, B)
   U171^1(tt, A, B) -> ISBAG(B)
   U172^1(tt, A, B) -> MULT(prod(A), prod(B))
   U172^1(tt, A, B) -> PROD(A)
   U172^1(tt, A, B) -> PROD(B)
   U191^1(tt, A, B) -> U192^1(isBag(B), A, B)
   U191^1(tt, A, B) -> ISBAG(B)
   U192^1(tt, A, B) -> PLUS(sum(A), sum(B))
   U192^1(tt, A, B) -> SUM(A)
   U192^1(tt, A, B) -> SUM(B)
   U21^1(tt, V2) -> U22^1(isBag(V2))
   U21^1(tt, V2) -> ISBAG(V2)
   U51^1(tt, V2) -> U52^1(isBin(V2))
   U51^1(tt, V2) -> ISBIN(V2)
   U61^1(tt, V2) -> U62^1(isBin(V2))
   U61^1(tt, V2) -> ISBIN(V2)
   ISBAG(singl(V1)) -> U11^1(isBin(V1))
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBAG(union(V1, V2)) -> U21^1(isBag(V1), V2)
   ISBAG(union(V1, V2)) -> ISBAG(V1)
   ISBIN(0(V1)) -> U31^1(isBin(V1))
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBIN(1(V1)) -> U41^1(isBin(V1))
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> U51^1(isBin(V1), V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(plus(V1, V2)) -> U61^1(isBin(V1), V2)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(prod(V1)) -> U71^1(isBag(V1))
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(sum(V1)) -> U81^1(isBag(V1))
   ISBIN(sum(V1)) -> ISBAG(V1)
   MULT(z, X) -> U91^1(isBin(X))
   MULT(z, X) -> ISBIN(X)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)
   MULT(0(X), Y) -> ISBIN(X)
   MULT(1(X), Y) -> U111^1(isBin(X), X, Y)
   MULT(1(X), Y) -> ISBIN(X)
   PLUS(z, X) -> U121^1(isBin(X), X)
   PLUS(z, X) -> ISBIN(X)
   PLUS(0(X), 0(Y)) -> U131^1(isBin(X), X, Y)
   PLUS(0(X), 0(Y)) -> ISBIN(X)
   PLUS(0(X), 1(Y)) -> U141^1(isBin(X), X, Y)
   PLUS(0(X), 1(Y)) -> ISBIN(X)
   PLUS(1(X), 1(Y)) -> U151^1(isBin(X), X, Y)
   PLUS(1(X), 1(Y)) -> ISBIN(X)
   PROD(singl(X)) -> U161^1(isBin(X), X)
   PROD(singl(X)) -> ISBIN(X)
   PROD(union(A, B)) -> U171^1(isBag(A), A, B)
   PROD(union(A, B)) -> ISBAG(A)
   SUM(empty) -> 0^1(z)
   SUM(singl(X)) -> U181^1(isBin(X), X)
   SUM(singl(X)) -> ISBIN(X)
   SUM(union(A, B)) -> U191^1(isBag(A), A, B)
   SUM(union(A, B)) -> ISBAG(A)
   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(z, X), ext) -> U91^1(isBin(X))
   MULT(mult(z, X), ext) -> ISBIN(X)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   MULT(mult(0(X), Y), ext) -> ISBIN(X)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   MULT(mult(1(X), Y), ext) -> U111^1(isBin(X), X, Y)
   MULT(mult(1(X), Y), ext) -> ISBIN(X)
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   PLUS(plus(z, X), ext) -> U121^1(isBin(X), X)
   PLUS(plus(z, X), ext) -> ISBIN(X)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> U131^1(isBin(X), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> ISBIN(X)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> U141^1(isBin(X), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> ISBIN(X)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U151^1(isBin(X), X, Y)
   PLUS(plus(1(X), 1(Y)), ext) -> ISBIN(X)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(3) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 5 SCCs with 47 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
The TRS P consists of the following rules:

   U51^1(tt, V2) -> ISBIN(V2)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   U61^1(tt, V2) -> ISBIN(V2)
   U21^1(tt, V2) -> ISBAG(V2)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBAG(union(V1, V2)) -> U21^1(isBag(V1), V2)
   ISBIN(plus(V1, V2)) -> U61^1(isBin(V1), V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> U51^1(isBin(V1), V2)
   ISBAG(union(V1, V2)) -> ISBAG(V1)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(6) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(7)
Obligation:
The TRS P consists of the following rules:

   U51^1(tt, V2) -> ISBIN(V2)
   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   U61^1(tt, V2) -> ISBIN(V2)
   U21^1(tt, V2) -> ISBAG(V2)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBAG(union(V1, V2)) -> U21^1(isBag(V1), V2)
   ISBIN(plus(V1, V2)) -> U61^1(isBin(V1), V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> U51^1(isBin(V1), V2)
   ISBAG(union(V1, V2)) -> ISBAG(V1)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(8) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ISBIN(plus(V1, V2)) -> ISBIN(V1)
   ISBIN(0(V1)) -> ISBIN(V1)
   ISBAG(singl(V1)) -> ISBIN(V1)
   ISBIN(prod(V1)) -> ISBAG(V1)
   ISBIN(1(V1)) -> ISBIN(V1)
   ISBIN(sum(V1)) -> ISBAG(V1)
   ISBAG(union(V1, V2)) -> U21^1(isBag(V1), V2)
   ISBIN(plus(V1, V2)) -> U61^1(isBin(V1), V2)
   ISBIN(mult(V1, V2)) -> ISBIN(V1)
   ISBIN(mult(V1, V2)) -> U51^1(isBin(V1), V2)
   ISBAG(union(V1, V2)) -> ISBAG(V1)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 3 + 3*x_1
   POL(1(x_1)) = 3 + x_1
   POL(ISBAG(x_1)) = 3*x_1
   POL(ISBIN(x_1)) = 2*x_1
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = x_1 + 3*x_2
   POL(U21^1(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U22(x_1)) = x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U51^1(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U61^1(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = x_1
   POL(empty) = 0
   POL(isBag(x_1)) = 2*x_1
   POL(isBin(x_1)) = 2*x_1
   POL(mult(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(plus(x_1, x_2)) = 3 + 3*x_1 + 3*x_2
   POL(prod(x_1)) = 2*x_1
   POL(singl(x_1)) = 3*x_1
   POL(sum(x_1)) = 2*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(z) = 0


----------------------------------------

(9)
Obligation:
The TRS P consists of the following rules:

   U51^1(tt, V2) -> ISBIN(V2)
   U61^1(tt, V2) -> ISBIN(V2)
   U21^1(tt, V2) -> ISBAG(V2)

The TRS R consists of the following rules:

   U22(tt) -> tt
   U81(tt) -> tt
   U41(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U51(tt, V2) -> U52(isBin(V2))
   U21(tt, V2) -> U22(isBag(V2))
   U11(tt) -> tt
   U52(tt) -> tt
   U71(tt) -> tt
   U31(tt) -> tt
   U62(tt) -> tt

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(10) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 0 SCCs with 3 less nodes.
----------------------------------------

(11)
TRUE

----------------------------------------

(12)
Obligation:
The TRS P consists of the following rules:

   U152^1(tt, X, Y) -> PLUS(X, Y)
   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U131^1(isBin(X), X, Y)
   PLUS(0(X), 0(Y)) -> U131^1(isBin(X), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U151^1(isBin(X), X, Y)
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U141^1(tt, X, Y) -> U142^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> U141^1(isBin(X), X, Y)
   PLUS(1(X), 1(Y)) -> U151^1(isBin(X), X, Y)
   U131^1(tt, X, Y) -> U132^1(isBin(Y), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   U132^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 1(Y)) -> U141^1(isBin(X), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   U142^1(tt, X, Y) -> PLUS(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(13) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(14)
Obligation:
The TRS P consists of the following rules:

   U152^1(tt, X, Y) -> PLUS(X, Y)
   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U131^1(isBin(X), X, Y)
   PLUS(0(X), 0(Y)) -> U131^1(isBin(X), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> U151^1(isBin(X), X, Y)
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   U141^1(tt, X, Y) -> U142^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> U141^1(isBin(X), X, Y)
   PLUS(1(X), 1(Y)) -> U151^1(isBin(X), X, Y)
   U131^1(tt, X, Y) -> U132^1(isBin(Y), X, Y)
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   U132^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(0(X), 1(Y)) -> U141^1(isBin(X), X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   U142^1(tt, X, Y) -> PLUS(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(15) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   U152^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> U131^1(isBin(X), X, Y)
   PLUS(0(X), 0(Y)) -> U131^1(isBin(X), X, Y)
   PLUS(plus(1(X), 1(Y)), ext) -> U151^1(isBin(X), X, Y)
   U141^1(tt, X, Y) -> U142^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> U141^1(isBin(X), X, Y)
   PLUS(1(X), 1(Y)) -> U151^1(isBin(X), X, Y)
   U131^1(tt, X, Y) -> U132^1(isBin(Y), X, Y)
   PLUS(0(X), 1(Y)) -> U141^1(isBin(X), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   U132^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   U142^1(tt, X, Y) -> PLUS(X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   0(z) -> z
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U121(tt, X) -> X
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 1 + x_1
   POL(1(x_1)) = 1 + x_1
   POL(PLUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U11(x_1)) = 3
   POL(U121(x_1, x_2)) = x_2
   POL(U131(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U131^1(x_1, x_2, x_3)) = 1 + 2*x_2 + 2*x_3
   POL(U132(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U132^1(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U141(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U141^1(x_1, x_2, x_3)) = 1 + 2*x_2 + 2*x_3
   POL(U142(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U142^1(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U151(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U151^1(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U152(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U152^1(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U21(x_1, x_2)) = 3 + 3*x_2
   POL(U22(x_1)) = 3
   POL(U31(x_1)) = 3
   POL(U41(x_1)) = 3
   POL(U51(x_1, x_2)) = 3 + 3*x_2
   POL(U52(x_1)) = 3
   POL(U61(x_1, x_2)) = 3 + 3*x_2
   POL(U62(x_1)) = 3
   POL(U71(x_1)) = 3
   POL(U81(x_1)) = 3
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(16)
Obligation:
The TRS P consists of the following rules:

   U151^1(tt, X, Y) -> U152^1(isBin(Y), X, Y)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   U152^1(tt, X, Y) -> PLUS(plus(X, Y), 1(z))
   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   U132^1(tt, X, Y) -> PLUS(X, Y)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
   U142^1(tt, X, Y) -> PLUS(X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(17) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 4 less nodes.
----------------------------------------

(18)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(19) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(0(X), 1(Y)), ext) -> PLUS(U141(isBin(X), X, Y), ext)
   PLUS(plus(1(X), 1(Y)), ext) -> PLUS(U151(isBin(X), X, Y), ext)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U142(tt, X, Y) -> 1(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U121(tt, X) -> X
   U132(tt, X, Y) -> 0(plus(X, Y))
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   0(z) -> z
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(U11(x_1)) = 3
   POL(U121(x_1, x_2)) = 2 + x_2
   POL(U131(x_1, x_2, x_3)) = 2
   POL(U132(x_1, x_2, x_3)) = 2
   POL(U141(x_1, x_2, x_3)) = 1
   POL(U142(x_1, x_2, x_3)) = 1
   POL(U151(x_1, x_2, x_3)) = 0
   POL(U152(x_1, x_2, x_3)) = 0
   POL(U21(x_1, x_2)) = 3 + 3*x_2
   POL(U22(x_1)) = 3
   POL(U31(x_1)) = 3
   POL(U41(x_1)) = 3
   POL(U51(x_1, x_2)) = 3 + 3*x_2
   POL(U52(x_1)) = 3
   POL(U61(x_1, x_2)) = 3 + 3*x_2
   POL(U62(x_1)) = 3
   POL(U71(x_1)) = 3
   POL(U81(x_1)) = 3
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = 2 + x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(20)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(21) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(z, X), ext) -> PLUS(U121(isBin(X), X), ext)
The remaining Dependency Pairs were at least non-strictly oriented.


   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   0(z) -> z
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(PLUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U11(x_1)) = 3
   POL(U121(x_1, x_2)) = x_2
   POL(U131(x_1, x_2, x_3)) = x_2 + x_3
   POL(U132(x_1, x_2, x_3)) = x_2 + x_3
   POL(U141(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U142(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U151(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U152(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(U21(x_1, x_2)) = 3 + 3*x_2
   POL(U22(x_1)) = 3
   POL(U31(x_1)) = 3
   POL(U41(x_1)) = 3
   POL(U51(x_1, x_2)) = 3 + 3*x_2
   POL(U52(x_1)) = 3
   POL(U61(x_1, x_2)) = 3 + 3*x_2
   POL(U62(x_1)) = 3
   POL(U71(x_1)) = 3
   POL(U81(x_1)) = 3
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 1


----------------------------------------

(22)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(23) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(0(X), 0(Y)), ext) -> PLUS(U131(isBin(X), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U132(tt, X, Y) -> 0(plus(X, Y))
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U121(tt, X) -> X
   0(z) -> z
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 2
   POL(1(x_1)) = 2
   POL(PLUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U11(x_1)) = 3
   POL(U121(x_1, x_2)) = x_2
   POL(U131(x_1, x_2, x_3)) = 2
   POL(U132(x_1, x_2, x_3)) = 2
   POL(U141(x_1, x_2, x_3)) = 3
   POL(U142(x_1, x_2, x_3)) = 2
   POL(U151(x_1, x_2, x_3)) = 3
   POL(U152(x_1, x_2, x_3)) = 3
   POL(U21(x_1, x_2)) = 3 + 3*x_2
   POL(U22(x_1)) = 3
   POL(U31(x_1)) = 3
   POL(U41(x_1)) = 3
   POL(U51(x_1, x_2)) = 3 + 3*x_2
   POL(U52(x_1)) = 3
   POL(U61(x_1, x_2)) = 3 + 3*x_2
   POL(U62(x_1)) = 3
   POL(U71(x_1)) = 3
   POL(U81(x_1)) = 3
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 2


----------------------------------------

(24)
Obligation:
P is empty.
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
The TRS P consists of the following rules:

   U192^1(tt, A, B) -> SUM(B)
   U191^1(tt, A, B) -> U192^1(isBag(B), A, B)
   SUM(union(A, B)) -> U191^1(isBag(A), A, B)
   U192^1(tt, A, B) -> SUM(A)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(28) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(29)
Obligation:
The TRS P consists of the following rules:

   U192^1(tt, A, B) -> SUM(B)
   U191^1(tt, A, B) -> U192^1(isBag(B), A, B)
   SUM(union(A, B)) -> U191^1(isBag(A), A, B)
   U192^1(tt, A, B) -> SUM(A)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(30) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   U192^1(tt, A, B) -> SUM(B)
   U191^1(tt, A, B) -> U192^1(isBag(B), A, B)
   SUM(union(A, B)) -> U191^1(isBag(A), A, B)
   U192^1(tt, A, B) -> SUM(A)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U31(tt) -> tt
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 3 + 3*x_1
   POL(1(x_1)) = 1 + 2*x_1
   POL(SUM(x_1)) = x_1
   POL(U11(x_1)) = 2 + 2*x_1
   POL(U191^1(x_1, x_2, x_3)) = x_1 + x_2 + 3*x_3
   POL(U192^1(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U21(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U22(x_1)) = x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + 3*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U62(x_1)) = 2*x_1
   POL(U71(x_1)) = 2 + x_1
   POL(U81(x_1)) = 2 + x_1
   POL(empty) = 2
   POL(isBag(x_1)) = 2*x_1
   POL(isBin(x_1)) = 1 + x_1
   POL(mult(x_1, x_2)) = 1 + 2*x_1 + 3*x_2
   POL(plus(x_1, x_2)) = 3 + 2*x_1 + 3*x_2
   POL(prod(x_1)) = 3 + 3*x_1
   POL(singl(x_1)) = 2 + 2*x_1
   POL(sum(x_1)) = 3 + 3*x_1
   POL(tt) = 2
   POL(union(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(z) = 1


----------------------------------------

(31)
Obligation:
P is empty.
The TRS R consists of the following rules:

   U22(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   U112^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(1(X), Y), ext) -> U111^1(isBin(X), X, Y)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U102^1(tt, X, Y) -> MULT(X, Y)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   MULT(1(X), Y) -> U111^1(isBin(X), X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(35) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(36)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   U112^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(1(X), Y), ext) -> U111^1(isBin(X), X, Y)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U102^1(tt, X, Y) -> MULT(X, Y)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   MULT(1(X), Y) -> U111^1(isBin(X), X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(37) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(1(X), Y), ext) -> U111^1(isBin(X), X, Y)
   MULT(1(X), Y) -> U111^1(isBin(X), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   U112^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U102^1(tt, X, Y) -> MULT(X, Y)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U132(tt, X, Y) -> 0(plus(X, Y))
   U22(tt) -> tt
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U81(tt) -> tt
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(z, X) -> U91(isBin(X))
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   0(z) -> z
   isBin(z) -> tt
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(sum(V1)) -> U81(isBag(V1))
   isBin(prod(V1)) -> U71(isBag(V1))
   U51(tt, V2) -> U52(isBin(V2))
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U91(tt) -> z
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U31(tt) -> tt
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U41(tt) -> tt
   isBag(empty) -> tt
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBag(singl(V1)) -> U11(isBin(V1))
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U21(tt, V2) -> U22(isBag(V2))
   U62(tt) -> tt
   U121(tt, X) -> X
   U71(tt) -> tt
   U102(tt, X, Y) -> 0(mult(X, Y))
   U52(tt) -> tt
   U11(tt) -> tt
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U61(tt, V2) -> U62(isBin(V2))
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(MULT(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(U101(x_1, x_2, x_3)) = x_1*x_3 + x_2 + x_2*x_3
   POL(U101^1(x_1, x_2, x_3)) = x_2 + x_2*x_3 + x_3
   POL(U102(x_1, x_2, x_3)) = x_2 + x_2*x_3 + x_3
   POL(U102^1(x_1, x_2, x_3)) = x_2 + x_2*x_3 + x_3
   POL(U11(x_1)) = 1
   POL(U111(x_1, x_2, x_3)) = 1 + x_1*x_2 + x_1*x_3 + x_2*x_3 + x_3
   POL(U111^1(x_1, x_2, x_3)) = x_1*x_3 + x_2 + x_2*x_3
   POL(U112(x_1, x_2, x_3)) = x_1 + x_1*x_2 + x_1*x_2*x_3 + x_1*x_3 + x_3
   POL(U112^1(x_1, x_2, x_3)) = x_2 + x_2*x_3 + x_3
   POL(U121(x_1, x_2)) = x_2
   POL(U131(x_1, x_2, x_3)) = x_2 + x_3
   POL(U132(x_1, x_2, x_3)) = x_2 + x_3
   POL(U141(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U142(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U151(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U152(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U21(x_1, x_2)) = x_1 + x_1*x_2
   POL(U22(x_1)) = 1
   POL(U31(x_1)) = x_1^2
   POL(U41(x_1)) = 1
   POL(U51(x_1, x_2)) = 1
   POL(U52(x_1)) = x_1^2
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1^2
   POL(U71(x_1)) = 1
   POL(U81(x_1)) = 1
   POL(U91(x_1)) = 0
   POL(empty) = 1
   POL(isBag(x_1)) = x_1^2
   POL(isBin(x_1)) = 1
   POL(mult(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 1 + x_1
   POL(sum(x_1)) = 0
   POL(tt) = 1
   POL(union(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(z) = 0


----------------------------------------

(38)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   U112^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U102^1(tt, X, Y) -> MULT(X, Y)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   U111^1(tt, X, Y) -> U112^1(isBin(Y), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(39) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 2 less nodes.
----------------------------------------

(40)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   U102^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(41) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(0(X), Y), ext) -> U101^1(isBin(X), X, Y)
   MULT(0(X), Y) -> U101^1(isBin(X), X, Y)
The remaining Dependency Pairs were at least non-strictly oriented.


   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   U102^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   U91(tt) -> z
   U51(tt, V2) -> U52(isBin(V2))
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U61(tt, V2) -> U62(isBin(V2))
   U81(tt) -> tt
   U62(tt) -> tt
   U132(tt, X, Y) -> 0(plus(X, Y))
   U102(tt, X, Y) -> 0(mult(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   isBag(empty) -> tt
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBag(singl(V1)) -> U11(isBin(V1))
   U71(tt) -> tt
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U31(tt) -> tt
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U41(tt) -> tt
   U22(tt) -> tt
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(z, X) -> U91(isBin(X))
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   isBin(z) -> tt
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(sum(V1)) -> U81(isBag(V1))
   isBin(prod(V1)) -> U71(isBag(V1))
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U21(tt, V2) -> U22(isBag(V2))
   0(z) -> z
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U121(tt, X) -> X
   U52(tt) -> tt
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 1 + x_1
   POL(1(x_1)) = 1 + x_1
   POL(MULT(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(U101(x_1, x_2, x_3)) = 1 + x_2 + x_2*x_3 + x_3
   POL(U101^1(x_1, x_2, x_3)) = x_1*x_2*x_3 + x_1*x_3 + x_2
   POL(U102(x_1, x_2, x_3)) = 1 + x_2 + x_2*x_3 + x_3
   POL(U102^1(x_1, x_2, x_3)) = x_1*x_2 + x_1*x_2*x_3 + x_3
   POL(U11(x_1)) = x_1^2
   POL(U111(x_1, x_2, x_3)) = 1 + x_1*x_2 + x_1*x_3 + x_2*x_3 + x_3
   POL(U112(x_1, x_2, x_3)) = 1 + x_1*x_2 + x_1*x_3 + x_2*x_3 + x_3
   POL(U121(x_1, x_2)) = x_1*x_2
   POL(U131(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U132(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U141(x_1, x_2, x_3)) = 1 + x_1*x_2 + x_3
   POL(U142(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U151(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U152(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(U21(x_1, x_2)) = x_1 + x_1*x_2
   POL(U22(x_1)) = 1
   POL(U31(x_1)) = 1
   POL(U41(x_1)) = x_1^2
   POL(U51(x_1, x_2)) = 1
   POL(U52(x_1)) = 1
   POL(U61(x_1, x_2)) = 1
   POL(U62(x_1)) = 1
   POL(U71(x_1)) = 1
   POL(U81(x_1)) = 1
   POL(U91(x_1)) = 0
   POL(empty) = 1
   POL(isBag(x_1)) = x_1^2
   POL(isBin(x_1)) = 1
   POL(mult(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 1 + x_1
   POL(sum(x_1)) = 0
   POL(tt) = 1
   POL(union(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(z) = 0


----------------------------------------

(42)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   U101^1(tt, X, Y) -> U102^1(isBin(Y), X, Y)
   U102^1(tt, X, Y) -> MULT(X, Y)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(43) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 2 less nodes.
----------------------------------------

(44)
Obligation:
The TRS P consists of the following rules:

   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(45) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   MULT(mult(z, X), ext) -> MULT(U91(isBin(X)), ext)
   MULT(mult(1(X), Y), ext) -> MULT(U111(isBin(X), X, Y), ext)
   MULT(mult(0(X), Y), ext) -> MULT(U101(isBin(X), X, Y), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
   plus(z, X) -> U121(isBin(X), X)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U91(tt) -> z
   U132(tt, X, Y) -> 0(plus(X, Y))
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(z, X) -> U91(isBin(X))
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
We had to orient the following equations of E# equivalently.


   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z') == plus(x, plus(y, z'))
   plus(x, y) == plus(y, x)
   mult(x, y) == mult(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 2
   POL(MULT(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(U101(x_1, x_2, x_3)) = 2
   POL(U102(x_1, x_2, x_3)) = 2
   POL(U11(x_1)) = 3
   POL(U111(x_1, x_2, x_3)) = x_3
   POL(U112(x_1, x_2, x_3)) = x_3
   POL(U121(x_1, x_2)) = x_2
   POL(U131(x_1, x_2, x_3)) = 0
   POL(U132(x_1, x_2, x_3)) = 0
   POL(U141(x_1, x_2, x_3)) = 2
   POL(U142(x_1, x_2, x_3)) = 2
   POL(U151(x_1, x_2, x_3)) = 0
   POL(U152(x_1, x_2, x_3)) = 0
   POL(U21(x_1, x_2)) = 3 + 3*x_2
   POL(U22(x_1)) = 3
   POL(U31(x_1)) = 3
   POL(U41(x_1)) = 3
   POL(U51(x_1, x_2)) = 3 + 3*x_2
   POL(U52(x_1)) = 3
   POL(U61(x_1, x_2)) = 3 + 3*x_2
   POL(U62(x_1)) = 3
   POL(U71(x_1)) = 3
   POL(U81(x_1)) = 3
   POL(U91(x_1)) = 0
   POL(empty) = 0
   POL(isBag(x_1)) = 0
   POL(isBin(x_1)) = 0
   POL(mult(x_1, x_2)) = 3 + x_1 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(prod(x_1)) = 0
   POL(singl(x_1)) = 0
   POL(sum(x_1)) = 0
   POL(tt) = 0
   POL(union(x_1, x_2)) = 0
   POL(z) = 0


----------------------------------------

(46)
Obligation:
P is empty.
The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(47) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
The TRS P consists of the following rules:

   U171^1(tt, A, B) -> U172^1(isBag(B), A, B)
   U172^1(tt, A, B) -> PROD(B)
   U172^1(tt, A, B) -> PROD(A)
   PROD(union(A, B)) -> U171^1(isBag(A), A, B)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

The set E# consists of the following equations:

   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(50) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   MULT(x, y) == MULT(y, x)
   PLUS(x, y) == PLUS(y, x)
   UNION(x, y) == UNION(y, x)
   MULT(mult(x, y), z') == MULT(x, mult(y, z'))
   PLUS(plus(x, y), z') == PLUS(x, plus(y, z'))
   UNION(union(x, y), z') == UNION(x, union(y, z'))

----------------------------------------

(51)
Obligation:
The TRS P consists of the following rules:

   U171^1(tt, A, B) -> U172^1(isBag(B), A, B)
   U172^1(tt, A, B) -> PROD(B)
   U172^1(tt, A, B) -> PROD(A)
   PROD(union(A, B)) -> U171^1(isBag(A), A, B)

The TRS R consists of the following rules:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U11(tt) -> tt
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U21(tt, V2) -> U22(isBag(V2))
   U22(tt) -> tt
   U31(tt) -> tt
   U41(tt) -> tt
   U51(tt, V2) -> U52(isBin(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)

The set E consists of the following equations:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(52) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   PROD(union(A, B)) -> U171^1(isBag(A), A, B)
The following rules are removed from R:

   union(X, empty) -> X
   union(empty, X) -> X
   0(z) -> z
   U101(tt, X, Y) -> U102(isBin(Y), X, Y)
   U102(tt, X, Y) -> 0(mult(X, Y))
   U111(tt, X, Y) -> U112(isBin(Y), X, Y)
   U112(tt, X, Y) -> plus(0(mult(X, Y)), Y)
   U121(tt, X) -> X
   U131(tt, X, Y) -> U132(isBin(Y), X, Y)
   U132(tt, X, Y) -> 0(plus(X, Y))
   U141(tt, X, Y) -> U142(isBin(Y), X, Y)
   U142(tt, X, Y) -> 1(plus(X, Y))
   U151(tt, X, Y) -> U152(isBin(Y), X, Y)
   U152(tt, X, Y) -> 0(plus(plus(X, Y), 1(z)))
   U161(tt, X) -> X
   U171(tt, A, B) -> U172(isBag(B), A, B)
   U172(tt, A, B) -> mult(prod(A), prod(B))
   U181(tt, X) -> X
   U191(tt, A, B) -> U192(isBag(B), A, B)
   U192(tt, A, B) -> plus(sum(A), sum(B))
   U51(tt, V2) -> U52(isBin(V2))
   U91(tt) -> z
   isBag(empty) -> tt
   isBag(singl(V1)) -> U11(isBin(V1))
   isBag(union(V1, V2)) -> U21(isBag(V1), V2)
   isBin(z) -> tt
   isBin(0(V1)) -> U31(isBin(V1))
   isBin(1(V1)) -> U41(isBin(V1))
   isBin(mult(V1, V2)) -> U51(isBin(V1), V2)
   isBin(plus(V1, V2)) -> U61(isBin(V1), V2)
   isBin(prod(V1)) -> U71(isBag(V1))
   isBin(sum(V1)) -> U81(isBag(V1))
   mult(z, X) -> U91(isBin(X))
   mult(0(X), Y) -> U101(isBin(X), X, Y)
   mult(1(X), Y) -> U111(isBin(X), X, Y)
   plus(z, X) -> U121(isBin(X), X)
   plus(0(X), 0(Y)) -> U131(isBin(X), X, Y)
   plus(0(X), 1(Y)) -> U141(isBin(X), X, Y)
   plus(1(X), 1(Y)) -> U151(isBin(X), X, Y)
   prod(empty) -> 1(z)
   prod(singl(X)) -> U161(isBin(X), X)
   prod(union(A, B)) -> U171(isBag(A), A, B)
   sum(empty) -> 0(z)
   sum(singl(X)) -> U181(isBin(X), X)
   sum(union(A, B)) -> U191(isBag(A), A, B)
   mult(mult(z, X), ext) -> mult(U91(isBin(X)), ext)
   mult(mult(0(X), Y), ext) -> mult(U101(isBin(X), X, Y), ext)
   mult(mult(1(X), Y), ext) -> mult(U111(isBin(X), X, Y), ext)
   plus(plus(z, X), ext) -> plus(U121(isBin(X), X), ext)
   plus(plus(0(X), 0(Y)), ext) -> plus(U131(isBin(X), X, Y), ext)
   plus(plus(0(X), 1(Y)), ext) -> plus(U141(isBin(X), X, Y), ext)
   plus(plus(1(X), 1(Y)), ext) -> plus(U151(isBin(X), X, Y), ext)
The following equations are removed from E:

   mult(x, y) == mult(y, x)
   plus(x, y) == plus(y, x)
   union(x, y) == union(y, x)
   mult(mult(x, y), z') == mult(x, mult(y, z'))
   plus(plus(x, y), z') == plus(x, plus(y, z'))
   union(union(x, y), z') == union(x, union(y, z'))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0(x_1)) = 2 + 3*x_1
   POL(1(x_1)) = 3*x_1
   POL(PROD(x_1)) = x_1
   POL(U11(x_1)) = 2*x_1
   POL(U171^1(x_1, x_2, x_3)) = x_1 + x_2 + 3*x_3
   POL(U172^1(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U21(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U22(x_1)) = x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 1 + 2*x_1 + 3*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = 2*x_1 + 3*x_2
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = 2*x_1
   POL(empty) = 0
   POL(isBag(x_1)) = 2*x_1
   POL(isBin(x_1)) = 2*x_1
   POL(mult(x_1, x_2)) = 2 + 3*x_1 + 3*x_2
   POL(plus(x_1, x_2)) = 2 + 3*x_1 + 3*x_2
   POL(prod(x_1)) = 2*x_1
   POL(singl(x_1)) = 3*x_1
   POL(sum(x_1)) = 2*x_1
   POL(tt) = 0
   POL(union(x_1, x_2)) = 3*x_1 + 3*x_2
   POL(z) = 0


----------------------------------------

(53)
Obligation:
The TRS P consists of the following rules:

   U171^1(tt, A, B) -> U172^1(isBag(B), A, B)
   U172^1(tt, A, B) -> PROD(B)
   U172^1(tt, A, B) -> PROD(A)

The TRS R consists of the following rules:

   U22(tt) -> tt
   U81(tt) -> tt
   U41(tt) -> tt
   U61(tt, V2) -> U62(isBin(V2))
   U21(tt, V2) -> U22(isBag(V2))
   U11(tt) -> tt
   U52(tt) -> tt
   U71(tt) -> tt
   U31(tt) -> tt
   U62(tt) -> tt

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(54) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 0 SCCs with 3 less nodes.
----------------------------------------

(55)
TRUE
