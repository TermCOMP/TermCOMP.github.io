NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/TCX9m.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be disproven:

(0) ETRS
(1) RRRPoloETRSProof [EQUIVALENT, 101 ms]
(2) ETRS
(3) RRRPoloETRSProof [EQUIVALENT, 0 ms]
(4) ETRS
(5) RRRPoloETRSProof [EQUIVALENT, 18 ms]
(6) ETRS
(7) RRRPoloETRSProof [EQUIVALENT, 0 ms]
(8) ETRS
(9) RRRPoloETRSProof [EQUIVALENT, 0 ms]
(10) ETRS
(11) RRRPoloETRSProof [EQUIVALENT, 10 ms]
(12) ETRS
(13) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(14) EDP
(15) EDependencyGraphProof [EQUIVALENT, 0 ms]
(16) EDP
(17) EUsableRulesReductionPairsProof [EQUIVALENT, 7 ms]
(18) EDP
(19) EDPProblemToQDPProblemProof [EQUIVALENT, 0 ms]
(20) QDP
(21) TransformationProof [EQUIVALENT, 0 ms]
(22) QDP
(23) TransformationProof [EQUIVALENT, 0 ms]
(24) QDP
(25) NonTerminationLoopProof [COMPLETE, 0 ms]
(26) NO


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U
   not_(A) -> _xor_(A, true)
   not_(false) -> true
   not_(true) -> false

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(1) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, A) -> A
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _and_(false, A) -> false
   _and_(true, A) -> A
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U
   not_(A) -> _xor_(A, true)
   not_(false) -> true
   not_(true) -> false

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   _and_(A, A) -> A
   _and_(false, A) -> false
   _and_(true, A) -> A
   _xor_(A, A) -> false
   _xor_(false, A) -> A
   not_(false) -> true
   not_(true) -> false
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + 2*x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(_implies_(x_1, x_2)) = 3 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + 2*x_2
   POL(_or_(x_1, x_2)) = 3 + 3*x_1 + 2*x_1*x_2 + 3*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 3*x_2 + 2*x_2*x_3 + 2*x_3
   POL(not_(x_1)) = 1 + x_1
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(2)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(3) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U
   not_(A) -> _xor_(A, true)

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   not_(A) -> _xor_(A, true)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_implies_(x_1, x_2)) = 3 + 3*x_1 + x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(not_(x_1)) = 2 + x_1
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(4)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(5) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   _implies_(A, B) -> not_(_xor_(A, _and_(A, B)))
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_implies_(x_1, x_2)) = 3 + 3*x_1 + x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 3*x_1 + 2*x_1*x_2 + x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(not_(x_1)) = 1 + x_1
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(6)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(7) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   and(tt, X) -> X
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   and(tt, X) -> X
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 2 + 3*x_1 + 3*x_1*x_2 + 3*x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(8)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(9) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   _or_(A, B) -> _xor_(_and_(A, B), _xor_(A, B))
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 3 + 3*x_1 + 2*x_1*x_2 + 3*x_2
   POL(_xor_(x_1, x_2)) = 1 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(10)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(11) RRRPoloETRSProof (EQUIVALENT)
The following E TRS is given: Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

The following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly by a polynomial ordering:

   _and_(A, _xor_(B, C)) -> _xor_(_and_(A, B), _and_(A, C))
Used ordering:
Polynomial interpretation [POLO]:

   POL(U11(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + 2*x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + x_3
   POL(U22(x_1, x_2)) = x_1 + x_2
   POL(_and_(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_or_(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(_xor_(x_1, x_2)) = 3 + x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(true) = 0
   POL(tt) = 0




----------------------------------------

(12)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))


----------------------------------------

(13) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   U11^1(tt, U', U) -> U12^1(equal(_isNotEqualTo_(U, U'), true))
   U11^1(tt, U', U) -> EQUAL(_isNotEqualTo_(U, U'), true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U21^1(tt, B, U') -> U22^1(equal(_isNotEqualTo_(B, true), true), U')
   U21^1(tt, B, U') -> EQUAL(_isNotEqualTo_(B, true), true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')
   IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U')

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(14)
Obligation:
The TRS P consists of the following rules:

   U11^1(tt, U', U) -> U12^1(equal(_isNotEqualTo_(U, U'), true))
   U11^1(tt, U', U) -> EQUAL(_isNotEqualTo_(U, U'), true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   U21^1(tt, B, U') -> U22^1(equal(_isNotEqualTo_(B, true), true), U')
   U21^1(tt, B, U') -> EQUAL(_isNotEqualTo_(B, true), true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')
   IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U')

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(15) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 1 SCC with 4 less nodes.
----------------------------------------

(16)
Obligation:
The TRS P consists of the following rules:

   IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

The set E consists of the following equations:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(17) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

No rules are removed from R.

The following equations are removed from E:

   _and_(x, y) == _and_(y, x)
   _or_(x, y) == _or_(y, x)
   _xor_(x, y) == _xor_(y, x)
   _and_(_and_(x, y), z) == _and_(x, _and_(y, z))
   _or_(_or_(x, y), z) == _or_(x, _or_(y, z))
   _xor_(_xor_(x, y), z) == _xor_(x, _xor_(y, z))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(IF_THEN_ELSE_FI(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U11(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U11^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U12(x_1)) = x_1
   POL(U21(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(U21^1(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U22(x_1, x_2)) = x_1 + 2*x_2
   POL(_ISEQUALTO_(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(_ISNOTEQUALTO_(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(_isEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(_isNotEqualTo_(x_1, x_2)) = x_1 + x_2
   POL(equal(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(if_then_else_fi(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(true) = 0
   POL(tt) = 0


----------------------------------------

(18)
Obligation:
The TRS P consists of the following rules:

   IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(19) EDPProblemToQDPProblemProof (EQUIVALENT)
The EDP problem does not contain equations anymore, so we can transform it with the EDP to QDP problem processor [DA_STEIN] into a QDP problem.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U')
   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF_THEN_ELSE_FI(B, U, U') -> U21^1(tt, B, U') we obtained the following new rules [LPAR04]:

   (IF_THEN_ELSE_FI(y_2, false, true) -> U21^1(tt, y_2, true),IF_THEN_ELSE_FI(y_2, false, true) -> U21^1(tt, y_2, true))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')
   IF_THEN_ELSE_FI(y_2, false, true) -> U21^1(tt, y_2, true)

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U21^1(tt, B, U') -> _ISNOTEQUALTO_(B, true) we obtained the following new rules [LPAR04]:

   (U21^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true),U21^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   _ISEQUALTO_(U, U') -> U11^1(tt, U', U)
   _ISNOTEQUALTO_(U, U') -> IF_THEN_ELSE_FI(_isEqualTo_(U, U'), false, true)
   U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
   _ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')
   IF_THEN_ELSE_FI(y_2, false, true) -> U21^1(tt, y_2, true)
   U21^1(tt, y_0, true) -> _ISNOTEQUALTO_(y_0, true)

The TRS R consists of the following rules:

   U11(tt, U', U) -> U12(equal(_isNotEqualTo_(U, U'), true))
   U12(tt) -> false
   U21(tt, B, U') -> U22(equal(_isNotEqualTo_(B, true), true), U')
   U22(tt, U') -> U'
   _isEqualTo_(U, U') -> U11(tt, U', U)
   _isEqualTo_(U, U) -> true
   _isNotEqualTo_(U, U') -> if_then_else_fi(_isEqualTo_(U, U'), false, true)
   _isNotEqualTo_(U, U) -> false
   equal(X, X) -> tt
   if_then_else_fi(B, U, U') -> U21(tt, B, U')
   if_then_else_fi(true, U, U') -> U

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the right:

s = _ISEQUALTO_(U, U') evaluates to  t =_ISEQUALTO_(U, U')

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

_ISEQUALTO_(U, U') -> U11^1(tt, U', U)
 with rule _ISEQUALTO_(U, U') -> U11^1(tt, U', U) and matcher [ ].

U11^1(tt, U', U) -> _ISNOTEQUALTO_(U, U')
with rule U11^1(tt, U'', U1) -> _ISNOTEQUALTO_(U1, U'') at position [] and matcher [U'' / U', U1 / U]

_ISNOTEQUALTO_(U, U') -> _ISEQUALTO_(U, U')
with rule _ISNOTEQUALTO_(U'', U''') -> _ISEQUALTO_(U'', U''') at position [] and matcher [U'' / U, U''' / U']

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(26)
NO
