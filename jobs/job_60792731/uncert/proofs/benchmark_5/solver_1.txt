YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HfHQv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ETRS could be proven:

(0) ETRS
(1) EquationalDependencyPairsProof [EQUIVALENT, 0 ms]
(2) EDP
(3) EDependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) EDP
        (6) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (7) EDP
        (8) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (9) EDP
        (10) EDPProblemToQDPProblemProof [EQUIVALENT, 2 ms]
        (11) QDP
        (12) MNOCProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) EDP
        (19) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (20) EDP
        (21) EDPPoloProof [EQUIVALENT, 0 ms]
        (22) EDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) EDP
        (26) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (27) EDP
        (28) EUsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (29) EDP
        (30) ERuleRemovalProof [EQUIVALENT, 3 ms]
        (31) EDP
        (32) EDPPoloProof [EQUIVALENT, 0 ms]
        (33) EDP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) EDP
        (37) ESharpUsableEquationsProof [EQUIVALENT, 0 ms]
        (38) EDP
        (39) EDPPoloProof [EQUIVALENT, 0 ms]
        (40) EDP
        (41) EDPPoloProof [EQUIVALENT, 0 ms]
        (42) EDP
        (43) PisEmptyProof [EQUIVALENT, 0 ms]
        (44) YES


----------------------------------------

(0)
Obligation:
Equational rewrite system:
The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))


----------------------------------------

(1) EquationalDependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,DA_STEIN] we result in the following initial EDP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)
   TIMES(x, s(y)) -> PLUS(x, times(x, y))
   TIMES(x, s(y)) -> TIMES(x, y)
   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))
   MINUS(s(x), s(y)) -> P(s(x))
   MINUS(s(x), s(y)) -> P(s(y))
   DIV(s(x), s(y)) -> DIV(minus(x, y), s(y))
   DIV(s(x), s(y)) -> MINUS(x, y)
   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   TIMES(times(x, 0), ext) -> TIMES(0, ext)
   TIMES(times(x, s(y)), ext) -> TIMES(plus(x, times(x, y)), ext)
   TIMES(times(x, s(y)), ext) -> PLUS(x, times(x, y))
   TIMES(times(x, s(y)), ext) -> TIMES(x, y)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains

----------------------------------------

(2)
Obligation:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)
   TIMES(x, s(y)) -> PLUS(x, times(x, y))
   TIMES(x, s(y)) -> TIMES(x, y)
   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))
   MINUS(s(x), s(y)) -> P(s(x))
   MINUS(s(x), s(y)) -> P(s(y))
   DIV(s(x), s(y)) -> DIV(minus(x, y), s(y))
   DIV(s(x), s(y)) -> MINUS(x, y)
   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   TIMES(times(x, 0), ext) -> TIMES(0, ext)
   TIMES(times(x, s(y)), ext) -> TIMES(plus(x, times(x, y)), ext)
   TIMES(times(x, s(y)), ext) -> PLUS(x, times(x, y))
   TIMES(times(x, s(y)), ext) -> TIMES(x, y)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(3) EDependencyGraphProof (EQUIVALENT)
The approximation of the Equational Dependency Graph [DA_STEIN] contains 4 SCCs with 5 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(6) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

----------------------------------------

(7)
Obligation:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(8) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)
The following equations are removed from E:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(MINUS(x_1, x_2)) = x_1 + x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = x_1


----------------------------------------

(9)
Obligation:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

E is empty.
E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(10) EDPProblemToQDPProblemProof (EQUIVALENT)
The EDP problem does not contain equations anymore, so we can transform it with the EDP to QDP problem processor [DA_STEIN] into a QDP problem.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(p(s(x)), p(s(y)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
The TRS P consists of the following rules:

   DIV(s(x), s(y)) -> DIV(minus(x, y), s(y))

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(19) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

----------------------------------------

(20)
Obligation:
The TRS P consists of the following rules:

   DIV(s(x), s(y)) -> DIV(minus(x, y), s(y))

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(21) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   DIV(s(x), s(y)) -> DIV(minus(x, y), s(y))
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   minus(x, 0) -> x
   p(s(x)) -> x
There is no equation of E#.


With the implicit AFS there is no usable equation of E.


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DIV(x_1, x_2)) = 2*x_1
   POL(minus(x_1, x_2)) = x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(22)
Obligation:
P is empty.
The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

E# is empty.
We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(26) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   TIMES(x, y) == TIMES(y, x)
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

----------------------------------------

(27)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(28) EUsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules and equations with reduction pair processor [DA_STEIN] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules can be oriented non-strictly, the  usable equations and the esharp equations can be oriented equivalently. All non-usable rules and equations are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   p(s(x)) -> x
   plus(x, 0) -> x
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)
The following equations are removed from E:

   times(x, y) == times(y, x)
   times(times(x, y), z) == times(x, times(y, z))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1


----------------------------------------

(29)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)

The set E consists of the following equations:

   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)

The set E# consists of the following equations:

   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(30) ERuleRemovalProof (EQUIVALENT)
By using the rule removal processor [DA_STEIN] with the following polynomial ordering [POLO], at least one Dependency Pair or term rewrite system rule of this EDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PLUS(plus(x, s(y)), ext) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(plus(x_1, x_2)) = 2 + x_1 + x_2
   POL(s(x_1)) = 2 + x_1


----------------------------------------

(31)
Obligation:
The TRS P consists of the following rules:

   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)

The set E consists of the following equations:

   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)

The set E# consists of the following equations:

   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(32) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   PLUS(plus(x, s(y)), ext) -> PLUS(s(plus(x, y)), ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
We had to orient the following equations of E# equivalently.


   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   PLUS(x, y) == PLUS(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(plus(x_1, x_2)) = 1 + x_1 + x_2
   POL(s(x_1)) = 0


----------------------------------------

(33)
Obligation:
P is empty.
The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)

The set E consists of the following equations:

   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)

The set E# consists of the following equations:

   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   PLUS(x, y) == PLUS(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
The TRS P consists of the following rules:

   TIMES(times(x, s(y)), ext) -> TIMES(plus(x, times(x, y)), ext)
   TIMES(times(x, s(y)), ext) -> TIMES(x, y)
   TIMES(x, s(y)) -> TIMES(x, y)
   TIMES(times(x, 0), ext) -> TIMES(0, ext)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   PLUS(x, y) == PLUS(y, x)
   TIMES(x, y) == TIMES(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))
   TIMES(times(x, y), z) == TIMES(x, times(y, z))

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(37) ESharpUsableEquationsProof (EQUIVALENT)
We can delete the following equations of E# with the esharp usable equations processor[DA_STEIN]:
   PLUS(x, y) == PLUS(y, x)
   PLUS(plus(x, y), z) == PLUS(x, plus(y, z))

----------------------------------------

(38)
Obligation:
The TRS P consists of the following rules:

   TIMES(times(x, s(y)), ext) -> TIMES(plus(x, times(x, y)), ext)
   TIMES(times(x, s(y)), ext) -> TIMES(x, y)
   TIMES(x, s(y)) -> TIMES(x, y)
   TIMES(times(x, 0), ext) -> TIMES(0, ext)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   TIMES(times(x, y), z) == TIMES(x, times(y, z))
   TIMES(x, y) == TIMES(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(39) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. The following set of Dependency Pairs of this DP problem can be strictly oriented.


   TIMES(times(x, s(y)), ext) -> TIMES(plus(x, times(x, y)), ext)
   TIMES(times(x, s(y)), ext) -> TIMES(x, y)
   TIMES(x, s(y)) -> TIMES(x, y)
The remaining Dependency Pairs were at least non-strictly oriented.


   TIMES(times(x, 0), ext) -> TIMES(0, ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   times(x, s(y)) -> plus(x, times(x, y))
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(x, 0) -> 0
   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   plus(x, 0) -> x
We had to orient the following equations of E# equivalently.


   TIMES(times(x, y), z) == TIMES(x, times(y, z))
   TIMES(x, y) == TIMES(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   times(x, y) == times(y, x)
   times(times(x, y), z) == times(x, times(y, z))
   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(TIMES(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(times(x_1, x_2)) = x_1 + x_1*x_2 + x_2


----------------------------------------

(40)
Obligation:
The TRS P consists of the following rules:

   TIMES(times(x, 0), ext) -> TIMES(0, ext)

The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   TIMES(times(x, y), z) == TIMES(x, times(y, z))
   TIMES(x, y) == TIMES(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(41) EDPPoloProof (EQUIVALENT)
We use the reduction pair processor [DA_STEIN] with a polynomial ordering [POLO]. All Dependency Pairs of this DP problem can be strictly oriented.


   TIMES(times(x, 0), ext) -> TIMES(0, ext)
With the implicit AFS we had to orient the following set of usable rules of R non-strictly.


   times(x, s(y)) -> plus(x, times(x, y))
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(x, 0) -> 0
   plus(x, s(y)) -> s(plus(x, y))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   plus(x, 0) -> x
We had to orient the following equations of E# equivalently.


   TIMES(times(x, y), z) == TIMES(x, times(y, z))
   TIMES(x, y) == TIMES(y, x)
With the implicit AFS we had to orient the following usable equations of E equivalently.


   times(x, y) == times(y, x)
   times(times(x, y), z) == times(x, times(y, z))
   plus(plus(x, y), z) == plus(x, plus(y, z))
   plus(x, y) == plus(y, x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(TIMES(x_1, x_2)) = 2*x_1 + x_1*x_2 + 2*x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 2 + x_1
   POL(times(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2


----------------------------------------

(42)
Obligation:
P is empty.
The TRS R consists of the following rules:

   p(s(x)) -> x
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(x, times(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   div(0, s(y)) -> 0
   div(s(x), s(y)) -> s(div(minus(x, y), s(y)))
   plus(plus(x, s(y)), ext) -> plus(s(plus(x, y)), ext)
   times(times(x, 0), ext) -> times(0, ext)
   times(times(x, s(y)), ext) -> times(plus(x, times(x, y)), ext)

The set E consists of the following equations:

   plus(x, y) == plus(y, x)
   times(x, y) == times(y, x)
   plus(plus(x, y), z) == plus(x, plus(y, z))
   times(times(x, y), z) == times(x, times(y, z))

The set E# consists of the following equations:

   TIMES(times(x, y), z) == TIMES(x, times(y, z))
   TIMES(x, y) == TIMES(y, x)

We have to consider all minimal (P,E#,R,E)-chains
----------------------------------------

(43) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,E#,R,E) chain.
----------------------------------------

(44)
YES
