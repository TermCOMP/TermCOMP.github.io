Input TRS:
    AC symbols: _or_ _and_ _xor_
    1: U101(tt(),A,B) -> _xor_(_and_(A,B),_xor_(A,B))
    2: U11(tt(),A) -> A
    3: U111(tt()) -> false()
    4: U121(tt(),A) -> A
    5: U131(tt(),B,U') -> U132(equal(_isNotEqualTo_(B,true()),true()),U')
    6: U132(tt(),U') -> U'
    7: U141(tt(),U) -> U
    8: U151(tt(),V1,V2) -> U152(isBool(V1),V2)
    9: U152(tt(),V2) -> U153(isBool(V2))
    10: U153(tt()) -> tt()
    11: U161(tt(),V1,V2) -> U162(isBool(V1),V2)
    12: U162(tt(),V2) -> U163(isBool(V2))
    13: U163(tt()) -> tt()
    14: U171(tt(),V1,V2) -> U172(isBool(V1),V2)
    15: U172(tt(),V2) -> U173(isBool(V2))
    16: U173(tt()) -> tt()
    17: U181(tt(),V1,V2) -> U182(isBool(V1),V2)
    18: U182(tt(),V2) -> U183(isBool(V2))
    19: U183(tt()) -> tt()
    20: U191(tt(),V1) -> U192(isBool(V1))
    21: U192(tt()) -> tt()
    22: U201(tt(),A) -> _xor_(A,true())
    23: U21(tt(),A,B,C) -> _xor_(_and_(A,B),_and_(A,C))
    24: U31(tt()) -> false()
    25: U41(tt(),A) -> A
    26: U51(tt(),A,B) -> not_(_xor_(A,_and_(A,B)))
    27: U61(tt(),U',U) -> U62(equal(_isNotEqualTo_(U,U'),true()))
    28: U62(tt()) -> false()
    29: U71(tt()) -> true()
    30: U81(tt(),U',U) -> if_then_else_fi(_isEqualTo_(U,U'),false(),true())
    31: U91(tt()) -> false()
    32: _and_(A,A) -> U11(and(isBool(A),isBoolKind(A)),A)
    33: _and_(A,_xor_(B,C)) -> U21(and(and(isBool(A),isBoolKind(A)),and(and(isBool(B),isBoolKind(B)),and(isBool(C),isBoolKind(C)))),A,B,C)
    34: _and_(false(),A) -> U31(and(isBool(A),isBoolKind(A)))
    35: _and_(true(),A) -> U41(and(isBool(A),isBoolKind(A)),A)
    36: _implies_(A,B) -> U51(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
    37: _isEqualTo_(U,U') -> U61(and(and(isS(U'),isSKind(U')),and(isS(U),isSKind(U))),U',U)
    38: _isEqualTo_(U,U) -> U71(and(isS(U),isSKind(U)))
    39: _isNotEqualTo_(U,U') -> U81(and(and(isS(U'),isSKind(U')),and(isS(U),isSKind(U))),U',U)
    40: _isNotEqualTo_(U,U) -> U91(and(isS(U),isSKind(U)))
    41: _or_(A,B) -> U101(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
    42: _xor_(A,A) -> U111(and(isBool(A),isBoolKind(A)))
    43: _xor_(false(),A) -> U121(and(isBool(A),isBoolKind(A)),A)
    44: and(tt(),X) -> X
    45: equal(X,X) -> tt()
    46: if_then_else_fi(B,U,U') -> U131(and(and(isBool(B),isBoolKind(B)),and(and(isS(U'),isSKind(U')),and(isS(U),isSKind(U)))),B,U')
    47: if_then_else_fi(true(),U,U') -> U141(and(and(isS(U'),isSKind(U')),and(isS(U),isSKind(U))),U)
    48: isBool(false()) -> tt()
    49: isBool(true()) -> tt()
    50: isBool(_and_(V1,V2)) -> U151(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
    51: isBool(_implies_(V1,V2)) -> U161(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
    52: isBool(_isEqualTo_(V1,V2)) -> tt()
    53: isBool(_isNotEqualTo_(V1,V2)) -> tt()
    54: isBool(_or_(V1,V2)) -> U171(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
    55: isBool(_xor_(V1,V2)) -> U181(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
    56: isBool(not_(V1)) -> U191(isBoolKind(V1),V1)
    57: isBoolKind(false()) -> tt()
    58: isBoolKind(true()) -> tt()
    59: isBoolKind(_and_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
    60: isBoolKind(_implies_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
    61: isBoolKind(_isEqualTo_(V1,V2)) -> tt()
    62: isBoolKind(_isNotEqualTo_(V1,V2)) -> tt()
    63: isBoolKind(_or_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
    64: isBoolKind(_xor_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
    65: isBoolKind(not_(V1)) -> isBoolKind(V1)
    66: not_(A) -> U201(and(isBool(A),isBoolKind(A)),A)
    67: not_(false()) -> true()
    68: not_(true()) -> false()
Number of strict rules: 68
Direct Order(PosReal,>,Poly) ... failed.
Freezing and
AC symbols: _or_ _and_ _xor_
1: U101(tt(),A,B) -> _xor_(_and_(A,B),_xor_(A,B))
2: U11(tt(),A) -> A
3: U111(tt()) -> false()
4: U121(tt(),A) -> A
5: U131(tt(),B,U') -> U132(equal(_isNotEqualTo_(B,true()),true()),U')
6: U132(tt(),U') -> U'
7: U141(tt(),U) -> U
8: U151(tt(),V1,V2) -> U152(isBool(V1),V2)
9: U152(tt(),V2) -> U153(isBool(V2))
10: U153(tt()) -> tt()
11: U161(tt(),V1,V2) -> U162(isBool(V1),V2)
12: U162(tt(),V2) -> U163(isBool(V2))
13: U163(tt()) -> tt()
14: U171(tt(),V1,V2) -> U172(isBool(V1),V2)
15: U172(tt(),V2) -> U173(isBool(V2))
16: U173(tt()) -> tt()
17: U181(tt(),V1,V2) -> U182(isBool(V1),V2)
18: U182(tt(),V2) -> U183(isBool(V2))
19: U183(tt()) -> tt()
20: U191(tt(),V1) -> U192(isBool(V1))
21: U192(tt()) -> tt()
22: U201(tt(),A) -> _xor_(A,true())
23: U21(tt(),A,B,C) -> _xor_(_and_(A,B),_and_(A,C))
24: U31(tt()) -> false()
25: U41(tt(),A) -> A
26: U51(tt(),A,B) -> not_(_xor_(A,_and_(A,B)))
27: U61(tt(),U',U) -> U62(equal(_isNotEqualTo_(U,U'),true()))
28: U62(tt()) -> false()
29: U71(tt()) -> true()
30: U81(tt(),U',U) -> if_then_else_fi(_isEqualTo_(U,U'),false(),true())
31: U91(tt()) -> false()
32: _and_(A,A) -> U11(and(isBool(A),isBoolKind(A)),A)
33: _and_(A,_xor_(B,C)) -> U21(and(and(isBool(A),isBoolKind(A)),and(and(isBool(B),isBoolKind(B)),and(isBool(C),isBoolKind(C)))),A,B,C)
34: _and_(false(),A) -> U31(and(isBool(A),isBoolKind(A)))
35: _and_(true(),A) -> U41(and(isBool(A),isBoolKind(A)),A)
36: _implies_(A,B) -> U51(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
37: _isEqualTo_(U,U') -> U61(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U',U)
38: _isEqualTo_(U,U) -> U71(and❆1_isS(U,isSKind(U)))
39: _isNotEqualTo_(U,U') -> U81(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U',U)
40: _isNotEqualTo_(U,U) -> U91(and❆1_isS(U,isSKind(U)))
41: _or_(A,B) -> U101(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
42: _xor_(A,A) -> U111(and(isBool(A),isBoolKind(A)))
43: _xor_(false(),A) -> U121(and(isBool(A),isBoolKind(A)),A)
44: and❆1_tt(X) -> X
45: equal(X,X) -> tt()
46: if_then_else_fi(B,U,U') -> U131(and(and(isBool(B),isBoolKind(B)),and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U)))),B,U')
47: if_then_else_fi(true(),U,U') -> U141(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U)
48: isBool(false()) -> tt()
49: isBool(true()) -> tt()
50: isBool(_and_(V1,V2)) -> U151(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
51: isBool(_implies_(V1,V2)) -> U161(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
52: isBool(_isEqualTo_(V1,V2)) -> tt()
53: isBool(_isNotEqualTo_(V1,V2)) -> tt()
54: isBool(_or_(V1,V2)) -> U171(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
55: isBool(_xor_(V1,V2)) -> U181(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
56: isBool(not_(V1)) -> U191(isBoolKind(V1),V1)
57: isBoolKind(false()) -> tt()
58: isBoolKind(true()) -> tt()
59: isBoolKind(_and_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
60: isBoolKind(_implies_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
61: isBoolKind(_isEqualTo_(V1,V2)) -> tt()
62: isBoolKind(_isNotEqualTo_(V1,V2)) -> tt()
63: isBoolKind(_or_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
64: isBoolKind(_xor_(V1,V2)) -> and(isBoolKind(V1),isBoolKind(V2))
65: isBoolKind(not_(V1)) -> isBoolKind(V1)
66: not_(A) -> U201(and(isBool(A),isBoolKind(A)),A)
67: not_(false()) -> true()
68: not_(true()) -> false()
69: and(tt(),_1) ->= and❆1_tt(_1)
70: and(isS(_1),_2) ->= and❆1_isS(_1,_2)
71: and(and❆1_isS(_1,_2),_3) ->= and❆2_isS(_1,_2,_3)
Number of strict rules: 68
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #_xor_(false(),A) -> #U121(and(isBool(A),isBoolKind(A)),A)
   #2: #_xor_(false(),A) -> #and(isBool(A),isBoolKind(A))
   #3: #_xor_(false(),A) -> #isBool(A)
   #4: #_xor_(false(),A) -> #isBoolKind(A)
   #5: #_and_(true(),A) -> #U41(and(isBool(A),isBoolKind(A)),A)
   #6: #_and_(true(),A) -> #and(isBool(A),isBoolKind(A))
   #7: #_and_(true(),A) -> #isBool(A)
   #8: #_and_(true(),A) -> #isBoolKind(A)
   #9: #not_(A) -> #U201(and(isBool(A),isBoolKind(A)),A)
   #10: #not_(A) -> #and(isBool(A),isBoolKind(A))
   #11: #not_(A) -> #isBool(A)
   #12: #not_(A) -> #isBoolKind(A)
   #13: #if_then_else_fi(B,U,U') -> #U131(and(and(isBool(B),isBoolKind(B)),and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U)))),B,U')
   #14: #if_then_else_fi(B,U,U') -> #and(and(isBool(B),isBoolKind(B)),and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))))
   #15: #if_then_else_fi(B,U,U') -> #and(isBool(B),isBoolKind(B))
   #16: #if_then_else_fi(B,U,U') -> #isBool(B)
   #17: #if_then_else_fi(B,U,U') -> #isBoolKind(B)
   #18: #_xor_(A,A) -> #U111(and(isBool(A),isBoolKind(A)))
   #19: #_xor_(A,A) -> #and(isBool(A),isBoolKind(A))
   #20: #_xor_(A,A) -> #isBool(A)
   #21: #_xor_(A,A) -> #isBoolKind(A)
   #22: #_or_(A,B) -> #U101(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
   #23: #_or_(A,B) -> #and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B)))
   #24: #_or_(A,B) -> #and(isBool(A),isBoolKind(A))
   #25: #_or_(A,B) -> #isBool(A)
   #26: #_or_(A,B) -> #isBoolKind(A)
   #27: #_or_(A,B) -> #and(isBool(B),isBoolKind(B))
   #28: #_or_(A,B) -> #isBool(B)
   #29: #_or_(A,B) -> #isBoolKind(B)
   #30: #_isEqualTo_(U,U') -> #U61(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U',U)
   #31: #_and_(x,_and_(y,z)) ->= #_and_(_and_(x,y),z)
   #32: #_and_(x,_and_(y,z)) ->= #_and_(x,y)
   #33: #if_then_else_fi(true(),U,U') -> #U141(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U)
   #34: #_xor_(x,_xor_(y,z)) ->= #_xor_(_xor_(x,y),z)
   #35: #_xor_(x,_xor_(y,z)) ->= #_xor_(x,y)
   #36: #_isEqualTo_(U,U) -> #U71(and❆1_isS(U,isSKind(U)))
   #37: #isBoolKind(_and_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #38: #isBoolKind(_and_(V1,V2)) -> #isBoolKind(V1)
   #39: #isBoolKind(_and_(V1,V2)) -> #isBoolKind(V2)
   #40: #isBool(_xor_(V1,V2)) -> #U181(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
   #41: #isBool(_xor_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #42: #isBool(_xor_(V1,V2)) -> #isBoolKind(V1)
   #43: #isBool(_xor_(V1,V2)) -> #isBoolKind(V2)
   #44: #_isNotEqualTo_(U,U) -> #U91(and❆1_isS(U,isSKind(U)))
   #45: #isBool(_implies_(V1,V2)) -> #U161(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
   #46: #isBool(_implies_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #47: #isBool(_implies_(V1,V2)) -> #isBoolKind(V1)
   #48: #isBool(_implies_(V1,V2)) -> #isBoolKind(V2)
   #49: #U152(tt(),V2) -> #U153(isBool(V2))
   #50: #U152(tt(),V2) -> #isBool(V2)
   #51: #U161(tt(),V1,V2) -> #U162(isBool(V1),V2)
   #52: #U161(tt(),V1,V2) -> #isBool(V1)
   #53: #U21(tt(),A,B,C) -> #_xor_(_and_(A,B),_and_(A,C))
   #54: #U21(tt(),A,B,C) -> #_and_(A,B)
   #55: #U21(tt(),A,B,C) -> #_and_(A,C)
   #56: #and(tt(),_1) ->? #and❆1_tt(_1)
   #57: #U162(tt(),V2) -> #U163(isBool(V2))
   #58: #U162(tt(),V2) -> #isBool(V2)
   #59: #isBool(not_(V1)) -> #U191(isBoolKind(V1),V1)
   #60: #isBool(not_(V1)) -> #isBoolKind(V1)
   #61: #U171(tt(),V1,V2) -> #U172(isBool(V1),V2)
   #62: #U171(tt(),V1,V2) -> #isBool(V1)
   #63: #U81(tt(),U',U) -> #if_then_else_fi(_isEqualTo_(U,U'),false(),true())
   #64: #U81(tt(),U',U) -> #_isEqualTo_(U,U')
   #65: #U191(tt(),V1) -> #U192(isBool(V1))
   #66: #U191(tt(),V1) -> #isBool(V1)
   #67: #_isNotEqualTo_(U,U') -> #U81(and❆2_isS(U',isSKind(U'),and❆1_isS(U,isSKind(U))),U',U)
   #68: #_and_(A,_xor_(B,C)) -> #U21(and(and(isBool(A),isBoolKind(A)),and(and(isBool(B),isBoolKind(B)),and(isBool(C),isBoolKind(C)))),A,B,C)
   #69: #_and_(A,_xor_(B,C)) -> #and(and(isBool(A),isBoolKind(A)),and(and(isBool(B),isBoolKind(B)),and(isBool(C),isBoolKind(C))))
   #70: #_and_(A,_xor_(B,C)) -> #and(isBool(A),isBoolKind(A))
   #71: #_and_(A,_xor_(B,C)) -> #isBool(A)
   #72: #_and_(A,_xor_(B,C)) -> #isBoolKind(A)
   #73: #_and_(A,_xor_(B,C)) -> #and(and(isBool(B),isBoolKind(B)),and(isBool(C),isBoolKind(C)))
   #74: #_and_(A,_xor_(B,C)) -> #and(isBool(B),isBoolKind(B))
   #75: #_and_(A,_xor_(B,C)) -> #isBool(B)
   #76: #_and_(A,_xor_(B,C)) -> #isBoolKind(B)
   #77: #_and_(A,_xor_(B,C)) -> #and(isBool(C),isBoolKind(C))
   #78: #_and_(A,_xor_(B,C)) -> #isBool(C)
   #79: #_and_(A,_xor_(B,C)) -> #isBoolKind(C)
   #80: #isBoolKind(_xor_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #81: #isBoolKind(_xor_(V1,V2)) -> #isBoolKind(V1)
   #82: #isBoolKind(_xor_(V1,V2)) -> #isBoolKind(V2)
   #83: #_or_(x,_or_(y,z)) ->= #_or_(_or_(x,y),z)
   #84: #_or_(x,_or_(y,z)) ->= #_or_(x,y)
   #85: #U131(tt(),B,U') -> #U132(equal(_isNotEqualTo_(B,true()),true()),U')
   #86: #U131(tt(),B,U') -> #equal(_isNotEqualTo_(B,true()),true())
   #87: #U131(tt(),B,U') -> #_isNotEqualTo_(B,true())
   #88: #isBoolKind(not_(V1)) -> #isBoolKind(V1)
   #89: #U201(tt(),A) -> #_xor_(A,true())
   #90: #_and_(false(),A) -> #U31(and(isBool(A),isBoolKind(A)))
   #91: #_and_(false(),A) -> #and(isBool(A),isBoolKind(A))
   #92: #_and_(false(),A) -> #isBool(A)
   #93: #_and_(false(),A) -> #isBoolKind(A)
   #94: #U61(tt(),U',U) -> #U62(equal(_isNotEqualTo_(U,U'),true()))
   #95: #U61(tt(),U',U) -> #equal(_isNotEqualTo_(U,U'),true())
   #96: #U61(tt(),U',U) -> #_isNotEqualTo_(U,U')
   #97: #isBoolKind(_implies_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #98: #isBoolKind(_implies_(V1,V2)) -> #isBoolKind(V1)
   #99: #isBoolKind(_implies_(V1,V2)) -> #isBoolKind(V2)
   #100: #U181(tt(),V1,V2) -> #U182(isBool(V1),V2)
   #101: #U181(tt(),V1,V2) -> #isBool(V1)
   #102: #_and_(A,A) -> #U11(and(isBool(A),isBoolKind(A)),A)
   #103: #_and_(A,A) -> #and(isBool(A),isBoolKind(A))
   #104: #_and_(A,A) -> #isBool(A)
   #105: #_and_(A,A) -> #isBoolKind(A)
   #106: #isBoolKind(_or_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #107: #isBoolKind(_or_(V1,V2)) -> #isBoolKind(V1)
   #108: #isBoolKind(_or_(V1,V2)) -> #isBoolKind(V2)
   #109: #U51(tt(),A,B) -> #not_(_xor_(A,_and_(A,B)))
   #110: #U51(tt(),A,B) -> #_xor_(A,_and_(A,B))
   #111: #U51(tt(),A,B) -> #_and_(A,B)
   #112: #_implies_(A,B) -> #U51(and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B))),A,B)
   #113: #_implies_(A,B) -> #and(and(isBool(A),isBoolKind(A)),and(isBool(B),isBoolKind(B)))
   #114: #_implies_(A,B) -> #and(isBool(A),isBoolKind(A))
   #115: #_implies_(A,B) -> #isBool(A)
   #116: #_implies_(A,B) -> #isBoolKind(A)
   #117: #_implies_(A,B) -> #and(isBool(B),isBoolKind(B))
   #118: #_implies_(A,B) -> #isBool(B)
   #119: #_implies_(A,B) -> #isBoolKind(B)
   #120: #U101(tt(),A,B) -> #_xor_(_and_(A,B),_xor_(A,B))
   #121: #U101(tt(),A,B) -> #_and_(A,B)
   #122: #U101(tt(),A,B) -> #_xor_(A,B)
   #123: #isBool(_or_(V1,V2)) -> #U171(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
   #124: #isBool(_or_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #125: #isBool(_or_(V1,V2)) -> #isBoolKind(V1)
   #126: #isBool(_or_(V1,V2)) -> #isBoolKind(V2)
   #127: #U151(tt(),V1,V2) -> #U152(isBool(V1),V2)
   #128: #U151(tt(),V1,V2) -> #isBool(V1)
   #129: #U172(tt(),V2) -> #U173(isBool(V2))
   #130: #U172(tt(),V2) -> #isBool(V2)
   #131: #isBool(_and_(V1,V2)) -> #U151(and(isBoolKind(V1),isBoolKind(V2)),V1,V2)
   #132: #isBool(_and_(V1,V2)) -> #and(isBoolKind(V1),isBoolKind(V2))
   #133: #isBool(_and_(V1,V2)) -> #isBoolKind(V1)
   #134: #isBool(_and_(V1,V2)) -> #isBoolKind(V2)
   #135: #U182(tt(),V2) -> #U183(isBool(V2))
   #136: #U182(tt(),V2) -> #isBool(V2)
Number of SCCs: 5, DPs: 36, edges: 161
	SCC { #34 #35 }
Removing DPs: only weak rules.
Number of SCCs: 4, DPs: 36, edges: 161
	SCC { #83 #84 }
Removing DPs: only weak rules.
Number of SCCs: 3, DPs: 36, edges: 161
	SCC { #38 #39 #81 #82 #88 #98 #99 #107 #108 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#U201(x1,x2)	weight: 0
   U21(x1,x2,x3,x4)	weight: 0
 _and_(x1,x2)	weight: (/ 1 2) + x1 + x2
  U161(x1,x2,x3)	weight: 0
  U182(x1,x2)	weight: 0
   U11(x1,x2)	weight: 0
#_isNotEqualTo_(x1,x2)	weight: 0
  U192(x1)	weight: 0
  not_(x1)	weight: (/ 1 2) + x1
#U152(x1,x2)	weight: 0
#U181(x1,x2,x3)	weight: 0
#_and_(x1,x2)	weight: 0
#isBoolKind(x1)	weight: x1
   U91(x1)	weight: 0
#U101(x1,x2,x3)	weight: 0
#equal(x1,x2)	weight: 0
#U183(x1)	weight: 0
   U71(x1)	weight: 0
 #U81(x1,x2,x3)	weight: 0
   and(x1,x2)	weight: 0
#isBool(x1)	weight: 0
  U131(x1,x2,x3)	weight: 0
  U101(x1,x2,x3)	weight: 0
  _or_(x1,x2)	weight: (/ 1 2) + x1 + x2
and❆2_isS(x1,x2,x3)	weight: 0
  U111(x1)	weight: 0
  U132(x1,x2)	weight: 0
  U152(x1,x2)	weight: 0
 false()	weight: 0
isBool(x1)	weight: 0
#U163(x1)	weight: 0
#U121(x1,x2)	weight: 0
  U163(x1)	weight: 0
  U172(x1,x2)	weight: 0
#U131(x1,x2,x3)	weight: 0
and❆1_isS(x1,x2)	weight: 0
#U173(x1)	weight: 0
  true()	weight: 0
_implies_(x1,x2)	weight: (/ 1 2) + x1 + x2
#_implies_(x1,x2)	weight: 0
  U201(x1,x2)	weight: 0
#U141(x1,x2)	weight: 0
_isNotEqualTo_(x1,x2)	weight: 0
  U141(x1,x2)	weight: 0
#U171(x1,x2,x3)	weight: 0
 #U62(x1)	weight: 0
  U173(x1)	weight: 0
#_xor_(x1,x2)	weight: 0
 _xor_(x1,x2)	weight: (/ 1 2) + x1 + x2
  U191(x1,x2)	weight: 0
  U153(x1)	weight: 0
  U171(x1,x2,x3)	weight: 0
   U62(x1)	weight: 0
#U153(x1)	weight: 0
#U182(x1,x2)	weight: 0
  U151(x1,x2,x3)	weight: 0
#U111(x1)	weight: 0
#U192(x1)	weight: 0
   isS(x1)	weight: 0
isBoolKind(x1)	weight: 0
#if_then_else_fi(x1,x2,x3)	weight: 0
   U61(x1,x2,x3)	weight: 0
 #U51(x1,x2,x3)	weight: 0
#not_(x1)	weight: 0
 #U11(x1,x2)	weight: 0
#and❆1_tt(x1)	weight: 0
   U31(x1)	weight: 0
  U183(x1)	weight: 0
#_isEqualTo_(x1,x2)	weight: 0
 #U41(x1,x2)	weight: 0
 equal(x1,x2)	weight: 0
#U191(x1,x2)	weight: 0
isSKind(x1)	weight: 0
 #U21(x1,x2,x3,x4)	weight: 0
   U81(x1,x2,x3)	weight: 0
    tt()	weight: 0
 #U71(x1)	weight: 0
#U151(x1,x2,x3)	weight: 0
#U162(x1,x2)	weight: 0
#_or_(x1,x2)	weight: 0
   U51(x1,x2,x3)	weight: 0
#U161(x1,x2,x3)	weight: 0
#U172(x1,x2)	weight: 0
and❆1_tt(x1)	weight: 0
  U162(x1,x2)	weight: 0
   U41(x1,x2)	weight: 0
_isEqualTo_(x1,x2)	weight: 0
 #U31(x1)	weight: 0
 #and(x1,x2)	weight: 0
 #U91(x1)	weight: 0
if_then_else_fi(x1,x2,x3)	weight: 0
#U132(x1,x2)	weight: 0
  U121(x1,x2)	weight: 0
 #U61(x1,x2,x3)	weight: 0
  U181(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #38 #39 #81 #82 #88 #98 #99 #107 #108
Number of SCCs: 2, DPs: 27, edges: 80
	SCC { #31 #32 #54 #55 #68 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
