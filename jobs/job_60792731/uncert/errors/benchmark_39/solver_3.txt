Input TRS:
    AC symbols: + *
    C symbols: *_Q +_Q
    1: 0(\#()) -> \#()
    2: +(\#(),x) -> x
    3: +(0(x),0(y)) -> 0(+(x,y))
    4: +(0(x),1(y)) -> 1(+(x,y))
    5: +(0(x),j(y)) -> j(+(x,y))
    6: +(1(x),1(y)) -> j(+(1(\#()),+(x,y)))
    7: +(j(x),j(y)) -> 1(+(j(\#()),+(x,y)))
    8: +(1(x),j(y)) -> 0(+(x,y))
    9: opp(\#()) -> \#()
    10: opp(0(x)) -> 0(opp(x))
    11: opp(1(x)) -> j(opp(x))
    12: opp(j(x)) -> 1(opp(x))
    13: -(x,y) -> +(opp(y),x)
    14: *(\#(),x) -> \#()
    15: *(0(x),y) -> 0(*(x,y))
    16: *(1(x),y) -> +(0(*(x,y)),y)
    17: *(j(x),y) -> -(0(*(x,y)),y)
    18: abs(x) -> test_abs_pos(x,x)
    19: test_abs_pos(\#(),x) -> x
    20: test_abs_pos(0(x),y) -> test_abs_pos(x,y)
    21: test_abs_pos(1(x),y) -> test_abs_pos(x,y)
    22: test_abs_pos(j(x),y) -> test_abs_neg(x,y)
    23: test_abs_neg(\#(),x) -> opp(x)
    24: test_abs_neg(0(x),y) -> test_abs_neg(x,y)
    25: test_abs_neg(1(x),y) -> test_abs_pos(x,y)
    26: test_abs_neg(j(x),y) -> test_abs_neg(x,y)
    27: signe(\#()) -> \#()
    28: signe(0(x)) -> signe(x)
    29: signe(1(x)) -> test_signe_pos(x)
    30: signe(j(x)) -> test_signe_neg(x)
    31: test_signe_pos(\#()) -> 1(\#())
    32: test_signe_pos(0(x)) -> test_signe_pos(x)
    33: test_signe_pos(1(x)) -> test_signe_pos(x)
    34: test_signe_pos(j(x)) -> test_signe_neg(x)
    35: test_signe_neg(\#()) -> j(\#())
    36: test_signe_neg(0(x)) -> test_signe_neg(x)
    37: test_signe_neg(1(x)) -> test_signe_pos(x)
    38: test_signe_neg(j(x)) -> test_signe_neg(x)
    39: min(x,y) -> test_min_pos(-(abs(y),abs(x)),x,y)
    40: min'(x,y) -> test_min_pos(-(abs(1(y)),abs(1(x))),x,y)
    41: min''(x,y) -> test_min_pos(-(abs(j(y)),abs(j(x))),x,y)
    42: test_min_pos(\#(),x,y) -> x
    43: test_min_pos(0(x),y,z) -> test_min_pos(x,y,z)
    44: test_min_pos(1(x),y,z) -> test_min_pos(x,y,z)
    45: test_min_pos(j(x),y,z) -> test_min_neg(x,y,z)
    46: test_min_neg(\#(),x,y) -> y
    47: test_min_neg(0(x),y,z) -> test_min_neg(x,y,z)
    48: test_min_neg(1(x),y,z) -> test_min_pos(x,y,z)
    49: test_min_neg(j(x),y,z) -> test_min_neg(x,y,z)
    50: f(\#(),x) -> \#()
    51: f(x,\#()) -> signe(x)
    52: f(0(x),0(y)) -> f(x,y)
    53: f(0(x),1(y)) -> 0(f(x,1(y)))
    54: f(0(x),j(y)) -> 0(f(x,j(y)))
    55: f(1(x),0(y)) -> f(1(x),y)
    56: f(1(x),1(y)) -> +(0(f(-(x,min'(x,y)),1(y))),f(min(1(x),1(y)),-(x,y)))
    57: f(1(x),j(y)) -> +(0(f(+(min''(opp(x),y),x),j(y))),f(min(1(x),1(opp(y))),+(x,y)))
    58: f(j(x),0(y)) -> f(j(x),y)
    59: f(j(x),1(y)) -> +(0(f(+(min'(opp(x),y),x),1(y))),f(min(j(x),j(opp(y))),+(x,y)))
    60: f(j(x),j(y)) -> +(0(f(-(x,min''(x,y)),j(y))),f(min(j(x),j(y)),-(x,y)))
    61: rat(x,y) -> irred(*(signe(y),f(x,y)),*(signe(y),f(y,x)))
    62: +_Q(irred(x,y),irred(u,v)) -> irred(+(*(x,v),*(y,u)),*(y,v))
    63: *_Q(irred(x,y),irred(u,v)) -> rat(*(x,u),*(y,v))
Number of strict rules: 63
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #test_min_pos(0(x),y,z) -> #test_min_pos(x,y,z)
   #2: #signe(1(x)) -> #test_signe_pos(x)
   #3: #min''(x,y) -> #test_min_pos(-(abs(j(y)),abs(j(x))),x,y)
   #4: #min''(x,y) -> #-(abs(j(y)),abs(j(x)))
   #5: #min''(x,y) -> #abs(j(y))
   #6: #min''(x,y) -> #abs(j(x))
   #7: #test_signe_neg(1(x)) -> #test_signe_pos(x)
   #8: #test_min_neg(0(x),y,z) -> #test_min_neg(x,y,z)
   #9: #f(0(x),1(y)) -> #0(f(x,1(y)))
   #10: #f(0(x),1(y)) -> #f(x,1(y))
   #11: #test_min_neg(1(x),y,z) -> #test_min_pos(x,y,z)
   #12: #f(j(x),0(y)) -> #f(j(x),y)
   #13: #rat(x,y) -> #*(signe(y),f(x,y))
   #14: #rat(x,y) -> #signe(y)
   #15: #rat(x,y) -> #f(x,y)
   #16: #rat(x,y) -> #*(signe(y),f(y,x))
   #17: #rat(x,y) -> #signe(y)
   #18: #rat(x,y) -> #f(y,x)
   #19: #test_signe_neg(j(x)) -> #test_signe_neg(x)
   #20: #+(1(x),1(y)) -> #+(1(\#()),+(x,y))
   #21: #+(1(x),1(y)) -> #+(x,y)
   #22: #f(j(x),1(y)) -> #+(0(f(+(min'(opp(x),y),x),1(y))),f(min(j(x),j(opp(y))),+(x,y)))
   #23: #f(j(x),1(y)) -> #0(f(+(min'(opp(x),y),x),1(y)))
   #24: #f(j(x),1(y)) -> #f(+(min'(opp(x),y),x),1(y))
   #25: #f(j(x),1(y)) -> #+(min'(opp(x),y),x)
   #26: #f(j(x),1(y)) -> #min'(opp(x),y)
   #27: #f(j(x),1(y)) -> #opp(x)
   #28: #f(j(x),1(y)) -> #f(min(j(x),j(opp(y))),+(x,y))
   #29: #f(j(x),1(y)) -> #min(j(x),j(opp(y)))
   #30: #f(j(x),1(y)) -> #opp(y)
   #31: #f(j(x),1(y)) -> #+(x,y)
   #32: #f(1(x),0(y)) -> #f(1(x),y)
   #33: #min'(x,y) -> #test_min_pos(-(abs(1(y)),abs(1(x))),x,y)
   #34: #min'(x,y) -> #-(abs(1(y)),abs(1(x)))
   #35: #min'(x,y) -> #abs(1(y))
   #36: #min'(x,y) -> #abs(1(x))
   #37: #f(x,\#()) -> #signe(x)
   #38: #-(x,y) -> #+(opp(y),x)
   #39: #-(x,y) -> #opp(y)
   #40: #opp(1(x)) -> #opp(x)
   #41: #f(1(x),j(y)) -> #+(0(f(+(min''(opp(x),y),x),j(y))),f(min(1(x),1(opp(y))),+(x,y)))
   #42: #f(1(x),j(y)) -> #0(f(+(min''(opp(x),y),x),j(y)))
   #43: #f(1(x),j(y)) -> #f(+(min''(opp(x),y),x),j(y))
   #44: #f(1(x),j(y)) -> #+(min''(opp(x),y),x)
   #45: #f(1(x),j(y)) -> #min''(opp(x),y)
   #46: #f(1(x),j(y)) -> #opp(x)
   #47: #f(1(x),j(y)) -> #f(min(1(x),1(opp(y))),+(x,y))
   #48: #f(1(x),j(y)) -> #min(1(x),1(opp(y)))
   #49: #f(1(x),j(y)) -> #opp(y)
   #50: #f(1(x),j(y)) -> #+(x,y)
   #51: #test_abs_neg(0(x),y) -> #test_abs_neg(x,y)
   #52: #test_abs_neg(\#(),x) -> #opp(x)
   #53: #test_min_pos(j(x),y,z) -> #test_min_neg(x,y,z)
   #54: #opp(j(x)) -> #opp(x)
   #55: #f(1(x),1(y)) -> #+(0(f(-(x,min'(x,y)),1(y))),f(min(1(x),1(y)),-(x,y)))
   #56: #f(1(x),1(y)) -> #0(f(-(x,min'(x,y)),1(y)))
   #57: #f(1(x),1(y)) -> #f(-(x,min'(x,y)),1(y))
   #58: #f(1(x),1(y)) -> #-(x,min'(x,y))
   #59: #f(1(x),1(y)) -> #min'(x,y)
   #60: #f(1(x),1(y)) -> #f(min(1(x),1(y)),-(x,y))
   #61: #f(1(x),1(y)) -> #min(1(x),1(y))
   #62: #f(1(x),1(y)) -> #-(x,y)
   #63: #+_Q(irred(x,y),irred(u,v)) -> #+(*(x,v),*(y,u))
   #64: #+_Q(irred(x,y),irred(u,v)) -> #*(x,v)
   #65: #+_Q(irred(x,y),irred(u,v)) -> #*(y,u)
   #66: #+_Q(irred(x,y),irred(u,v)) -> #*(y,v)
   #67: #signe(j(x)) -> #test_signe_neg(x)
   #68: #f(0(x),0(y)) -> #f(x,y)
   #69: #test_min_neg(j(x),y,z) -> #test_min_neg(x,y,z)
   #70: #test_abs_neg(1(x),y) -> #test_abs_pos(x,y)
   #71: #test_abs_pos(0(x),y) -> #test_abs_pos(x,y)
   #72: #+(j(x),j(y)) -> #+(j(\#()),+(x,y))
   #73: #+(j(x),j(y)) -> #+(x,y)
   #74: #min(x,y) -> #test_min_pos(-(abs(y),abs(x)),x,y)
   #75: #min(x,y) -> #-(abs(y),abs(x))
   #76: #min(x,y) -> #abs(y)
   #77: #min(x,y) -> #abs(x)
   #78: #opp(0(x)) -> #0(opp(x))
   #79: #opp(0(x)) -> #opp(x)
   #80: #+(x,+(y,z)) ->= #+(+(x,y),z)
   #81: #+(x,+(y,z)) ->= #+(x,y)
   #82: #test_signe_pos(1(x)) -> #test_signe_pos(x)
   #83: #+(0(x),j(y)) -> #+(x,y)
   #84: #test_min_pos(1(x),y,z) -> #test_min_pos(x,y,z)
   #85: #*(x,*(y,z)) ->= #*(*(x,y),z)
   #86: #*(x,*(y,z)) ->= #*(x,y)
   #87: #signe(0(x)) -> #signe(x)
   #88: #test_abs_pos(j(x),y) -> #test_abs_neg(x,y)
   #89: #test_signe_pos(j(x)) -> #test_signe_neg(x)
   #90: #f(j(x),j(y)) -> #+(0(f(-(x,min''(x,y)),j(y))),f(min(j(x),j(y)),-(x,y)))
   #91: #f(j(x),j(y)) -> #0(f(-(x,min''(x,y)),j(y)))
   #92: #f(j(x),j(y)) -> #f(-(x,min''(x,y)),j(y))
   #93: #f(j(x),j(y)) -> #-(x,min''(x,y))
   #94: #f(j(x),j(y)) -> #min''(x,y)
   #95: #f(j(x),j(y)) -> #f(min(j(x),j(y)),-(x,y))
   #96: #f(j(x),j(y)) -> #min(j(x),j(y))
   #97: #f(j(x),j(y)) -> #-(x,y)
   #98: #*(j(x),y) -> #-(0(*(x,y)),y)
   #99: #*(j(x),y) -> #0(*(x,y))
   #100: #*(j(x),y) -> #*(x,y)
   #101: #test_signe_pos(0(x)) -> #test_signe_pos(x)
   #102: #*_Q(irred(x,y),irred(u,v)) -> #rat(*(x,u),*(y,v))
   #103: #*_Q(irred(x,y),irred(u,v)) -> #*(x,u)
   #104: #*_Q(irred(x,y),irred(u,v)) -> #*(y,v)
   #105: #test_abs_neg(j(x),y) -> #test_abs_neg(x,y)
   #106: #test_signe_neg(0(x)) -> #test_signe_neg(x)
   #107: #test_abs_pos(1(x),y) -> #test_abs_pos(x,y)
   #108: #*(1(x),y) -> #+(0(*(x,y)),y)
   #109: #*(1(x),y) -> #0(*(x,y))
   #110: #*(1(x),y) -> #*(x,y)
   #111: #+(0(x),0(y)) -> #0(+(x,y))
   #112: #+(0(x),0(y)) -> #+(x,y)
   #113: #f(0(x),j(y)) -> #0(f(x,j(y)))
   #114: #f(0(x),j(y)) -> #f(x,j(y))
   #115: #+(1(x),j(y)) -> #0(+(x,y))
   #116: #+(1(x),j(y)) -> #+(x,y)
   #117: #*(0(x),y) -> #0(*(x,y))
   #118: #*(0(x),y) -> #*(x,y)
   #119: #+(0(x),1(y)) -> #+(x,y)
   #120: #abs(x) -> #test_abs_pos(x,x)
Number of SCCs: 8, DPs: 50, edges: 294
	SCC { #87 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: 0
test_signe_neg(x1)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
#test_abs_pos(x1,x2)	weight: 0
   *_Q(x1,x2)	weight: 0
   #*(x1,x2)	weight: 0
#test_min_neg(x1,x2,x3)	weight: 0
     \#()	weight: 0
   +_Q(x1,x2)	weight: 0
test_abs_neg(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
     f(x1,x2)	weight: 0
 irred(x1,x2)	weight: 0
test_abs_pos(x1,x2)	weight: 0
#min''(x1,x2)	weight: 0
#signe(x1)	weight: x1
     0(x1)	weight: (/ 1 2) + x1
test_signe_pos(x1)	weight: 0
     -(x1,x2)	weight: 0
   #f(x1,x2)	weight: 0
     j(x1)	weight: 0
   opp(x1)	weight: 0
test_min_neg(x1,x2,x3)	weight: 0
#test_min_pos(x1,x2,x3)	weight: 0
   min(x1,x2)	weight: 0
 signe(x1)	weight: 0
 #rat(x1,x2)	weight: 0
   #-(x1,x2)	weight: 0
#test_signe_pos(x1)	weight: 0
#test_signe_neg(x1)	weight: 0
     +(x1,x2)	weight: 0
 #*_Q(x1,x2)	weight: 0
   rat(x1,x2)	weight: 0
#test_abs_neg(x1,x2)	weight: 0
   #+(x1,x2)	weight: 0
 #+_Q(x1,x2)	weight: 0
test_min_pos(x1,x2,x3)	weight: 0
     *(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #87
Number of SCCs: 7, DPs: 49, edges: 293
	SCC { #40 #54 #79 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
test_signe_neg(x1)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
#test_abs_pos(x1,x2)	weight: 0
   *_Q(x1,x2)	weight: 0
   #*(x1,x2)	weight: 0
#test_min_neg(x1,x2,x3)	weight: 0
     \#()	weight: 0
   +_Q(x1,x2)	weight: 0
test_abs_neg(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: x1
     f(x1,x2)	weight: 0
 irred(x1,x2)	weight: 0
test_abs_pos(x1,x2)	weight: 0
#min''(x1,x2)	weight: 0
#signe(x1)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
test_signe_pos(x1)	weight: 0
     -(x1,x2)	weight: 0
   #f(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
   opp(x1)	weight: 0
test_min_neg(x1,x2,x3)	weight: 0
#test_min_pos(x1,x2,x3)	weight: 0
   min(x1,x2)	weight: 0
 signe(x1)	weight: 0
 #rat(x1,x2)	weight: 0
   #-(x1,x2)	weight: 0
#test_signe_pos(x1)	weight: 0
#test_signe_neg(x1)	weight: 0
     +(x1,x2)	weight: 0
 #*_Q(x1,x2)	weight: 0
   rat(x1,x2)	weight: 0
#test_abs_neg(x1,x2)	weight: 0
   #+(x1,x2)	weight: 0
 #+_Q(x1,x2)	weight: 0
test_min_pos(x1,x2,x3)	weight: 0
     *(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #40 #54 #79
Number of SCCs: 6, DPs: 46, edges: 284
	SCC { #7 #19 #82 #89 #101 #106 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
test_signe_neg(x1)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
#test_abs_pos(x1,x2)	weight: 0
   *_Q(x1,x2)	weight: 0
   #*(x1,x2)	weight: 0
#test_min_neg(x1,x2,x3)	weight: 0
     \#()	weight: 0
   +_Q(x1,x2)	weight: 0
test_abs_neg(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
     f(x1,x2)	weight: 0
 irred(x1,x2)	weight: 0
test_abs_pos(x1,x2)	weight: 0
#min''(x1,x2)	weight: 0
#signe(x1)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
test_signe_pos(x1)	weight: 0
     -(x1,x2)	weight: 0
   #f(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
   opp(x1)	weight: 0
test_min_neg(x1,x2,x3)	weight: 0
#test_min_pos(x1,x2,x3)	weight: 0
   min(x1,x2)	weight: 0
 signe(x1)	weight: 0
 #rat(x1,x2)	weight: 0
   #-(x1,x2)	weight: 0
#test_signe_pos(x1)	weight: x1
#test_signe_neg(x1)	weight: x1
     +(x1,x2)	weight: 0
 #*_Q(x1,x2)	weight: 0
   rat(x1,x2)	weight: 0
#test_abs_neg(x1,x2)	weight: 0
   #+(x1,x2)	weight: 0
 #+_Q(x1,x2)	weight: 0
test_min_pos(x1,x2,x3)	weight: 0
     *(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7 #19 #82 #89 #101 #106
Number of SCCs: 5, DPs: 40, edges: 266
	SCC { #85 #86 #100 #110 #118 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
