Input TRS:
    AC symbols: plus app
    1: if(true(),x,y) -> x
    2: if(false(),x,y) -> y
    3: eq(0(),0()) -> true()
    4: eq(0(),s(x)) -> false()
    5: eq(s(x),s(y)) -> eq(x,y)
    6: plus(empty(),x) -> x
    7: app(x,empty()) -> empty()
    8: app(x,app(empty(),z)) -> app(empty(),z)
    9: app(x,plus(y,z)) -> plus(app(x,y),app(x,z))
    10: app(x,app(plus(y,z),t)) -> app(plus(app(x,y),app(x,z)),t)
    11: app(singl(x),singl(y)) -> if(eq(x,y),singl(x),empty())
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #app(x,app(y,z)) ->= #app(app(x,y),z)
   #2: #app(x,app(y,z)) ->= #app(x,y)
   #3: #app(x,plus(y,z)) -> #plus(app(x,y),app(x,z))
   #4: #app(x,plus(y,z)) -> #app(x,y)
   #5: #app(x,plus(y,z)) -> #app(x,z)
   #6: #app(singl(x),singl(y)) -> #if(eq(x,y),singl(x),empty())
   #7: #app(singl(x),singl(y)) -> #eq(x,y)
   #8: #plus(x,plus(y,z)) ->= #plus(plus(x,y),z)
   #9: #plus(x,plus(y,z)) ->= #plus(x,y)
   #10: #app(x,app(plus(y,z),t)) -> #app(plus(app(x,y),app(x,z)),t)
   #11: #app(x,app(plus(y,z),t)) -> #plus(app(x,y),app(x,z))
   #12: #app(x,app(plus(y,z),t)) -> #app(x,y)
   #13: #app(x,app(plus(y,z),t)) -> #app(x,z)
   #14: #eq(s(x),s(y)) -> #eq(x,y)
Number of SCCs: 3, DPs: 10, edges: 54
	SCC { #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
#plus(x1,x2)	weight: 0
    eq(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: x2
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
 #app(x1,x2)	weight: 0
 singl(x1)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
 empty()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #14
Number of SCCs: 2, DPs: 9, edges: 53
	SCC { #8 #9 }
Removing DPs: only weak rules.
Number of SCCs: 1, DPs: 9, edges: 53
	SCC { #1 #2 #4 #5 #10 #12 #13 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: eq false true singl empty
#plus(x1,x2)	status: {}	precedence above:
    eq(x1,x2)	status: [x2]	precedence above: s false true singl empty
 false()	status: []	precedence above:
  true()	status: []	precedence above:
  #eq(x1,x2)	status: [x2]	precedence above:
    if(x1,x2,x3)	status: [x2,x3]	precedence above:
     0()	status: []	precedence above: true
 #app(x1,x2)	status: {x1,x2}	precedence above: if plus app
 singl(x1)	status: [x1]	precedence above: s eq false true empty
  plus(x1,x2)	status: {x1,x2}	precedence above:
  #if(x1,x2,x3)	status: [x1,x3,x2]	precedence above:
 empty()	status: []	precedence above:
   app(x1,x2)	status: {x1,x2}	precedence above: if plus
    Usable rules: { 1..13 }
    Removed DPs: #2 #4 #5 #10 #12 #13
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #1 }
Removing DPs: only weak rules.
Number of SCCs: 0, DPs: 3, edges: 5
Next Dependency Pairs:
   #15: #plus(plus(empty(),x),†1) -> #plus(x,†1)
   #16: #app(x,app(y,z)) ->= #app(app(x,y),z)
   #17: #app(x,app(y,z)) ->= #app(x,y)
   #18: #app(app(x,plus(y,z)),†1) -> #app(plus(app(x,y),app(x,z)),†1)
   #19: #app(app(singl(x),singl(y)),†1) -> #app(if(eq(x,y),singl(x),empty()),†1)
   #20: #plus(x,plus(y,z)) ->= #plus(plus(x,y),z)
   #21: #plus(x,plus(y,z)) ->= #plus(x,y)
   #22: #app(app(x,empty()),†1) -> #app(empty(),†1)
   #23: #app(app(x,app(plus(y,z),t)),†1) -> #app(app(plus(app(x,y),app(x,z)),t),†1)
   #24: #app(app(x,app(empty(),z)),†1) -> #app(app(empty(),z),†1)
Number of SCCs: 2, DPs: 10, edges: 58
	SCC { #15 #20 #21 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4)
#plus(x1,x2)	weight: x1 + x2
    eq(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
    if(x1,x2,x3)	weight: x1 + x2
     0()	weight: 0
 #app(x1,x2)	weight: 0
 singl(x1)	weight: (/ 1 4) + x1
  plus(x1,x2)	weight: (/ 1 4) + x1 + x2
  #if(x1,x2,x3)	weight: 0
 empty()	weight: 0
   app(x1,x2)	weight: (/ 1 8)
    Usable rules: { 6 12 }
    Removed DPs: #15 #21
Number of SCCs: 2, DPs: 8, edges: 50
	SCC { #20 }
Removing DPs: only weak rules.
Number of SCCs: 1, DPs: 8, edges: 50
	SCC { #16..19 #22..24 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: eq false true singl empty
#plus(x1,x2)	status: {}	precedence above:
    eq(x1,x2)	status: []	precedence above: false true singl empty
 false()	status: []	precedence above:
  true()	status: []	precedence above:
  #eq(x1,x2)	status: [x2]	precedence above:
    if(x1,x2,x3)	status: [x2,x3]	precedence above:
     0()	status: []	precedence above: true
 #app(x1,x2)	status: {x1,x2}	precedence above: if plus empty app
 singl(x1)	status: [x1]	precedence above: eq false true empty
  plus(x1,x2)	status: {x1,x2}	precedence above:
  #if(x1,x2,x3)	status: [x1,x3,x2]	precedence above:
 empty()	status: []	precedence above:
   app(x1,x2)	status: {x1,x2}	precedence above: if plus
    Usable rules: { 1..13 }
    Removed DPs: #17..19 #22..24
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #16 }
Removing DPs: only weak rules.
Number of SCCs: 1, DPs: 2, edges: 2
