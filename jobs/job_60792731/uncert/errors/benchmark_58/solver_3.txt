Input TRS:
    AC symbols: _or_ _and_ _xor_
    1: U11(tt(),A,B,C) -> U12(tt(),A,B,C)
    2: U12(tt(),A,B,C) -> U13(tt(),A,B,C)
    3: U13(tt(),A,B,C) -> _xor_(_and_(A,B),_and_(A,C))
    4: U21(tt(),A,B) -> U22(tt(),A,B)
    5: U22(tt(),A,B) -> not_(_xor_(A,_and_(A,B)))
    6: U31(tt(),U',U) -> U32(tt(),U',U)
    7: U32(tt(),U',U) -> U33(equal(_isNotEqualTo_(U,U'),true()))
    8: U33(tt()) -> false()
    9: U41(tt(),U',U) -> U42(tt(),U',U)
    10: U42(tt(),U',U) -> if_then_else_fi(_isEqualTo_(U,U'),false(),true())
    11: U51(tt(),A,B) -> U52(tt(),A,B)
    12: U52(tt(),A,B) -> _xor_(_and_(A,B),_xor_(A,B))
    13: U61(tt(),B,U') -> U62(tt(),B,U')
    14: U62(tt(),B,U') -> U63(tt(),B,U')
    15: U63(tt(),B,U') -> U64(equal(_isNotEqualTo_(B,true()),true()),U')
    16: U64(tt(),U') -> U'
    17: U71(tt(),U) -> U72(tt(),U)
    18: U72(tt(),U) -> U
    19: _and_(A,A) -> A
    20: _and_(A,_xor_(B,C)) -> U11(tt(),A,B,C)
    21: _and_(false(),A) -> false()
    22: _and_(true(),A) -> A
    23: _implies_(A,B) -> U21(tt(),A,B)
    24: _isEqualTo_(U,U') -> U31(tt(),U',U)
    25: _isEqualTo_(U,U) -> true()
    26: _isNotEqualTo_(U,U') -> U41(tt(),U',U)
    27: _isNotEqualTo_(U,U) -> false()
    28: _or_(A,B) -> U51(tt(),A,B)
    29: _xor_(A,A) -> false()
    30: _xor_(false(),A) -> A
    31: equal(X,X) -> tt()
    32: if_then_else_fi(B,U,U') -> U61(tt(),B,U')
    33: if_then_else_fi(true(),U,U') -> U71(tt(),U)
    34: not_(A) -> _xor_(A,true())
    35: not_(false()) -> true()
    36: not_(true()) -> false()
Number of strict rules: 36
Direct Order(PosReal,>,Poly) ... failed.
Freezing U71 U41 U42 U32 U12 U51 U22 U62 U72 U13 U63 U11 U21 U31 U61 U52
AC symbols: _or_ _and_ _xor_
1: U11❆1_tt(A,B,C) -> U12❆1_tt(A,B,C)
2: U12❆1_tt(A,B,C) -> U13❆1_tt(A,B,C)
3: U13❆1_tt(A,B,C) -> _xor_(_and_(A,B),_and_(A,C))
4: U21❆1_tt(A,B) -> U22❆1_tt(A,B)
5: U22❆1_tt(A,B) -> not_(_xor_(A,_and_(A,B)))
6: U31❆1_tt(U',U) -> U32❆1_tt(U',U)
7: U32❆1_tt(U',U) -> U33(equal(_isNotEqualTo_(U,U'),true()))
8: U33(tt()) -> false()
9: U41❆1_tt(U',U) -> U42❆1_tt(U',U)
10: U42❆1_tt(U',U) -> if_then_else_fi(_isEqualTo_(U,U'),false(),true())
11: U51❆1_tt(A,B) -> U52❆1_tt(A,B)
12: U52❆1_tt(A,B) -> _xor_(_and_(A,B),_xor_(A,B))
13: U61❆1_tt(B,U') -> U62❆1_tt(B,U')
14: U62❆1_tt(B,U') -> U63❆1_tt(B,U')
15: U63❆1_tt(B,U') -> U64(equal(_isNotEqualTo_(B,true()),true()),U')
16: U64(tt(),U') -> U'
17: U71❆1_tt(U) -> U72❆1_tt(U)
18: U72❆1_tt(U) -> U
19: _and_(A,A) -> A
20: _and_(A,_xor_(B,C)) -> U11❆1_tt(A,B,C)
21: _and_(false(),A) -> false()
22: _and_(true(),A) -> A
23: _implies_(A,B) -> U21❆1_tt(A,B)
24: _isEqualTo_(U,U') -> U31❆1_tt(U',U)
25: _isEqualTo_(U,U) -> true()
26: _isNotEqualTo_(U,U') -> U41❆1_tt(U',U)
27: _isNotEqualTo_(U,U) -> false()
28: _or_(A,B) -> U51❆1_tt(A,B)
29: _xor_(A,A) -> false()
30: _xor_(false(),A) -> A
31: equal(X,X) -> tt()
32: if_then_else_fi(B,U,U') -> U61❆1_tt(B,U')
33: if_then_else_fi(true(),U,U') -> U71❆1_tt(U)
34: not_(A) -> _xor_(A,true())
35: not_(false()) -> true()
36: not_(true()) -> false()
37: U52(tt(),_2,_3) ->= U52❆1_tt(_2,_3)
38: U61(tt(),_2,_3) ->= U61❆1_tt(_2,_3)
39: U31(tt(),_2,_3) ->= U31❆1_tt(_2,_3)
40: U21(tt(),_2,_3) ->= U21❆1_tt(_2,_3)
41: U11(tt(),_3,_4,_5) ->= U11❆1_tt(_3,_4,_5)
42: U63(tt(),_2,_3) ->= U63❆1_tt(_2,_3)
43: U13(tt(),_3,_4,_5) ->= U13❆1_tt(_3,_4,_5)
44: U72(tt(),_1) ->= U72❆1_tt(_1)
45: U62(tt(),_2,_3) ->= U62❆1_tt(_2,_3)
46: U22(tt(),_2,_3) ->= U22❆1_tt(_2,_3)
47: U51(tt(),_2,_3) ->= U51❆1_tt(_2,_3)
48: U12(tt(),_3,_4,_5) ->= U12❆1_tt(_3,_4,_5)
49: U32(tt(),_2,_3) ->= U32❆1_tt(_2,_3)
50: U42(tt(),_2,_3) ->= U42❆1_tt(_2,_3)
51: U41(tt(),_2,_3) ->= U41❆1_tt(_2,_3)
52: U71(tt(),_1) ->= U71❆1_tt(_1)
Number of strict rules: 36
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #U12❆1_tt(A,B,C) -> #U13❆1_tt(A,B,C)
   #2: #U13(tt(),_3,_4,_5) ->? #U13❆1_tt(_3,_4,_5)
   #3: #U22(tt(),_2,_3) ->? #U22❆1_tt(_2,_3)
   #4: #U63(tt(),_2,_3) ->? #U63❆1_tt(_2,_3)
   #5: #U11(tt(),_3,_4,_5) ->? #U11❆1_tt(_3,_4,_5)
   #6: #U52(tt(),_2,_3) ->? #U52❆1_tt(_2,_3)
   #7: #U51(tt(),_2,_3) ->? #U51❆1_tt(_2,_3)
   #8: #_or_(x,_or_(y,z)) ->= #_or_(_or_(x,y),z)
   #9: #_or_(x,_or_(y,z)) ->= #_or_(x,y)
   #10: #U12(tt(),_3,_4,_5) ->? #U12❆1_tt(_3,_4,_5)
   #11: #U61(tt(),_2,_3) ->? #U61❆1_tt(_2,_3)
   #12: #U31❆1_tt(U',U) -> #U32❆1_tt(U',U)
   #13: #_xor_(x,_xor_(y,z)) ->= #_xor_(_xor_(x,y),z)
   #14: #_xor_(x,_xor_(y,z)) ->= #_xor_(x,y)
   #15: #U21(tt(),_2,_3) ->? #U21❆1_tt(_2,_3)
   #16: #U41(tt(),_2,_3) ->? #U41❆1_tt(_2,_3)
   #17: #U61❆1_tt(B,U') -> #U62❆1_tt(B,U')
   #18: #U41❆1_tt(U',U) -> #U42❆1_tt(U',U)
   #19: #U51❆1_tt(A,B) -> #U52❆1_tt(A,B)
   #20: #_isEqualTo_(U,U') -> #U31❆1_tt(U',U)
   #21: #_implies_(A,B) -> #U21❆1_tt(A,B)
   #22: #U62(tt(),_2,_3) ->? #U62❆1_tt(_2,_3)
   #23: #U52❆1_tt(A,B) -> #_xor_(_and_(A,B),_xor_(A,B))
   #24: #U52❆1_tt(A,B) -> #_and_(A,B)
   #25: #U52❆1_tt(A,B) -> #_xor_(A,B)
   #26: #U62❆1_tt(B,U') -> #U63❆1_tt(B,U')
   #27: #U32(tt(),_2,_3) ->? #U32❆1_tt(_2,_3)
   #28: #U71(tt(),_1) ->? #U71❆1_tt(_1)
   #29: #_and_(A,_xor_(B,C)) -> #U11❆1_tt(A,B,C)
   #30: #U32❆1_tt(U',U) -> #U33(equal(_isNotEqualTo_(U,U'),true()))
   #31: #U32❆1_tt(U',U) -> #equal(_isNotEqualTo_(U,U'),true())
   #32: #U32❆1_tt(U',U) -> #_isNotEqualTo_(U,U')
   #33: #U31(tt(),_2,_3) ->? #U31❆1_tt(_2,_3)
   #34: #U42❆1_tt(U',U) -> #if_then_else_fi(_isEqualTo_(U,U'),false(),true())
   #35: #U42❆1_tt(U',U) -> #_isEqualTo_(U,U')
   #36: #if_then_else_fi(true(),U,U') -> #U71❆1_tt(U)
   #37: #U22❆1_tt(A,B) -> #not_(_xor_(A,_and_(A,B)))
   #38: #U22❆1_tt(A,B) -> #_xor_(A,_and_(A,B))
   #39: #U22❆1_tt(A,B) -> #_and_(A,B)
   #40: #U72(tt(),_1) ->? #U72❆1_tt(_1)
   #41: #_or_(A,B) -> #U51❆1_tt(A,B)
   #42: #not_(A) -> #_xor_(A,true())
   #43: #U71❆1_tt(U) -> #U72❆1_tt(U)
   #44: #if_then_else_fi(B,U,U') -> #U61❆1_tt(B,U')
   #45: #_isNotEqualTo_(U,U') -> #U41❆1_tt(U',U)
   #46: #U13❆1_tt(A,B,C) -> #_xor_(_and_(A,B),_and_(A,C))
   #47: #U13❆1_tt(A,B,C) -> #_and_(A,B)
   #48: #U13❆1_tt(A,B,C) -> #_and_(A,C)
   #49: #U11❆1_tt(A,B,C) -> #U12❆1_tt(A,B,C)
   #50: #_and_(x,_and_(y,z)) ->= #_and_(_and_(x,y),z)
   #51: #_and_(x,_and_(y,z)) ->= #_and_(x,y)
   #52: #U63❆1_tt(B,U') -> #U64(equal(_isNotEqualTo_(B,true()),true()),U')
   #53: #U63❆1_tt(B,U') -> #equal(_isNotEqualTo_(B,true()),true())
   #54: #U63❆1_tt(B,U') -> #_isNotEqualTo_(B,true())
   #55: #U21❆1_tt(A,B) -> #U22❆1_tt(A,B)
   #56: #U42(tt(),_2,_3) ->? #U42❆1_tt(_2,_3)
Number of SCCs: 4, DPs: 22, edges: 36
	SCC { #13 #14 }
Removing DPs: only weak rules.
Number of SCCs: 3, DPs: 22, edges: 36
	SCC { #8 #9 }
Removing DPs: only weak rules.
Number of SCCs: 2, DPs: 22, edges: 36
	SCC { #1 #29 #47..51 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
