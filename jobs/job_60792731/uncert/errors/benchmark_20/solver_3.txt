Input TRS:
    AC symbols: plus times
    1: 0(S()) -> S()
    2: plus(S(),x) -> x
    3: plus(0(x),0(y)) -> 0(plus(x,y))
    4: plus(0(x),1(y)) -> 1(plus(x,y))
    5: plus(0(x),j(y)) -> j(plus(x,y))
    6: plus(1(x),1(y)) -> j(plus(1(S()),plus(x,y)))
    7: plus(j(x),j(y)) -> 1(plus(j(S()),plus(x,y)))
    8: plus(1(x),j(y)) -> 0(plus(x,y))
    9: opp(S()) -> S()
    10: opp(0(x)) -> 0(opp(x))
    11: opp(1(x)) -> j(opp(x))
    12: opp(j(x)) -> 1(opp(x))
    13: minus(x,y) -> plus(opp(y),x)
    14: times(S(),x) -> S()
    15: times(0(x),y) -> 0(times(x,y))
    16: times(1(x),y) -> plus(0(times(x,y)),y)
    17: times(j(x),y) -> minus(0(times(x,y)),y)
    18: sign(x) -> if_sign(x,S())
    19: if_sign(S(),x) -> x
    20: if_sign(0(x),y) -> if_sign(x,y)
    21: if_sign(1(x),y) -> if_sign(x,1(S()))
    22: if_sign(j(x),y) -> if_sign(x,j(S()))
    23: abs(x) -> if_abs(x,x,S())
    24: if_abs(0(x),y,z) -> if_abs(x,y,z)
    25: if_abs(1(x),y,z) -> if_abs(x,y,1(S()))
    26: if_abs(j(x),y,z) -> if_abs(x,y,j(S()))
    27: if_abs(S(),x,S()) -> S()
    28: if_abs(S(),x,1(S())) -> x
    29: if_abs(S(),x,j(S())) -> opp(x)
    30: min(x,y) -> if_min(minus(abs(y),abs(x)),x,y,S())
    31: min'(x,y) -> if_min(minus(abs(1(y)),abs(1(x))),x,y,S())
    32: min''(x,y) -> if_min(minus(abs(j(y)),abs(j(x))),x,y,S())
    33: if_min(0(x),y,z,u) -> if_min(x,y,z,u)
    34: if_min(1(x),y,z,u) -> if_min(x,y,z,1(S()))
    35: if_min(j(x),y,z,u) -> if_min(x,y,z,j(S()))
    36: if_min(S(),x,y,S()) -> x
    37: if_min(S(),x,y,1(S())) -> x
    38: if_min(S(),x,y,j(S())) -> y
Number of strict rules: 38
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if_abs(S(),x,j(S())) -> #opp(x)
   #2: #if_min(j(x),y,z,u) -> #if_min(x,y,z,j(S()))
   #3: #plus(1(x),1(y)) -> #plus(1(S()),plus(x,y))
   #4: #plus(1(x),1(y)) -> #plus(x,y)
   #5: #times(x,times(y,z)) ->= #times(times(x,y),z)
   #6: #times(x,times(y,z)) ->= #times(x,y)
   #7: #minus(x,y) -> #plus(opp(y),x)
   #8: #minus(x,y) -> #opp(y)
   #9: #opp(1(x)) -> #opp(x)
   #10: #if_abs(0(x),y,z) -> #if_abs(x,y,z)
   #11: #abs(x) -> #if_abs(x,x,S())
   #12: #opp(j(x)) -> #opp(x)
   #13: #min'(x,y) -> #if_min(minus(abs(1(y)),abs(1(x))),x,y,S())
   #14: #min'(x,y) -> #minus(abs(1(y)),abs(1(x)))
   #15: #min'(x,y) -> #abs(1(y))
   #16: #min'(x,y) -> #abs(1(x))
   #17: #min(x,y) -> #if_min(minus(abs(y),abs(x)),x,y,S())
   #18: #min(x,y) -> #minus(abs(y),abs(x))
   #19: #min(x,y) -> #abs(y)
   #20: #min(x,y) -> #abs(x)
   #21: #if_abs(1(x),y,z) -> #if_abs(x,y,1(S()))
   #22: #if_sign(0(x),y) -> #if_sign(x,y)
   #23: #plus(j(x),j(y)) -> #plus(j(S()),plus(x,y))
   #24: #plus(j(x),j(y)) -> #plus(x,y)
   #25: #plus(x,plus(y,z)) ->= #plus(plus(x,y),z)
   #26: #plus(x,plus(y,z)) ->= #plus(x,y)
   #27: #opp(0(x)) -> #0(opp(x))
   #28: #opp(0(x)) -> #opp(x)
   #29: #if_min(0(x),y,z,u) -> #if_min(x,y,z,u)
   #30: #plus(0(x),j(y)) -> #plus(x,y)
   #31: #if_sign(j(x),y) -> #if_sign(x,j(S()))
   #32: #if_min(1(x),y,z,u) -> #if_min(x,y,z,1(S()))
   #33: #times(j(x),y) -> #minus(0(times(x,y)),y)
   #34: #times(j(x),y) -> #0(times(x,y))
   #35: #times(j(x),y) -> #times(x,y)
   #36: #min''(x,y) -> #if_min(minus(abs(j(y)),abs(j(x))),x,y,S())
   #37: #min''(x,y) -> #minus(abs(j(y)),abs(j(x)))
   #38: #min''(x,y) -> #abs(j(y))
   #39: #min''(x,y) -> #abs(j(x))
   #40: #if_abs(j(x),y,z) -> #if_abs(x,y,j(S()))
   #41: #if_sign(1(x),y) -> #if_sign(x,1(S()))
   #42: #times(1(x),y) -> #plus(0(times(x,y)),y)
   #43: #times(1(x),y) -> #0(times(x,y))
   #44: #times(1(x),y) -> #times(x,y)
   #45: #plus(0(x),0(y)) -> #0(plus(x,y))
   #46: #plus(0(x),0(y)) -> #plus(x,y)
   #47: #plus(1(x),j(y)) -> #0(plus(x,y))
   #48: #plus(1(x),j(y)) -> #plus(x,y)
   #49: #times(0(x),y) -> #0(times(x,y))
   #50: #times(0(x),y) -> #times(x,y)
   #51: #plus(0(x),1(y)) -> #plus(x,y)
   #52: #sign(x) -> #if_sign(x,S())
Number of SCCs: 6, DPs: 27, edges: 161
	SCC { #9 #12 #28 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
#if_abs(x1,x2,x3)	weight: 0
     S()	weight: 0
 minus(x1,x2)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#plus(x1,x2)	weight: 0
if_abs(x1,x2,x3)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: x1
#min''(x1,x2)	weight: 0
  sign(x1)	weight: 0
#times(x1,x2)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
 times(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
if_sign(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
   opp(x1)	weight: 0
  plus(x1,x2)	weight: 0
   min(x1,x2)	weight: 0
#if_sign(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
#sign(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #9 #12 #28
Number of SCCs: 5, DPs: 24, edges: 152
	SCC { #22 #31 #41 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
#if_abs(x1,x2,x3)	weight: 0
     S()	weight: 0
 minus(x1,x2)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#plus(x1,x2)	weight: 0
if_abs(x1,x2,x3)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
#min''(x1,x2)	weight: 0
  sign(x1)	weight: 0
#times(x1,x2)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
 times(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
if_sign(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
   opp(x1)	weight: 0
  plus(x1,x2)	weight: 0
   min(x1,x2)	weight: 0
#if_sign(x1,x2)	weight: x1
if_min(x1,x2,x3,x4)	weight: 0
#sign(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #22 #31 #41
Number of SCCs: 4, DPs: 21, edges: 143
	SCC { #10 #21 #40 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
#if_abs(x1,x2,x3)	weight: x1
     S()	weight: 0
 minus(x1,x2)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#plus(x1,x2)	weight: 0
if_abs(x1,x2,x3)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
#min''(x1,x2)	weight: 0
  sign(x1)	weight: 0
#times(x1,x2)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
 times(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
if_sign(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
   opp(x1)	weight: 0
  plus(x1,x2)	weight: 0
   min(x1,x2)	weight: 0
#if_sign(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
#sign(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #10 #21 #40
Number of SCCs: 3, DPs: 18, edges: 134
	SCC { #2 #29 #32 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: (/ 1 2) + x1
#if_abs(x1,x2,x3)	weight: 0
     S()	weight: 0
 minus(x1,x2)	weight: 0
#if_min(x1,x2,x3,x4)	weight: x1
#plus(x1,x2)	weight: 0
if_abs(x1,x2,x3)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
#min''(x1,x2)	weight: 0
  sign(x1)	weight: 0
#times(x1,x2)	weight: 0
     0(x1)	weight: (/ 1 2) + x1
 times(x1,x2)	weight: 0
     j(x1)	weight: (/ 1 2) + x1
if_sign(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
   opp(x1)	weight: 0
  plus(x1,x2)	weight: 0
   min(x1,x2)	weight: 0
#if_sign(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
#sign(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #2 #29 #32
Number of SCCs: 2, DPs: 15, edges: 125
	SCC { #5 #6 #35 #44 #50 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... succeeded.
   #0(x1)	weight: 0
  min'(x1,x2)	weight: 0
     1(x1)	weight: max{0, x1}
#if_abs(x1,x2,x3)	weight: 0
     S()	weight: (/ 1 2)
 minus(x1,x2)	weight: max{0, x1, (/ 1 2) + x2}
#if_min(x1,x2,x3,x4)	weight: 0
#plus(x1,x2)	weight: 0
if_abs(x1,x2,x3)	weight: 0
 #min(x1,x2)	weight: 0
#min'(x1,x2)	weight: 0
 #abs(x1)	weight: 0
 min''(x1,x2)	weight: 0
   abs(x1)	weight: 0
 #opp(x1)	weight: 0
#min''(x1,x2)	weight: 0
  sign(x1)	weight: 0
#times(x1,x2)	weight: x1 + x2
     0(x1)	weight: max{0, x1}
 times(x1,x2)	weight: (/ 1 2) + x1 + x2
     j(x1)	weight: max{0, x1}
if_sign(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
   opp(x1)	weight: (max (/ 1 2) 0)
  plus(x1,x2)	weight: max{(/ 1 2), max{x2, x1}}
   min(x1,x2)	weight: 0
#if_sign(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
#sign(x1)	weight: 0
    Usable rules: { 1..17 39 40 }
    Removed DPs: #6
Number of SCCs: 2, DPs: 14, edges: 116
	SCC { #5 #35 #44 #50 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
