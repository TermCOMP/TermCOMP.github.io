Input TRS:
    AC symbols: plus union mult
    1: union(X,empty()) -> X
    2: union(empty(),X) -> X
    3: 0(z()) -> z()
    4: U101(tt(),X,Y) -> 0(mult(X,Y))
    5: U11(tt(),V1) -> U12(isBin(V1))
    6: U111(tt(),X,Y) -> plus(0(mult(X,Y)),Y)
    7: U12(tt()) -> tt()
    8: U121(tt(),X) -> X
    9: U131(tt(),X,Y) -> 0(plus(X,Y))
    10: U141(tt(),X,Y) -> 1(plus(X,Y))
    11: U151(tt(),X,Y) -> 0(plus(plus(X,Y),1(z())))
    12: U161(tt(),X) -> X
    13: U171(tt(),A,B) -> mult(prod(A),prod(B))
    14: U181(tt(),X) -> X
    15: U191(tt(),A,B) -> plus(sum(A),sum(B))
    16: U21(tt(),V1,V2) -> U22(isBag(V1),V2)
    17: U22(tt(),V2) -> U23(isBag(V2))
    18: U23(tt()) -> tt()
    19: U31(tt(),V1) -> U32(isBin(V1))
    20: U32(tt()) -> tt()
    21: U41(tt(),V1) -> U42(isBin(V1))
    22: U42(tt()) -> tt()
    23: U51(tt(),V1,V2) -> U52(isBin(V1),V2)
    24: U52(tt(),V2) -> U53(isBin(V2))
    25: U53(tt()) -> tt()
    26: U61(tt(),V1,V2) -> U62(isBin(V1),V2)
    27: U62(tt(),V2) -> U63(isBin(V2))
    28: U63(tt()) -> tt()
    29: U71(tt(),V1) -> U72(isBag(V1))
    30: U72(tt()) -> tt()
    31: U81(tt(),V1) -> U82(isBag(V1))
    32: U82(tt()) -> tt()
    33: U91(tt()) -> z()
    34: and(tt(),X) -> X
    35: isBag(empty()) -> tt()
    36: isBag(singl(V1)) -> U11(isBinKind(V1),V1)
    37: isBag(union(V1,V2)) -> U21(and(isBagKind(V1),isBagKind(V2)),V1,V2)
    38: isBagKind(empty()) -> tt()
    39: isBagKind(singl(V1)) -> isBinKind(V1)
    40: isBagKind(union(V1,V2)) -> and(isBagKind(V1),isBagKind(V2))
    41: isBin(z()) -> tt()
    42: isBin(0(V1)) -> U31(isBinKind(V1),V1)
    43: isBin(1(V1)) -> U41(isBinKind(V1),V1)
    44: isBin(mult(V1,V2)) -> U51(and(isBinKind(V1),isBinKind(V2)),V1,V2)
    45: isBin(plus(V1,V2)) -> U61(and(isBinKind(V1),isBinKind(V2)),V1,V2)
    46: isBin(prod(V1)) -> U71(isBagKind(V1),V1)
    47: isBin(sum(V1)) -> U81(isBagKind(V1),V1)
    48: isBinKind(z()) -> tt()
    49: isBinKind(0(V1)) -> isBinKind(V1)
    50: isBinKind(1(V1)) -> isBinKind(V1)
    51: isBinKind(mult(V1,V2)) -> and(isBinKind(V1),isBinKind(V2))
    52: isBinKind(plus(V1,V2)) -> and(isBinKind(V1),isBinKind(V2))
    53: isBinKind(prod(V1)) -> isBagKind(V1)
    54: isBinKind(sum(V1)) -> isBagKind(V1)
    55: mult(z(),X) -> U91(and(isBin(X),isBinKind(X)))
    56: mult(0(X),Y) -> U101(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
    57: mult(1(X),Y) -> U111(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
    58: plus(z(),X) -> U121(and(isBin(X),isBinKind(X)),X)
    59: plus(0(X),0(Y)) -> U131(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
    60: plus(0(X),1(Y)) -> U141(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
    61: plus(1(X),1(Y)) -> U151(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
    62: prod(empty()) -> 1(z())
    63: prod(singl(X)) -> U161(and(isBin(X),isBinKind(X)),X)
    64: prod(union(A,B)) -> U171(and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B))),A,B)
    65: sum(empty()) -> 0(z())
    66: sum(singl(X)) -> U181(and(isBin(X),isBinKind(X)),X)
    67: sum(union(A,B)) -> U191(and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B))),A,B)
Number of strict rules: 67
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #isBin(1(V1)) -> #U41(isBinKind(V1),V1)
   #2: #isBin(1(V1)) -> #isBinKind(V1)
   #3: #U71(tt(),V1) -> #U72(isBag(V1))
   #4: #U71(tt(),V1) -> #isBag(V1)
   #5: #sum(singl(X)) -> #U181(and(isBin(X),isBinKind(X)),X)
   #6: #sum(singl(X)) -> #and(isBin(X),isBinKind(X))
   #7: #sum(singl(X)) -> #isBin(X)
   #8: #sum(singl(X)) -> #isBinKind(X)
   #9: #isBin(prod(V1)) -> #U71(isBagKind(V1),V1)
   #10: #isBin(prod(V1)) -> #isBagKind(V1)
   #11: #isBin(0(V1)) -> #U31(isBinKind(V1),V1)
   #12: #isBin(0(V1)) -> #isBinKind(V1)
   #13: #isBag(union(V1,V2)) -> #U21(and(isBagKind(V1),isBagKind(V2)),V1,V2)
   #14: #isBag(union(V1,V2)) -> #and(isBagKind(V1),isBagKind(V2))
   #15: #isBag(union(V1,V2)) -> #isBagKind(V1)
   #16: #isBag(union(V1,V2)) -> #isBagKind(V2)
   #17: #isBin(sum(V1)) -> #U81(isBagKind(V1),V1)
   #18: #isBin(sum(V1)) -> #isBagKind(V1)
   #19: #isBinKind(prod(V1)) -> #isBagKind(V1)
   #20: #plus(z(),X) -> #U121(and(isBin(X),isBinKind(X)),X)
   #21: #plus(z(),X) -> #and(isBin(X),isBinKind(X))
   #22: #plus(z(),X) -> #isBin(X)
   #23: #plus(z(),X) -> #isBinKind(X)
   #24: #plus(1(X),1(Y)) -> #U151(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
   #25: #plus(1(X),1(Y)) -> #and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y)))
   #26: #plus(1(X),1(Y)) -> #and(isBin(X),isBinKind(X))
   #27: #plus(1(X),1(Y)) -> #isBin(X)
   #28: #plus(1(X),1(Y)) -> #isBinKind(X)
   #29: #plus(1(X),1(Y)) -> #and(isBin(Y),isBinKind(Y))
   #30: #plus(1(X),1(Y)) -> #isBin(Y)
   #31: #plus(1(X),1(Y)) -> #isBinKind(Y)
   #32: #U111(tt(),X,Y) -> #plus(0(mult(X,Y)),Y)
   #33: #U111(tt(),X,Y) -> #0(mult(X,Y))
   #34: #U111(tt(),X,Y) -> #mult(X,Y)
   #35: #plus(0(X),0(Y)) -> #U131(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
   #36: #plus(0(X),0(Y)) -> #and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y)))
   #37: #plus(0(X),0(Y)) -> #and(isBin(X),isBinKind(X))
   #38: #plus(0(X),0(Y)) -> #isBin(X)
   #39: #plus(0(X),0(Y)) -> #isBinKind(X)
   #40: #plus(0(X),0(Y)) -> #and(isBin(Y),isBinKind(Y))
   #41: #plus(0(X),0(Y)) -> #isBin(Y)
   #42: #plus(0(X),0(Y)) -> #isBinKind(Y)
   #43: #mult(z(),X) -> #U91(and(isBin(X),isBinKind(X)))
   #44: #mult(z(),X) -> #and(isBin(X),isBinKind(X))
   #45: #mult(z(),X) -> #isBin(X)
   #46: #mult(z(),X) -> #isBinKind(X)
   #47: #sum(union(A,B)) -> #U191(and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B))),A,B)
   #48: #sum(union(A,B)) -> #and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B)))
   #49: #sum(union(A,B)) -> #and(isBag(A),isBagKind(A))
   #50: #sum(union(A,B)) -> #isBag(A)
   #51: #sum(union(A,B)) -> #isBagKind(A)
   #52: #sum(union(A,B)) -> #and(isBag(B),isBagKind(B))
   #53: #sum(union(A,B)) -> #isBag(B)
   #54: #sum(union(A,B)) -> #isBagKind(B)
   #55: #isBagKind(union(V1,V2)) -> #and(isBagKind(V1),isBagKind(V2))
   #56: #isBagKind(union(V1,V2)) -> #isBagKind(V1)
   #57: #isBagKind(union(V1,V2)) -> #isBagKind(V2)
   #58: #isBinKind(mult(V1,V2)) -> #and(isBinKind(V1),isBinKind(V2))
   #59: #isBinKind(mult(V1,V2)) -> #isBinKind(V1)
   #60: #isBinKind(mult(V1,V2)) -> #isBinKind(V2)
   #61: #U171(tt(),A,B) -> #mult(prod(A),prod(B))
   #62: #U171(tt(),A,B) -> #prod(A)
   #63: #U171(tt(),A,B) -> #prod(B)
   #64: #U131(tt(),X,Y) -> #0(plus(X,Y))
   #65: #U131(tt(),X,Y) -> #plus(X,Y)
   #66: #U151(tt(),X,Y) -> #0(plus(plus(X,Y),1(z())))
   #67: #U151(tt(),X,Y) -> #plus(plus(X,Y),1(z()))
   #68: #U151(tt(),X,Y) -> #plus(X,Y)
   #69: #mult(1(X),Y) -> #U111(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
   #70: #mult(1(X),Y) -> #and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y)))
   #71: #mult(1(X),Y) -> #and(isBin(X),isBinKind(X))
   #72: #mult(1(X),Y) -> #isBin(X)
   #73: #mult(1(X),Y) -> #isBinKind(X)
   #74: #mult(1(X),Y) -> #and(isBin(Y),isBinKind(Y))
   #75: #mult(1(X),Y) -> #isBin(Y)
   #76: #mult(1(X),Y) -> #isBinKind(Y)
   #77: #U52(tt(),V2) -> #U53(isBin(V2))
   #78: #U52(tt(),V2) -> #isBin(V2)
   #79: #mult(x,mult(y,z)) ->= #mult(mult(x,y),z)
   #80: #mult(x,mult(y,z)) ->= #mult(x,y)
   #81: #U51(tt(),V1,V2) -> #U52(isBin(V1),V2)
   #82: #U51(tt(),V1,V2) -> #isBin(V1)
   #83: #isBin(plus(V1,V2)) -> #U61(and(isBinKind(V1),isBinKind(V2)),V1,V2)
   #84: #isBin(plus(V1,V2)) -> #and(isBinKind(V1),isBinKind(V2))
   #85: #isBin(plus(V1,V2)) -> #isBinKind(V1)
   #86: #isBin(plus(V1,V2)) -> #isBinKind(V2)
   #87: #union(x,union(y,z)) ->= #union(union(x,y),z)
   #88: #union(x,union(y,z)) ->= #union(x,y)
   #89: #U81(tt(),V1) -> #U82(isBag(V1))
   #90: #U81(tt(),V1) -> #isBag(V1)
   #91: #mult(0(X),Y) -> #U101(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
   #92: #mult(0(X),Y) -> #and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y)))
   #93: #mult(0(X),Y) -> #and(isBin(X),isBinKind(X))
   #94: #mult(0(X),Y) -> #isBin(X)
   #95: #mult(0(X),Y) -> #isBinKind(X)
   #96: #mult(0(X),Y) -> #and(isBin(Y),isBinKind(Y))
   #97: #mult(0(X),Y) -> #isBin(Y)
   #98: #mult(0(X),Y) -> #isBinKind(Y)
   #99: #isBinKind(plus(V1,V2)) -> #and(isBinKind(V1),isBinKind(V2))
   #100: #isBinKind(plus(V1,V2)) -> #isBinKind(V1)
   #101: #isBinKind(plus(V1,V2)) -> #isBinKind(V2)
   #102: #isBinKind(0(V1)) -> #isBinKind(V1)
   #103: #isBagKind(singl(V1)) -> #isBinKind(V1)
   #104: #U141(tt(),X,Y) -> #plus(X,Y)
   #105: #prod(union(A,B)) -> #U171(and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B))),A,B)
   #106: #prod(union(A,B)) -> #and(and(isBag(A),isBagKind(A)),and(isBag(B),isBagKind(B)))
   #107: #prod(union(A,B)) -> #and(isBag(A),isBagKind(A))
   #108: #prod(union(A,B)) -> #isBag(A)
   #109: #prod(union(A,B)) -> #isBagKind(A)
   #110: #prod(union(A,B)) -> #and(isBag(B),isBagKind(B))
   #111: #prod(union(A,B)) -> #isBag(B)
   #112: #prod(union(A,B)) -> #isBagKind(B)
   #113: #U11(tt(),V1) -> #U12(isBin(V1))
   #114: #U11(tt(),V1) -> #isBin(V1)
   #115: #isBin(mult(V1,V2)) -> #U51(and(isBinKind(V1),isBinKind(V2)),V1,V2)
   #116: #isBin(mult(V1,V2)) -> #and(isBinKind(V1),isBinKind(V2))
   #117: #isBin(mult(V1,V2)) -> #isBinKind(V1)
   #118: #isBin(mult(V1,V2)) -> #isBinKind(V2)
   #119: #sum(empty()) -> #0(z())
   #120: #U62(tt(),V2) -> #U63(isBin(V2))
   #121: #U62(tt(),V2) -> #isBin(V2)
   #122: #plus(0(X),1(Y)) -> #U141(and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y))),X,Y)
   #123: #plus(0(X),1(Y)) -> #and(and(isBin(X),isBinKind(X)),and(isBin(Y),isBinKind(Y)))
   #124: #plus(0(X),1(Y)) -> #and(isBin(X),isBinKind(X))
   #125: #plus(0(X),1(Y)) -> #isBin(X)
   #126: #plus(0(X),1(Y)) -> #isBinKind(X)
   #127: #plus(0(X),1(Y)) -> #and(isBin(Y),isBinKind(Y))
   #128: #plus(0(X),1(Y)) -> #isBin(Y)
   #129: #plus(0(X),1(Y)) -> #isBinKind(Y)
   #130: #U22(tt(),V2) -> #U23(isBag(V2))
   #131: #U22(tt(),V2) -> #isBag(V2)
   #132: #U31(tt(),V1) -> #U32(isBin(V1))
   #133: #U31(tt(),V1) -> #isBin(V1)
   #134: #prod(singl(X)) -> #U161(and(isBin(X),isBinKind(X)),X)
   #135: #prod(singl(X)) -> #and(isBin(X),isBinKind(X))
   #136: #prod(singl(X)) -> #isBin(X)
   #137: #prod(singl(X)) -> #isBinKind(X)
   #138: #U61(tt(),V1,V2) -> #U62(isBin(V1),V2)
   #139: #U61(tt(),V1,V2) -> #isBin(V1)
   #140: #plus(x,plus(y,z)) ->= #plus(plus(x,y),z)
   #141: #plus(x,plus(y,z)) ->= #plus(x,y)
   #142: #isBag(singl(V1)) -> #U11(isBinKind(V1),V1)
   #143: #isBag(singl(V1)) -> #isBinKind(V1)
   #144: #U41(tt(),V1) -> #U42(isBin(V1))
   #145: #U41(tt(),V1) -> #isBin(V1)
   #146: #U21(tt(),V1,V2) -> #U22(isBag(V1),V2)
   #147: #U21(tt(),V1,V2) -> #isBag(V1)
   #148: #isBinKind(sum(V1)) -> #isBagKind(V1)
   #149: #U191(tt(),A,B) -> #plus(sum(A),sum(B))
   #150: #U191(tt(),A,B) -> #sum(A)
   #151: #U191(tt(),A,B) -> #sum(B)
   #152: #U101(tt(),X,Y) -> #0(mult(X,Y))
   #153: #U101(tt(),X,Y) -> #mult(X,Y)
   #154: #isBinKind(1(V1)) -> #isBinKind(V1)
Number of SCCs: 7, DPs: 56, edges: 196
	SCC { #87 #88 }
Removing DPs: only weak rules.
Number of SCCs: 6, DPs: 56, edges: 196
	SCC { #47 #150 #151 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
 #U72(x1)	weight: 0
 #U32(x1)	weight: 0
#isBag(x1)	weight: 0
   U21(x1,x2,x3)	weight: x1 + x2
     1(x1)	weight: (/ 1 8)
  prod(x1)	weight: (/ 1 8)
  U161(x1,x2)	weight: 0
   U11(x1,x2)	weight: (/ 1 8) + x1
     z()	weight: 0
#U181(x1,x2)	weight: 0
#prod(x1)	weight: 0
   U42(x1)	weight: (/ 1 4) + x1
   U91(x1)	weight: 0
#U101(x1,x2,x3)	weight: 0
 #U82(x1)	weight: 0
   U71(x1,x2)	weight: x1
#isBagKind(x1)	weight: 0
 #U81(x1,x2)	weight: 0
   and(x1,x2)	weight: (/ 1 2)
  U131(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
  U101(x1,x2,x3)	weight: 0
  U111(x1,x2,x3)	weight: 0
 #U23(x1)	weight: 0
 #U53(x1)	weight: 0
#U121(x1,x2)	weight: 0
   U23(x1)	weight: x1
   U63(x1)	weight: (/ 1 4) + x1
#U131(x1,x2,x3)	weight: 0
   U72(x1)	weight: (/ 1 8)
 #U52(x1,x2)	weight: 0
   U12(x1)	weight: (/ 1 8) + x1
   sum(x1)	weight: (/ 1 8) + x1
  mult(x1,x2)	weight: (/ 1 8) + x1 + x2
isBagKind(x1)	weight: (/ 3 8)
isBinKind(x1)	weight: (/ 1 8) + x1
 #U42(x1)	weight: 0
 isBin(x1)	weight: (/ 1 8)
#U141(x1,x2,x3)	weight: 0
 #U12(x1)	weight: 0
  U141(x1,x2,x3)	weight: 0
#U171(x1,x2,x3)	weight: 0
 #U62(x1,x2)	weight: 0
#isBinKind(x1)	weight: 0
     0(x1)	weight: (/ 1 8)
  U191(x1,x2,x3)	weight: 0
#isBin(x1)	weight: 0
  U171(x1,x2,x3)	weight: 0
 union(x1,x2)	weight: (/ 1 4) + x1 + x2
   U62(x1,x2)	weight: (/ 1 4) + x1 + x2
 #U63(x1)	weight: 0
  U151(x1,x2,x3)	weight: 0
#U111(x1,x2,x3)	weight: 0
   U32(x1)	weight: (/ 1 4)
 singl(x1)	weight: (/ 1 8)
   U52(x1,x2)	weight: (/ 1 8) + x2
  plus(x1,x2)	weight: (/ 1 8) + x1 + x2
   U61(x1,x2,x3)	weight: (/ 1 4)
 #U51(x1,x2,x3)	weight: 0
 #U11(x1,x2)	weight: 0
   U31(x1,x2)	weight: (/ 1 8) + x1
 #U41(x1,x2)	weight: 0
#U191(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
 empty()	weight: 0
 #U21(x1,x2,x3)	weight: 0
   U81(x1,x2)	weight: (/ 1 4) + x2
   U82(x1)	weight: (/ 3 8)
 #U22(x1,x2)	weight: 0
    tt()	weight: 0
 #U71(x1,x2)	weight: 0
#U151(x1,x2,x3)	weight: 0
 isBag(x1)	weight: (/ 1 8)
   U22(x1,x2)	weight: x1 + x2
   U51(x1,x2,x3)	weight: x1
#U161(x1,x2)	weight: 0
 #sum(x1)	weight: x1
   U53(x1)	weight: (/ 1 4)
   U41(x1,x2)	weight: (/ 1 4) + x2
 #U31(x1,x2)	weight: 0
 #and(x1,x2)	weight: 0
#union(x1,x2)	weight: 0
 #U91(x1)	weight: 0
#mult(x1,x2)	weight: 0
  U121(x1,x2)	weight: 0
 #U61(x1,x2,x3)	weight: 0
  U181(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #47 #150 #151
Number of SCCs: 5, DPs: 53, edges: 192
	SCC { #62 #63 #105 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
 #U72(x1)	weight: 0
 #U32(x1)	weight: 0
#isBag(x1)	weight: 0
   U21(x1,x2,x3)	weight: x1 + x2
     1(x1)	weight: (/ 1 8)
  prod(x1)	weight: (/ 1 8)
  U161(x1,x2)	weight: 0
   U11(x1,x2)	weight: (/ 1 8) + x1
     z()	weight: 0
#U181(x1,x2)	weight: 0
#prod(x1)	weight: x1
   U42(x1)	weight: (/ 1 4) + x1
   U91(x1)	weight: 0
#U101(x1,x2,x3)	weight: 0
 #U82(x1)	weight: 0
   U71(x1,x2)	weight: x1
#isBagKind(x1)	weight: 0
 #U81(x1,x2)	weight: 0
   and(x1,x2)	weight: (/ 1 2)
  U131(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
  U101(x1,x2,x3)	weight: 0
  U111(x1,x2,x3)	weight: 0
 #U23(x1)	weight: 0
 #U53(x1)	weight: 0
#U121(x1,x2)	weight: 0
   U23(x1)	weight: x1
   U63(x1)	weight: (/ 1 4) + x1
#U131(x1,x2,x3)	weight: 0
   U72(x1)	weight: (/ 1 8)
 #U52(x1,x2)	weight: 0
   U12(x1)	weight: (/ 1 8) + x1
   sum(x1)	weight: (/ 1 8) + x1
  mult(x1,x2)	weight: (/ 1 8) + x1 + x2
isBagKind(x1)	weight: (/ 3 8)
isBinKind(x1)	weight: (/ 1 8) + x1
 #U42(x1)	weight: 0
 isBin(x1)	weight: (/ 1 8)
#U141(x1,x2,x3)	weight: 0
 #U12(x1)	weight: 0
  U141(x1,x2,x3)	weight: 0
#U171(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
 #U62(x1,x2)	weight: 0
#isBinKind(x1)	weight: 0
     0(x1)	weight: (/ 1 8)
  U191(x1,x2,x3)	weight: 0
#isBin(x1)	weight: 0
  U171(x1,x2,x3)	weight: 0
 union(x1,x2)	weight: (/ 1 4) + x1 + x2
   U62(x1,x2)	weight: (/ 1 4) + x1 + x2
 #U63(x1)	weight: 0
  U151(x1,x2,x3)	weight: 0
#U111(x1,x2,x3)	weight: 0
   U32(x1)	weight: (/ 1 4)
 singl(x1)	weight: (/ 1 8)
   U52(x1,x2)	weight: (/ 1 8) + x2
  plus(x1,x2)	weight: (/ 1 8) + x1 + x2
   U61(x1,x2,x3)	weight: (/ 1 4)
 #U51(x1,x2,x3)	weight: 0
 #U11(x1,x2)	weight: 0
   U31(x1,x2)	weight: (/ 1 8) + x1
 #U41(x1,x2)	weight: 0
#U191(x1,x2,x3)	weight: (/ 1 8)
 empty()	weight: 0
 #U21(x1,x2,x3)	weight: 0
   U81(x1,x2)	weight: (/ 1 4) + x2
   U82(x1)	weight: (/ 3 8)
 #U22(x1,x2)	weight: 0
    tt()	weight: 0
 #U71(x1,x2)	weight: 0
#U151(x1,x2,x3)	weight: 0
 isBag(x1)	weight: (/ 1 8)
   U22(x1,x2)	weight: x1 + x2
   U51(x1,x2,x3)	weight: x1
#U161(x1,x2)	weight: 0
 #sum(x1)	weight: 0
   U53(x1)	weight: (/ 1 4)
   U41(x1,x2)	weight: (/ 1 4) + x2
 #U31(x1,x2)	weight: 0
 #and(x1,x2)	weight: 0
#union(x1,x2)	weight: 0
 #U91(x1)	weight: 0
#mult(x1,x2)	weight: 0
  U121(x1,x2)	weight: 0
 #U61(x1,x2,x3)	weight: 0
  U181(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #62 #63 #105
Number of SCCs: 4, DPs: 50, edges: 188
	SCC { #19 #56 #57 #59 #60 #100..103 #148 #154 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0(x1)	weight: 0
 #U72(x1)	weight: 0
 #U32(x1)	weight: 0
#isBag(x1)	weight: 0
   U21(x1,x2,x3)	weight: x1 + x2
     1(x1)	weight: (/ 1 8) + x1
  prod(x1)	weight: (/ 1 8) + x1
  U161(x1,x2)	weight: 0
   U11(x1,x2)	weight: (/ 1 8) + x1
     z()	weight: 0
#U181(x1,x2)	weight: 0
#prod(x1)	weight: 0
   U42(x1)	weight: (/ 1 4) + x1
   U91(x1)	weight: 0
#U101(x1,x2,x3)	weight: 0
 #U82(x1)	weight: 0
   U71(x1,x2)	weight: x1
#isBagKind(x1)	weight: x1
 #U81(x1,x2)	weight: 0
   and(x1,x2)	weight: (/ 1 2)
  U131(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
  U101(x1,x2,x3)	weight: 0
  U111(x1,x2,x3)	weight: 0
 #U23(x1)	weight: 0
 #U53(x1)	weight: 0
#U121(x1,x2)	weight: 0
   U23(x1)	weight: x1
   U63(x1)	weight: (/ 1 4) + x1
#U131(x1,x2,x3)	weight: 0
   U72(x1)	weight: (/ 1 8)
 #U52(x1,x2)	weight: 0
   U12(x1)	weight: (/ 1 8) + x1
   sum(x1)	weight: (/ 1 8) + x1
  mult(x1,x2)	weight: (/ 1 8) + x1 + x2
isBagKind(x1)	weight: (/ 3 8)
isBinKind(x1)	weight: (/ 1 8) + x1
 #U42(x1)	weight: 0
 isBin(x1)	weight: (/ 1 8)
#U141(x1,x2,x3)	weight: 0
 #U12(x1)	weight: 0
  U141(x1,x2,x3)	weight: 0
#U171(x1,x2,x3)	weight: (/ 1 8)
 #U62(x1,x2)	weight: 0
#isBinKind(x1)	weight: x1
     0(x1)	weight: (/ 1 8) + x1
  U191(x1,x2,x3)	weight: 0
#isBin(x1)	weight: 0
  U171(x1,x2,x3)	weight: 0
 union(x1,x2)	weight: (/ 1 4) + x1 + x2
   U62(x1,x2)	weight: (/ 1 4) + x1 + x2
 #U63(x1)	weight: 0
  U151(x1,x2,x3)	weight: 0
#U111(x1,x2,x3)	weight: 0
   U32(x1)	weight: (/ 1 4)
 singl(x1)	weight: (/ 1 8) + x1
   U52(x1,x2)	weight: (/ 1 8) + x2
  plus(x1,x2)	weight: (/ 1 8) + x1 + x2
   U61(x1,x2,x3)	weight: (/ 1 4)
 #U51(x1,x2,x3)	weight: 0
 #U11(x1,x2)	weight: 0
   U31(x1,x2)	weight: (/ 1 8) + x1
 #U41(x1,x2)	weight: 0
#U191(x1,x2,x3)	weight: (/ 1 8)
 empty()	weight: 0
 #U21(x1,x2,x3)	weight: 0
   U81(x1,x2)	weight: (/ 1 4) + x2
   U82(x1)	weight: (/ 3 8)
 #U22(x1,x2)	weight: 0
    tt()	weight: 0
 #U71(x1,x2)	weight: 0
#U151(x1,x2,x3)	weight: 0
 isBag(x1)	weight: (/ 1 8)
   U22(x1,x2)	weight: x1 + x2
   U51(x1,x2,x3)	weight: x1
#U161(x1,x2)	weight: 0
 #sum(x1)	weight: 0
   U53(x1)	weight: (/ 1 4)
   U41(x1,x2)	weight: (/ 1 4) + x2
 #U31(x1,x2)	weight: 0
 #and(x1,x2)	weight: 0
#union(x1,x2)	weight: 0
 #U91(x1)	weight: 0
#mult(x1,x2)	weight: 0
  U121(x1,x2)	weight: 0
 #U61(x1,x2,x3)	weight: 0
  U181(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #19 #56 #57 #59 #60 #100..103 #148 #154
Number of SCCs: 3, DPs: 39, edges: 120
	SCC { #34 #69 #79 #80 #91 #153 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
