YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XryhN.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 56 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 563 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 44 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 1 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/XryhN.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/XryhN.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		%8 = load %2
		store 0, %8
		%9 = load %3
		store 0, %9
		br %10
	10:
		%11 = load %2
		%12 = load %11
		%13 = icmp sgt %12 10
		br %13, %14, %15
	14:
		br %22
	15:
		%16 = load %2
		%17 = load %16
		%18 = add i32 %17, 1
		store %18, %16
		%19 = load %3
		%20 = load %19
		%21 = add i32 %20, 1
		store %21, %19
		br %10
	22:
		%23 = load %3
		%24 = load %23
		ret %24


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_241(v93, v94, v95, v96, v97, v98, 0, v100, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) -> f_242(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) :|: 0 = 0
f_242(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) -> f_244(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) :|: v100 <= 10 && v98 <= 9
f_244(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) -> f_246(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) :|: 0 = 0
f_246(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) -> f_248(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) :|: TRUE
f_248(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) -> f_250(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) :|: 0 = 0
f_250(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) -> f_252(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) :|: 0 = 0
f_252(v93, v94, v95, v96, v97, v100, 0, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8) -> f_254(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) :|: v106 = 1 + v100 && 2 <= v106 && v106 <= 11
f_254(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) -> f_255(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) :|: TRUE
f_255(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) -> f_256(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) :|: 0 = 0
f_256(v93, v94, v95, v96, v97, v100, 0, v106, v98, v101, v102, v103, v104, v105, 3, 7, 1, 9, 10, 4, 8, 2, 11) -> f_257(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) :|: 0 = 0
f_257(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) -> f_258(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) :|: v106 = 1 + v100
f_258(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) -> f_259(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) :|: TRUE
f_259(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) -> f_260(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) :|: TRUE
f_260(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 10, 4, 8, 2, 11) -> f_240(v93, v94, v95, v96, v97, v100, 0, v106, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) :|: TRUE
f_240(v93, v94, v95, v96, v97, v98, 0, v100, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) -> f_241(v93, v94, v95, v96, v97, v98, 0, v100, v101, v102, v103, v104, v105, 3, 7, 1, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_241(v93:0, v94:0, v95:0, v96:0, v97:0, v98:0, 0, v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 3, 7, 1, 4, 8) -> f_241(v93:0, v94:0, v95:0, v96:0, v97:0, v100:0, 0, 1 + v100:0, v101:0, v102:0, v103:0, v104:0, v105:0, 3, 7, 1, 4, 8) :|: v98:0 < 10 && v100:0 < 11 && v100:0 > 0
Filtered unneeded arguments:
   f_241(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_241(x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_241(v98:0, v100:0) -> f_241(v100:0, 1 + v100:0) :|: v100:0 < 11 && v100:0 > 0 && v98:0 < 10

----------------------------------------

(8)
Obligation:
Rules:
f_241(v98:0, v100:0) -> f_241(v100:0, 1 + v100:0) :|: v100:0 < 11 && v100:0 > 0 && v98:0 < 10

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_241(v98:0:0, v100:0:0) -> f_241(v100:0:0, 1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 > 0 && v98:0:0 < 10

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_241 ] = -1*f_241_2

The following rules are decreasing:
f_241(v98:0:0, v100:0:0) -> f_241(v100:0:0, 1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 > 0 && v98:0:0 < 10

The following rules are bounded:
f_241(v98:0:0, v100:0:0) -> f_241(v100:0:0, 1 + v100:0:0) :|: v100:0:0 < 11 && v100:0:0 > 0 && v98:0:0 < 10


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
