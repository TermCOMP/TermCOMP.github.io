YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HLgRT.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 500 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 12 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 11 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 7 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/HLgRT.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/HLgRT.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		br %7
	7:
		%8 = load %2
		%9 = icmp sge %8 0
		br %9, %13, %10
	10:
		%11 = load %3
		%12 = icmp sge %11 0
		br %13
	13:
		%14 = phi [1, %7], [%12, %10]
		br %14, %15, %21
	15:
		%16 = load %2
		store %16, %4
		%17 = load %3
		%18 = sub i32 %17, 1
		store %18, %2
		%19 = load %4
		%20 = sub i32 %19, 1
		store %20, %3
		br %7
	21:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_237(v405, v406, v407, v408, v409, v410, v411, 0, 1, v414, v415, v416, v417, v418, v419, v420, 3, 4) -> f_240(v405, v406, v407, v408, v409, v410, v411, 0, 1, v415, v414, v416, v417, v418, v419, v420, 3, 4) :|: 0 = 0
f_240(v405, v406, v407, v408, v409, v410, v411, 0, 1, v415, v414, v416, v417, v418, v419, v420, 3, 4) -> f_242(v405, v406, v407, v408, v409, v410, v411, 0, 1, v415, v414, v416, v417, v418, v419, v420, 3, 4) :|: TRUE
f_242(v405, v406, v407, v408, v409, v410, v411, 0, 1, v415, v414, v416, v417, v418, v419, v420, 3, 4) -> f_243(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v414, v417, v418, v419, v420, 3, 4) :|: 0 = 0
f_243(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v414, v417, v418, v419, v420, 3, 4) -> f_244(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v414, v417, v418, v419, v420, 3, 4) :|: 1 + v556 = v416 && 0 <= 1 + v556
f_244(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v414, v417, v418, v419, v420, 3, 4) -> f_245(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v414, v417, v418, v419, v420, 3, 4) :|: TRUE
f_245(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v414, v417, v418, v419, v420, 3, 4) -> f_246(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v417, v418, v419, v420, 3, 4) :|: 0 = 0
f_246(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v417, v418, v419, v420, 3, 4) -> f_247(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) :|: 1 + v558 = v411 && 2 + v558 <= 0
f_247(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) -> f_248(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) :|: TRUE
f_248(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) -> f_249(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) :|: TRUE
f_249(v405, v406, v407, v408, v409, v410, v411, 0, 1, v416, v556, v558, v417, v418, v419, v420, 3, 4, 2) -> f_250(v405, v406, v407, v408, v409, v410, v411, 0, v416, 1, v556, v558, v417, v418, v419, v420, 3, 2, 4) :|: TRUE
f_250(v560, v561, v562, v563, v564, v565, v566, 0, v568, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_251(v560, v561, v562, v563, v564, v565, v570, 0, v568, 1, v566, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_251(v560, v561, v562, v563, v564, v565, v570, 0, v568, 1, v566, v571, v572, v573, v574, v575, 3, 2, 4) -> f_252(v560, v561, v562, v563, v564, v565, v570, 0, v568, 1, v566, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 <= v570 && 1 <= v568
f_252(v560, v561, v562, v563, v564, v565, v570, 0, v568, 1, v566, v571, v572, v573, v574, v575, 3, 2, 4) -> f_254(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_254(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) -> f_256(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_256(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) -> f_258(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) :|: TRUE
f_258(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) -> f_260(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_260(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) -> f_262(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) :|: TRUE
f_262(v560, v561, v562, v563, v564, v565, v570, 1, v568, v566, v571, v572, v573, v574, v575, 0, 3, 2, 4) -> f_265(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v566, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_265(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v566, v572, v573, v574, v575, 0, 3, 2, 4) -> f_267(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v566, v572, v573, v574, v575, 0, 3, 2, 4) :|: 1 + v714 = v571 && 3 + v714 <= 0
f_267(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v566, v572, v573, v574, v575, 0, 3, 2, 4) -> f_268(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v566, v572, v573, v574, v575, 0, 3, 2, 4) :|: TRUE
f_268(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v566, v572, v573, v574, v575, 0, 3, 2, 4) -> f_269(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_269(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v572, v573, v574, v575, 0, 3, 2, 4) -> f_270(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) :|: 1 + v716 = v570 && 0 <= 1 + v716
f_270(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) -> f_271(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) :|: TRUE
f_271(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) -> f_272(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) :|: TRUE
f_272(v560, v561, v562, v563, v564, v565, v570, 1, v568, v571, v714, v716, v572, v573, v574, v575, 0, 3, 2, 4) -> f_273(v560, v561, v562, v563, v564, v565, v714, 1, v568, v570, v571, v716, v572, v573, v574, v575, 0, 3, 2, 4) :|: 0 = 0
f_273(v560, v561, v562, v563, v564, v565, v714, 1, v568, v570, v571, v716, v572, v573, v574, v575, 0, 3, 2, 4) -> f_274(v560, v561, v562, v563, v564, v565, v714, 0, v568, 1, v570, v571, v716, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_274(v560, v561, v562, v563, v564, v565, v714, 0, v568, 1, v570, v571, v716, v572, v573, v574, v575, 3, 2, 4) -> f_275(v560, v561, v562, v563, v564, v565, v714, 0, v568, 1, v570, v571, v716, v572, v573, v574, v575, 3, 2, 4) :|: TRUE
f_275(v560, v561, v562, v563, v564, v565, v714, 0, v568, 1, v570, v571, v716, v572, v573, v574, v575, 3, 2, 4) -> f_276(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_276(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_277(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 <= v716 && 1 <= v570
f_277(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_279(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_279(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_281(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) :|: 0 = 0
f_281(v560, v561, v562, v563, v564, v565, v714, 0, v716, 1, v570, v571, v572, v573, v574, v575, 3, 2, 4) -> f_233(v560, v561, v562, v563, v564, v565, v714, 0, 1, v570, v571, v716, v572, v573, v574, v575, 3, 4) :|: TRUE
f_233(v405, v406, v407, v408, v409, v410, v411, 0, 1, v414, v415, v416, v417, v418, v419, v420, 3, 4) -> f_237(v405, v406, v407, v408, v409, v410, v411, 0, 1, v414, v415, v416, v417, v418, v419, v420, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_237(v405:0, v406:0, v407:0, v408:0, v409:0, v410:0, 1 + (1 + v714:0), 0, 1, v414:0, v415:0, 1 + (1 + v716:0), v417:0, v418:0, v419:0, v420:0, 3, 4) -> f_237(v405:0, v406:0, v407:0, v408:0, v409:0, v410:0, v714:0, 0, 1, 1 + v716:0, 1 + v714:0, v716:0, v417:0, v418:0, v419:0, v420:0, 3, 4) :|: v716:0 > -1 && v714:0 < -2
Filtered unneeded arguments:
   f_237(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_237(x7, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_237(sum~cons_1~sum~cons_1~v714:0, sum~cons_1~sum~cons_1~v716:0) -> f_237(v714:0, v716:0) :|: v716:0 > -1 && v714:0 < -2 && sum~cons_1~sum~cons_1~v714:0 = 1 + (1 + v714:0) && sum~cons_1~sum~cons_1~v716:0 = 1 + (1 + v716:0)

----------------------------------------

(9)
Obligation:
Rules:
f_237(sum~cons_1~sum~cons_1~v714:0, sum~cons_1~sum~cons_1~v716:0) -> f_237(v714:0, v716:0) :|: v716:0 > -1 && v714:0 < -2 && sum~cons_1~sum~cons_1~v714:0 = 1 + (1 + v714:0) && sum~cons_1~sum~cons_1~v716:0 = 1 + (1 + v716:0)

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_237(sum~cons_1~sum~cons_1~v714:0:0, sum~cons_1~sum~cons_1~v716:0:0) -> f_237(v714:0:0, v716:0:0) :|: v716:0:0 > -1 && v714:0:0 < -2 && sum~cons_1~sum~cons_1~v714:0:0 = 1 + (1 + v714:0:0) && sum~cons_1~sum~cons_1~v716:0:0 = 1 + (1 + v716:0:0)

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_237 ] = 1/2*f_237_2

The following rules are decreasing:
f_237(sum~cons_1~sum~cons_1~v714:0:0, sum~cons_1~sum~cons_1~v716:0:0) -> f_237(v714:0:0, v716:0:0) :|: v716:0:0 > -1 && v714:0:0 < -2 && sum~cons_1~sum~cons_1~v714:0:0 = 1 + (1 + v714:0:0) && sum~cons_1~sum~cons_1~v716:0:0 = 1 + (1 + v716:0:0)

The following rules are bounded:
f_237(sum~cons_1~sum~cons_1~v714:0:0, sum~cons_1~sum~cons_1~v716:0:0) -> f_237(v714:0:0, v716:0:0) :|: v716:0:0 > -1 && v714:0:0 < -2 && sum~cons_1~sum~cons_1~v714:0:0 = 1 + (1 + v714:0:0) && sum~cons_1~sum~cons_1~v716:0:0 = 1 + (1 + v716:0:0)


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 15 rulesP rules:
f_195(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) -> f_197(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) :|: 0 <= v218 && 1 <= v217
f_197(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) -> f_200(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) :|: 0 = 0
f_200(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) -> f_203(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) :|: 0 = 0
f_203(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) -> f_206(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) :|: TRUE
f_206(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) -> f_209(v209, v210, v211, v212, v213, v214, v218, 1, v217, v215, v219, v220, v221, v222, v223, 0, 3, 4) :|: 0 = 0
f_209(v209, v210, v211, v212, v213, v214, v218, 1, v217, v215, v219, v220, v221, v222, v223, 0, 3, 4) -> f_213(v209, v210, v211, v212, v213, v214, v218, 1, v217, v215, v219, v220, v221, v222, v223, 0, 3, 4) :|: TRUE
f_213(v209, v210, v211, v212, v213, v214, v218, 1, v217, v215, v219, v220, v221, v222, v223, 0, 3, 4) -> f_217(v209, v210, v211, v212, v213, v214, v218, 1, v219, v215, v220, v221, v222, v223, 0, 3, 4) :|: 0 = 0
f_217(v209, v210, v211, v212, v213, v214, v218, 1, v219, v215, v220, v221, v222, v223, 0, 3, 4) -> f_221(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v215, v220, v221, v222, v223, 0, 3, 4, 2) :|: 1 + v343 = v219 && 0 <= 2 + v343
f_221(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v215, v220, v221, v222, v223, 0, 3, 4, 2) -> f_226(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v215, v220, v221, v222, v223, 0, 3, 4, 2) :|: TRUE
f_226(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v215, v220, v221, v222, v223, 0, 3, 4, 2) -> f_230(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v220, v221, v222, v223, 0, 3, 4, 2) :|: 0 = 0
f_230(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v220, v221, v222, v223, 0, 3, 4, 2) -> f_236(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) :|: 1 + v498 = v218 && 0 <= 1 + v498
f_236(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) -> f_239(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) :|: TRUE
f_239(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) -> f_241(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) :|: TRUE
f_241(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4, 2) -> f_193(v209, v210, v211, v212, v213, v214, v218, 1, v219, v343, v498, v220, v221, v222, v223, 0, 3, 4) :|: TRUE
f_193(v209, v210, v211, v212, v213, v214, v215, 1, v217, v218, v219, v220, v221, v222, v223, 0, 3, 4) -> f_195(v209, v210, v211, v212, v213, v214, v218, 1, v215, v217, v219, v220, v221, v222, v223, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_195(v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, 1 + v498:0, 1, v215:0, v217:0, 1 + v343:0, v220:0, v221:0, v222:0, v223:0, 0, 3, 4) -> f_195(v209:0, v210:0, v211:0, v212:0, v213:0, v214:0, v343:0, 1, 1 + v498:0, 1 + v343:0, v498:0, v220:0, v221:0, v222:0, v223:0, 0, 3, 4) :|: v217:0 > 0 && v498:0 > -2 && v343:0 > -3
Filtered unneeded arguments:
   f_195(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) -> f_195(x7, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_195(sum~cons_1~v498:0, v217:0, sum~cons_1~v343:0) -> f_195(v343:0, 1 + v343:0, v498:0) :|: v498:0 > -2 && v343:0 > -3 && v217:0 > 0 && sum~cons_1~v498:0 = 1 + v498:0 && sum~cons_1~v343:0 = 1 + v343:0

----------------------------------------

(16)
Obligation:
Rules:
f_195(sum~cons_1~v498:0, v217:0, sum~cons_1~v343:0) -> f_195(v343:0, 1 + v343:0, v498:0) :|: v498:0 > -2 && v343:0 > -3 && v217:0 > 0 && sum~cons_1~v498:0 = 1 + v498:0 && sum~cons_1~v343:0 = 1 + v343:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_195(sum~cons_1~v498:0:0, v217:0:0, sum~cons_1~v343:0:0) -> f_195(v343:0:0, 1 + v343:0:0, v498:0:0) :|: v498:0:0 > -2 && v343:0:0 > -3 && v217:0:0 > 0 && sum~cons_1~v498:0:0 = 1 + v498:0:0 && sum~cons_1~v343:0:0 = 1 + v343:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_195(x, x1, x2)] = 2 + x + x2

The following rules are decreasing:
f_195(sum~cons_1~v498:0:0, v217:0:0, sum~cons_1~v343:0:0) -> f_195(v343:0:0, 1 + v343:0:0, v498:0:0) :|: v498:0:0 > -2 && v343:0:0 > -3 && v217:0:0 > 0 && sum~cons_1~v498:0:0 = 1 + v498:0:0 && sum~cons_1~v343:0:0 = 1 + v343:0:0
The following rules are bounded:
f_195(sum~cons_1~v498:0:0, v217:0:0, sum~cons_1~v343:0:0) -> f_195(v343:0:0, 1 + v343:0:0, v498:0:0) :|: v498:0:0 > -2 && v343:0:0 > -3 && v217:0:0 > 0 && sum~cons_1~v498:0:0 = 1 + v498:0:0 && sum~cons_1~v343:0:0 = 1 + v343:0:0

----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
