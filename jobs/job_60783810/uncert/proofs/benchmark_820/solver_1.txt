YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZnKOR.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 323 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 5 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 2 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 5 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 8 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZnKOR.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZnKOR.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		br %6
	6:
		%7 = load %2
		%8 = icmp sge %7 0
		br %8, %9, %12
	9:
		%10 = load %2
		%11 = sub i32 %10, 1
		store %11, %2
		br %19
	12:
		%13 = load %3
		%14 = icmp slt %13 0
		br %14, %15, %16
	15:
		br %20
	16:
		%17 = load %3
		%18 = sub i32 %17, 1
		store %18, %3
		br %19
	19:
		br %6
	20:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_272(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) -> f_273(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) :|: 0 = 0
f_273(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) -> f_274(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) :|: 0 = 0
f_274(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) -> f_275(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) :|: TRUE
f_275(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) -> f_276(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) :|: 0 = 0
f_276(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) -> f_278(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) :|: 0 <= v353 && 1 <= v352 && 1 <= v349
f_278(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) -> f_280(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) :|: 0 = 0
f_280(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) -> f_282(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) :|: TRUE
f_282(v345, v346, v347, v348, v349, -1, 0, v353, v352, v354, v355, v356, 3, 1, 4) -> f_284(v345, v346, v347, v348, v349, -1, 0, v353, v354, v355, v356, 3, 1, 4) :|: 0 = 0
f_284(v345, v346, v347, v348, v349, -1, 0, v353, v354, v355, v356, 3, 1, 4) -> f_285(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) :|: 1 + v400 = v353 && 0 <= 1 + v400
f_285(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) -> f_286(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) :|: TRUE
f_286(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) -> f_287(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) :|: TRUE
f_287(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) -> f_271(v345, v346, v347, v348, v349, -1, 0, v353, v400, v354, v355, v356, 3, 1, 4) :|: TRUE
f_271(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) -> f_272(v345, v346, v347, v348, v349, -1, 0, v352, v353, v354, v355, v356, 3, 1, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_272(v345:0, v346:0, v347:0, v348:0, v349:0, -1, 0, v352:0, 1 + v400:0, v354:0, v355:0, v356:0, 3, 1, 4) -> f_272(v345:0, v346:0, v347:0, v348:0, v349:0, -1, 0, 1 + v400:0, v400:0, v354:0, v355:0, v356:0, 3, 1, 4) :|: v352:0 > 0 && v400:0 > -2 && v349:0 > 0
Filtered unneeded arguments:
   f_272(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_272(x5, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_272(v349:0, v352:0, sum~cons_1~v400:0) -> f_272(v349:0, 1 + v400:0, v400:0) :|: v400:0 > -2 && v349:0 > 0 && v352:0 > 0 && sum~cons_1~v400:0 = 1 + v400:0

----------------------------------------

(9)
Obligation:
Rules:
f_272(v349:0, v352:0, sum~cons_1~v400:0) -> f_272(v349:0, 1 + v400:0, v400:0) :|: v400:0 > -2 && v349:0 > 0 && v352:0 > 0 && sum~cons_1~v400:0 = 1 + v400:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_272(v349:0:0, v352:0:0, sum~cons_1~v400:0:0) -> f_272(v349:0:0, 1 + v400:0:0, v400:0:0) :|: v400:0:0 > -2 && v349:0:0 > 0 && v352:0:0 > 0 && sum~cons_1~v400:0:0 = 1 + v400:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_272 ] = f_272_3

The following rules are decreasing:
f_272(v349:0:0, v352:0:0, sum~cons_1~v400:0:0) -> f_272(v349:0:0, 1 + v400:0:0, v400:0:0) :|: v400:0:0 > -2 && v349:0:0 > 0 && v352:0:0 > 0 && sum~cons_1~v400:0:0 = 1 + v400:0:0

The following rules are bounded:
f_272(v349:0:0, v352:0:0, sum~cons_1~v400:0:0) -> f_272(v349:0:0, 1 + v400:0:0, v400:0:0) :|: v400:0:0 > -2 && v349:0:0 > 0 && v352:0:0 > 0 && sum~cons_1~v400:0:0 = 1 + v400:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_220(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) -> f_222(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) :|: 0 = 0
f_222(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) -> f_224(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) :|: 0 = 0
f_224(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) -> f_226(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) :|: TRUE
f_226(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) -> f_228(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) :|: 0 = 0
f_228(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) -> f_231(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) :|: 0 <= v130 && 1 <= v129 && 1 <= v127
f_231(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) -> f_234(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) :|: 0 = 0
f_234(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) -> f_237(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) :|: TRUE
f_237(v123, v124, v125, v126, v127, 0, v130, v129, v131, v132, v133, 3, 1, 4) -> f_241(v123, v124, v125, v126, v127, 0, v130, v131, v132, v133, 3, 1, 4) :|: 0 = 0
f_241(v123, v124, v125, v126, v127, 0, v130, v131, v132, v133, 3, 1, 4) -> f_244(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) :|: 1 + v203 = v130 && 0 <= 1 + v203
f_244(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) -> f_247(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) :|: TRUE
f_247(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) -> f_250(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) :|: TRUE
f_250(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) -> f_218(v123, v124, v125, v126, v127, 0, v130, v203, v131, v132, v133, 3, 1, 4) :|: TRUE
f_218(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) -> f_220(v123, v124, v125, v126, v127, 0, v129, v130, v131, v132, v133, 3, 1, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_220(v123:0, v124:0, v125:0, v126:0, v127:0, 0, v129:0, 1 + v203:0, v131:0, v132:0, v133:0, 3, 1, 4) -> f_220(v123:0, v124:0, v125:0, v126:0, v127:0, 0, 1 + v203:0, v203:0, v131:0, v132:0, v133:0, 3, 1, 4) :|: v129:0 > 0 && v203:0 > -2 && v127:0 > 0
Filtered unneeded arguments:
   f_220(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_220(x5, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_220(v127:0, v129:0, sum~cons_1~v203:0) -> f_220(v127:0, 1 + v203:0, v203:0) :|: v203:0 > -2 && v127:0 > 0 && v129:0 > 0 && sum~cons_1~v203:0 = 1 + v203:0

----------------------------------------

(16)
Obligation:
Rules:
f_220(v127:0, v129:0, sum~cons_1~v203:0) -> f_220(v127:0, 1 + v203:0, v203:0) :|: v203:0 > -2 && v127:0 > 0 && v129:0 > 0 && sum~cons_1~v203:0 = 1 + v203:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_220(v127:0:0, v129:0:0, sum~cons_1~v203:0:0) -> f_220(v127:0:0, 1 + v203:0:0, v203:0:0) :|: v203:0:0 > -2 && v127:0:0 > 0 && v129:0:0 > 0 && sum~cons_1~v203:0:0 = 1 + v203:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_220 ] = f_220_3

The following rules are decreasing:
f_220(v127:0:0, v129:0:0, sum~cons_1~v203:0:0) -> f_220(v127:0:0, 1 + v203:0:0, v203:0:0) :|: v203:0:0 > -2 && v127:0:0 > 0 && v129:0:0 > 0 && sum~cons_1~v203:0:0 = 1 + v203:0:0

The following rules are bounded:
f_220(v127:0:0, v129:0:0, sum~cons_1~v203:0:0) -> f_220(v127:0:0, 1 + v203:0:0, v203:0:0) :|: v203:0:0 > -2 && v127:0:0 > 0 && v129:0:0 > 0 && sum~cons_1~v203:0:0 = 1 + v203:0:0


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 10 rulesP rules:
f_184(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) -> f_186(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) :|: 0 <= v75 && 1 <= v73 && 1 <= v71
f_186(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) -> f_189(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) :|: 0 = 0
f_189(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) -> f_193(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) :|: TRUE
f_193(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) -> f_197(v68, v69, v70, v71, v72, v75, 1, v76, v77, v78, 0, 3, 4) :|: 0 = 0
f_197(v68, v69, v70, v71, v72, v75, 1, v76, v77, v78, 0, 3, 4) -> f_201(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) :|: 1 + v89 = v75 && 0 <= 1 + v89
f_201(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) -> f_206(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) :|: TRUE
f_206(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) -> f_210(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) :|: TRUE
f_210(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) -> f_214(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) :|: TRUE
f_214(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) -> f_182(v68, v69, v70, v71, v72, v75, 1, v89, v76, v77, v78, 0, 3, 4) :|: TRUE
f_182(v68, v69, v70, v71, v72, v73, 1, v75, v76, v77, v78, 0, 3, 4) -> f_184(v68, v69, v70, v71, v72, v75, 1, v73, v76, v77, v78, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_184(v68:0, v69:0, v70:0, v71:0, v72:0, 1 + v89:0, 1, v73:0, v76:0, v77:0, v78:0, 0, 3, 4) -> f_184(v68:0, v69:0, v70:0, v71:0, v72:0, v89:0, 1, 1 + v89:0, v76:0, v77:0, v78:0, 0, 3, 4) :|: v73:0 > 0 && v89:0 > -2 && v71:0 > 0
Filtered unneeded arguments:
   f_184(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_184(x4, x6, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_184(v71:0, sum~cons_1~v89:0, v73:0) -> f_184(v71:0, v89:0, 1 + v89:0) :|: v89:0 > -2 && v71:0 > 0 && v73:0 > 0 && sum~cons_1~v89:0 = 1 + v89:0

----------------------------------------

(23)
Obligation:
Rules:
f_184(v71:0, sum~cons_1~v89:0, v73:0) -> f_184(v71:0, v89:0, 1 + v89:0) :|: v89:0 > -2 && v71:0 > 0 && v73:0 > 0 && sum~cons_1~v89:0 = 1 + v89:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_184(v71:0:0, sum~cons_1~v89:0:0, v73:0:0) -> f_184(v71:0:0, v89:0:0, 1 + v89:0:0) :|: v89:0:0 > -2 && v71:0:0 > 0 && v73:0:0 > 0 && sum~cons_1~v89:0:0 = 1 + v89:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_184(x, x1, x2)] = x1

The following rules are decreasing:
f_184(v71:0:0, sum~cons_1~v89:0:0, v73:0:0) -> f_184(v71:0:0, v89:0:0, 1 + v89:0:0) :|: v89:0:0 > -2 && v71:0:0 > 0 && v73:0:0 > 0 && sum~cons_1~v89:0:0 = 1 + v89:0:0
The following rules are bounded:
f_184(v71:0:0, sum~cons_1~v89:0:0, v73:0:0) -> f_184(v71:0:0, v89:0:0, 1 + v89:0:0) :|: v89:0:0 > -2 && v71:0:0 > 0 && v73:0:0 > 0 && sum~cons_1~v89:0:0 = 1 + v89:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
