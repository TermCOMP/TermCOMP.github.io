YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9f6up.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1176 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 99 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 13 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/9f6up.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/9f6up.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "isOdd" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 0, %2
		br %15
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %15
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @isEven(i32 %13)
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "isEven" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 32
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 1, %2
		br %15
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 0, %2
		br %15
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @isOdd(i32 %13)
		store %14, %2
		br %15
	15:
		%16 = load %2
		ret %16

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 53
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %23
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = load %2
		%11 = call i32 @isOdd(i32 %10)
		store %11, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%12 = load %2
		%13 = srem i32 %12, 2
		store %13, %4
		%14 = load %3
		%15 = icmp slt %14 0
		br %15, %20, %16
	16:
		%17 = load %3
		%18 = load %4
		%19 = icmp eq %17 %18
		br %19, %20, %21
	20:
		store 0, %1
		br %23
	21:
		br %22
	22:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	23:
		%24 = load %1
		ret %24


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_352(v67, v78, v68, v69, v70, v71, v72, v73, v74, v75, v79, 0, v77, 3, 1, 4) -> f_353(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) :|: 1 <= v80 && v81 = 3 + v80 && 4 <= v81
f_353(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) -> f_354(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) :|: TRUE
f_354(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) -> f_355(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) :|: TRUE
f_355(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) -> f_356(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) :|: 0 = 0
f_356(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) -> f_358(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) :|: v67 != 0
f_358(v67, v78, v80, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, 0, v77, 3, 1, 4) -> f_360(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) :|: 0 = 0
f_360(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) -> f_362(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) :|: TRUE
f_362(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) -> f_364(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) :|: 0 = 0
f_364(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 4) -> f_367(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) :|: v67 != 1 && 2 <= v67
f_367(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) -> f_370(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) :|: 0 = 0
f_370(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) -> f_373(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) :|: TRUE
f_373(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) -> f_376(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) :|: 0 = 0
f_376(v67, v78, v80, 0, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 2, 1, 4) -> f_379(v67, v78, v80, 0, v96, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 2, 4) :|: 1 + v96 = v67 && 1 <= v96
f_379(v67, v78, v80, 0, v96, v68, v69, v70, v71, v72, v73, v74, v75, v79, v81, v77, 3, 1, 2, 4) -> f_382(v96, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, 0, v77, v67, 3, 1, 2, 4) :|: 0 = 0
f_382(v96, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, 0, v77, v67, 3, 1, 2, 4) -> f_385(v96, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, 0, v77, v67, 3, 1, 2, 4) :|: TRUE
f_385(v96, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, 0, v77, v67, 3, 1, 2, 4) -> f_390(v96, v110, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, 0, v77, v67, 3, 1, 2, 4) :|: 1 <= v110 && v111 = 3 + v110 && 4 <= v111
f_390(v96, v110, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, 0, v77, v67, 3, 1, 2, 4) -> f_393(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) :|: 1 <= v112 && v113 = 3 + v112 && 4 <= v113
f_393(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) -> f_396(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) :|: TRUE
f_396(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) -> f_399(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) :|: TRUE
f_399(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) -> f_402(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) :|: 0 = 0
f_402(v96, v110, v112, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, 0, v77, v67, 3, 1, 2, 4) -> f_405(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) :|: 0 = 0
f_405(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) -> f_408(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) :|: TRUE
f_408(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) -> f_411(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) :|: 0 = 0
f_411(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 2, 4) -> f_415(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) :|: v96 != 1 && 2 <= v96 && 3 <= v67
f_415(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) -> f_419(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) :|: 0 = 0
f_419(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) -> f_423(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) :|: TRUE
f_423(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) -> f_426(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) :|: 0 = 0
f_426(v96, v110, v112, 0, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) -> f_429(v96, v110, v112, 0, v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) :|: 1 + v123 = v96 && 1 <= v123
f_429(v96, v110, v112, 0, v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v111, v113, v77, v67, 3, 1, 4, 2) -> f_432(v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v110, v111, v112, v113, 0, v77, v67, v96, 3, 1, 4, 2) :|: 0 = 0
f_432(v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v110, v111, v112, v113, 0, v77, v67, v96, 3, 1, 4, 2) -> f_435(v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v110, v111, v112, v113, 0, v77, v67, v96, 3, 1, 4, 2) :|: TRUE
f_435(v123, v68, v69, v70, v71, v72, v73, v74, v75, v78, v79, v80, v81, v110, v111, v112, v113, 0, v77, v67, v96, 3, 1, 4, 2) -> f_350(v123, v68, v69, v70, v71, v72, v73, v74, v75, 0, v77, 3, 1, 4) :|: TRUE
f_350(v67, v68, v69, v70, v71, v72, v73, v74, v75, 0, v77, 3, 1, 4) -> f_352(v67, v78, v68, v69, v70, v71, v72, v73, v74, v75, v79, 0, v77, 3, 1, 4) :|: 1 <= v78 && v79 = 3 + v78 && 4 <= v79
Combined rules. Obtained 2 rulesP rules:
f_352(1 + (1 + v123:0), v78:0, v68:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, v75:0, v79:0, 0, v77:0, 3, 1, 4) -> f_352(v123:0, v78:1, v68:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, v75:0, 3 + v78:1, 0, v77:0, 3, 1, 4) :|: v123:0 > 0 && v80:0 > 0 && v123:0 < -2 && v110:0 > 0 && v112:0 > 0 && v78:1 > 0
f_352(1 + (1 + v123:0), v78:0, v68:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, v75:0, v79:0, 0, v77:0, 3, 1, 4) -> f_352(v123:0, v78:1, v68:0, v69:0, v70:0, v71:0, v72:0, v73:0, v74:0, v75:0, 3 + v78:1, 0, v77:0, 3, 1, 4) :|: v123:0 > 0 && v80:0 > 0 && v110:0 > 0 && v112:0 > 0 && v78:1 > 0
Filtered unneeded arguments:
   f_352(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_352(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_352(sum~cons_1~sum~cons_1~v123:0) -> f_352(v123:0) :|: v123:0 > 0 && v123:0 < -2 && sum~cons_1~sum~cons_1~v123:0 = 1 + (1 + v123:0)
f_352(sum~cons_1~sum~cons_1~v123:0) -> f_352(v123:0) :|: v123:0 > 0 && sum~cons_1~sum~cons_1~v123:0 = 1 + (1 + v123:0)

----------------------------------------

(8)
Obligation:
Rules:
f_352(sum~cons_1~sum~cons_1~v123:0) -> f_352(v123:0) :|: v123:0 > 0 && v123:0 < -2 && sum~cons_1~sum~cons_1~v123:0 = 1 + (1 + v123:0)
f_352(x) -> f_352(x1) :|: x1 > 0 && x = 1 + (1 + x1)

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_352(x) -> f_352(x1) :|: x1 > 0 && x = 1 + (1 + x1)

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_352(sum~cons_1~sum~cons_1~x1:0) -> f_352(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_352(x)] = x

The following rules are decreasing:
f_352(sum~cons_1~sum~cons_1~x1:0) -> f_352(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)
The following rules are bounded:
f_352(sum~cons_1~sum~cons_1~x1:0) -> f_352(x1:0) :|: x1:0 > 0 && sum~cons_1~sum~cons_1~x1:0 = 1 + (1 + x1:0)

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
