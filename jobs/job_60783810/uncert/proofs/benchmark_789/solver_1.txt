MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/EErGq.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 55 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 264 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
    (7) SCC2IRS [SOUND, 0 ms]
    (8) IntTRS
        (9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (10) IntTRS
        (11) IntTRSPeriodicNontermProof [COMPLETE, 12 ms]
        (12) NO
    (13) SCC2IRS [SOUND, 11 ms]
    (14) IntTRS
        (15) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (16) IntTRS
        (17) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
        (18) NO
(19) SEGraph to IRS [SOUND, 14 ms]
(20) IntTRS
    (21) IRSToKoat [EQUIVALENT, 0 ms]
    (22) Koat Problem
    (23) KoAT2 [EQUIVALENT, 387 ms]
    (24) MAYBE
(25) SEGraph to IRS [SOUND, 50 ms]
(26) IntTRS
    (27) IRSNoOverapproximation [EQUIVALENT, 0 ms]
    (28) MAYBE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/EErGq.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/EErGq.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "g" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp eq %4 0
		br %5, %6, %7
	6:
		store 1, %2
		br %13
	7:
		%8 = load %3
		%9 = sub i32 %8, 1
		%10 = call i32 @g(i32 %9)
		%11 = add i32 %10, 1
		%12 = call i32 @g(i32 %11)
		store %12, %2
		br %13
	13:
		%14 = load %2
		ret %14

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 26
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 (...)* @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %7
	6:
		store 0, %1
		br %10
	7:
		%8 = load %2
		%9 = call i32 @g(i32 %8)
		br %10
	10:
		%11 = load %1
		ret %11


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) -> f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 1 <= v90 && v91 = 3 + v90 && 4 <= v91
f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 0 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: v81 != 0
f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: TRUE
f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 1 + v93 = v81 && 0 <= v93
f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: 0 = 0
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: TRUE
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) :|: TRUE
f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_200(v93, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
f_200(v81, v82, v83, v84, v85, 0, v87, 3, 1, 4) -> f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) :|: 1 <= v88 && v89 = 3 + v88 && 4 <= v89
f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) -> f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: 0 = 0
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: TRUE
f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_200(2, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_201(1 + v93:0, v88:0, v82:0, v83:0, v84:0, v85:0, v89:0, 0, v87:0, 3, 1, 4) -> f_201(2, v88:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 0, v87:0, 3, 1, 4) :|: v90:0 > 0 && v93:0 > -1 && v88:1 > 0
f_201(1 + v93:0, v88:0, v82:0, v83:0, v84:0, v85:0, v89:0, 0, v87:0, 3, 1, 4) -> f_201(v93:0, v88:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 0, v87:0, 3, 1, 4) :|: v90:0 > 0 && v93:0 > -1 && v88:1 > 0
Filtered unneeded arguments:
   f_201(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_201(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_201(sum~cons_1~v93:0) -> f_201(2) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_201(sum~cons_1~v93:0) -> f_201(v93:0) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0

----------------------------------------

(8)
Obligation:
Rules:
f_201(sum~cons_1~v93:0) -> f_201(2) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_201(x) -> f_201(x1) :|: x1 > -1 && x = 1 + x1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_201(sum~cons_1~v93:0:0) -> f_201(2) :|: v93:0:0 > -1 && sum~cons_1~v93:0:0 = 1 + v93:0:0
f_201(sum~cons_1~x1:0) -> f_201(x1:0) :|: x1:0 > -1 && sum~cons_1~x1:0 = 1 + x1:0

----------------------------------------

(11) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, sum~cons_1~v93:0:0) -> f(1, 2) :|: pc = 1 && (v93:0:0 > -1 && sum~cons_1~v93:0:0 = 1 + v93:0:0)
f(pc, sum~cons_1~x1:0) -> f(1, x1:0) :|: pc = 1 && (x1:0 > -1 && sum~cons_1~x1:0 = 1 + x1:0)
Witness term starting non-terminating reduction: f(1, 1)
----------------------------------------

(12)
NO

----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) -> f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 1 <= v90 && v91 = 3 + v90 && 4 <= v91
f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 0 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: v81 != 0
f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: TRUE
f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 1 + v93 = v81 && 0 <= v93
f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: 0 = 0
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: TRUE
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) :|: TRUE
f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_200(v93, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: 0 <= v93 && 1 <= v82 && 4 <= v83 && 1 <= v84 && 4 <= v85 && 0 <= v87 && v82 <= v83 && v84 <= v85
f_200(v81, v82, v83, v84, v85, 0, v87, 3, 1, 4) -> f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) :|: 1 <= v88 && v89 = 3 + v88 && 4 <= v89
f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) -> f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: 0 = 0
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: TRUE
f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_200(2, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: 0 <= 2 && 1 <= v82 && 4 <= v83 && 1 <= v84 && 4 <= v85 && 0 <= v87 && v82 <= v83 && v84 <= v85
Combined rules. Obtained 2 rulesP rules:
f_201(1 + v93:0, v88:0, v82:0, v83:0, v84:0, v85:0, v89:0, 0, v87:0, 3, 1, 4) -> f_201(2, v88:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 0, v87:0, 3, 1, 4) :|: v90:0 > 0 && v93:0 > -1 && v82:0 > 0 && v83:0 > 3 && v84:0 > 0 && v85:0 > 3 && v87:0 > -1 && v88:1 > 0 && v83:0 >= v82:0 && v85:0 >= v84:0
f_201(1 + v93:0, v88:0, v82:0, v83:0, v84:0, v85:0, v89:0, 0, v87:0, 3, 1, 4) -> f_201(v93:0, v88:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 0, v87:0, 3, 1, 4) :|: v90:0 > 0 && v82:0 > 0 && v93:0 > -1 && v83:0 > 3 && v84:0 > 0 && v85:0 > 3 && v87:0 > -1 && v83:0 >= v82:0 && v88:1 > 0 && v85:0 >= v84:0
Filtered unneeded arguments:
   f_201(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) -> f_201(x1, x3, x4, x5, x6, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_201(sum~cons_1~v93:0, v82:0, v83:0, v84:0, v85:0, v87:0) -> f_201(2, v82:0, v83:0, v84:0, v85:0, v87:0) :|: v82:0 > 0 && v93:0 > -1 && v83:0 > 3 && v84:0 > 0 && v85:0 > 3 && v87:0 > -1 && v85:0 >= v84:0 && v83:0 >= v82:0 && sum~cons_1~v93:0 = 1 + v93:0
f_201(sum~cons_1~v93:0, v82:0, v83:0, v84:0, v85:0, v87:0) -> f_201(v93:0, v82:0, v83:0, v84:0, v85:0, v87:0) :|: v93:0 > -1 && v82:0 > 0 && v83:0 > 3 && v84:0 > 0 && v85:0 > 3 && v87:0 > -1 && v85:0 >= v84:0 && v83:0 >= v82:0 && sum~cons_1~v93:0 = 1 + v93:0

----------------------------------------

(14)
Obligation:
Rules:
f_201(sum~cons_1~v93:0, v82:0, v83:0, v84:0, v85:0, v87:0) -> f_201(2, v82:0, v83:0, v84:0, v85:0, v87:0) :|: v82:0 > 0 && v93:0 > -1 && v83:0 > 3 && v84:0 > 0 && v85:0 > 3 && v87:0 > -1 && v85:0 >= v84:0 && v83:0 >= v82:0 && sum~cons_1~v93:0 = 1 + v93:0
f_201(x, x1, x2, x3, x4, x5) -> f_201(x6, x1, x2, x3, x4, x5) :|: x6 > -1 && x1 > 0 && x2 > 3 && x3 > 0 && x4 > 3 && x5 > -1 && x4 >= x3 && x2 >= x1 && x = 1 + x6

----------------------------------------

(15) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(16)
Obligation:
Rules:
f_201(sum~cons_1~v93:0:0, v82:0:0, v83:0:0, v84:0:0, v85:0:0, v87:0:0) -> f_201(2, v82:0:0, v83:0:0, v84:0:0, v85:0:0, v87:0:0) :|: v85:0:0 >= v84:0:0 && v83:0:0 >= v82:0:0 && v87:0:0 > -1 && v85:0:0 > 3 && v84:0:0 > 0 && v83:0:0 > 3 && v93:0:0 > -1 && v82:0:0 > 0 && sum~cons_1~v93:0:0 = 1 + v93:0:0
f_201(sum~cons_1~x6:0, x1:0, x2:0, x3:0, x4:0, x5:0) -> f_201(x6:0, x1:0, x2:0, x3:0, x4:0, x5:0) :|: x4:0 >= x3:0 && x2:0 >= x1:0 && x5:0 > -1 && x4:0 > 3 && x3:0 > 0 && x2:0 > 3 && x1:0 > 0 && x6:0 > -1 && sum~cons_1~x6:0 = 1 + x6:0

----------------------------------------

(17) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, sum~cons_1~v93:0:0, v82:0:0, v83:0:0, v84:0:0, v85:0:0, v87:0:0) -> f(1, 2, v82:0:0, v83:0:0, v84:0:0, v85:0:0, v87:0:0) :|: pc = 1 && (v85:0:0 >= v84:0:0 && v83:0:0 >= v82:0:0 && v87:0:0 > -1 && v85:0:0 > 3 && v84:0:0 > 0 && v83:0:0 > 3 && v93:0:0 > -1 && v82:0:0 > 0 && sum~cons_1~v93:0:0 = 1 + v93:0:0)
f(pc, sum~cons_1~x6:0, x1:0, x2:0, x3:0, x4:0, x5:0) -> f(1, x6:0, x1:0, x2:0, x3:0, x4:0, x5:0) :|: pc = 1 && (x4:0 >= x3:0 && x2:0 >= x1:0 && x5:0 > -1 && x4:0 > 3 && x3:0 > 0 && x2:0 > 3 && x1:0 > 0 && x6:0 > -1 && sum~cons_1~x6:0 = 1 + x6:0)
Witness term starting non-terminating reduction: f(1, 2, 4, 6, 1, 5, 3)
----------------------------------------

(18)
NO

----------------------------------------

(19) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 52 rulesP rules:
f_107 -> f_108(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_108(v1, v2, 3, 1, 4) -> f_109(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_109(v1, v3, v2, v4, 3, 1, 4) -> f_110(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v2, v4, 0, 3, 1, 4) -> f_111(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v2, v4, 0, 3, 1, 4) -> f_112(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_113(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_113(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_115(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: v5 < 0
f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_116(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 <= v5
f_115(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_117(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_116(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_118(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_117(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_119(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_118(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_120(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: TRUE
f_119(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_121(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_120(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_122(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_121(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_123(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_122(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) :|: 0 = 0
f_123(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_125(v1, v3, v5, 1, 0, v2, v4, 3, 4) :|: 0 = 0
f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_126(v5, v1, v2, v3, v4, 0, 3, 1, 4) :|: TRUE
f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_218(0, 1, v1, v2, v3, v4, 3, 4) :|: TRUE
f_126(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_147(v5, v1, v2, v3, v4, 0, v5, 3, 1, 4) :|: TRUE
f_147(v21, v22, v23, v24, v25, 0, v27, 3, 1, 4) -> f_170(v21, v22, v23, v24, v25, 0, v27, 3, 1, 4) :|: TRUE
f_170(v43, v44, v45, v46, v47, 0, v49, 3, 1, 4) -> f_200(v43, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_200(v81, v82, v83, v84, v85, 0, v87, 3, 1, 4) -> f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) :|: 1 <= v88 && v89 = 3 + v88 && 4 <= v89
f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) -> f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 1 <= v90 && v91 = 3 + v90 && 4 <= v91
f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 0 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_206(0, v88, v90, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: v81 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: v81 != 0
f_206(0, v88, v90, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_208(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_208(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_210(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: TRUE
f_210(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_212(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_212(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_214(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 1 + v93 = v81 && 0 <= v93
f_214(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_216(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: 0 = 0
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: TRUE
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) :|: TRUE
f_218(0, 1, v1, v2, v3, v4, 3, 4) -> f_220(v1, v3, 0, 1, v2, v4, 3, 4) :|: 0 = 0
f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_200(v93, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
f_220(v1, v3, 0, 1, v2, v4, 3, 4) -> f_221(v1, v3, 0, 1, v2, v4, 3, 4) :|: TRUE
f_221(v1, v3, 0, 1, v2, v4, 3, 4) -> f_223(v1, v3, 0, 1, v2, v4, 3, 4) :|: 0 = 0
f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) -> f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: 0 = 0
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: TRUE
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_228(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_200(2, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 < 0
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_205(v93:0, v88:1, v90:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 3 + v90:1, 0, v87:0, 3, 1, 4) :|: v88:1 > 0 && v90:1 > 0 && v93:0 > -1
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_205(2, v88:1, v90:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 3 + v90:1, 0, v87:0, 3, 1, 4) :|: v93:0 > -1 && v88:1 > 0 && v90:1 > 0
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_228(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: v93:0 > -1
f_107 -> f_205(v5:0, v88:0, v90:0, v1:0, 3 + v1:0, v3:0, 3 + v3:0, 3 + v88:0, 3 + v90:0, 0, v5:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1 && v88:0 > 0 && v90:0 > 0
f_107 -> f_223(v1:0, v3:0, 0, 1, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1
f_205(0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_205(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_205(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_205(sum~cons_1~v93:0) -> f_205(v93:0) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(sum~cons_1~v93:0) -> f_205(2) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(sum~cons_1~v93:0) -> f_228(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_107 -> f_205(v5:0) :|: v5:0 > -1
f_107 -> f_223(v1:0, v3:0, 0, 1, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0
f_205(cons_0) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE && cons_0 = 0

----------------------------------------

(20)
Obligation:
Rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_205(sum~cons_1~v93:0) -> f_205(v93:0) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(x) -> f_205(2) :|: x1 > -1 && x = 1 + x1
f_205(x2) -> f_228(0, x3, x4, 1, x5, x6, x7, x8, x9, x10, x11, 3, 4) :|: x12 > -1 && x2 = 1 + x12
f_107 -> f_205(x13) :|: x13 > -1
f_107 -> f_223(x14, x15, 0, 1, 3 + x14, 3 + x15, 3, 4) :|: x15 > 0 && x14 > 0
f_205(cons_0) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE && cons_0 = 0
Start term: f_107

----------------------------------------

(21) IRSToKoat (EQUIVALENT)
Convert an IRS to a koat problem
----------------------------------------

(22)
Obligation:
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS f_107))
(VAR x46 x47 x48 x49 x42 x43 x44 x45 x40 x41 k25 k26 k27 k28 k21 k22 k23 k24 k20 x39 x35 x36 x37 x38 x31 x32 x33 x34 k18 k19 x30 x70 x68 x69 x64 x65 x66 x67 x60 x61 x62 x63 k7 k8 k5 k6 k9 k0 k3 k4 k1 k2 x57 x58 x59 x53 x54 x55 x56 x50 x51 x52 x90 x91 x92 x120 x122 x121 x86 x124 x87 x123 x88 x126 x89 x125 x x82 x128 x83 x127 x84 x85 x129 x80 x81 x79 x111 x110 x75 x113 x76 x112 x'' x77 x115 x78 x114 x71 x117 x72 x116 x73 x119 x74 x118 k14 k15 x109 k16 k17 k10 k11 k12 k13 x4 x28 x5 x29 x2 x3 x8 x24 x9 x25 x6 x26 x100 x7 x27 x20 x102 x21 x101 x22 x104 x23 x103 x106 x1 x105 x108 x107 x' x17 x18 x19 x13 x14 x15 x16 x97 x10 x98 x11 x99 x12 x93 x94 x95 x96)
(RULES
  f_107(x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95) -> f_223(k24, k26, 0, 1, 3 + k24, 3 + k26, 3, 4, x96, x97, x98, x99, x100) :|: k26 > 0 && k24 > 0
  f_205(k17, x, x', x'', x1, x2, x3, x4, x5, x6, x7, x8, x9) -> f_205(2, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) :|: x1 > -1 && k17 = 1 + x1
  f_205(k25, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45) -> f_205(k20, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57) :|: k20 > -1 && k25 = 1 + k20
  f_205(k21, x118, x119, x120, x121, x122, x123, x124, x125, x126, x127, x128, x129) -> f_216(0, k5, k19, 1, k3, k2, k1, k0, k4, k18, k6, 3, 4) :|: 0 = 0 && k21 = 0
  f_205(k10, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33) -> f_228(0, k12, k7, 1, k9, k15, k16, k13, k14, k27, k28, 3, 4) :|: x12 > -1 && k10 = 1 + x12
  f_107(x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111, x112, x113) -> f_125(k22, k8, k11, 1, 0, 3 + k22, 3 + k8, 3, 4, x114, x115, x116, x117) :|: k22 > 0 && k11 < 0 && k8 > 0
  f_107(x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70) -> f_205(k23, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x81, x82) :|: k23 > -1
)

----------------------------------------

(23) KoAT2 (EQUIVALENT)
KoAT2 was called with the following command:

/aprove/bin/koat2 analyse --termination --cfr=pe -d5 --local=mprf,twn -rtermcomp -i /tmp/aprove.InputModules.Programs.koat2_424449391050373856.koat 

KoAT2's output was:

MAYBE

----------------------------------------

(24)
MAYBE

----------------------------------------

(25) SEGraph to IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 52 rulesP rules:
f_107 -> f_108(v1, v2, 3, 1, 4) :|: 1 <= v1 && v2 = 3 + v1 && 4 <= v2
f_108(v1, v2, 3, 1, 4) -> f_109(v1, v3, v2, v4, 3, 1, 4) :|: 1 <= v3 && v4 = 3 + v3 && 4 <= v4
f_109(v1, v3, v2, v4, 3, 1, 4) -> f_110(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_110(v1, v3, v2, v4, 0, 3, 1, 4) -> f_111(v1, v3, v2, v4, 0, 3, 1, 4) :|: TRUE
f_111(v1, v3, v2, v4, 0, 3, 1, 4) -> f_112(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_112(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_113(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: TRUE
f_113(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 = 0
f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_115(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: v5 < 0
f_114(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_116(v1, v3, v5, v2, v4, 0, 3, 1, 4) :|: 0 <= v5
f_115(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_117(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: 0 = 0
f_116(v1, v3, v5, v2, v4, 0, 3, 1, 4) -> f_118(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_117(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_119(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_118(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_120(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: TRUE
f_119(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_121(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_120(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_122(v1, v3, v5, 0, v2, v4, 3, 1, 4) :|: 0 = 0
f_121(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_123(v1, v3, v5, 1, v2, v4, 0, 3, 4) :|: TRUE
f_122(v1, v3, v5, 0, v2, v4, 3, 1, 4) -> f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) :|: 0 = 0
f_123(v1, v3, v5, 1, v2, v4, 0, 3, 4) -> f_125(v1, v3, v5, 1, 0, v2, v4, 3, 4) :|: 0 = 0
f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_126(v5, v1, v2, v3, v4, 0, 3, 1, 4) :|: TRUE
f_124(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_218(0, 1, v1, v2, v3, v4, 3, 4) :|: TRUE
f_126(v5, v1, v2, v3, v4, 0, 3, 1, 4) -> f_147(v5, v1, v2, v3, v4, 0, v5, 3, 1, 4) :|: TRUE
f_147(v21, v22, v23, v24, v25, 0, v27, 3, 1, 4) -> f_170(v21, v22, v23, v24, v25, 0, v27, 3, 1, 4) :|: TRUE
f_170(v43, v44, v45, v46, v47, 0, v49, 3, 1, 4) -> f_200(v43, v44, v45, v46, v47, 0, v49, 3, 1, 4) :|: TRUE
f_200(v81, v82, v83, v84, v85, 0, v87, 3, 1, 4) -> f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) :|: 1 <= v88 && v89 = 3 + v88 && 4 <= v89
f_201(v81, v88, v82, v83, v84, v85, v89, 0, v87, 3, 1, 4) -> f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 1 <= v90 && v91 = 3 + v90 && 4 <= v91
f_202(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_203(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: TRUE
f_204(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: 0 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_206(0, v88, v90, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: v81 = 0
f_205(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) :|: v81 != 0
f_206(0, v88, v90, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_208(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_207(v81, v88, v90, v82, v83, v84, v85, v89, v91, 0, v87, 3, 1, 4) -> f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_208(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_210(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_209(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: TRUE
f_210(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_212(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_211(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 0 = 0
f_212(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_214(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_213(v81, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) :|: 1 + v93 = v81 && 0 <= v93
f_214(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_216(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_215(v81, v88, v90, 0, v93, v82, v83, v84, v85, v89, v91, v87, 3, 1, 4) -> f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: 0 = 0
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) :|: TRUE
f_217(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) :|: TRUE
f_218(0, 1, v1, v2, v3, v4, 3, 4) -> f_220(v1, v3, 0, 1, v2, v4, 3, 4) :|: 0 = 0
f_219(v93, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, v81, 3, 1, 4) -> f_200(v93, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
f_220(v1, v3, 0, 1, v2, v4, 3, 4) -> f_221(v1, v3, 0, 1, v2, v4, 3, 4) :|: TRUE
f_221(v1, v3, 0, 1, v2, v4, 3, 4) -> f_223(v1, v3, 0, 1, v2, v4, 3, 4) :|: 0 = 0
f_222(0, 1, v82, v83, v84, v85, v88, v89, v90, v91, v87, 3, 4) -> f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_224(1, v88, v90, 0, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: 0 = 0
f_225(1, v88, v90, 0, 2, v82, v83, v84, v85, v89, v91, v87, 3, 4) -> f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: 0 = 0
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) :|: TRUE
f_226(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_228(0, v88, v90, 1, v82, v83, v84, v85, v89, v91, v87, 3, 4) :|: TRUE
f_227(2, v82, v83, v84, v85, v88, v89, v90, v91, 0, v87, 1, 3, 4) -> f_200(2, v82, v83, v84, v85, 0, v87, 3, 1, 4) :|: TRUE
Combined rules. Obtained 7 rulesP rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 < 0
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_205(v93:0, v88:1, v90:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 3 + v90:1, 0, v87:0, 3, 1, 4) :|: v88:1 > 0 && v90:1 > 0 && v93:0 > -1
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_205(2, v88:1, v90:1, v82:0, v83:0, v84:0, v85:0, 3 + v88:1, 3 + v90:1, 0, v87:0, 3, 1, 4) :|: v93:0 > -1 && v88:1 > 0 && v90:1 > 0
f_205(1 + v93:0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_228(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: v93:0 > -1
f_107 -> f_205(v5:0, v88:0, v90:0, v1:0, 3 + v1:0, v3:0, 3 + v3:0, 3 + v88:0, 3 + v90:0, 0, v5:0, 3, 1, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1 && v88:0 > 0 && v90:0 > 0
f_107 -> f_223(v1:0, v3:0, 0, 1, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0 && v5:0 > -1
f_205(0, v88:0, v90:0, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, 0, v87:0, 3, 1, 4) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE
Filtered unneeded arguments:
   f_205(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_205(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 7 rules.P rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_205(sum~cons_1~v93:0) -> f_205(v93:0) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(sum~cons_1~v93:0) -> f_205(2) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(sum~cons_1~v93:0) -> f_228(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_107 -> f_205(v5:0) :|: v5:0 > -1
f_107 -> f_223(v1:0, v3:0, 0, 1, 3 + v1:0, 3 + v3:0, 3, 4) :|: v3:0 > 0 && v1:0 > 0
f_205(cons_0) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE && cons_0 = 0

----------------------------------------

(26)
Obligation:
Rules:
f_107 -> f_125(v1:0, v3:0, v5:0, 1, 0, 3 + v1:0, 3 + v3:0, 3, 4) :|: v1:0 > 0 && v5:0 < 0 && v3:0 > 0
f_205(sum~cons_1~v93:0) -> f_205(v93:0) :|: v93:0 > -1 && sum~cons_1~v93:0 = 1 + v93:0
f_205(x) -> f_205(2) :|: x1 > -1 && x = 1 + x1
f_205(x2) -> f_228(0, x3, x4, 1, x5, x6, x7, x8, x9, x10, x11, 3, 4) :|: x12 > -1 && x2 = 1 + x12
f_107 -> f_205(x13) :|: x13 > -1
f_107 -> f_223(x14, x15, 0, 1, 3 + x14, 3 + x15, 3, 4) :|: x15 > 0 && x14 > 0
f_205(cons_0) -> f_216(0, v88:0, v90:0, 1, v82:0, v83:0, v84:0, v85:0, v89:0, v91:0, v87:0, 3, 4) :|: TRUE && cons_0 = 0
Start term: f_107

----------------------------------------

(27) IRSNoOverapproximation (EQUIVALENT)
Proof of non-termination is aborted since the IRSProblem over-approximates
----------------------------------------

(28)
MAYBE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
