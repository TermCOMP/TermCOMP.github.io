NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/srs6W.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 17 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 394 ms]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 372 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/srs6W.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/srs6W.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		store 0, %4
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 0
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = icmp sgt %11 0
		br %13
	13:
		%14 = phi [0, %7], [%12, %10]
		br %14, %15, %34
	15:
		%16 = load %2
		%17 = load %3
		%18 = icmp slt %16 %17
		br %18, %19, %23
	19:
		%20 = load %2
		store %20, %4
		%21 = load %3
		store %21, %2
		%22 = load %4
		store %22, %3
		br %33
	23:
		%24 = load %2
		%25 = load %3
		%26 = icmp sgt %24 %25
		br %26, %27, %29
	27:
		%28 = load %2
		store %28, %3
		br %32
	29:
		%30 = load %2
		%31 = sub i32 %30, 1
		store %31, %2
		br %32
	32:
		br %33
	33:
		br %7
	34:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #145 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #145 yields value 1.
Nondeterministic instruction %2 = alloca i32, align 4 in node #146 yields value 16.
Nondeterministic instruction %3 = alloca i32, align 4 in node #147 yields value 12.
Nondeterministic instruction %4 = alloca i32, align 4 in node #148 yields value 8.
Nondeterministic instruction %5 = call i32 @__VERIFIER_nondet_int() in node #153 yields value 5.
Nondeterministic instruction %6 = call i32 @__VERIFIER_nondet_int() in node #155 yields value 4.

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
