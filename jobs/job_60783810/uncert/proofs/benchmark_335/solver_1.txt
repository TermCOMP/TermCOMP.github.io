YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jaxID.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 288 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 19 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 3 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 2 ms]
(12) IntTRS
(13) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/jaxID.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/jaxID.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		br %8
	8:
		%9 = load %2
		%10 = icmp sgt %9 0
		br %10, %11, %19
	11:
		%12 = load %2
		%13 = load %3
		%14 = add i32 %12, %13
		store %14, %2
		%15 = load %4
		store %15, %3
		%16 = load %4
		%17 = sub i32 0, %16
		%18 = sub i32 %17, 1
		store %18, %4
		br %8
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_147(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_148(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: 0 < v37
f_148(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_150(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_150(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_152(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_152(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_154(v27, v28, v29, v30, v31, v32, v33, v37, 1, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_154(v27, v28, v29, v30, v31, v32, v33, v37, 1, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_155(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_155(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_156(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: v46 = v37 + v38
f_156(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_157(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_157(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_158(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_158(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) -> f_159(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_159(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) -> f_160(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
f_160(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v39, v41, v42, v43, v44, 0, 3, 4) -> f_161(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v41, v42, v43, v44, 0, 3, 4) :|: v49 + v40 = 0
f_161(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v41, v42, v43, v44, 0, 3, 4) -> f_162(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) :|: 1 + v50 = v49
f_162(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) -> f_163(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_163(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) -> f_164(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_164(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) -> f_146(v27, v28, v29, v30, v31, v32, v33, v37, 1, v38, v46, v40, v49, v50, v41, v42, v43, v44, 0, 3, 4) :|: TRUE
f_146(v27, v28, v29, v30, v31, v32, v33, v34, 1, v36, v37, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) -> f_147(v27, v28, v29, v30, v31, v32, v33, v37, 1, v34, v36, v38, v39, v40, v41, v42, v43, v44, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_147(v27:0, v28:0, v29:0, v30:0, v31:0, v32:0, v33:0, v37:0, 1, v34:0, v36:0, v38:0, v39:0, v40:0, v41:0, v42:0, v43:0, v44:0, 0, 3, 4) -> f_147(v27:0, v28:0, v29:0, v30:0, v31:0, v32:0, v33:0, v37:0 + v38:0, 1, v37:0, v38:0, v40:0, 1 + v50:0, v50:0, v41:0, v42:0, v43:0, v44:0, 0, 3, 4) :|: 1 + v50:0 + v40:0 = 0 && v37:0 > 0
Filtered unneeded arguments:
   f_147(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_147(x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: 1 + v50:0 + v40:0 = 0 && v37:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: 1 + v50:0 + v40:0 = 0 && v37:0 > 0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: 1 + v50:0 + v40:0 = 0 && v37:0 > 0
has been transformed into
f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: v40:0 = x11 && (v38:0 = x10 && (1 + v50:0 + v40:0 = 0 && v37:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0.


f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: v40:0 = x11 && (v38:0 = x10 && (1 + v50:0 + v40:0 = 0 && v37:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0 and 
f_147(v37:0, v38:0, v40:0) -> f_147(v37:0 + v38:0, v40:0, v50:0) :|: v40:0 = x11 && (v38:0 = x10 && (1 + v50:0 + v40:0 = 0 && v37:0 > 0)) && 1 + x11 + x10 = 0 && x8 > 0
have been merged into the new rule
f_147(x26, x27, x28) -> f_147(x26 + x27 + x28, x29, x30) :|: x28 = x31 && (x27 = x32 && (1 + x29 + x28 = 0 && x26 > 0)) && 1 + x31 + x32 = 0 && x33 > 0 && (x29 = x34 && (x28 = x35 && (1 + x30 + x29 = 0 && x26 + x27 > 0)) && 1 + x34 + x35 = 0 && x36 > 0)


----------------------------------------

(10)
Obligation:
Rules:
f_147(x37, x38, x39) -> f_147(x37 + x38 + x39, x40, x41) :|: TRUE && x39 + -1 * x42 = 0 && x38 + -1 * x43 = 0 && x40 + x39 = -1 && x37 >= 1 && x42 + x43 = -1 && x44 >= 1 && x40 + -1 * x45 = 0 && x39 + -1 * x46 = 0 && x41 + x40 = -1 && x37 + x38 >= 1 && x45 + x46 = -1 && x47 >= 1

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_147(x37:0, x38:0, x39:0) -> f_147(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0

----------------------------------------

(13) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_147(x, x1, x2)] = x + x1

The following rules are decreasing:
f_147(x37:0, x38:0, x39:0) -> f_147(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0
The following rules are bounded:
f_147(x37:0, x38:0, x39:0) -> f_147(x37:0 + x38:0 + x39:0, x40:0, x41:0) :|: x45:0 + x46:0 = -1 && x47:0 > 0 && x37:0 + x38:0 >= 1 && x41:0 + x40:0 = -1 && x39:0 + -1 * x46:0 = 0 && x40:0 + -1 * x45:0 = 0 && x44:0 > 0 && x42:0 + x43:0 = -1 && x37:0 > 0 && x40:0 + x39:0 = -1 && x39:0 + -1 * x42:0 = 0 && x38:0 + -1 * x43:0 = 0

----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
