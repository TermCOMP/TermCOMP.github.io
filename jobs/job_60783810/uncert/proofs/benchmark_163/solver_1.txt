YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bT0bb.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 794 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 52 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/bT0bb.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/bT0bb.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		%6 = load %2
		%7 = icmp slt %6 0
		br %7, %8, %9
	8:
		store 0, %1
		br %19
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%10 = call i32 @__VERIFIER_nondet_int()
		store %10, %3
		%11 = load %3
		%12 = icmp slt %11 0
		br %12, %13, %14
	13:
		store 0, %1
		br %19
	14:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%15 = call i32 @__VERIFIER_nondet_int()
		store %15, %4
		%16 = load %2
		%17 = load %3
		%18 = call i32 @le(i32 %16, i32 %17)
		br %19
	19:
		%20 = load %1
		ret %20

*BasicFunctionTypename: "le" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 35
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp sgt %6 0
		br %7, %8, %17
	8:
		%9 = load %5
		%10 = icmp sgt %9 0
		br %10, %11, %17
	11:
		%12 = load %4
		%13 = sub i32 %12, 1
		%14 = load %5
		%15 = sub i32 %14, 1
		%16 = call i32 @le(i32 %13, i32 %15)
		store %16, %3
		br %21
	17:
		%18 = load %4
		%19 = icmp eq %18 0
		%20 = zext i1 %19 to i32
		store %20, %3
		br %21
	21:
		%22 = load %3
		ret %22

*BasicFunctionTypename: "random" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 61
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = call i32 @__VERIFIER_nondet_int()
		store %3, %2
		%4 = load %2
		%5 = icmp slt %4 0
		br %5, %6, %9
	6:
		%7 = load %2
		%8 = sub i32 0, %7
		store %8, %1
		br %11
	9:
		%10 = load %2
		store %10, %1
		br %11
	11:
		%12 = load %1
		ret %12


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 22 rulesP rules:
f_355(v95, v96, v109, v97, v98, v99, v100, v101, v102, v103, v104, v110, 0, v106, v107, v108, 3, 1, 4) -> f_356(v95, v96, v109, v111, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, 0, v106, v107, v108, 3, 1, 4) :|: 1 <= v111 && v112 = 3 + v111 && 4 <= v112
f_356(v95, v96, v109, v111, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, 0, v106, v107, v108, 3, 1, 4) -> f_357(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: 1 <= v113 && v114 = 3 + v113 && 4 <= v114
f_357(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_358(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: TRUE
f_358(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_359(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: TRUE
f_359(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_360(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: TRUE
f_360(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_361(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: TRUE
f_361(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_362(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: 0 = 0
f_362(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_363(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) :|: 0 < v95 && 1 <= v106
f_363(v95, v96, v109, v111, v113, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 1, 4) -> f_365(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 = 0
f_365(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_367(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: TRUE
f_367(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_369(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 = 0
f_369(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_371(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 < v96 && 1 <= v107
f_371(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_374(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 = 0
f_374(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_377(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: TRUE
f_377(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_380(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 = 0
f_380(v95, v96, v109, v111, v113, 1, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_383(v95, v96, v109, v111, v113, 1, v117, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 1 + v117 = v95 && 0 <= v117
f_383(v95, v96, v109, v111, v113, 1, v117, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_386(v95, v96, v109, v111, v113, 1, v117, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 0 = 0
f_386(v95, v96, v109, v111, v113, 1, v117, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_389(v95, v96, v109, v111, v113, 1, v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) :|: 1 + v136 = v96 && 0 <= v136
f_389(v95, v96, v109, v111, v113, 1, v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v110, v112, v114, 0, v106, v107, v108, 3, 4) -> f_392(v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v109, v110, v111, v112, v113, v114, 0, v106, v107, v108, v95, v96, 1, 3, 4) :|: 0 = 0
f_392(v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v109, v110, v111, v112, v113, v114, 0, v106, v107, v108, v95, v96, 1, 3, 4) -> f_395(v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v109, v110, v111, v112, v113, v114, 0, v106, v107, v108, v95, v96, 3, 1, 4) :|: TRUE
f_395(v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, v109, v110, v111, v112, v113, v114, 0, v106, v107, v108, v95, v96, 3, 1, 4) -> f_354(v117, v136, v97, v98, v99, v100, v101, v102, v103, v104, 0, v106, v107, v108, 3, 1, 4) :|: TRUE
f_354(v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, 0, v106, v107, v108, 3, 1, 4) -> f_355(v95, v96, v109, v97, v98, v99, v100, v101, v102, v103, v104, v110, 0, v106, v107, v108, 3, 1, 4) :|: 1 <= v109 && v110 = 3 + v109 && 4 <= v110
Combined rules. Obtained 1 rulesP rules:
f_355(1 + v117:0, 1 + v136:0, v109:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, v110:0, 0, v106:0, v107:0, v108:0, 3, 1, 4) -> f_355(v117:0, v136:0, v109:1, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, v104:0, 3 + v109:1, 0, v106:0, v107:0, v108:0, 3, 1, 4) :|: v113:0 > 0 && v111:0 > 0 && v106:0 > 0 && v117:0 > -1 && v107:0 > 0 && v136:0 > -1 && v109:1 > 0
Filtered unneeded arguments:
   f_355(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_355(x1, x2, x14, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_355(sum~cons_1~v117:0, sum~cons_1~v136:0, v106:0, v107:0) -> f_355(v117:0, v136:0, v106:0, v107:0) :|: v117:0 > -1 && v106:0 > 0 && v136:0 > -1 && v107:0 > 0 && sum~cons_1~v117:0 = 1 + v117:0 && sum~cons_1~v136:0 = 1 + v136:0

----------------------------------------

(8)
Obligation:
Rules:
f_355(sum~cons_1~v117:0, sum~cons_1~v136:0, v106:0, v107:0) -> f_355(v117:0, v136:0, v106:0, v107:0) :|: v117:0 > -1 && v106:0 > 0 && v136:0 > -1 && v107:0 > 0 && sum~cons_1~v117:0 = 1 + v117:0 && sum~cons_1~v136:0 = 1 + v136:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_355(sum~cons_1~v117:0:0, sum~cons_1~v136:0:0, v106:0:0, v107:0:0) -> f_355(v117:0:0, v136:0:0, v106:0:0, v107:0:0) :|: v136:0:0 > -1 && v107:0:0 > 0 && v106:0:0 > 0 && v117:0:0 > -1 && sum~cons_1~v117:0:0 = 1 + v117:0:0 && sum~cons_1~v136:0:0 = 1 + v136:0:0

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_355(x, x1, x2, x3)] = x1

The following rules are decreasing:
f_355(sum~cons_1~v117:0:0, sum~cons_1~v136:0:0, v106:0:0, v107:0:0) -> f_355(v117:0:0, v136:0:0, v106:0:0, v107:0:0) :|: v136:0:0 > -1 && v107:0:0 > 0 && v106:0:0 > 0 && v117:0:0 > -1 && sum~cons_1~v117:0:0 = 1 + v117:0:0 && sum~cons_1~v136:0:0 = 1 + v136:0:0
The following rules are bounded:
f_355(sum~cons_1~v117:0:0, sum~cons_1~v136:0:0, v106:0:0, v107:0:0) -> f_355(v117:0:0, v136:0:0, v106:0:0, v107:0:0) :|: v136:0:0 > -1 && v107:0:0 > 0 && v106:0:0 > 0 && v117:0:0 > -1 && sum~cons_1~v117:0:0 = 1 + v117:0:0 && sum~cons_1~v136:0:0 = 1 + v136:0:0

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
