YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/enMlA.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 22 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 2058 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 35 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 35 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/enMlA.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/enMlA.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %5
		%7 = icmp eq %6 0
		br %7, %8, %11
	8:
		%9 = load %4
		%10 = call i32 @g(i32 %9, i32 0)
		store %10, %3
		br %17
	11:
		%12 = load %4
		%13 = add i32 1, %12
		%14 = load %5
		%15 = sub i32 %14, 1
		%16 = call i32 @f(i32 %13, i32 %15)
		store %16, %3
		br %17
	17:
		%18 = load %3
		ret %18

*BasicFunctionTypename: "g" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 32
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		%7 = icmp eq %6 0
		br %7, %8, %10
	8:
		%9 = load %5
		store %9, %3
		br %16
	10:
		%11 = load %4
		%12 = sub i32 %11, 1
		%13 = load %5
		%14 = add i32 1, %13
		%15 = call i32 @g(i32 %12, i32 %14)
		store %15, %3
		br %16
	16:
		%17 = load %3
		ret %17

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 52
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %3
		%6 = load %2
		%7 = icmp sge %6 0
		br %7, %8, %15
	8:
		%9 = load %3
		%10 = icmp sge %9 0
		br %10, %11, %15
	11:
		%12 = load %2
		%13 = load %3
		%14 = call i32 @f(i32 %12, i32 %13)
		br %15
	15:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_461(v319, v320, v337, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, 0, v334, v335, v336, 3, 1, 4) -> f_463(v319, v320, v337, v339, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, 0, v334, v335, v336, 3, 1, 4) :|: 1 <= v339 && v340 = 3 + v339 && 4 <= v340
f_463(v319, v320, v337, v339, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, 0, v334, v335, v336, 3, 1, 4) -> f_464(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: 1 <= v341 && v342 = 3 + v341 && 4 <= v342
f_464(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_465(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: TRUE
f_465(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_466(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: TRUE
f_466(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_467(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: TRUE
f_467(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_468(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: TRUE
f_468(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_469(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: 0 = 0
f_469(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_471(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) :|: v319 != 0 && 1 <= v336
f_471(v319, v320, v337, v339, v341, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, 0, v334, v335, v336, 3, 1, 4) -> f_473(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: 0 = 0
f_473(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_475(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: TRUE
f_475(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_477(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: 0 = 0
f_477(v319, v320, v337, v339, v341, 0, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_479(v319, v320, v337, v339, v341, 0, v346, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: 1 + v346 = v319 && 0 <= v346
f_479(v319, v320, v337, v339, v341, 0, v346, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_481(v319, v320, v337, v339, v341, 0, v346, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: 0 = 0
f_481(v319, v320, v337, v339, v341, 0, v346, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_483(v319, v320, v337, v339, v341, 0, v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) :|: v347 = 1 + v320 && 1 <= v347
f_483(v319, v320, v337, v339, v341, 0, v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, v340, v342, v334, v335, v336, 3, 1, 4) -> f_485(v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v337, v338, v339, v340, v341, v342, 0, v334, v335, v336, v319, v320, 3, 1, 4) :|: 0 = 0
f_485(v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v337, v338, v339, v340, v341, v342, 0, v334, v335, v336, v319, v320, 3, 1, 4) -> f_487(v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v337, v338, v339, v340, v341, v342, 0, v334, v335, v336, v319, v320, 3, 1, 4) :|: TRUE
f_487(v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v337, v338, v339, v340, v341, v342, 0, v334, v335, v336, v319, v320, 3, 1, 4) -> f_459(v346, v347, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 0, v334, v335, v336, 3, 1, 4) :|: TRUE
f_459(v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, 0, v334, v335, v336, 3, 1, 4) -> f_461(v319, v320, v337, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v338, 0, v334, v335, v336, 3, 1, 4) :|: 1 <= v337 && v338 = 3 + v337 && 4 <= v338
Combined rules. Obtained 1 rulesP rules:
f_461(1 + v346:0, v320:0, v337:0, v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, v338:0, 0, v334:0, v335:0, v336:0, 3, 1, 4) -> f_461(v346:0, 1 + v320:0, v337:1, v321:0, v322:0, v323:0, v324:0, v325:0, v326:0, v327:0, v328:0, v329:0, v330:0, v331:0, v332:0, 3 + v337:1, 0, v334:0, v335:0, v336:0, 3, 1, 4) :|: v341:0 > 0 && v339:0 > 0 && v336:0 > 0 && v346:0 > -1 && v320:0 > -1 && v337:1 > 0
Filtered unneeded arguments:
   f_461(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23) -> f_461(x1, x2, x20)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_461(sum~cons_1~v346:0, v320:0, v336:0) -> f_461(v346:0, 1 + v320:0, v336:0) :|: v346:0 > -1 && v320:0 > -1 && v336:0 > 0 && sum~cons_1~v346:0 = 1 + v346:0

----------------------------------------

(9)
Obligation:
Rules:
f_461(sum~cons_1~v346:0, v320:0, v336:0) -> f_461(v346:0, 1 + v320:0, v336:0) :|: v346:0 > -1 && v320:0 > -1 && v336:0 > 0 && sum~cons_1~v346:0 = 1 + v346:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_461(sum~cons_1~v346:0:0, v320:0:0, v336:0:0) -> f_461(v346:0:0, 1 + v320:0:0, v336:0:0) :|: v346:0:0 > -1 && v320:0:0 > -1 && v336:0:0 > 0 && sum~cons_1~v346:0:0 = 1 + v346:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_461(x, x1, x2)] = x

The following rules are decreasing:
f_461(sum~cons_1~v346:0:0, v320:0:0, v336:0:0) -> f_461(v346:0:0, 1 + v320:0:0, v336:0:0) :|: v346:0:0 > -1 && v320:0:0 > -1 && v336:0:0 > 0 && sum~cons_1~v346:0:0 = 1 + v346:0:0
The following rules are bounded:
f_461(sum~cons_1~v346:0:0, v320:0:0, v336:0:0) -> f_461(v346:0:0, 1 + v320:0:0, v336:0:0) :|: v346:0:0 > -1 && v320:0:0 > -1 && v336:0:0 > 0 && sum~cons_1~v346:0:0 = 1 + v346:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_289(v55, v56, v67, v57, v58, v59, v60, v61, v62, v68, 0, v64, v65, 3, 1, 4) -> f_290(v55, v56, v67, v69, v57, v58, v59, v60, v61, v62, v68, v70, 0, v64, v65, 3, 1, 4) :|: 1 <= v69 && v70 = 3 + v69 && 4 <= v70
f_290(v55, v56, v67, v69, v57, v58, v59, v60, v61, v62, v68, v70, 0, v64, v65, 3, 1, 4) -> f_291(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: 1 <= v71 && v72 = 3 + v71 && 4 <= v72
f_291(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_292(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: TRUE
f_292(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_293(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: TRUE
f_293(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_294(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: TRUE
f_294(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_295(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: TRUE
f_295(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_296(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: 0 = 0
f_296(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_298(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) :|: v56 != 0 && 1 <= v65
f_298(v55, v56, v67, v69, v71, v57, v58, v59, v60, v61, v62, v68, v70, v72, 0, v64, v65, 3, 1, 4) -> f_300(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: 0 = 0
f_300(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_302(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: TRUE
f_302(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_304(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: 0 = 0
f_304(v55, v56, v67, v69, v71, 0, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_306(v55, v56, v67, v69, v71, 0, v75, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: v75 = 1 + v55 && 1 <= v75
f_306(v55, v56, v67, v69, v71, 0, v75, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_308(v55, v56, v67, v69, v71, 0, v75, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: 0 = 0
f_308(v55, v56, v67, v69, v71, 0, v75, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_309(v55, v56, v67, v69, v71, 0, v75, v76, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) :|: 1 + v76 = v56 && 0 <= v76
f_309(v55, v56, v67, v69, v71, 0, v75, v76, v57, v58, v59, v60, v61, v62, v68, v70, v72, v64, v65, 3, 1, 4) -> f_311(v75, v76, v57, v58, v59, v60, v61, v62, v67, v68, v69, v70, v71, v72, 0, v64, v65, v55, v56, 3, 1, 4) :|: 0 = 0
f_311(v75, v76, v57, v58, v59, v60, v61, v62, v67, v68, v69, v70, v71, v72, 0, v64, v65, v55, v56, 3, 1, 4) -> f_313(v75, v76, v57, v58, v59, v60, v61, v62, v67, v68, v69, v70, v71, v72, 0, v64, v65, v55, v56, 3, 1, 4) :|: TRUE
f_313(v75, v76, v57, v58, v59, v60, v61, v62, v67, v68, v69, v70, v71, v72, 0, v64, v65, v55, v56, 3, 1, 4) -> f_287(v75, v76, v57, v58, v59, v60, v61, v62, 0, v64, v65, 3, 1, 4) :|: TRUE
f_287(v55, v56, v57, v58, v59, v60, v61, v62, 0, v64, v65, 3, 1, 4) -> f_289(v55, v56, v67, v57, v58, v59, v60, v61, v62, v68, 0, v64, v65, 3, 1, 4) :|: 1 <= v67 && v68 = 3 + v67 && 4 <= v68
Combined rules. Obtained 1 rulesP rules:
f_289(v55:0, 1 + v76:0, v67:0, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, v68:0, 0, v64:0, v65:0, 3, 1, 4) -> f_289(1 + v55:0, v76:0, v67:1, v57:0, v58:0, v59:0, v60:0, v61:0, v62:0, 3 + v67:1, 0, v64:0, v65:0, 3, 1, 4) :|: v71:0 > 0 && v69:0 > 0 && v65:0 > 0 && v76:0 > -1 && v55:0 > -1 && v67:1 > 0
Filtered unneeded arguments:
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_289(x1, x2, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_289(v55:0, sum~cons_1~v76:0, v65:0) -> f_289(1 + v55:0, v76:0, v65:0) :|: v76:0 > -1 && v55:0 > -1 && v65:0 > 0 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(16)
Obligation:
Rules:
f_289(v55:0, sum~cons_1~v76:0, v65:0) -> f_289(1 + v55:0, v76:0, v65:0) :|: v76:0 > -1 && v55:0 > -1 && v65:0 > 0 && sum~cons_1~v76:0 = 1 + v76:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_289(v55:0:0, sum~cons_1~v76:0:0, v65:0:0) -> f_289(1 + v55:0:0, v76:0:0, v65:0:0) :|: v76:0:0 > -1 && v55:0:0 > -1 && v65:0:0 > 0 && sum~cons_1~v76:0:0 = 1 + v76:0:0

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_289 ] = f_289_2

The following rules are decreasing:
f_289(v55:0:0, sum~cons_1~v76:0:0, v65:0:0) -> f_289(1 + v55:0:0, v76:0:0, v65:0:0) :|: v76:0:0 > -1 && v55:0:0 > -1 && v65:0:0 > 0 && sum~cons_1~v76:0:0 = 1 + v76:0:0

The following rules are bounded:
f_289(v55:0:0, sum~cons_1~v76:0:0, v65:0:0) -> f_289(1 + v55:0:0, v76:0:0, v65:0:0) :|: v76:0:0 > -1 && v55:0:0 > -1 && v65:0:0 > 0 && sum~cons_1~v76:0:0 = 1 + v76:0:0


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
