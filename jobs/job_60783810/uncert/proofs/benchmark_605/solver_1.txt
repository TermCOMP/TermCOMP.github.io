MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/N0zru.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 74 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 21.2 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/N0zru.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/N0zru.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: mode1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p8_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st4 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st5 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st6 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode7 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id7 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send7 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st7 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p7_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode8 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p7_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id8 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send8 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st8 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p8_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@node1,@node2,@node3,@node4,@node5,@node6,@node7,@node8) type: [8 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: p1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p4 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p5 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p6 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p7 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p8 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_msg_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "node1" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 139
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode1
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @r1
		%7 = sext i8 %6 to i32
		%8 = add i32 %7, 1
		%9 = trunc i32 %8 to i8
		store %9, @r1
		%10 = load @p8_old
		store %10, %1
		%11 = load @nomsg
		store %11, @p8_old
		%12 = load %1
		%13 = sext i8 %12 to i32
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = icmp ne %13 %15
		br %16, %17, %36
	17:
		%18 = load %1
		%19 = sext i8 %18 to i32
		%20 = load @id1
		%21 = sext i8 %20 to i32
		%22 = icmp sgt %19 %21
		br %22, %23, %25
	23:
		%24 = load %1
		store %24, @send1
		br %35
	25:
		%26 = load %1
		%27 = sext i8 %26 to i32
		%28 = load @id1
		%29 = sext i8 %28 to i32
		%30 = icmp eq %27 %29
		br %30, %31, %32
	31:
		store 1, @st1
		br %34
	32:
		%33 = load %1
		store %33, @send1
		br %34
	34:
		br %35
	35:
		br %36
	36:
		store 0, @mode1
		br %58
	37:
		%38 = load @send1
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp ne %39 %41
		br %42, %43, %52
	43:
		%44 = load @p1_new
		%45 = sext i8 %44 to i32
		%46 = load @nomsg
		%47 = sext i8 %46 to i32
		%48 = icmp eq %45 %47
		br %48, %49, %52
	49:
		%50 = load @send1
		%51 = sext i8 %50 to i32
		br %55
	52:
		%53 = load @p1_new
		%54 = sext i8 %53 to i32
		br %55
	55:
		%56 = phi [%51, %49], [%54, %52]
		%57 = trunc i32 %56 to i8
		store %57, @p1_new
		store 1, @mode1
		br %58
	58:
		ret void

*BasicFunctionTypename: "node2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 206
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode2
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p1_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p1_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id2
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send2
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id2
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st2
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode2
		br %52
	31:
		%32 = load @send2
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p2_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send2
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p2_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p2_new
		store 1, @mode2
		br %52
	52:
		ret void

*BasicFunctionTypename: "node3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 265
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode3
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p2_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p2_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id3
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send3
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id3
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st3
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode3
		br %52
	31:
		%32 = load @send3
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p3_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send3
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p3_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p3_new
		store 1, @mode3
		br %52
	52:
		ret void

*BasicFunctionTypename: "node4" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 324
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode4
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p3_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p3_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id4
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send4
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id4
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st4
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode4
		br %52
	31:
		%32 = load @send4
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p4_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send4
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p4_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p4_new
		store 1, @mode4
		br %52
	52:
		ret void

*BasicFunctionTypename: "node5" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 383
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode5
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p4_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p4_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id5
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send5
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id5
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st5
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode5
		br %52
	31:
		%32 = load @send5
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p5_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send5
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p5_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p5_new
		store 1, @mode5
		br %52
	52:
		ret void

*BasicFunctionTypename: "node6" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 442
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode6
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p5_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p5_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id6
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send6
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id6
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st6
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode6
		br %52
	31:
		%32 = load @send6
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p6_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send6
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p6_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p6_new
		store 1, @mode6
		br %52
	52:
		ret void

*BasicFunctionTypename: "node7" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 501
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode7
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p6_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p6_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id7
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send7
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id7
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st7
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode7
		br %52
	31:
		%32 = load @send7
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p7_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send7
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p7_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p7_new
		store 1, @mode7
		br %52
	52:
		ret void

*BasicFunctionTypename: "node8" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 560
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode8
		%4 = trunc i8 %3 to i1
		br %4, %5, %31
	5:
		%6 = load @p7_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p7_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %30
	13:
		%14 = load %1
		%15 = sext i8 %14 to i32
		%16 = load @id8
		%17 = sext i8 %16 to i32
		%18 = icmp sgt %15 %17
		br %18, %19, %21
	19:
		%20 = load %1
		store %20, @send8
		br %29
	21:
		%22 = load %1
		%23 = sext i8 %22 to i32
		%24 = load @id8
		%25 = sext i8 %24 to i32
		%26 = icmp eq %23 %25
		br %26, %27, %28
	27:
		store 1, @st8
		br %28
	28:
		br %29
	29:
		br %30
	30:
		store 0, @mode8
		br %52
	31:
		%32 = load @send8
		%33 = sext i8 %32 to i32
		%34 = load @nomsg
		%35 = sext i8 %34 to i32
		%36 = icmp ne %33 %35
		br %36, %37, %46
	37:
		%38 = load @p8_new
		%39 = sext i8 %38 to i32
		%40 = load @nomsg
		%41 = sext i8 %40 to i32
		%42 = icmp eq %39 %41
		br %42, %43, %46
	43:
		%44 = load @send8
		%45 = sext i8 %44 to i32
		br %49
	46:
		%47 = load @p8_new
		%48 = sext i8 %47 to i32
		br %49
	49:
		%50 = phi [%45, %43], [%48, %46]
		%51 = trunc i32 %50 to i8
		store %51, @p8_new
		store 1, @mode8
		br %52
	52:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 619
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @r1
		%3 = sext i8 %2 to i32
		%4 = icmp eq %3 0
		br %4, %5, %446
	5:
		%6 = load @id1
		%7 = sext i8 %6 to i32
		%8 = icmp sge %7 0
		br %8, %9, %444
	9:
		%10 = load @st1
		%11 = sext i8 %10 to i32
		%12 = icmp eq %11 0
		br %12, %13, %442
	13:
		%14 = load @send1
		%15 = sext i8 %14 to i32
		%16 = load @id1
		%17 = sext i8 %16 to i32
		%18 = icmp eq %15 %17
		br %18, %19, %440
	19:
		%20 = load @mode1
		%21 = trunc i8 %20 to i1
		%22 = zext i1 %21 to i32
		%23 = icmp eq %22 0
		br %23, %24, %438
	24:
		%25 = load @id2
		%26 = sext i8 %25 to i32
		%27 = icmp sge %26 0
		br %27, %28, %436
	28:
		%29 = load @st2
		%30 = sext i8 %29 to i32
		%31 = icmp eq %30 0
		br %31, %32, %434
	32:
		%33 = load @send2
		%34 = sext i8 %33 to i32
		%35 = load @id2
		%36 = sext i8 %35 to i32
		%37 = icmp eq %34 %36
		br %37, %38, %432
	38:
		%39 = load @mode2
		%40 = trunc i8 %39 to i1
		%41 = zext i1 %40 to i32
		%42 = icmp eq %41 0
		br %42, %43, %430
	43:
		%44 = load @id3
		%45 = sext i8 %44 to i32
		%46 = icmp sge %45 0
		br %46, %47, %428
	47:
		%48 = load @st3
		%49 = sext i8 %48 to i32
		%50 = icmp eq %49 0
		br %50, %51, %426
	51:
		%52 = load @send3
		%53 = sext i8 %52 to i32
		%54 = load @id3
		%55 = sext i8 %54 to i32
		%56 = icmp eq %53 %55
		br %56, %57, %424
	57:
		%58 = load @mode3
		%59 = trunc i8 %58 to i1
		%60 = zext i1 %59 to i32
		%61 = icmp eq %60 0
		br %61, %62, %422
	62:
		%63 = load @id4
		%64 = sext i8 %63 to i32
		%65 = icmp sge %64 0
		br %65, %66, %420
	66:
		%67 = load @st4
		%68 = sext i8 %67 to i32
		%69 = icmp eq %68 0
		br %69, %70, %418
	70:
		%71 = load @send4
		%72 = sext i8 %71 to i32
		%73 = load @id4
		%74 = sext i8 %73 to i32
		%75 = icmp eq %72 %74
		br %75, %76, %416
	76:
		%77 = load @mode4
		%78 = trunc i8 %77 to i1
		%79 = zext i1 %78 to i32
		%80 = icmp eq %79 0
		br %80, %81, %414
	81:
		%82 = load @id5
		%83 = sext i8 %82 to i32
		%84 = icmp sge %83 0
		br %84, %85, %412
	85:
		%86 = load @st5
		%87 = sext i8 %86 to i32
		%88 = icmp eq %87 0
		br %88, %89, %410
	89:
		%90 = load @send5
		%91 = sext i8 %90 to i32
		%92 = load @id5
		%93 = sext i8 %92 to i32
		%94 = icmp eq %91 %93
		br %94, %95, %408
	95:
		%96 = load @mode5
		%97 = trunc i8 %96 to i1
		%98 = zext i1 %97 to i32
		%99 = icmp eq %98 0
		br %99, %100, %406
	100:
		%101 = load @id6
		%102 = sext i8 %101 to i32
		%103 = icmp sge %102 0
		br %103, %104, %404
	104:
		%105 = load @st6
		%106 = sext i8 %105 to i32
		%107 = icmp eq %106 0
		br %107, %108, %402
	108:
		%109 = load @send6
		%110 = sext i8 %109 to i32
		%111 = load @id6
		%112 = sext i8 %111 to i32
		%113 = icmp eq %110 %112
		br %113, %114, %400
	114:
		%115 = load @mode6
		%116 = trunc i8 %115 to i1
		%117 = zext i1 %116 to i32
		%118 = icmp eq %117 0
		br %118, %119, %398
	119:
		%120 = load @id7
		%121 = sext i8 %120 to i32
		%122 = icmp sge %121 0
		br %122, %123, %396
	123:
		%124 = load @st7
		%125 = sext i8 %124 to i32
		%126 = icmp eq %125 0
		br %126, %127, %394
	127:
		%128 = load @send7
		%129 = sext i8 %128 to i32
		%130 = load @id7
		%131 = sext i8 %130 to i32
		%132 = icmp eq %129 %131
		br %132, %133, %392
	133:
		%134 = load @mode7
		%135 = trunc i8 %134 to i1
		%136 = zext i1 %135 to i32
		%137 = icmp eq %136 0
		br %137, %138, %390
	138:
		%139 = load @id8
		%140 = sext i8 %139 to i32
		%141 = icmp sge %140 0
		br %141, %142, %388
	142:
		%143 = load @st8
		%144 = sext i8 %143 to i32
		%145 = icmp eq %144 0
		br %145, %146, %386
	146:
		%147 = load @send8
		%148 = sext i8 %147 to i32
		%149 = load @id8
		%150 = sext i8 %149 to i32
		%151 = icmp eq %148 %150
		br %151, %152, %384
	152:
		%153 = load @mode8
		%154 = trunc i8 %153 to i1
		%155 = zext i1 %154 to i32
		%156 = icmp eq %155 0
		br %156, %157, %382
	157:
		%158 = load @id1
		%159 = sext i8 %158 to i32
		%160 = load @id2
		%161 = sext i8 %160 to i32
		%162 = icmp ne %159 %161
		br %162, %163, %380
	163:
		%164 = load @id1
		%165 = sext i8 %164 to i32
		%166 = load @id3
		%167 = sext i8 %166 to i32
		%168 = icmp ne %165 %167
		br %168, %169, %378
	169:
		%170 = load @id1
		%171 = sext i8 %170 to i32
		%172 = load @id4
		%173 = sext i8 %172 to i32
		%174 = icmp ne %171 %173
		br %174, %175, %376
	175:
		%176 = load @id1
		%177 = sext i8 %176 to i32
		%178 = load @id5
		%179 = sext i8 %178 to i32
		%180 = icmp ne %177 %179
		br %180, %181, %374
	181:
		%182 = load @id1
		%183 = sext i8 %182 to i32
		%184 = load @id6
		%185 = sext i8 %184 to i32
		%186 = icmp ne %183 %185
		br %186, %187, %372
	187:
		%188 = load @id1
		%189 = sext i8 %188 to i32
		%190 = load @id7
		%191 = sext i8 %190 to i32
		%192 = icmp ne %189 %191
		br %192, %193, %370
	193:
		%194 = load @id1
		%195 = sext i8 %194 to i32
		%196 = load @id8
		%197 = sext i8 %196 to i32
		%198 = icmp ne %195 %197
		br %198, %199, %368
	199:
		%200 = load @id2
		%201 = sext i8 %200 to i32
		%202 = load @id3
		%203 = sext i8 %202 to i32
		%204 = icmp ne %201 %203
		br %204, %205, %366
	205:
		%206 = load @id2
		%207 = sext i8 %206 to i32
		%208 = load @id4
		%209 = sext i8 %208 to i32
		%210 = icmp ne %207 %209
		br %210, %211, %364
	211:
		%212 = load @id2
		%213 = sext i8 %212 to i32
		%214 = load @id5
		%215 = sext i8 %214 to i32
		%216 = icmp ne %213 %215
		br %216, %217, %362
	217:
		%218 = load @id2
		%219 = sext i8 %218 to i32
		%220 = load @id6
		%221 = sext i8 %220 to i32
		%222 = icmp ne %219 %221
		br %222, %223, %360
	223:
		%224 = load @id2
		%225 = sext i8 %224 to i32
		%226 = load @id7
		%227 = sext i8 %226 to i32
		%228 = icmp ne %225 %227
		br %228, %229, %358
	229:
		%230 = load @id2
		%231 = sext i8 %230 to i32
		%232 = load @id8
		%233 = sext i8 %232 to i32
		%234 = icmp ne %231 %233
		br %234, %235, %356
	235:
		%236 = load @id3
		%237 = sext i8 %236 to i32
		%238 = load @id4
		%239 = sext i8 %238 to i32
		%240 = icmp ne %237 %239
		br %240, %241, %354
	241:
		%242 = load @id3
		%243 = sext i8 %242 to i32
		%244 = load @id5
		%245 = sext i8 %244 to i32
		%246 = icmp ne %243 %245
		br %246, %247, %352
	247:
		%248 = load @id3
		%249 = sext i8 %248 to i32
		%250 = load @id6
		%251 = sext i8 %250 to i32
		%252 = icmp ne %249 %251
		br %252, %253, %350
	253:
		%254 = load @id3
		%255 = sext i8 %254 to i32
		%256 = load @id7
		%257 = sext i8 %256 to i32
		%258 = icmp ne %255 %257
		br %258, %259, %348
	259:
		%260 = load @id3
		%261 = sext i8 %260 to i32
		%262 = load @id8
		%263 = sext i8 %262 to i32
		%264 = icmp ne %261 %263
		br %264, %265, %346
	265:
		%266 = load @id4
		%267 = sext i8 %266 to i32
		%268 = load @id5
		%269 = sext i8 %268 to i32
		%270 = icmp ne %267 %269
		br %270, %271, %344
	271:
		%272 = load @id4
		%273 = sext i8 %272 to i32
		%274 = load @id6
		%275 = sext i8 %274 to i32
		%276 = icmp ne %273 %275
		br %276, %277, %342
	277:
		%278 = load @id4
		%279 = sext i8 %278 to i32
		%280 = load @id7
		%281 = sext i8 %280 to i32
		%282 = icmp ne %279 %281
		br %282, %283, %340
	283:
		%284 = load @id4
		%285 = sext i8 %284 to i32
		%286 = load @id8
		%287 = sext i8 %286 to i32
		%288 = icmp ne %285 %287
		br %288, %289, %338
	289:
		%290 = load @id5
		%291 = sext i8 %290 to i32
		%292 = load @id6
		%293 = sext i8 %292 to i32
		%294 = icmp ne %291 %293
		br %294, %295, %336
	295:
		%296 = load @id5
		%297 = sext i8 %296 to i32
		%298 = load @id7
		%299 = sext i8 %298 to i32
		%300 = icmp ne %297 %299
		br %300, %301, %334
	301:
		%302 = load @id5
		%303 = sext i8 %302 to i32
		%304 = load @id8
		%305 = sext i8 %304 to i32
		%306 = icmp ne %303 %305
		br %306, %307, %332
	307:
		%308 = load @id6
		%309 = sext i8 %308 to i32
		%310 = load @id7
		%311 = sext i8 %310 to i32
		%312 = icmp ne %309 %311
		br %312, %313, %330
	313:
		%314 = load @id6
		%315 = sext i8 %314 to i32
		%316 = load @id8
		%317 = sext i8 %316 to i32
		%318 = icmp ne %315 %317
		br %318, %319, %328
	319:
		%320 = load @id7
		%321 = sext i8 %320 to i32
		%322 = load @id8
		%323 = sext i8 %322 to i32
		%324 = icmp ne %321 %323
		br %324, %325, %326
	325:
		store 1, %1
		br %327
	326:
		store 0, %1
		br %327
	327:
		br %329
	328:
		store 0, %1
		br %329
	329:
		br %331
	330:
		store 0, %1
		br %331
	331:
		br %333
	332:
		store 0, %1
		br %333
	333:
		br %335
	334:
		store 0, %1
		br %335
	335:
		br %337
	336:
		store 0, %1
		br %337
	337:
		br %339
	338:
		store 0, %1
		br %339
	339:
		br %341
	340:
		store 0, %1
		br %341
	341:
		br %343
	342:
		store 0, %1
		br %343
	343:
		br %345
	344:
		store 0, %1
		br %345
	345:
		br %347
	346:
		store 0, %1
		br %347
	347:
		br %349
	348:
		store 0, %1
		br %349
	349:
		br %351
	350:
		store 0, %1
		br %351
	351:
		br %353
	352:
		store 0, %1
		br %353
	353:
		br %355
	354:
		store 0, %1
		br %355
	355:
		br %357
	356:
		store 0, %1
		br %357
	357:
		br %359
	358:
		store 0, %1
		br %359
	359:
		br %361
	360:
		store 0, %1
		br %361
	361:
		br %363
	362:
		store 0, %1
		br %363
	363:
		br %365
	364:
		store 0, %1
		br %365
	365:
		br %367
	366:
		store 0, %1
		br %367
	367:
		br %369
	368:
		store 0, %1
		br %369
	369:
		br %371
	370:
		store 0, %1
		br %371
	371:
		br %373
	372:
		store 0, %1
		br %373
	373:
		br %375
	374:
		store 0, %1
		br %375
	375:
		br %377
	376:
		store 0, %1
		br %377
	377:
		br %379
	378:
		store 0, %1
		br %379
	379:
		br %381
	380:
		store 0, %1
		br %381
	381:
		br %383
	382:
		store 0, %1
		br %383
	383:
		br %385
	384:
		store 0, %1
		br %385
	385:
		br %387
	386:
		store 0, %1
		br %387
	387:
		br %389
	388:
		store 0, %1
		br %389
	389:
		br %391
	390:
		store 0, %1
		br %391
	391:
		br %393
	392:
		store 0, %1
		br %393
	393:
		br %395
	394:
		store 0, %1
		br %395
	395:
		br %397
	396:
		store 0, %1
		br %397
	397:
		br %399
	398:
		store 0, %1
		br %399
	399:
		br %401
	400:
		store 0, %1
		br %401
	401:
		br %403
	402:
		store 0, %1
		br %403
	403:
		br %405
	404:
		store 0, %1
		br %405
	405:
		br %407
	406:
		store 0, %1
		br %407
	407:
		br %409
	408:
		store 0, %1
		br %409
	409:
		br %411
	410:
		store 0, %1
		br %411
	411:
		br %413
	412:
		store 0, %1
		br %413
	413:
		br %415
	414:
		store 0, %1
		br %415
	415:
		br %417
	416:
		store 0, %1
		br %417
	417:
		br %419
	418:
		store 0, %1
		br %419
	419:
		br %421
	420:
		store 0, %1
		br %421
	421:
		br %423
	422:
		store 0, %1
		br %423
	423:
		br %425
	424:
		store 0, %1
		br %425
	425:
		br %427
	426:
		store 0, %1
		br %427
	427:
		br %429
	428:
		store 0, %1
		br %429
	429:
		br %431
	430:
		store 0, %1
		br %431
	431:
		br %433
	432:
		store 0, %1
		br %433
	433:
		br %435
	434:
		store 0, %1
		br %435
	435:
		br %437
	436:
		store 0, %1
		br %437
	437:
		br %439
	438:
		store 0, %1
		br %439
	439:
		br %441
	440:
		store 0, %1
		br %441
	441:
		br %443
	442:
		store 0, %1
		br %443
	443:
		br %445
	444:
		store 0, %1
		br %445
	445:
		br %447
	446:
		store 0, %1
		br %447
	447:
		%448 = load %1
		ret %448

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1249
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @st1
		%3 = sext i8 %2 to i32
		%4 = load @st2
		%5 = sext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = load @st3
		%8 = sext i8 %7 to i32
		%9 = add i32 %6, %8
		%10 = load @st4
		%11 = sext i8 %10 to i32
		%12 = add i32 %9, %11
		%13 = load @st5
		%14 = sext i8 %13 to i32
		%15 = add i32 %12, %14
		%16 = load @st6
		%17 = sext i8 %16 to i32
		%18 = add i32 %15, %17
		%19 = load @st7
		%20 = sext i8 %19 to i32
		%21 = add i32 %18, %20
		%22 = load @st8
		%23 = sext i8 %22 to i32
		%24 = add i32 %21, %23
		%25 = icmp sle %24 1
		br %25, %26, %94
	26:
		%27 = load @r1
		%28 = sext i8 %27 to i32
		%29 = icmp sge %28 8
		br %29, %30, %31
	30:
		br %57
	31:
		%32 = load @st1
		%33 = sext i8 %32 to i32
		%34 = load @st2
		%35 = sext i8 %34 to i32
		%36 = add i32 %33, %35
		%37 = load @st3
		%38 = sext i8 %37 to i32
		%39 = add i32 %36, %38
		%40 = load @st4
		%41 = sext i8 %40 to i32
		%42 = add i32 %39, %41
		%43 = load @st5
		%44 = sext i8 %43 to i32
		%45 = add i32 %42, %44
		%46 = load @st6
		%47 = sext i8 %46 to i32
		%48 = add i32 %45, %47
		%49 = load @st7
		%50 = sext i8 %49 to i32
		%51 = add i32 %48, %50
		%52 = load @st8
		%53 = sext i8 %52 to i32
		%54 = add i32 %51, %53
		%55 = icmp eq %54 0
		br %55, %56, %91
	56:
		br %57
	57:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%58 = load @r1
		%59 = sext i8 %58 to i32
		%60 = icmp slt %59 8
		br %60, %61, %62
	61:
		store 1, %1
		br %90
	62:
		%63 = load @st1
		%64 = sext i8 %63 to i32
		%65 = load @st2
		%66 = sext i8 %65 to i32
		%67 = add i32 %64, %66
		%68 = load @st3
		%69 = sext i8 %68 to i32
		%70 = add i32 %67, %69
		%71 = load @st4
		%72 = sext i8 %71 to i32
		%73 = add i32 %70, %72
		%74 = load @st5
		%75 = sext i8 %74 to i32
		%76 = add i32 %73, %75
		%77 = load @st6
		%78 = sext i8 %77 to i32
		%79 = add i32 %76, %78
		%80 = load @st7
		%81 = sext i8 %80 to i32
		%82 = add i32 %79, %81
		%83 = load @st8
		%84 = sext i8 %83 to i32
		%85 = add i32 %82, %84
		%86 = icmp eq %85 1
		br %86, %87, %88
	87:
		store 1, %1
		br %89
	88:
		store 0, %1
		br %89
	89:
		br %90
	90:
		br %92
	91:
		store 0, %1
		br %92
	92:
		br %93
	93:
		br %95
	94:
		store 0, %1
		br %95
	95:
		%96 = load %1
		ret %96

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1364
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call signext i8 @__VERIFIER_nondet_char()
		store %4, @r1
		%5 = call signext i8 @__VERIFIER_nondet_char()
		store %5, @id1
		%6 = call signext i8 @__VERIFIER_nondet_char()
		store %6, @st1
		%7 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %7, @send1
		%8 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%9 = zext i1 %8 to i8
		store %9, @mode1
		%10 = call signext i8 @__VERIFIER_nondet_char()
		store %10, @id2
		%11 = call signext i8 @__VERIFIER_nondet_char()
		store %11, @st2
		%12 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %12, @send2
		%13 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%14 = zext i1 %13 to i8
		store %14, @mode2
		%15 = call signext i8 @__VERIFIER_nondet_char()
		store %15, @id3
		%16 = call signext i8 @__VERIFIER_nondet_char()
		store %16, @st3
		%17 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %17, @send3
		%18 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%19 = zext i1 %18 to i8
		store %19, @mode3
		%20 = call signext i8 @__VERIFIER_nondet_char()
		store %20, @id4
		%21 = call signext i8 @__VERIFIER_nondet_char()
		store %21, @st4
		%22 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %22, @send4
		%23 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%24 = zext i1 %23 to i8
		store %24, @mode4
		%25 = call signext i8 @__VERIFIER_nondet_char()
		store %25, @id5
		%26 = call signext i8 @__VERIFIER_nondet_char()
		store %26, @st5
		%27 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %27, @send5
		%28 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%29 = zext i1 %28 to i8
		store %29, @mode5
		%30 = call signext i8 @__VERIFIER_nondet_char()
		store %30, @id6
		%31 = call signext i8 @__VERIFIER_nondet_char()
		store %31, @st6
		%32 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %32, @send6
		%33 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%34 = zext i1 %33 to i8
		store %34, @mode6
		%35 = call signext i8 @__VERIFIER_nondet_char()
		store %35, @id7
		%36 = call signext i8 @__VERIFIER_nondet_char()
		store %36, @st7
		%37 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %37, @send7
		%38 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%39 = zext i1 %38 to i8
		store %39, @mode7
		%40 = call signext i8 @__VERIFIER_nondet_char()
		store %40, @id8
		%41 = call signext i8 @__VERIFIER_nondet_char()
		store %41, @st8
		%42 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %42, @send8
		%43 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%44 = zext i1 %43 to i8
		store %44, @mode8
		%45 = call i32 @init()
		store %45, %3
		%46 = load %3
		%47 = icmp ne %46 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %47)
		%48 = load @nomsg
		store %48, @p1_old
		%49 = load @nomsg
		store %49, @p1_new
		%50 = load @nomsg
		store %50, @p2_old
		%51 = load @nomsg
		store %51, @p2_new
		%52 = load @nomsg
		store %52, @p3_old
		%53 = load @nomsg
		store %53, @p3_new
		%54 = load @nomsg
		store %54, @p4_old
		%55 = load @nomsg
		store %55, @p4_new
		%56 = load @nomsg
		store %56, @p5_old
		%57 = load @nomsg
		store %57, @p5_new
		%58 = load @nomsg
		store %58, @p6_old
		%59 = load @nomsg
		store %59, @p6_new
		%60 = load @nomsg
		store %60, @p7_old
		%61 = load @nomsg
		store %61, @p7_new
		%62 = load @nomsg
		store %62, @p8_old
		%63 = load @nomsg
		store %63, @p8_new
		store 0, %3
		br %64
	64:
		%65 = load %3
		%66 = icmp slt %65 16
		br %66, %67, %89
	67:
		Unnamed Call-Instruction = call BasicVoidType @node1()
		Unnamed Call-Instruction = call BasicVoidType @node2()
		Unnamed Call-Instruction = call BasicVoidType @node3()
		Unnamed Call-Instruction = call BasicVoidType @node4()
		Unnamed Call-Instruction = call BasicVoidType @node5()
		Unnamed Call-Instruction = call BasicVoidType @node6()
		Unnamed Call-Instruction = call BasicVoidType @node7()
		Unnamed Call-Instruction = call BasicVoidType @node8()
		%68 = load @p1_new
		store %68, @p1_old
		%69 = load @nomsg
		store %69, @p1_new
		%70 = load @p2_new
		store %70, @p2_old
		%71 = load @nomsg
		store %71, @p2_new
		%72 = load @p3_new
		store %72, @p3_old
		%73 = load @nomsg
		store %73, @p3_new
		%74 = load @p4_new
		store %74, @p4_old
		%75 = load @nomsg
		store %75, @p4_new
		%76 = load @p5_new
		store %76, @p5_old
		%77 = load @nomsg
		store %77, @p5_new
		%78 = load @p6_new
		store %78, @p6_old
		%79 = load @nomsg
		store %79, @p6_new
		%80 = load @p7_new
		store %80, @p7_old
		%81 = load @nomsg
		store %81, @p7_new
		%82 = load @p8_new
		store %82, @p8_old
		%83 = load @nomsg
		store %83, @p8_new
		%84 = call i32 @check()
		store %84, %2
		%85 = load %2
		%86 = icmp ne %85 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %86)
		%87 = load %3
		%88 = add i32 %87, 1
		store %88, %3
		br %64
	89:
		%90 = load %1
		ret %90

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1527
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1539
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCCInstruction count:1317
deleted entry node of node1
deleted entry node of node2
deleted entry node of node3
deleted entry node of node4
deleted entry node of node5
deleted entry node of node6
deleted entry node of node7
deleted entry node of node8
deleted entry node of check
