YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PcTQB.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 18 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 588 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 49 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 10 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PcTQB.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PcTQB.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		%8 = load %3
		store 1, %8
		br %9
	9:
		%10 = load %2
		%11 = load %10
		%12 = icmp sgt %11 0
		br %12, %13, %24
	13:
		%14 = load %2
		%15 = load %14
		%16 = load %3
		%17 = load %16
		%18 = sub i32 %15, %17
		%19 = load %2
		store %18, %19
		%20 = load %3
		%21 = load %20
		%22 = add i32 %21, 1
		%23 = load %3
		store %22, %23
		br %9
	24:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_271(v119, v120, v121, v122, v123, v124, 1, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_272(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_272(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_273(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 < v127
f_273(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_275(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_275(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_277(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: TRUE
f_277(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_279(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_279(v119, v120, v121, v122, v123, v127, 1, v124, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_280(v119, v120, v121, v122, v123, v127, 1, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_280(v119, v120, v121, v122, v123, v127, 1, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_281(v119, v120, v121, v122, v123, v127, 1, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_281(v119, v120, v121, v122, v123, v127, 1, v126, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_282(v119, v120, v121, v122, v123, v127, 1, v128, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_282(v119, v120, v121, v122, v123, v127, 1, v128, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_283(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: v135 + v128 = v127
f_283(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_284(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_284(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_285(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: TRUE
f_285(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_286(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_286(v119, v120, v121, v122, v123, v127, 1, v128, v135, v126, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_287(v119, v120, v121, v122, v123, v127, 1, v128, v135, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_287(v119, v120, v121, v122, v123, v127, 1, v128, v135, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_288(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: v137 = 1 + v128 && 3 <= v137
f_288(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_289(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_289(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_290(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: TRUE
f_290(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_291(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: TRUE
f_291(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_270(v119, v120, v121, v122, v123, v127, 1, v128, v135, v137, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: TRUE
f_270(v119, v120, v121, v122, v123, v124, 1, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) -> f_271(v119, v120, v121, v122, v123, v124, 1, v126, v127, v128, v129, v130, v131, v132, v133, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_271(v119:0, v120:0, v121:0, v122:0, v123:0, v124:0, 1, v126:0, v135:0 + v128:0, v128:0, v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 7, 2, 4, 8) -> f_271(v119:0, v120:0, v121:0, v122:0, v123:0, v135:0 + v128:0, 1, v128:0, v135:0, 1 + v128:0, v129:0, v130:0, v131:0, v132:0, v133:0, 0, 3, 7, 2, 4, 8) :|: v128:0 > 1 && v135:0 + v128:0 > 0
Filtered unneeded arguments:
   f_271(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_271(x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_271(sum~v135:0~v128:0, v128:0) -> f_271(v135:0, 1 + v128:0) :|: v128:0 > 1 && v135:0 + v128:0 > 0 && sum~v135:0~v128:0 = v135:0 + v128:0

----------------------------------------

(8)
Obligation:
Rules:
f_271(sum~v135:0~v128:0, v128:0) -> f_271(v135:0, 1 + v128:0) :|: v128:0 > 1 && v135:0 + v128:0 > 0 && sum~v135:0~v128:0 = v135:0 + v128:0

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_271(sum~v135:0:0~v128:0:0, v128:0:0) -> f_271(v135:0:0, 1 + v128:0:0) :|: v128:0:0 > 1 && v135:0:0 + v128:0:0 > 0 && sum~v135:0:0~v128:0:0 = v135:0:0 + v128:0:0

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_271 ] = 1/2*f_271_1

The following rules are decreasing:
f_271(sum~v135:0:0~v128:0:0, v128:0:0) -> f_271(v135:0:0, 1 + v128:0:0) :|: v128:0:0 > 1 && v135:0:0 + v128:0:0 > 0 && sum~v135:0:0~v128:0:0 = v135:0:0 + v128:0:0

The following rules are bounded:
f_271(sum~v135:0:0~v128:0:0, v128:0:0) -> f_271(v135:0:0, 1 + v128:0:0) :|: v128:0:0 > 1 && v135:0:0 + v128:0:0 > 0 && sum~v135:0:0~v128:0:0 = v135:0:0 + v128:0:0


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
