YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0cHCx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 20 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1667 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 3 ms]
        (9) IntTRS
        (10) TerminationGraphProcessor [EQUIVALENT, 4 ms]
        (11) YES
    (12) LLVM Symbolic Execution SCC
        (13) SCC2IRS [SOUND, 5 ms]
        (14) IntTRS
        (15) TerminationGraphProcessor [EQUIVALENT, 2 ms]
        (16) YES
    (17) LLVM Symbolic Execution SCC
        (18) SCC2IRS [SOUND, 4 ms]
        (19) IntTRS
        (20) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (21) IntTRS
        (22) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/0cHCx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/0cHCx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		store 0, %4
		br %7
	7:
		%8 = load %2
		%9 = icmp sgt %8 1
		br %9, %10, %26
	10:
		%11 = load %2
		%12 = sub i32 %11, 2
		store %12, %3
		store 0, %5
		br %13
	13:
		%14 = load %3
		%15 = icmp sgt %14 1
		br %15, %16, %21
	16:
		%17 = load %3
		%18 = sub i32 %17, 2
		store %18, %3
		%19 = load %5
		%20 = add i32 %19, 1
		store %20, %5
		br %13
	21:
		%22 = load %3
		%23 = add i32 %22, 1
		store %23, %2
		%24 = load %4
		%25 = add i32 %24, 1
		store %25, %4
		br %7
	26:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_550(v761, v762, v763, v764, v765, v766, v776, 1, v767, v769, v770, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 2, 4) -> f_551(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: 1 < v776 && v770 = 1 && v776 = 2 && 0 = 0
f_551(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_553(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: 0 = 0
f_553(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_555(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: TRUE
f_555(v761, v762, v763, v764, v765, v766, 2, 1, v767, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_557(v761, v762, v763, v764, v765, v766, 2, 1, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: 0 = 0
f_557(v761, v762, v763, v764, v765, v766, 2, 1, v769, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_558(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: 0 = 0
f_558(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_559(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) :|: TRUE
f_559(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 4) -> f_560(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_560(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_561(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_561(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_562(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: 0 = 0
f_562(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_563(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: 0 = 0
f_563(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_564(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_564(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_565(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: 0 = 0
f_565(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_566(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: 0 = 0
f_566(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_567(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_567(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, 3, 4) -> f_568(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v779, v780, v781, v782, v783, 3, 4) :|: 0 = 0
f_568(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v779, v780, v781, v782, v783, 3, 4) -> f_569(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) :|: v817 = 1 + v778 && 2 <= v817
f_569(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) -> f_570(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_570(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) -> f_571(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) :|: TRUE
f_571(v761, v762, v763, v764, v765, v766, 2, 1, 0, v772, v773, v774, v775, v778, v817, v779, v780, v781, v782, v783, 3, 4) -> f_549(v761, v762, v763, v764, v765, v766, 2, 1, 0, 0, 0, v772, v773, v774, v775, 1, v778, v817, v779, v780, v781, v782, v783, 0, 3, 2, 4) :|: TRUE
f_549(v761, v762, v763, v764, v765, v766, v767, 1, v769, v770, 0, v772, v773, v774, v775, v776, v777, v778, v779, v780, v781, v782, v783, v784, 3, 2, 4) -> f_550(v761, v762, v763, v764, v765, v766, v776, 1, v767, v769, v770, 0, v772, v773, v774, v775, v777, v778, v779, v780, v781, v782, v783, v784, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_550(v761:0, v762:0, v763:0, v764:0, v765:0, v766:0, 2, 1, v767:0, v769:0, 1, 0, v772:0, v773:0, v774:0, v775:0, v777:0, v778:0, v779:0, v780:0, v781:0, v782:0, v783:0, v784:0, 3, 2, 4) -> f_550(v761:0, v762:0, v763:0, v764:0, v765:0, v766:0, 1, 1, 2, 0, 0, 0, v772:0, v773:0, v774:0, v775:0, v778:0, 1 + v778:0, v779:0, v780:0, v781:0, v782:0, v783:0, 0, 3, 2, 4) :|: v778:0 > 0
Filtered unneeded arguments:
   f_550(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27) -> f_550(x7, x11, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_550(cons_2, cons_1, v778:0) -> f_550(1, 0, 1 + v778:0) :|: v778:0 > 0 && cons_2 = 2 && cons_1 = 1

----------------------------------------

(9)
Obligation:
Rules:
f_550(cons_2, cons_1, v778:0) -> f_550(1, 0, 1 + v778:0) :|: v778:0 > 0 && cons_2 = 2 && cons_1 = 1

----------------------------------------

(10) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
SCC
----------------------------------------

(13) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 20 rulesP rules:
f_450(v453, v454, v455, v456, v457, v458, v463, 1, v459, v461, 0, v464, v465, v466, v467, v468, v469, v470, 3, 2, 4) -> f_452(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) :|: 1 < v463 && v461 = 1 && v463 = 2 && 0 = 0 && v459 = 3
f_452(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) -> f_455(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) :|: 0 = 0
f_455(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) -> f_458(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) :|: TRUE
f_458(v453, v454, v455, v456, v457, v458, 2, 1, 3, 0, v464, v465, v466, v467, v468, v469, v470, 4) -> f_461(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_461(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_463(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_463(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_465(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_465(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_467(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_467(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_470(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_470(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_472(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_472(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_475(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_475(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_478(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_478(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_481(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_481(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_483(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_483(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_485(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_485(v453, v454, v455, v456, v457, v458, 2, 1, 0, v464, v465, v466, v467, v468, v469, v470, 3, 4) -> f_487(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v466, v467, v468, v469, v470, 3, 4) :|: 0 = 0
f_487(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v466, v467, v468, v469, v470, 3, 4) -> f_489(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) :|: v557 = 1 + v465 && 2 <= v557
f_489(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) -> f_491(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_491(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) -> f_493(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) :|: TRUE
f_493(v453, v454, v455, v456, v457, v458, 2, 1, 0, v465, v557, v466, v467, v468, v469, v470, 3, 4) -> f_448(v453, v454, v455, v456, v457, v458, 2, 1, 0, 0, 1, v465, v557, v466, v467, v468, v469, v470, 3, 2, 4) :|: TRUE
f_448(v453, v454, v455, v456, v457, v458, v459, 1, v461, 0, v463, v464, v465, v466, v467, v468, v469, v470, 3, 2, 4) -> f_450(v453, v454, v455, v456, v457, v458, v463, 1, v459, v461, 0, v464, v465, v466, v467, v468, v469, v470, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_450(v453:0, v454:0, v455:0, v456:0, v457:0, v458:0, 2, 1, 3, 1, 0, v464:0, v465:0, v466:0, v467:0, v468:0, v469:0, v470:0, 3, 2, 4) -> f_450(v453:0, v454:0, v455:0, v456:0, v457:0, v458:0, 1, 1, 2, 0, 0, v465:0, 1 + v465:0, v466:0, v467:0, v468:0, v469:0, v470:0, 3, 2, 4) :|: v465:0 > 0
Filtered unneeded arguments:
   f_450(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_450(x7, x9, x10, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_450(cons_2, cons_3, cons_1, v465:0) -> f_450(1, 2, 0, 1 + v465:0) :|: v465:0 > 0 && cons_2 = 2 && cons_3 = 3 && cons_1 = 1

----------------------------------------

(14)
Obligation:
Rules:
f_450(cons_2, cons_3, cons_1, v465:0) -> f_450(1, 2, 0, 1 + v465:0) :|: v465:0 > 0 && cons_2 = 2 && cons_3 = 3 && cons_1 = 1

----------------------------------------

(15) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained no non-trivial SCC(s).

----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
SCC
----------------------------------------

(18) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 12 rulesP rules:
f_343(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 4) -> f_345(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: 1 < v221 && 4 <= v220 && 5 <= v217 && 3 <= v219
f_345(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_349(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: 0 = 0
f_349(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_352(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: TRUE
f_352(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_356(v212, v213, v214, v215, v216, v217, 1, v219, v221, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: 0 = 0
f_356(v212, v213, v214, v215, v216, v217, 1, v219, v221, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_360(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: 2 + v260 = v221 && 0 <= v260
f_360(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_364(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: TRUE
f_364(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_367(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: 0 = 0
f_367(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_370(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: v264 = 1 + v223 && 2 <= v264
f_370(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_373(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: TRUE
f_373(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_376(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) :|: TRUE
f_376(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 5, 4) -> f_341(v212, v213, v214, v215, v216, v217, 1, v219, v221, v260, v223, v264, v224, v225, v226, v227, v228, 0, 3, 2, 4) :|: TRUE
f_341(v212, v213, v214, v215, v216, v217, 1, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 4) -> f_343(v212, v213, v214, v215, v216, v217, 1, v219, v221, v220, v222, v223, v224, v225, v226, v227, v228, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_343(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, 1, v219:0, 2 + v260:0, v220:0, v222:0, v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, 0, 3, 2, 4) -> f_343(v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, 1, v219:0, v260:0, 2 + v260:0, v223:0, 1 + v223:0, v224:0, v225:0, v226:0, v227:0, v228:0, 0, 3, 2, 4) :|: v220:0 > 3 && v260:0 > -1 && v217:0 > 4 && v219:0 > 2 && v223:0 > 0
Filtered unneeded arguments:
   f_343(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_343(x6, x8, x9, x10, x12)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_343(v217:0, v219:0, sum~cons_2~v260:0, v220:0, v223:0) -> f_343(v217:0, v219:0, v260:0, 2 + v260:0, 1 + v223:0) :|: v260:0 > -1 && v220:0 > 3 && v217:0 > 4 && v223:0 > 0 && v219:0 > 2 && sum~cons_2~v260:0 = 2 + v260:0

----------------------------------------

(19)
Obligation:
Rules:
f_343(v217:0, v219:0, sum~cons_2~v260:0, v220:0, v223:0) -> f_343(v217:0, v219:0, v260:0, 2 + v260:0, 1 + v223:0) :|: v260:0 > -1 && v220:0 > 3 && v217:0 > 4 && v223:0 > 0 && v219:0 > 2 && sum~cons_2~v260:0 = 2 + v260:0

----------------------------------------

(20) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(21)
Obligation:
Rules:
f_343(v217:0:0, v219:0:0, sum~cons_2~v260:0:0, v220:0:0, v223:0:0) -> f_343(v217:0:0, v219:0:0, v260:0:0, 2 + v260:0:0, 1 + v223:0:0) :|: v223:0:0 > 0 && v219:0:0 > 2 && v217:0:0 > 4 && v220:0:0 > 3 && v260:0:0 > -1 && sum~cons_2~v260:0:0 = 2 + v260:0:0

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_343(x, x1, x2, x3, x4)] = -2 + x2 + x4

The following rules are decreasing:
f_343(v217:0:0, v219:0:0, sum~cons_2~v260:0:0, v220:0:0, v223:0:0) -> f_343(v217:0:0, v219:0:0, v260:0:0, 2 + v260:0:0, 1 + v223:0:0) :|: v223:0:0 > 0 && v219:0:0 > 2 && v217:0:0 > 4 && v220:0:0 > 3 && v260:0:0 > -1 && sum~cons_2~v260:0:0 = 2 + v260:0:0
The following rules are bounded:
f_343(v217:0:0, v219:0:0, sum~cons_2~v260:0:0, v220:0:0, v223:0:0) -> f_343(v217:0:0, v219:0:0, v260:0:0, 2 + v260:0:0, 1 + v223:0:0) :|: v223:0:0 > 0 && v219:0:0 > 2 && v217:0:0 > 4 && v220:0:0 > 3 && v260:0:0 > -1 && sum~cons_2~v260:0:0 = 2 + v260:0:0

----------------------------------------

(23)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
