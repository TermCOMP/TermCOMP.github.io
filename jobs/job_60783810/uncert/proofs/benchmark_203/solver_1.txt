YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/76ZKv.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1388 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 41 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 4 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) RankingReductionPairProof [EQUIVALENT, 4 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 37 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/76ZKv.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/76ZKv.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store 0, %5
		br %6
	6:
		%7 = load %3
		%8 = icmp sge %7 0
		br %8, %9, %23
	9:
		store 0, %4
		br %10
	10:
		%11 = load %4
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = icmp sle %11 %13
		br %14, %15, %20
	15:
		%16 = load %4
		%17 = add i32 %16, 1
		store %17, %4
		%18 = load %5
		%19 = add i32 %18, 1
		store %19, %5
		br %10
	20:
		%21 = load %3
		%22 = sub i32 %21, 1
		store %22, %3
		br %6
	23:
		%24 = load %5
		ret %24

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 44
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 34 rulesP rules:
f_462(v562, v563, v564, v565, v566, v567, 1, 0, v569, v571, v572, v573, v574, v575, v576, v577, v578, v579, 3, 4) -> f_463(v562, v563, v564, v565, v566, v567, 1, 0, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 4) :|: 0 = 0
f_463(v562, v563, v564, v565, v566, v567, 1, 0, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 4) -> f_464(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 4) :|: 1 + v590 = v567 && 0 <= 1 + v590
f_464(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 4) -> f_465(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) :|: 0 <= v590 && 1 <= v567 && 2 <= v569 && 2 <= v562 && 2 <= v572 && 1 <= v571 && 2 <= v574 && 1 <= v573
f_465(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) -> f_467(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) :|: 0 = 0
f_467(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) -> f_469(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) :|: TRUE
f_469(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 3, 2, 4) -> f_470(v562, v563, v564, v565, v566, v567, 1, 0, v590, v571, v572, v573, v574, v569, v575, v576, v577, v578, v579, 0, 3, 2, 4) :|: TRUE
f_470(v604, v605, v606, v607, v608, v609, 1, v611, v612, v613, v614, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_472(v604, v605, v606, v607, v608, v609, 1, v611, v612, v614, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 0 = 0
f_472(v604, v605, v606, v607, v608, v609, 1, v611, v612, v614, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_474(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: v629 = 1 + v611 && 1 <= v629
f_474(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_476(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: TRUE
f_476(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v615, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_478(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 0 = 0
f_478(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_480(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: v642 = 1 + v616 && 3 <= v642
f_480(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_482(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: TRUE
f_482(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_484(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: TRUE
f_484(v604, v605, v606, v607, v608, v609, 1, v611, v612, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_486(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 0 = 0
f_486(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_488(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 0 = 0
f_488(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_490(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 1 + v612 = v609
f_490(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_491(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: v629 <= v612 && 1 <= v612 && 2 <= v609 && 3 <= v617 && 3 <= v604 && 3 <= v616 && 4 <= v642
f_490(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_492(v604, v605, v606, v607, v608, v629, 1, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: v612 < v629 && v609 = v629 && v612 = v611
f_491(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_493(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: 0 = 0
f_493(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_495(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: TRUE
f_495(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_470(v604, v605, v606, v607, v608, v609, 1, v629, v612, v611, v629, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) :|: TRUE
f_492(v604, v605, v606, v607, v608, v629, 1, v611, v616, v642, v617, v618, v619, v620, v621, v622, 0, 3, 2, 4) -> f_494(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v617, v618, v619, v620, v621, v622, 3, 2, 4) :|: 0 = 0
f_494(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v617, v618, v619, v620, v621, v622, 3, 2, 4) -> f_496(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v617, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_496(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v617, v618, v619, v620, v621, v622, 3, 2, 4) -> f_497(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: 0 = 0
f_497(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_498(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: 1 + v611 = v629
f_498(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_499(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_499(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_500(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_500(v604, v605, v606, v607, v608, v629, 1, v611, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_501(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: 0 = 0
f_501(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_502(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: 0 = 0
f_502(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_503(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_503(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_504(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_504(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_505(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) :|: TRUE
f_505(v604, v605, v606, v607, v608, v611, 1, v629, 0, v616, v642, v618, v619, v620, v621, v622, 3, 2, 4) -> f_461(v604, v605, v606, v607, v608, v611, 1, v629, 0, v611, v629, v616, v642, v618, v619, v620, v621, v622, 3, 4) :|: TRUE
f_461(v562, v563, v564, v565, v566, v567, 1, v569, 0, v571, v572, v573, v574, v575, v576, v577, v578, v579, 3, 4) -> f_462(v562, v563, v564, v565, v566, v567, 1, 0, v569, v571, v572, v573, v574, v575, v576, v577, v578, v579, 3, 4) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_490(v604:0, v605:0, v606:0, v607:0, v608:0, 1 + v612:0, 1, v629:0, v612:0, v611:0, v616:0, v642:0, v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, 0, 3, 2, 4) -> f_490(v604:0, v605:0, v606:0, v607:0, v608:0, 1 + v612:0, 1, 1 + v629:0, v612:0, v629:0, v642:0, 1 + v642:0, v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, 0, 3, 2, 4) :|: v642:0 > 3 && v629:0 > -1 && v612:0 > 0 && v629:0 <= v612:0 && v617:0 > 2 && v616:0 > 2 && v604:0 > 2
f_490(v604:0, v605:0, v606:0, v607:0, v608:0, 1 + (1 + v590:0), 1, 1 + (1 + v590:0), 1 + v590:0, 1 + v590:0, v616:0, v642:0, v617:0, v618:0, v619:0, v620:0, v621:0, v622:0, 0, 3, 2, 4) -> f_490(v604:0, v605:0, v606:0, v607:0, v608:0, 1 + v590:0, 1, 1, v590:0, 0, v642:0, 1 + v642:0, 1 + (1 + v590:0), v618:0, v619:0, v620:0, v621:0, v622:0, 0, 3, 2, 4) :|: v590:0 > -1 && v604:0 > 1 && v642:0 > 1 && v616:0 > 0 && 1 + v590:0 < 1 + (1 + v590:0)
Filtered unneeded arguments:
   f_490(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_490(x1, x6, x8, x9, x10, x11, x12, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_490(v604:0, sum~cons_1~v612:0, v629:0, v612:0, v611:0, v616:0, v642:0, v617:0) -> f_490(v604:0, 1 + v612:0, 1 + v629:0, v612:0, v629:0, v642:0, 1 + v642:0, v617:0) :|: v629:0 > -1 && v642:0 > 3 && v612:0 > 0 && v629:0 <= v612:0 && v617:0 > 2 && v604:0 > 2 && v616:0 > 2 && sum~cons_1~v612:0 = 1 + v612:0
f_490(v604:0, sum~cons_1~sum~cons_1~v590:0, sum~cons_1~sum~cons_1~v590:01, sum~cons_1~v590:0, sum~cons_1~v590:01, v616:0, v642:0, v617:0) -> f_490(v604:0, 1 + v590:0, 1, v590:0, 0, v642:0, 1 + v642:0, 1 + (1 + v590:0)) :|: v604:0 > 1 && v590:0 > -1 && v642:0 > 1 && 1 + v590:0 < 1 + (1 + v590:0) && v616:0 > 0 && sum~cons_1~sum~cons_1~v590:0 = 1 + (1 + v590:0) && sum~cons_1~sum~cons_1~v590:01 = 1 + (1 + v590:0) && sum~cons_1~v590:0 = 1 + v590:0 && sum~cons_1~v590:01 = 1 + v590:0

----------------------------------------

(9)
Obligation:
Rules:
f_490(v604:0, sum~cons_1~v612:0, v629:0, v612:0, v611:0, v616:0, v642:0, v617:0) -> f_490(v604:0, 1 + v612:0, 1 + v629:0, v612:0, v629:0, v642:0, 1 + v642:0, v617:0) :|: v629:0 > -1 && v642:0 > 3 && v612:0 > 0 && v629:0 <= v612:0 && v617:0 > 2 && v604:0 > 2 && v616:0 > 2 && sum~cons_1~v612:0 = 1 + v612:0
f_490(x, x1, x2, x3, x4, x5, x6, x7) -> f_490(x, 1 + x8, 1, x8, 0, x6, 1 + x6, 1 + (1 + x8)) :|: x > 1 && x8 > -1 && x6 > 1 && 1 + x8 < 1 + (1 + x8) && x5 > 0 && x1 = 1 + (1 + x8) && x2 = 1 + (1 + x8) && x3 = 1 + x8 && x4 = 1 + x8

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_490(v604:0:0, sum~cons_1~v612:0:0, v629:0:0, v612:0:0, v611:0:0, v616:0:0, v642:0:0, v617:0:0) -> f_490(v604:0:0, 1 + v612:0:0, 1 + v629:0:0, v612:0:0, v629:0:0, v642:0:0, 1 + v642:0:0, v617:0:0) :|: v604:0:0 > 2 && v616:0:0 > 2 && v617:0:0 > 2 && v629:0:0 <= v612:0:0 && v612:0:0 > 0 && v642:0:0 > 3 && v629:0:0 > -1 && sum~cons_1~v612:0:0 = 1 + v612:0:0
f_490(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_490(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_490(x, x1, x2, x3, x4, x5, x6, x7)] = x1

The following rules are decreasing:
f_490(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_490(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0
The following rules are bounded:
f_490(v604:0:0, sum~cons_1~v612:0:0, v629:0:0, v612:0:0, v611:0:0, v616:0:0, v642:0:0, v617:0:0) -> f_490(v604:0:0, 1 + v612:0:0, 1 + v629:0:0, v612:0:0, v629:0:0, v642:0:0, 1 + v642:0:0, v617:0:0) :|: v604:0:0 > 2 && v616:0:0 > 2 && v617:0:0 > 2 && v629:0:0 <= v612:0:0 && v612:0:0 > 0 && v642:0:0 > 3 && v629:0:0 > -1 && sum~cons_1~v612:0:0 = 1 + v612:0:0
f_490(x:0, sum~cons_1~sum~cons_1~x8:0, sum~cons_1~sum~cons_1~x8:01, sum~cons_1~x8:0, sum~cons_1~x8:01, x5:0, x6:0, x7:0) -> f_490(x:0, 1 + x8:0, 1, x8:0, 0, x6:0, 1 + x6:0, 1 + (1 + x8:0)) :|: 1 + x8:0 < 1 + (1 + x8:0) && x5:0 > 0 && x6:0 > 1 && x8:0 > -1 && x:0 > 1 && sum~cons_1~sum~cons_1~x8:0 = 1 + (1 + x8:0) && sum~cons_1~sum~cons_1~x8:01 = 1 + (1 + x8:0) && sum~cons_1~x8:0 = 1 + x8:0 && sum~cons_1~x8:01 = 1 + x8:0

----------------------------------------

(13)
Obligation:
Rules:
f_490(v604:0:0, sum~cons_1~v612:0:0, v629:0:0, v612:0:0, v611:0:0, v616:0:0, v642:0:0, v617:0:0) -> f_490(v604:0:0, 1 + v612:0:0, 1 + v629:0:0, v612:0:0, v629:0:0, v642:0:0, 1 + v642:0:0, v617:0:0) :|: v604:0:0 > 2 && v616:0:0 > 2 && v617:0:0 > 2 && v629:0:0 <= v612:0:0 && v612:0:0 > 0 && v642:0:0 > 3 && v629:0:0 > -1 && sum~cons_1~v612:0:0 = 1 + v612:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_490(v604:0:0:0, sum~cons_1~v612:0:0:0, v629:0:0:0, v612:0:0:0, v611:0:0:0, v616:0:0:0, v642:0:0:0, v617:0:0:0) -> f_490(v604:0:0:0, 1 + v612:0:0:0, 1 + v629:0:0:0, v612:0:0:0, v629:0:0:0, v642:0:0:0, 1 + v642:0:0:0, v617:0:0:0) :|: v642:0:0:0 > 3 && v629:0:0:0 > -1 && v612:0:0:0 > 0 && v629:0:0:0 <= v612:0:0:0 && v617:0:0:0 > 2 && v616:0:0:0 > 2 && v604:0:0:0 > 2 && sum~cons_1~v612:0:0:0 = 1 + v612:0:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_490(x1, x2, x3, x4, x5, x6, x7, x8) -> f_490(x1, x2, x3, x4, x6, x7, x8)

----------------------------------------

(17)
Obligation:
Rules:
f_490(v604:0:0:0, sum~cons_1~v612:0:0:0, v629:0:0:0, v612:0:0:0, v616:0:0:0, v642:0:0:0, v617:0:0:0) -> f_490(v604:0:0:0, 1 + v612:0:0:0, 1 + v629:0:0:0, v612:0:0:0, v642:0:0:0, 1 + v642:0:0:0, v617:0:0:0) :|: v642:0:0:0 > 3 && v629:0:0:0 > -1 && v612:0:0:0 > 0 && v629:0:0:0 <= v612:0:0:0 && v617:0:0:0 > 2 && v616:0:0:0 > 2 && v604:0:0:0 > 2 && sum~cons_1~v612:0:0:0 = 1 + v612:0:0:0

----------------------------------------

(18) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_490 ] = -1*f_490_3 + f_490_4

The following rules are decreasing:
f_490(v604:0:0:0, sum~cons_1~v612:0:0:0, v629:0:0:0, v612:0:0:0, v616:0:0:0, v642:0:0:0, v617:0:0:0) -> f_490(v604:0:0:0, 1 + v612:0:0:0, 1 + v629:0:0:0, v612:0:0:0, v642:0:0:0, 1 + v642:0:0:0, v617:0:0:0) :|: v642:0:0:0 > 3 && v629:0:0:0 > -1 && v612:0:0:0 > 0 && v629:0:0:0 <= v612:0:0:0 && v617:0:0:0 > 2 && v616:0:0:0 > 2 && v604:0:0:0 > 2 && sum~cons_1~v612:0:0:0 = 1 + v612:0:0:0

The following rules are bounded:
f_490(v604:0:0:0, sum~cons_1~v612:0:0:0, v629:0:0:0, v612:0:0:0, v616:0:0:0, v642:0:0:0, v617:0:0:0) -> f_490(v604:0:0:0, 1 + v612:0:0:0, 1 + v629:0:0:0, v612:0:0:0, v642:0:0:0, 1 + v642:0:0:0, v617:0:0:0) :|: v642:0:0:0 > 3 && v629:0:0:0 > -1 && v612:0:0:0 > 0 && v629:0:0:0 <= v612:0:0:0 && v617:0:0:0 > 2 && v616:0:0:0 > 2 && v604:0:0:0 > 2 && sum~cons_1~v612:0:0:0 = 1 + v612:0:0:0


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 14 rulesP rules:
f_289(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) -> f_290(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) :|: 0 = 0
f_290(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) -> f_291(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) :|: 1 + v97 = v90
f_291(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) -> f_292(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: v98 <= v97 && 1 <= v97 && 2 <= v90
f_292(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_294(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: 0 = 0
f_294(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_296(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: TRUE
f_296(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_298(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: 0 = 0
f_298(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_300(v90, v91, v92, v93, v94, 1, v98, v97, v105, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: v105 = 1 + v98 && 2 <= v105
f_300(v90, v91, v92, v93, v94, 1, v98, v97, v105, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_302(v90, v91, v92, v93, v94, 1, v98, v97, v105, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: TRUE
f_302(v90, v91, v92, v93, v94, 1, v98, v97, v105, v96, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_304(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: 0 = 0
f_304(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_306(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: v105 = 1 + v98
f_306(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_308(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: TRUE
f_308(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_310(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) :|: TRUE
f_310(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 2, 4) -> f_288(v90, v91, v92, v93, v94, 1, v98, v97, v105, v99, v100, v101, v102, v103, 0, 3, 4) :|: TRUE
f_288(v90, v91, v92, v93, v94, 1, v96, v97, v98, v99, v100, v101, v102, v103, 0, 3, 4) -> f_289(v90, v91, v92, v93, v94, 1, v98, v97, v96, v99, v100, v101, v102, v103, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_289(1 + v97:0, v91:0, v92:0, v93:0, v94:0, 1, v98:0, v97:0, v96:0, v99:0, v100:0, v101:0, v102:0, v103:0, 0, 3, 4) -> f_289(1 + v97:0, v91:0, v92:0, v93:0, v94:0, 1, 1 + v98:0, v97:0, v98:0, v99:0, v100:0, v101:0, v102:0, v103:0, 0, 3, 4) :|: v97:0 > 0 && v98:0 <= v97:0 && v98:0 > 0
Filtered unneeded arguments:
   f_289(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_289(x1, x7, x8)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_289(sum~cons_1~v97:0, v98:0, v97:0) -> f_289(1 + v97:0, 1 + v98:0, v97:0) :|: v98:0 <= v97:0 && v98:0 > 0 && v97:0 > 0 && sum~cons_1~v97:0 = 1 + v97:0

----------------------------------------

(22)
Obligation:
Rules:
f_289(sum~cons_1~v97:0, v98:0, v97:0) -> f_289(1 + v97:0, 1 + v98:0, v97:0) :|: v98:0 <= v97:0 && v98:0 > 0 && v97:0 > 0 && sum~cons_1~v97:0 = 1 + v97:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_289(sum~cons_1~v97:0:0, v98:0:0, v97:0:0) -> f_289(1 + v97:0:0, 1 + v98:0:0, v97:0:0) :|: v98:0:0 <= v97:0:0 && v98:0:0 > 0 && v97:0:0 > 0 && sum~cons_1~v97:0:0 = 1 + v97:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_289(x, x1, x2)] = -x1 + x2

The following rules are decreasing:
f_289(sum~cons_1~v97:0:0, v98:0:0, v97:0:0) -> f_289(1 + v97:0:0, 1 + v98:0:0, v97:0:0) :|: v98:0:0 <= v97:0:0 && v98:0:0 > 0 && v97:0:0 > 0 && sum~cons_1~v97:0:0 = 1 + v97:0:0
The following rules are bounded:
f_289(sum~cons_1~v97:0:0, v98:0:0, v97:0:0) -> f_289(1 + v97:0:0, 1 + v98:0:0, v97:0:0) :|: v98:0:0 <= v97:0:0 && v98:0:0 > 0 && v97:0:0 > 0 && sum~cons_1~v97:0:0 = 1 + v97:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
