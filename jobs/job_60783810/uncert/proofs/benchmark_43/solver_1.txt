YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Mu0w2.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 56 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 3621 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 40 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 43 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) RankingReductionPairProof [EQUIVALENT, 13 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/Mu0w2.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/Mu0w2.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "test_fun" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %7
		%14 = load %3
		%15 = load %5
		store %14, %15
		%16 = load %4
		%17 = load %6
		store %16, %17
		%18 = load %7
		store 0, %18
		br %19
	19:
		%20 = load %5
		%21 = load %20
		%22 = icmp sge %21 0
		br %22, %23, %49
	23:
		%24 = load %5
		%25 = load %24
		%26 = add i32 %25, 1
		%27 = load %5
		store %26, %27
		%28 = load %6
		store 1, %28
		br %29
	29:
		%30 = load %5
		%31 = load %30
		%32 = load %6
		%33 = load %32
		%34 = icmp sgt %31 %33
		br %34, %35, %44
	35:
		%36 = load %6
		%37 = load %36
		%38 = add i32 %37, 1
		%39 = load %6
		store %38, %39
		%40 = load %7
		%41 = load %40
		%42 = add i32 %41, 1
		%43 = load %7
		store %42, %43
		br %29
	44:
		%45 = load %5
		%46 = load %45
		%47 = sub i32 %46, 2
		%48 = load %5
		store %47, %48
		br %19
	49:
		%50 = load %7
		%51 = load %50
		ret %51

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = call i32 @test_fun(i32 %2, i32 %3)
		ret %4


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 74 rulesP rules:
f_793(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_794(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_794(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_795(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 2 + v1097 = v1080 && 0 <= 1 + v1097
f_795(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_796(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_796(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_797(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_797(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_798(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_798(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_799(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_799(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1097, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_800(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_800(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_801(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 <= v1097 && 2 <= v1080 && 1 <= v1078 && 2 <= v1068 && 1 <= v1084 && 2 <= v1085
f_801(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_803(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_803(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_805(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_805(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_807(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_807(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1078, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_809(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_809(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_811(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: v1144 = 1 + v1097 && 1 <= v1144
f_811(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_813(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_813(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_814(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_814(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_815(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
f_815(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_816(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_816(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_817(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_817(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_818(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1097, 1, v1144, v1080, 0, v1082, v1083, v1084, v1085, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: TRUE
f_818(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_819(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: 0 = 0
f_819(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_820(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: 0 = 0
f_820(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_821(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: 0 = 0
f_821(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1189, 0, v1191, v1192, v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_822(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 0, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: 0 = 0
f_822(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 0, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_823(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 0, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: 1 < v1188 && 1 <= v1186 && 3 <= v1189 && 3 <= v1192 && 2 <= v1191 && 2 <= v1176
f_822(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 0, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_824(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) :|: v1188 <= 1 && v1186 = 0 && v1188 = 1 && 0 = 0 && v1189 = 2
f_823(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 0, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) -> f_825(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_825(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 0, 3, 7, 2, 4, 8) -> f_827(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 0, 3, 7, 2, 4, 8) :|: TRUE
f_827(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 0, 3, 7, 2, 4, 8) -> f_850(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186, 1, v1188, 1, v1191, v1192, v1193, v1194, v1189, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 0, 3, 7, 2, 4, 8) :|: TRUE
f_850(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_852(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_852(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_853(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1373, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_853(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1373, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_854(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: v1428 = 1 + v1371 && 2 <= v1428
f_854(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_855(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_855(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_856(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: TRUE
f_856(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_857(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_857(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1374, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_858(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_858(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_859(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: v1430 = 1 + v1375 && 2 <= v1430
f_859(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_860(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_860(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_861(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: TRUE
f_861(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_862(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: TRUE
f_862(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) -> f_863(v1358, v1359, v1360, v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368, 1, v1370, v1371, v1428, v1375, v1430, v1376, v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385, v1386, 0, 3, 7, 2, 4, 8) :|: TRUE
f_863(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_864(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_864(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_865(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_865(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_866(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_866(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_867(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_867(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_868(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: v1478 < v1476 && 3 <= v1476 && 2 <= v1474 && 4 <= v1481 && 3 <= v1464
f_867(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_869(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: v1476 <= v1478 && v1476 = v1478 && v1474 = v1477
f_868(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_870(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_870(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_872(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: TRUE
f_872(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_850(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1474, 1, v1476, v1478, v1477, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) :|: TRUE
f_869(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 0, 3, 7, 2, 4, 8) -> f_871(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_871(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_873(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_873(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_874(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_874(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_875(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_875(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_876(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 2 + v1580 = v1478 && 0 <= v1580
f_876(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_877(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_877(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_878(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_878(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_879(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_879(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_880(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_880(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1477, 1, v1478, 0, v1479, v1480, v1580, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_881(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_881(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_882(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_882(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_883(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_883(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_884(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_884(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_885(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1478, 0, v1477, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_885(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1478, 0, v1477, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_886(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: v1477 = 1 + v1580
f_886(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_887(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_887(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_888(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_888(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_889(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: 0 = 0
f_889(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_890(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_890(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_891(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_891(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) -> f_818(v1464, v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472, v1473, v1580, 1, v1477, v1478, 0, v1477, v1478, v1479, v1480, v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489, v1490, v1491, 3, 7, 2, 4, 8) :|: TRUE
f_824(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) -> f_826(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) :|: 0 = 0
f_826(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) -> f_828(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) :|: TRUE
f_828(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 4, 8) -> f_792(v1176, v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185, 0, 1, 1, 0, v1191, v1192, v1193, v1194, 2, v1195, v1196, v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204, 3, 7, 2, 4, 8) :|: TRUE
f_792(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) -> f_793(v1068, v1069, v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078, 1, v1080, 0, v1082, v1083, v1084, v1085, v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 3 rulesP rules:
f_822(v1176:0, v1177:0, v1178:0, v1179:0, v1180:0, v1181:0, v1182:0, v1183:0, v1184:0, v1185:0, v1186:0, 1, v1188:0, 0, v1191:0, v1192:0, v1193:0, v1194:0, v1189:0, v1195:0, v1196:0, v1197:0, v1198:0, v1199:0, v1200:0, v1201:0, v1202:0, v1203:0, v1204:0, 3, 7, 2, 4, 8) -> f_867(v1176:0, v1177:0, v1178:0, v1179:0, v1180:0, v1181:0, v1182:0, v1183:0, v1184:0, v1185:0, v1186:0, 1, v1188:0, 2, 1, v1194:0, 1 + v1194:0, v1189:0, v1195:0, v1196:0, v1197:0, v1198:0, v1199:0, v1200:0, v1201:0, v1202:0, v1203:0, v1204:0, 0, 3, 7, 2, 4, 8) :|: v1186:0 > 0 && v1188:0 > 1 && v1189:0 > 2 && v1192:0 > 2 && v1191:0 > 1 && v1194:0 > 0 && v1176:0 > 1
f_867(v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, 1 + v1580:0, 1, 2 + v1580:0, 2 + v1580:0, 1 + v1580:0, v1479:0, v1480:0, v1481:0, v1482:0, v1483:0, v1484:0, v1485:0, v1486:0, v1487:0, v1488:0, v1489:0, v1490:0, v1491:0, 0, 3, 7, 2, 4, 8) -> f_822(v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, v1580:0, 1, 1 + v1580:0, 0, 1 + v1580:0, 2 + v1580:0, v1479:0, v1480:0, 2 + v1580:0, v1482:0, v1483:0, v1484:0, v1485:0, v1486:0, v1487:0, v1488:0, v1489:0, v1490:0, v1491:0, 3, 7, 2, 4, 8) :|: v1580:0 > -1
f_867(v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, v1474:0, 1, v1476:0, v1478:0, v1477:0, v1479:0, v1480:0, v1481:0, v1482:0, v1483:0, v1484:0, v1485:0, v1486:0, v1487:0, v1488:0, v1489:0, v1490:0, v1491:0, 0, 3, 7, 2, 4, 8) -> f_867(v1464:0, v1465:0, v1466:0, v1467:0, v1468:0, v1469:0, v1470:0, v1471:0, v1472:0, v1473:0, v1474:0, 1, v1476:0, 1 + v1478:0, v1478:0, v1480:0, 1 + v1480:0, v1481:0, v1482:0, v1483:0, v1484:0, v1485:0, v1486:0, v1487:0, v1488:0, v1489:0, v1490:0, v1491:0, 0, 3, 7, 2, 4, 8) :|: v1478:0 > 0 && v1480:0 > 0 && v1476:0 > 2 && v1478:0 < v1476:0 && v1474:0 > 1 && v1464:0 > 2 && v1481:0 > 3
Filtered unneeded arguments:
   f_822(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_822(x1, x11, x13, x15, x16, x18, x19)
   f_867(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34) -> f_867(x1, x11, x13, x14, x15, x17, x18)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_822(v1176:0, v1186:0, v1188:0, v1191:0, v1192:0, v1194:0, v1189:0) -> f_867(v1176:0, v1186:0, v1188:0, 2, 1, 1 + v1194:0, v1189:0) :|: v1188:0 > 1 && v1186:0 > 0 && v1189:0 > 2 && v1192:0 > 2 && v1191:0 > 1 && v1176:0 > 1 && v1194:0 > 0
f_867(v1464:0, sum~cons_1~v1580:0, sum~cons_2~v1580:0, sum~cons_2~v1580:01, sum~cons_1~v1580:01, v1480:0, v1481:0) -> f_822(v1464:0, v1580:0, 1 + v1580:0, 1 + v1580:0, 2 + v1580:0, v1480:0, 2 + v1580:0) :|: v1580:0 > -1 && sum~cons_1~v1580:0 = 1 + v1580:0 && sum~cons_2~v1580:0 = 2 + v1580:0 && sum~cons_2~v1580:01 = 2 + v1580:0 && sum~cons_1~v1580:01 = 1 + v1580:0
f_867(v1464:0, v1474:0, v1476:0, v1478:0, v1477:0, v1480:0, v1481:0) -> f_867(v1464:0, v1474:0, v1476:0, 1 + v1478:0, v1478:0, 1 + v1480:0, v1481:0) :|: v1480:0 > 0 && v1478:0 > 0 && v1476:0 > 2 && v1478:0 < v1476:0 && v1474:0 > 1 && v1481:0 > 3 && v1464:0 > 2

----------------------------------------

(9)
Obligation:
Rules:
f_822(v1176:0, v1186:0, v1188:0, v1191:0, v1192:0, v1194:0, v1189:0) -> f_867(v1176:0, v1186:0, v1188:0, 2, 1, 1 + v1194:0, v1189:0) :|: v1188:0 > 1 && v1186:0 > 0 && v1189:0 > 2 && v1192:0 > 2 && v1191:0 > 1 && v1176:0 > 1 && v1194:0 > 0
f_867(v1464:0, sum~cons_1~v1580:0, sum~cons_2~v1580:0, sum~cons_2~v1580:01, sum~cons_1~v1580:01, v1480:0, v1481:0) -> f_822(v1464:0, v1580:0, 1 + v1580:0, 1 + v1580:0, 2 + v1580:0, v1480:0, 2 + v1580:0) :|: v1580:0 > -1 && sum~cons_1~v1580:0 = 1 + v1580:0 && sum~cons_2~v1580:0 = 2 + v1580:0 && sum~cons_2~v1580:01 = 2 + v1580:0 && sum~cons_1~v1580:01 = 1 + v1580:0
f_867(x, x1, x2, x3, x4, x5, x6) -> f_867(x, x1, x2, 1 + x3, x3, 1 + x5, x6) :|: x5 > 0 && x3 > 0 && x2 > 2 && x3 < x2 && x1 > 1 && x6 > 3 && x > 2

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_867(v1464:0:0, sum~cons_1~v1580:0:0, sum~cons_2~v1580:0:0, sum~cons_2~v1580:0:01, sum~cons_1~v1580:0:01, v1480:0:0, v1481:0:0) -> f_867(v1464:0:0, v1580:0:0, 1 + v1580:0:0, 2, 1, 1 + v1480:0:0, 2 + v1580:0:0) :|: v1464:0:0 > 1 && v1580:0:0 > 0 && v1480:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0 && sum~cons_2~v1580:0:0 = 2 + v1580:0:0 && sum~cons_2~v1580:0:01 = 2 + v1580:0:0 && sum~cons_1~v1580:0:01 = 1 + v1580:0:0
f_867(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_867(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_867 ] = f_867_2

The following rules are decreasing:
f_867(v1464:0:0, sum~cons_1~v1580:0:0, sum~cons_2~v1580:0:0, sum~cons_2~v1580:0:01, sum~cons_1~v1580:0:01, v1480:0:0, v1481:0:0) -> f_867(v1464:0:0, v1580:0:0, 1 + v1580:0:0, 2, 1, 1 + v1480:0:0, 2 + v1580:0:0) :|: v1464:0:0 > 1 && v1580:0:0 > 0 && v1480:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0 && sum~cons_2~v1580:0:0 = 2 + v1580:0:0 && sum~cons_2~v1580:0:01 = 2 + v1580:0:0 && sum~cons_1~v1580:0:01 = 1 + v1580:0:0

The following rules are bounded:
f_867(v1464:0:0, sum~cons_1~v1580:0:0, sum~cons_2~v1580:0:0, sum~cons_2~v1580:0:01, sum~cons_1~v1580:0:01, v1480:0:0, v1481:0:0) -> f_867(v1464:0:0, v1580:0:0, 1 + v1580:0:0, 2, 1, 1 + v1480:0:0, 2 + v1580:0:0) :|: v1464:0:0 > 1 && v1580:0:0 > 0 && v1480:0:0 > 0 && sum~cons_1~v1580:0:0 = 1 + v1580:0:0 && sum~cons_2~v1580:0:0 = 2 + v1580:0:0 && sum~cons_2~v1580:0:01 = 2 + v1580:0:0 && sum~cons_1~v1580:0:01 = 1 + v1580:0:0
f_867(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_867(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0


----------------------------------------

(13)
Obligation:
Rules:
f_867(x:0, x1:0, x2:0, x3:0, x4:0, x5:0, x6:0) -> f_867(x:0, x1:0, x2:0, 1 + x3:0, x3:0, 1 + x5:0, x6:0) :|: x6:0 > 3 && x:0 > 2 && x1:0 > 1 && x3:0 < x2:0 && x2:0 > 2 && x3:0 > 0 && x5:0 > 0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_867(x:0:0, x1:0:0, x2:0:0, x3:0:0, x4:0:0, x5:0:0, x6:0:0) -> f_867(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_867(x1, x2, x3, x4, x5, x6, x7) -> f_867(x1, x2, x3, x4, x6, x7)

----------------------------------------

(17)
Obligation:
Rules:
f_867(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_867(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_867(x, x1, x2, x3, x4, x5)] = -1 + x2 - x3

The following rules are decreasing:
f_867(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_867(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3
The following rules are bounded:
f_867(x:0:0, x1:0:0, x2:0:0, x3:0:0, x5:0:0, x6:0:0) -> f_867(x:0:0, x1:0:0, x2:0:0, 1 + x3:0:0, 1 + x5:0:0, x6:0:0) :|: x3:0:0 > 0 && x5:0:0 > 0 && x2:0:0 > 2 && x3:0:0 < x2:0:0 && x1:0:0 > 1 && x:0:0 > 2 && x6:0:0 > 3

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_540(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_541(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_541(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_542(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_542(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_543(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_543(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_544(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: v223 < v221 && 3 <= v221 && 2 <= v210
f_544(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_546(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_546(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_548(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: TRUE
f_548(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_550(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_550(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v222, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_552(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_552(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_554(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: v236 = 1 + v223 && 3 <= v236
f_554(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_556(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_556(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_558(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: TRUE
f_558(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_560(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_560(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v224, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_562(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_562(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_564(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: v223 = 1 + v222
f_564(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_566(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
f_566(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_568(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: TRUE
f_568(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_570(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: TRUE
f_570(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_539(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v223, v236, v222, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: TRUE
f_539(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) -> f_540(v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, 1, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, 0, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_540(v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, v222:0, 1 + v222:0, v224:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, v233:0, v234:0, 0, 3, 7, 2, 4, 8) -> f_540(v210:0, v211:0, v212:0, v213:0, v214:0, v215:0, v216:0, v217:0, v218:0, v219:0, 1, v221:0, 1 + v222:0, 1 + (1 + v222:0), v222:0, v225:0, v226:0, v227:0, v228:0, v229:0, v230:0, v231:0, v232:0, v233:0, v234:0, 0, 3, 7, 2, 4, 8) :|: v221:0 > 2 && v221:0 > 1 + v222:0 && v222:0 > 0 && v210:0 > 1
Filtered unneeded arguments:
   f_540(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_540(x1, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_540(v210:0, v221:0, v222:0, sum~cons_1~v222:0) -> f_540(v210:0, v221:0, 1 + v222:0, 1 + (1 + v222:0)) :|: v221:0 > 1 + v222:0 && v221:0 > 2 && v210:0 > 1 && v222:0 > 0 && sum~cons_1~v222:0 = 1 + v222:0

----------------------------------------

(22)
Obligation:
Rules:
f_540(v210:0, v221:0, v222:0, sum~cons_1~v222:0) -> f_540(v210:0, v221:0, 1 + v222:0, 1 + (1 + v222:0)) :|: v221:0 > 1 + v222:0 && v221:0 > 2 && v210:0 > 1 && v222:0 > 0 && sum~cons_1~v222:0 = 1 + v222:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_540(v210:0:0, v221:0:0, v222:0:0, sum~cons_1~v222:0:0) -> f_540(v210:0:0, v221:0:0, 1 + v222:0:0, 1 + (1 + v222:0:0)) :|: v210:0:0 > 1 && v222:0:0 > 0 && v221:0:0 > 2 && v221:0:0 > 1 + v222:0:0 && sum~cons_1~v222:0:0 = 1 + v222:0:0

----------------------------------------

(25) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_540 ] = -1*f_540_3 + f_540_2

The following rules are decreasing:
f_540(v210:0:0, v221:0:0, v222:0:0, sum~cons_1~v222:0:0) -> f_540(v210:0:0, v221:0:0, 1 + v222:0:0, 1 + (1 + v222:0:0)) :|: v210:0:0 > 1 && v222:0:0 > 0 && v221:0:0 > 2 && v221:0:0 > 1 + v222:0:0 && sum~cons_1~v222:0:0 = 1 + v222:0:0

The following rules are bounded:
f_540(v210:0:0, v221:0:0, v222:0:0, sum~cons_1~v222:0:0) -> f_540(v210:0:0, v221:0:0, 1 + v222:0:0, 1 + (1 + v222:0:0)) :|: v210:0:0 > 1 && v222:0:0 > 0 && v221:0:0 > 2 && v221:0:0 > 1 + v222:0:0 && sum~cons_1~v222:0:0 = 1 + v222:0:0


----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
