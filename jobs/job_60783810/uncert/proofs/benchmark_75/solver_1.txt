NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/JjMzx.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be disproven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 55 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 16.2 s]
(4) LLVM Symbolic Execution Graph
(5) LLVMNonterminationProof [COMPLETE, 2352 ms]
(6) NO


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/JjMzx.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/JjMzx.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "foo" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca *i32, align 8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %1)
		%2 = alloca i8, numElementsLit: 4, align 16
		%3 = bitcast *i8 %2 to *i32
		store %3, %1
		%4 = call i32 @__VERIFIER_nondet_int()
		%5 = icmp ne %4 0
		br %5, %6, %26
	6:
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = icmp ne %7 0
		br %8, %9, %17
	9:
		%10 = call i32 @__VERIFIER_nondet_int()
		%11 = icmp ne %10 0
		br %11, %12, %14
	12:
		%13 = load %1
		store 0, %13
		br %16
	14:
		%15 = load %1
		store 1, %15
		br %16
	16:
		br %25
	17:
		%18 = call i32 @__VERIFIER_nondet_int()
		%19 = icmp ne %18 0
		br %19, %20, %22
	20:
		%21 = load %1
		store 2, %21
		br %24
	22:
		%23 = load %1
		store 3, %23
		br %24
	24:
		br %25
	25:
		br %46
	26:
		%27 = call i32 @__VERIFIER_nondet_int()
		%28 = icmp ne %27 0
		br %28, %29, %37
	29:
		%30 = call i32 @__VERIFIER_nondet_int()
		%31 = icmp ne %30 0
		br %31, %32, %34
	32:
		%33 = load %1
		store 4, %33
		br %36
	34:
		%35 = load %1
		store 5, %35
		br %36
	36:
		br %45
	37:
		%38 = call i32 @__VERIFIER_nondet_int()
		%39 = icmp ne %38 0
		br %39, %40, %42
	40:
		%41 = load %1
		store 6, %41
		br %44
	42:
		%43 = load %1
		store 7, %43
		br %44
	44:
		br %45
	45:
		br %46
	46:
		%47 = load %1
		%48 = load %47
		ret %48

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 77
	0:
		%1 = alloca i32, align 4
		%2 = alloca *i32, align 8
		%3 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %2)
		%4 = alloca i8, numElementsLit: 4, align 16
		%5 = bitcast *i8 %4 to *i32
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%6 = alloca i8, numElementsLit: 4, align 16
		%7 = bitcast *i8 %6 to *i32
		store %7, %3
		%8 = load %2
		store 1, %8
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = icmp ne %9 0
		br %10, %11, %16
	11:
		%12 = load %2
		%13 = load %12
		%14 = sub i32 %13, 1
		%15 = load %2
		store %14, %15
		br %16
	16:
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = icmp ne %17 0
		br %18, %19, %21
	19:
		%20 = call i32 @foo()
		br %21
	21:
		%22 = call i32 @__VERIFIER_nondet_int()
		%23 = icmp ne %22 0
		br %23, %24, %26
	24:
		%25 = call i32 @foo()
		br %26
	26:
		%27 = call i32 @__VERIFIER_nondet_int()
		%28 = icmp ne %27 0
		br %28, %29, %31
	29:
		%30 = call i32 @foo()
		br %31
	31:
		%32 = call i32 @__VERIFIER_nondet_int()
		%33 = icmp ne %32 0
		br %33, %34, %36
	34:
		%35 = call i32 @foo()
		br %36
	36:
		%37 = call i32 @__VERIFIER_nondet_int()
		%38 = icmp ne %37 0
		br %38, %39, %44
	39:
		%40 = load %2
		%41 = load %40
		%42 = sub i32 %41, 1
		%43 = load %2
		store %42, %43
		br %44
	44:
		br %45
	45:
		%46 = load %3
		%47 = load %46
		%48 = icmp sgt %47 0
		br %48, %49, %56
	49:
		%50 = load %3
		%51 = load %50
		%52 = load %2
		%53 = load %52
		%54 = sub i32 %51, %53
		%55 = load %3
		store %54, %55
		br %45
	56:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) LLVMNonterminationProof (COMPLETE)
Proved nontermination with the following witness:

State #380 with references set to {}.
Nondeterministic instruction %1 = alloca i32, align 4 in node #380 yields value 37.
Nondeterministic instruction %2 = alloca *i32, align 8 in node #381 yields value 29.
Nondeterministic instruction %3 = alloca *i32, align 8 in node #382 yields value 1.
Nondeterministic instruction %4 = alloca i8, numElementsLit: 4, align 16 in node #385 yields value 25.
Nondeterministic instruction %6 = alloca i8, numElementsLit: 4, align 16 in node #389 yields value 9.
Nondeterministic instruction %9 = call i32 @__VERIFIER_nondet_int() in node #394 yields value 1.
Nondeterministic instruction %17 = call i32 @__VERIFIER_nondet_int() in node #416 yields value 0.
Nondeterministic instruction %22 = call i32 @__VERIFIER_nondet_int() in node #435 yields value 0.
Nondeterministic instruction %27 = call i32 @__VERIFIER_nondet_int() in node #464 yields value 0.
Nondeterministic instruction %32 = call i32 @__VERIFIER_nondet_int() in node #510 yields value 1.
Nondeterministic instruction %1 = alloca *i32, align 8 in node #615 yields value 17.
Nondeterministic instruction %1 = alloca *i32, align 8 in node #2671 yields value 17.
Nondeterministic instruction %2 = alloca i8, numElementsLit: 4, align 16 in node #2951 yields value 13.
Nondeterministic instruction %4 = call i32 @__VERIFIER_nondet_int() in node #3445 yields value (-1).
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #4325 yields value 1.
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #4326 yields value 1.
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #7754 yields value 1.
Nondeterministic instruction %7 = call i32 @__VERIFIER_nondet_int() in node #9336 yields value 1.
Nondeterministic instruction %10 = call i32 @__VERIFIER_nondet_int() in node #9515 yields value 1.
Nondeterministic instruction %37 = call i32 @__VERIFIER_nondet_int() in node #10010 yields value (-1).

----------------------------------------

(6)
NO
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.009s
