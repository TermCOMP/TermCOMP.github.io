MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/BcvT8.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 69 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/BcvT8.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/BcvT8.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %4
		%9 = load %4
		%10 = icmp slt %9 1
		br %10, %11, %12
	11:
		store 1, %4
		br %12
	12:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%13 = call i32 @__VERIFIER_nondet_int()
		store %13, %5
		%14 = load %5
		%15 = icmp slt %14 1
		br %15, %16, %17
	16:
		store 1, %5
		br %17
	17:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%18 = load %4
		%19 = sext i32 %18 to i64
		%20 = alloca i8, numElementsLit: %19, align 16
		%21 = bitcast *i8 %20 to *i32
		store %21, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%22 = load %5
		%23 = load %4
		%24 = mul i32 %22, %23
		%25 = sext i32 %24 to i64
		%26 = alloca i8, numElementsLit: %25, align 16
		%27 = bitcast *i8 %26 to *i32
		store %27, %7
		%28 = load %6
		%29 = icmp ne %28 null
		br %29, %30, %33
	30:
		%31 = load %7
		%32 = icmp ne %31 null
		br %32, %34, %33
	33:
		store 0, %1
		br %71
	34:
		store 0, %2
		br %35
	35:
		%36 = load %2
		%37 = load %4
		%38 = icmp slt %36 %37
		br %38, %39, %48
	39:
		%40 = call i32 @__VERIFIER_nondet_int()
		%41 = load %6
		%42 = load %2
		%43 = sext i32 %42 to i64
		%44 = getelementptr %41, %43
		store %40, %44
		br %45
	45:
		%46 = load %2
		%47 = add i32 %46, 1
		store %47, %2
		br %35
	48:
		store 0, %3
		br %49
	49:
		%50 = load %3
		%51 = load %4
		%52 = load %5
		%53 = mul i32 %51, %52
		%54 = icmp slt %50 %53
		br %54, %55, %70
	55:
		%56 = load %6
		%57 = load %2
		%58 = load %4
		%59 = srem i32 %57, %58
		%60 = sext i32 %59 to i64
		%61 = getelementptr %56, %60
		%62 = load %61
		%63 = load %7
		%64 = load %3
		%65 = sext i32 %64 to i64
		%66 = getelementptr %63, %65
		store %62, %66
		br %67
	67:
		%68 = load %3
		%69 = add i32 %68, 1
		store %69, %3
		br %49
	70:
		store 0, %1
		br %71
	71:
		%72 = load %1
		ret %72


Analyze Termination of all function calls matching the pattern:
main()Division by zero possible at node 610
