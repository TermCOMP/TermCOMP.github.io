YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZVvxh.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1957 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 35 ms]
(8) IntTRS
(9) TerminationGraphProcessor [EQUIVALENT, 22 ms]
(10) IntTRS
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IntTRS
(13) RankingReductionPairProof [EQUIVALENT, 12 ms]
(14) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/ZVvxh.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/ZVvxh.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "fibo" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		%5 = icmp slt %4 1
		br %5, %6, %7
	6:
		store 0, %2
		br %19
	7:
		%8 = load %3
		%9 = icmp eq %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %19
	11:
		%12 = load %3
		%13 = sub i32 %12, 1
		%14 = call i32 @fibo(i32 %13)
		%15 = load %3
		%16 = sub i32 %15, 2
		%17 = call i32 @fibo(i32 %16)
		%18 = add i32 %14, %17
		store %18, %2
		br %19
	19:
		%20 = load %2
		ret %20

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 36
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		store 5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %2
		%5 = call i32 @fibo(i32 %4)
		store %5, %3
		%6 = load %3
		%7 = icmp eq %6 5
		br %7, %8, %10
	8:
		br %9
	9:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		br %10
	10:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 49 rulesP rules:
f_220(v85, v94, v86, v87, v88, v89, v90, v91, v95, 0, 5, 3, 1, 4) -> f_221(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) :|: 1 <= v96 && v97 = 3 + v96 && 4 <= v97
f_221(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) -> f_222(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) :|: TRUE
f_222(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) -> f_223(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) :|: TRUE
f_223(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) -> f_224(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) :|: 0 = 0
f_224(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) -> f_226(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) :|: 1 <= v85
f_226(v85, v94, v96, v86, v87, v88, v89, v90, v91, v95, v97, 0, 5, 3, 1, 4) -> f_228(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) :|: 0 = 0
f_228(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) -> f_230(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) :|: TRUE
f_230(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) -> f_232(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) :|: 0 = 0
f_232(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 4) -> f_235(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) :|: v85 != 1 && 2 <= v85 && v85 <= 5
f_235(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) -> f_238(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) :|: 0 = 0
f_238(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) -> f_241(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) :|: TRUE
f_241(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) -> f_243(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) :|: 0 = 0
f_243(v85, v94, v96, 0, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 2, 1, 4) -> f_245(v85, v94, v96, 0, v109, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 1 + v109 = v85 && 1 <= v109 && v109 <= 4
f_245(v85, v94, v96, 0, v109, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: 0 = 0
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_249(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_251(1, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, 2, 3, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_568(v109, v1105, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_598(v109, v1194, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_640(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_679(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_247(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_701(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_249(v109, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_219(v109, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) :|: TRUE
f_219(v85, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) -> f_220(v85, v94, v86, v87, v88, v89, v90, v91, v95, 0, 5, 3, 1, 4) :|: 1 <= v94 && v95 = 3 + v94 && 4 <= v95
f_251(1, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, 2, 3, 4) -> f_252(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) :|: 0 = 0
f_252(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) -> f_253(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) :|: 0 = 0
f_253(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) -> f_254(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) :|: 0 = 0
f_254(2, v94, v96, 0, 1, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 4) -> f_255(0, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 5, 2, 1, 3, 4) :|: 0 = 0
f_255(0, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 5, 2, 1, 3, 4) -> f_256(0, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 5, 2, 3, 1, 4) :|: TRUE
f_256(0, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 5, 2, 3, 1, 4) -> f_219(0, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) :|: TRUE
f_568(v109, v1105, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_575(v85, v94, v96, 0, v109, v1105, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_575(v85, v94, v96, 0, v109, v1105, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_578(v85, v94, v96, 0, v109, v1105, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_578(v85, v94, v96, 0, v109, v1105, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_581(v85, v94, v96, 0, v109, v1105, v1120, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 2 + v1120 = v85 && 0 <= v1120 && v1120 <= 3
f_581(v85, v94, v96, 0, v109, v1105, v1120, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_585(v1120, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1105, 3, 1, 2, 4) :|: 0 = 0
f_585(v1120, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1105, 3, 1, 2, 4) -> f_589(v1120, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) :|: TRUE
f_589(v1120, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) -> f_219(v1120, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) :|: TRUE
f_598(v109, v1194, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_605(v85, v94, v96, 0, v109, v1194, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_605(v85, v94, v96, 0, v109, v1194, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_612(v85, v94, v96, 0, v109, v1194, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_612(v85, v94, v96, 0, v109, v1194, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_618(v85, v94, v96, 0, v109, v1194, v1214, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 2 + v1214 = v85 && 0 <= v1214 && v1214 <= 3
f_618(v85, v94, v96, 0, v109, v1194, v1214, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_625(v1214, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1194, 3, 1, 2, 4) :|: 0 = 0
f_625(v1214, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1194, 3, 1, 2, 4) -> f_632(v1214, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) :|: TRUE
f_632(v1214, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) -> f_219(v1214, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) :|: TRUE
f_640(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_647(v85, v94, v96, 0, v109, v1329, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_647(v85, v94, v96, 0, v109, v1329, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_654(v85, v94, v96, 0, v109, v1329, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 0 = 0
f_654(v85, v94, v96, 0, v109, v1329, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_661(v85, v94, v96, 0, v109, v1329, v1387, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) :|: 2 + v1387 = v85 && 0 <= v1387 && v1387 <= 3
f_661(v85, v94, v96, 0, v109, v1329, v1387, v86, v87, v88, v89, v90, v91, v95, v97, 5, 3, 1, 2, 4) -> f_669(v1387, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1329, 3, 1, 2, 4) :|: 0 = 0
f_669(v1387, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, v109, v1329, 3, 1, 2, 4) -> f_677(v1387, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) :|: TRUE
f_677(v1387, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 2, 1, 4) -> f_219(v1387, v86, v87, v88, v89, v90, v91, 0, 5, 3, 1, 4) :|: TRUE
f_679(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_640(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
f_701(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) -> f_679(v109, v1329, v86, v87, v88, v89, v90, v91, v94, v95, v96, v97, 0, 5, v85, 3, 1, 2, 4) :|: TRUE
Combined rules. Obtained 3 rulesP rules:
f_220(1 + v109:0, v94:0, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, v95:0, 0, 5, 3, 1, 4) -> f_220(v109:0, v94:1, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, 3 + v94:1, 0, 5, 3, 1, 4) :|: v109:0 > 0 && v96:0 > 0 && v109:0 < 5 && v94:1 > 0
f_220(1 + v109:0, v94:0, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, v95:0, 0, 5, 3, 1, 4) -> f_220(0, v94:1, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, 3 + v94:1, 0, 5, 3, 1, 4) :|: v109:0 > 0 && v96:0 > 0 && v109:0 < 5 && v94:1 > 0
f_220(2 + v1120:0, v94:0, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, v95:0, 0, 5, 3, 1, 4) -> f_220(v1120:0, v94:1, v86:0, v87:0, v88:0, v89:0, v90:0, v91:0, 3 + v94:1, 0, 5, 3, 1, 4) :|: v1120:0 > -1 && v96:0 > 0 && v1120:0 < 4 && v109:0 > 0 && 2 + v1120:0 = 1 + v109:0 && v109:0 < 5 && v94:1 > 0
Filtered unneeded arguments:
   f_220(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_220(x1)
Removed division, modulo operations, cleaned up constraints. Obtained 3 rules.P rules:
f_220(sum~cons_1~v109:0) -> f_220(v109:0) :|: v109:0 > 0 && v109:0 < 5 && sum~cons_1~v109:0 = 1 + v109:0
f_220(sum~cons_1~v109:0) -> f_220(0) :|: v109:0 > 0 && v109:0 < 5 && sum~cons_1~v109:0 = 1 + v109:0
f_220(sum~cons_2~v1120:0) -> f_220(v1120:0) :|: v1120:0 > -1 && v1120:0 < 4 && sum~cons_2~v1120:0 = 2 + v1120:0

----------------------------------------

(8)
Obligation:
Rules:
f_220(sum~cons_1~v109:0) -> f_220(v109:0) :|: v109:0 > 0 && v109:0 < 5 && sum~cons_1~v109:0 = 1 + v109:0
f_220(x) -> f_220(0) :|: x1 > 0 && x1 < 5 && x = 1 + x1
f_220(sum~cons_2~v1120:0) -> f_220(v1120:0) :|: v1120:0 > -1 && v1120:0 < 4 && sum~cons_2~v1120:0 = 2 + v1120:0

----------------------------------------

(9) TerminationGraphProcessor (EQUIVALENT)
Constructed the termination graph and obtained one non-trivial SCC.

----------------------------------------

(10)
Obligation:
Rules:
f_220(sum~cons_1~v109:0) -> f_220(v109:0) :|: v109:0 > 0 && v109:0 < 5 && sum~cons_1~v109:0 = 1 + v109:0
f_220(sum~cons_2~v1120:0) -> f_220(v1120:0) :|: v1120:0 > -1 && v1120:0 < 4 && sum~cons_2~v1120:0 = 2 + v1120:0

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f_220(sum~cons_1~v109:0:0) -> f_220(v109:0:0) :|: v109:0:0 > 0 && v109:0:0 < 5 && sum~cons_1~v109:0:0 = 1 + v109:0:0
f_220(sum~cons_2~v1120:0:0) -> f_220(v1120:0:0) :|: v1120:0:0 > -1 && v1120:0:0 < 4 && sum~cons_2~v1120:0:0 = 2 + v1120:0:0

----------------------------------------

(13) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_220 ] = f_220_1

The following rules are decreasing:
f_220(sum~cons_1~v109:0:0) -> f_220(v109:0:0) :|: v109:0:0 > 0 && v109:0:0 < 5 && sum~cons_1~v109:0:0 = 1 + v109:0:0
f_220(sum~cons_2~v1120:0:0) -> f_220(v1120:0:0) :|: v1120:0:0 > -1 && v1120:0:0 < 4 && sum~cons_2~v1120:0:0 = 2 + v1120:0:0

The following rules are bounded:
f_220(sum~cons_1~v109:0:0) -> f_220(v109:0:0) :|: v109:0:0 > 0 && v109:0:0 < 5 && sum~cons_1~v109:0:0 = 1 + v109:0:0
f_220(sum~cons_2~v1120:0:0) -> f_220(v1120:0:0) :|: v1120:0:0 > -1 && v1120:0:0 < 4 && sum~cons_2~v1120:0:0 = 2 + v1120:0:0


----------------------------------------

(14)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.002s
