YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sw83p.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 392 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 0 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 5 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 1 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) RankingReductionPairProof [EQUIVALENT, 6 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sw83p.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sw83p.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		store 0, %3
		br %4
	4:
		%5 = load %3
		%6 = icmp sge %5 0
		br %6, %7, %19
	7:
		%8 = load %2
		%9 = icmp sle %8 50
		br %9, %10, %13
	10:
		%11 = load %3
		%12 = add i32 %11, 1
		store %12, %3
		br %16
	13:
		%14 = load %3
		%15 = sub i32 %14, 1
		store %15, %3
		br %16
	16:
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %4
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_305(v256, v257, v258, v259, 1, v261, 0, 50, 51, v266, v267, v268, v269, 3, 4) -> f_306(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) :|: v270 = 1 + v261 && 52 <= v270
f_306(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) -> f_307(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) :|: TRUE
f_307(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) -> f_308(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) :|: TRUE
f_308(v256, v257, v258, v259, 1, v261, 0, 50, 51, v270, v266, v267, v268, v269, 3, 4, 52) -> f_309(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) :|: 0 = 0
f_309(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) -> f_310(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) :|: 0 <= v266 && 1 <= v259
f_310(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) -> f_312(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) :|: 0 = 0
f_312(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) -> f_314(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) :|: TRUE
f_314(v256, v257, v258, v266, 1, v261, 0, 50, 51, v270, v259, v267, v268, v269, 3, 4, 52) -> f_316(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) :|: 0 = 0
f_316(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) -> f_317(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) :|: 0 = 0
f_317(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) -> f_318(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) :|: TRUE
f_318(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v259, v267, v268, v269, 3, 4, 52) -> f_319(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v267, v268, v269, 3, 4, 52) :|: 0 = 0
f_319(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v267, v268, v269, 3, 4, 52) -> f_320(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) :|: 1 + v281 = v266 && 0 <= 1 + v281 && v281 <= 49
f_320(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) -> f_321(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) :|: TRUE
f_321(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) -> f_322(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) :|: TRUE
f_322(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4, 52, 49) -> f_304(v256, v257, v258, v266, 1, v270, 0, 50, 51, v261, v281, v267, v268, v269, 3, 4) :|: TRUE
f_304(v256, v257, v258, v259, 1, v261, 0, 50, 51, v265, v266, v267, v268, v269, 3, 4) -> f_305(v256, v257, v258, v259, 1, v261, 0, 50, 51, v266, v267, v268, v269, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_305(v256:0, v257:0, v258:0, v259:0, 1, v261:0, 0, 50, 51, 1 + v281:0, v267:0, v268:0, v269:0, 3, 4) -> f_305(v256:0, v257:0, v258:0, 1 + v281:0, 1, 1 + v261:0, 0, 50, 51, v281:0, v267:0, v268:0, v269:0, 3, 4) :|: v261:0 > 50 && v259:0 > 0 && v281:0 > -2 && v281:0 < 50
Filtered unneeded arguments:
   f_305(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) -> f_305(x4, x6, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_305(v259:0, v261:0, sum~cons_1~v281:0) -> f_305(1 + v281:0, 1 + v261:0, v281:0) :|: v259:0 > 0 && v261:0 > 50 && v281:0 < 50 && v281:0 > -2 && sum~cons_1~v281:0 = 1 + v281:0

----------------------------------------

(9)
Obligation:
Rules:
f_305(v259:0, v261:0, sum~cons_1~v281:0) -> f_305(1 + v281:0, 1 + v261:0, v281:0) :|: v259:0 > 0 && v261:0 > 50 && v281:0 < 50 && v281:0 > -2 && sum~cons_1~v281:0 = 1 + v281:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_305(v259:0:0, v261:0:0, sum~cons_1~v281:0:0) -> f_305(1 + v281:0:0, 1 + v261:0:0, v281:0:0) :|: v281:0:0 < 50 && v281:0:0 > -2 && v261:0:0 > 50 && v259:0:0 > 0 && sum~cons_1~v281:0:0 = 1 + v281:0:0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_305(x, x1, x2)] = x2

The following rules are decreasing:
f_305(v259:0:0, v261:0:0, sum~cons_1~v281:0:0) -> f_305(1 + v281:0:0, 1 + v261:0:0, v281:0:0) :|: v281:0:0 < 50 && v281:0:0 > -2 && v261:0:0 > 50 && v259:0:0 > 0 && sum~cons_1~v281:0:0 = 1 + v281:0:0
The following rules are bounded:
f_305(v259:0:0, v261:0:0, sum~cons_1~v281:0:0) -> f_305(1 + v281:0:0, 1 + v261:0:0, v281:0:0) :|: v281:0:0 < 50 && v281:0:0 > -2 && v261:0:0 > 50 && v259:0:0 > 0 && sum~cons_1~v281:0:0 = 1 + v281:0:0

----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 16 rulesP rules:
f_208(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) -> f_209(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) :|: 0 = 0
f_209(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) -> f_210(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) :|: TRUE
f_210(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) -> f_211(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) :|: 0 = 0
f_211(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) -> f_212(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) :|: v70 <= 50 && v68 <= 49
f_212(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) -> f_214(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) :|: 0 = 0
f_214(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) -> f_216(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) :|: TRUE
f_216(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) -> f_218(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) :|: 0 = 0
f_218(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 49, 50, 4) -> f_220(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) :|: v75 = 1 + v70 && 2 <= v75 && v75 <= 51
f_220(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) -> f_222(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) :|: TRUE
f_222(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) -> f_224(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) :|: TRUE
f_224(v65, v66, v67, v70, 1, v75, v68, v71, v72, v73, 0, 3, 49, 50, 4, 2, 51) -> f_226(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) :|: 0 = 0
f_226(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) -> f_228(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) :|: v75 = 1 + v70
f_228(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) -> f_230(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) :|: TRUE
f_230(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) -> f_232(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) :|: TRUE
f_232(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 4, 2, 51) -> f_207(v65, v66, v67, v70, 1, v75, v71, v72, v73, 0, 3, 50, 51, 4) :|: TRUE
f_207(v65, v66, v67, v68, 1, v70, v71, v72, v73, 0, 3, 50, 51, 4) -> f_208(v65, v66, v67, v70, 1, v68, v71, v72, v73, 0, 3, 50, 51, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_208(v65:0, v66:0, v67:0, v70:0, 1, v68:0, v71:0, v72:0, v73:0, 0, 3, 50, 51, 4) -> f_208(v65:0, v66:0, v67:0, 1 + v70:0, 1, v70:0, v71:0, v72:0, v73:0, 0, 3, 50, 51, 4) :|: v68:0 < 50 && v70:0 < 51 && v70:0 > 0
Filtered unneeded arguments:
   f_208(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) -> f_208(x4, x6)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_208(v70:0, v68:0) -> f_208(1 + v70:0, v70:0) :|: v70:0 < 51 && v70:0 > 0 && v68:0 < 50

----------------------------------------

(16)
Obligation:
Rules:
f_208(v70:0, v68:0) -> f_208(1 + v70:0, v70:0) :|: v70:0 < 51 && v70:0 > 0 && v68:0 < 50

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_208(v70:0:0, v68:0:0) -> f_208(1 + v70:0:0, v70:0:0) :|: v70:0:0 < 51 && v70:0:0 > 0 && v68:0:0 < 50

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_208 ] = -1*f_208_1

The following rules are decreasing:
f_208(v70:0:0, v68:0:0) -> f_208(1 + v70:0:0, v70:0:0) :|: v70:0:0 < 51 && v70:0:0 > 0 && v68:0:0 < 50

The following rules are bounded:
f_208(v70:0:0, v68:0:0) -> f_208(1 + v70:0:0, v70:0:0) :|: v70:0:0 < 51 && v70:0:0 > 0 && v68:0:0 < 50


----------------------------------------

(20)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
