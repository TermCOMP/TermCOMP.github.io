YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mFiWw.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 606 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 38 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (13) IntTRS
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IntTRS
        (16) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (19) YES
    (20) LLVM Symbolic Execution SCC
        (21) SCC2IRS [SOUND, 0 ms]
        (22) IntTRS
        (23) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (24) IntTRS
        (25) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/mFiWw.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/mFiWw.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		%7 = load %3
		store %7, %4
		br %8
	8:
		%9 = load %4
		%10 = icmp sgt %9 0
		br %10, %11, %22
	11:
		%12 = load %2
		%13 = icmp sgt %12 0
		br %13, %14, %17
	14:
		%15 = load %2
		%16 = add i32 %15, -1
		store %16, %2
		br %21
	17:
		%18 = load %3
		store %18, %2
		%19 = load %4
		%20 = add i32 %19, -1
		store %20, %4
		br %21
	21:
		br %8
	22:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 33 rulesP rules:
f_318(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) -> f_319(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) :|: 0 = 0
f_319(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) -> f_320(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) :|: 0 = 0
f_320(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) -> f_321(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) :|: TRUE
f_321(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) -> f_322(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) :|: 0 = 0
f_322(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) -> f_323(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) :|: 0 < v803 && 2 <= v801
f_322(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) -> f_324(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) :|: v803 <= 0 && v801 = 1 && v803 = 0 && 0 = 0
f_323(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) -> f_325(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) :|: 0 = 0
f_325(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) -> f_327(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) :|: TRUE
f_327(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v804, v805, v806, v807, 0, 3, 2, 4) -> f_328(v793, v794, v795, v796, v797, v798, v799, 1, v803, v802, v801, v803, v804, v805, v806, v807, 0, 3, 2, 4) :|: TRUE
f_328(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v904, v905, v906, v907, v908, v909, 0, 3, 2, 4) -> f_330(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v905, v906, v907, v908, v909, 0, 3, 2, 4) :|: 0 = 0
f_330(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v905, v906, v907, v908, v909, 0, 3, 2, 4) -> f_332(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) :|: 1 + v915 = v902 && 0 <= v915
f_332(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) -> f_334(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) :|: TRUE
f_334(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) -> f_336(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) :|: TRUE
f_336(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) -> f_317(v894, v895, v896, v897, v898, v899, v900, 1, v902, v903, v915, v906, v907, v908, v909, 0, 3, 2, 4) :|: TRUE
f_317(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) -> f_318(v793, v794, v795, v796, v797, v798, v799, 1, v801, v802, v803, v804, v805, v806, v807, 0, 3, 2, 4) :|: TRUE
f_324(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) -> f_326(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) :|: 0 = 0
f_326(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) -> f_329(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) :|: TRUE
f_329(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) -> f_331(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) :|: 0 = 0
f_331(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) -> f_333(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) :|: TRUE
f_333(v793, v794, v795, v796, v797, v798, v799, 1, 0, v802, v804, v805, v806, v807, 3, 2, 4) -> f_335(v793, v794, v795, v796, v797, v798, v799, 1, 0, v804, v805, v806, v807, 3, 2, 4) :|: 0 = 0
f_335(v793, v794, v795, v796, v797, v798, v799, 1, 0, v804, v805, v806, v807, 3, 2, 4) -> f_337(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) :|: 1 + v962 = v799 && 0 <= v962
f_337(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) -> f_338(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) :|: TRUE
f_338(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) -> f_339(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) :|: TRUE
f_339(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 2, 4) -> f_340(v793, v794, v795, v796, v797, v798, v799, 1, 0, v962, v804, v805, v806, v807, 3, 4) :|: TRUE
f_340(v984, v985, v986, v987, v988, v989, v990, 1, 0, v993, v994, v995, v996, v997, 3, 4) -> f_341(v984, v985, v986, v987, v988, v989, v990, 1, 0, v993, v994, v995, v996, v997, 3, 4) :|: TRUE
f_341(v984, v985, v986, v987, v988, v989, v990, 1, 0, v993, v994, v995, v996, v997, 3, 4) -> f_342(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 4) :|: 0 = 0
f_342(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 4) -> f_343(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: 0 < v993 && 2 <= v990 && 2 <= v989
f_343(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_345(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: 0 = 0
f_345(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_347(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: TRUE
f_347(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_349(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: 0 = 0
f_349(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_350(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: 0 = 0
f_350(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_351(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) :|: TRUE
f_351(v984, v985, v986, v987, v988, v989, v993, 1, 0, v990, v994, v995, v996, v997, 3, 2, 4) -> f_328(v984, v985, v986, v987, v988, v989, v993, 1, v989, v990, 1, 0, v994, v995, v996, v997, 0, 3, 2, 4) :|: TRUE
Combined rules. Obtained 2 rulesP rules:
f_318(v793:0, v794:0, v795:0, v796:0, v797:0, v798:0, v799:0, 1, v801:0, v802:0, 1 + v915:0, v804:0, v805:0, v806:0, v807:0, 0, 3, 2, 4) -> f_318(v793:0, v794:0, v795:0, v796:0, v797:0, v798:0, v799:0, 1, 1 + v915:0, v802:0, v915:0, v804:0, v805:0, v806:0, v807:0, 0, 3, 2, 4) :|: v801:0 > 1 && v915:0 > -1
f_318(v793:0, v794:0, v795:0, v796:0, v797:0, 1 + v915:0, 1 + v962:0, 1, 1, v802:0, 0, v804:0, v805:0, v806:0, v807:0, 0, 3, 2, 4) -> f_318(v793:0, v794:0, v795:0, v796:0, v797:0, 1 + v915:0, v962:0, 1, 1 + v915:0, 1 + v962:0, v915:0, v804:0, v805:0, v806:0, v807:0, 0, 3, 2, 4) :|: v915:0 > 0 && v962:0 > 0
Filtered unneeded arguments:
   f_318(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_318(x6, x7, x9, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 2 rules.P rules:
f_318(v798:0, v799:0, v801:0, sum~cons_1~v915:0) -> f_318(v798:0, v799:0, 1 + v915:0, v915:0) :|: v801:0 > 1 && v915:0 > -1 && sum~cons_1~v915:0 = 1 + v915:0
f_318(sum~cons_1~v915:0, sum~cons_1~v962:0, cons_1, cons_0) -> f_318(1 + v915:0, v962:0, 1 + v915:0, v915:0) :|: v915:0 > 0 && v962:0 > 0 && sum~cons_1~v915:0 = 1 + v915:0 && sum~cons_1~v962:0 = 1 + v962:0 && cons_1 = 1 && cons_0 = 0

----------------------------------------

(9)
Obligation:
Rules:
f_318(v798:0, v799:0, v801:0, sum~cons_1~v915:0) -> f_318(v798:0, v799:0, 1 + v915:0, v915:0) :|: v801:0 > 1 && v915:0 > -1 && sum~cons_1~v915:0 = 1 + v915:0
f_318(x, x1, x2, x3) -> f_318(1 + x4, x5, 1 + x4, x4) :|: x4 > 0 && x5 > 0 && x = 1 + x4 && x1 = 1 + x5 && x2 = 1 && x3 = 0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_318(v798:0:0, v799:0:0, v801:0:0, sum~cons_1~v915:0:0) -> f_318(v798:0:0, v799:0:0, 1 + v915:0:0, v915:0:0) :|: v801:0:0 > 1 && v915:0:0 > -1 && sum~cons_1~v915:0:0 = 1 + v915:0:0
f_318(sum~cons_1~x4:0, sum~cons_1~x5:0, cons_1, cons_0) -> f_318(1 + x4:0, x5:0, 1 + x4:0, x4:0) :|: x4:0 > 0 && x5:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0 && sum~cons_1~x5:0 = 1 + x5:0 && cons_1 = 1 && cons_0 = 0

----------------------------------------

(12) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_318(x, x1, x2, x3)] = -1 + x + x1

The following rules are decreasing:
f_318(sum~cons_1~x4:0, sum~cons_1~x5:0, cons_1, cons_0) -> f_318(1 + x4:0, x5:0, 1 + x4:0, x4:0) :|: x4:0 > 0 && x5:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0 && sum~cons_1~x5:0 = 1 + x5:0 && cons_1 = 1 && cons_0 = 0
The following rules are bounded:
f_318(sum~cons_1~x4:0, sum~cons_1~x5:0, cons_1, cons_0) -> f_318(1 + x4:0, x5:0, 1 + x4:0, x4:0) :|: x4:0 > 0 && x5:0 > 0 && sum~cons_1~x4:0 = 1 + x4:0 && sum~cons_1~x5:0 = 1 + x5:0 && cons_1 = 1 && cons_0 = 0

----------------------------------------

(13)
Obligation:
Rules:
f_318(v798:0:0, v799:0:0, v801:0:0, sum~cons_1~v915:0:0) -> f_318(v798:0:0, v799:0:0, 1 + v915:0:0, v915:0:0) :|: v801:0:0 > 1 && v915:0:0 > -1 && sum~cons_1~v915:0:0 = 1 + v915:0:0

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f_318(v798:0:0:0, v799:0:0:0, v801:0:0:0, sum~cons_1~v915:0:0:0) -> f_318(v798:0:0:0, v799:0:0:0, 1 + v915:0:0:0, v915:0:0:0) :|: v801:0:0:0 > 1 && v915:0:0:0 > -1 && sum~cons_1~v915:0:0:0 = 1 + v915:0:0:0

----------------------------------------

(16) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f_318(x1, x2, x3, x4) -> f_318(x3, x4)

----------------------------------------

(17)
Obligation:
Rules:
f_318(v801:0:0:0, sum~cons_1~v915:0:0:0) -> f_318(1 + v915:0:0:0, v915:0:0:0) :|: v801:0:0:0 > 1 && v915:0:0:0 > -1 && sum~cons_1~v915:0:0:0 = 1 + v915:0:0:0

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_318(x, x1)] = x1

The following rules are decreasing:
f_318(v801:0:0:0, sum~cons_1~v915:0:0:0) -> f_318(1 + v915:0:0:0, v915:0:0:0) :|: v801:0:0:0 > 1 && v915:0:0:0 > -1 && sum~cons_1~v915:0:0:0 = 1 + v915:0:0:0
The following rules are bounded:
f_318(v801:0:0:0, sum~cons_1~v915:0:0:0) -> f_318(1 + v915:0:0:0, v915:0:0:0) :|: v801:0:0:0 > 1 && v915:0:0:0 > -1 && sum~cons_1~v915:0:0:0 = 1 + v915:0:0:0

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC
----------------------------------------

(21) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 13 rulesP rules:
f_211(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) -> f_213(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) :|: 0 = 0
f_213(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) -> f_215(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) :|: TRUE
f_215(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) -> f_217(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 4) :|: 0 = 0
f_217(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 4) -> f_219(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) :|: 0 < v166 && 2 <= v165 && 2 <= v162
f_219(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) -> f_222(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) :|: 0 = 0
f_222(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) -> f_226(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) :|: TRUE
f_226(v158, v159, v160, v161, v162, v163, 1, v166, v165, v167, v168, v169, v170, 0, 3, 2, 4) -> f_230(v158, v159, v160, v161, v162, v163, 1, v166, v167, v168, v169, v170, 0, 3, 2, 4) :|: 0 = 0
f_230(v158, v159, v160, v161, v162, v163, 1, v166, v167, v168, v169, v170, 0, 3, 2, 4) -> f_234(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) :|: 1 + v252 = v166 && 0 <= v252
f_234(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) -> f_238(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) :|: TRUE
f_238(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) -> f_242(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) :|: TRUE
f_242(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) -> f_246(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) :|: TRUE
f_246(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 2, 4) -> f_208(v158, v159, v160, v161, v162, v163, 1, v166, v252, v167, v168, v169, v170, 0, 3, 4) :|: TRUE
f_208(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) -> f_211(v158, v159, v160, v161, v162, v163, 1, v165, v166, v167, v168, v169, v170, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_211(v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 1, v165:0, 1 + v252:0, v167:0, v168:0, v169:0, v170:0, 0, 3, 4) -> f_211(v158:0, v159:0, v160:0, v161:0, v162:0, v163:0, 1, 1 + v252:0, v252:0, v167:0, v168:0, v169:0, v170:0, 0, 3, 4) :|: v165:0 > 1 && v252:0 > -1 && v162:0 > 1
Filtered unneeded arguments:
   f_211(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16) -> f_211(x5, x8, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_211(v162:0, v165:0, sum~cons_1~v252:0) -> f_211(v162:0, 1 + v252:0, v252:0) :|: v252:0 > -1 && v162:0 > 1 && v165:0 > 1 && sum~cons_1~v252:0 = 1 + v252:0

----------------------------------------

(22)
Obligation:
Rules:
f_211(v162:0, v165:0, sum~cons_1~v252:0) -> f_211(v162:0, 1 + v252:0, v252:0) :|: v252:0 > -1 && v162:0 > 1 && v165:0 > 1 && sum~cons_1~v252:0 = 1 + v252:0

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f_211(v162:0:0, v165:0:0, sum~cons_1~v252:0:0) -> f_211(v162:0:0, 1 + v252:0:0, v252:0:0) :|: v252:0:0 > -1 && v162:0:0 > 1 && v165:0:0 > 1 && sum~cons_1~v252:0:0 = 1 + v252:0:0

----------------------------------------

(25) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_211(x, x1, x2)] = x2

The following rules are decreasing:
f_211(v162:0:0, v165:0:0, sum~cons_1~v252:0:0) -> f_211(v162:0:0, 1 + v252:0:0, v252:0:0) :|: v252:0:0 > -1 && v162:0:0 > 1 && v165:0:0 > 1 && sum~cons_1~v252:0:0 = 1 + v252:0:0
The following rules are bounded:
f_211(v162:0:0, v165:0:0, sum~cons_1~v252:0:0) -> f_211(v162:0:0, 1 + v252:0:0, v252:0:0) :|: v252:0:0 > -1 && v162:0:0 > 1 && v165:0:0 > 1 && sum~cons_1~v252:0:0 = 1 + v252:0:0

----------------------------------------

(26)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
