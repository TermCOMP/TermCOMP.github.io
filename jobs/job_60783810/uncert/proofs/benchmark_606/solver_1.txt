MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/1KOgy.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 74 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 4539 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
    (8) LLVM Symbolic Execution SCC
    (9) LLVM Symbolic Execution SCC


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/1KOgy.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/1KOgy.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: nomsg initVal: -1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: null section: null

Name: mode1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: r1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p1_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: mode3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2_old initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: alive3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: id3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: send3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: st3 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3_new initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: nodes initVal: (@node1,@node2,@node3) type: [3 x *BasicFunctionType varArgs: falsereturnType: BasicVoidTypeparamTypes: ()] addrSpace: null alignment: 16 threadLocal: false constant: false linkageType: null section: null

Name: p1 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p2 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Name: p3 initVal: 0 type: i32 addrSpace: null alignment: 4 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_char" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_msg_t" returnParam: i8 signext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet__Bool" returnParam: i1 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_error" returnParam: BasicVoidType parameters: () variableLength: true visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "node1" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 75
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode1
		%4 = trunc i8 %3 to i1
		br %4, %5, %43
	5:
		%6 = load @r1
		%7 = sext i8 %6 to i32
		%8 = add i32 %7, 1
		%9 = trunc i32 %8 to i8
		store %9, @r1
		%10 = load @p3_old
		store %10, %1
		%11 = load @nomsg
		store %11, @p3_old
		%12 = load %1
		%13 = sext i8 %12 to i32
		%14 = load @nomsg
		%15 = sext i8 %14 to i32
		%16 = icmp ne %13 %15
		br %16, %17, %42
	17:
		%18 = load @alive1
		%19 = trunc i8 %18 to i1
		br %19, %20, %39
	20:
		%21 = load %1
		%22 = sext i8 %21 to i32
		%23 = load @id1
		%24 = sext i8 %23 to i32
		%25 = icmp sgt %22 %24
		br %25, %26, %28
	26:
		%27 = load %1
		store %27, @send1
		br %38
	28:
		%29 = load %1
		%30 = sext i8 %29 to i32
		%31 = load @id1
		%32 = sext i8 %31 to i32
		%33 = icmp eq %30 %32
		br %33, %34, %35
	34:
		store 1, @st1
		br %37
	35:
		%36 = load %1
		store %36, @send1
		br %37
	37:
		br %38
	38:
		br %41
	39:
		%40 = load %1
		store %40, @send1
		br %41
	41:
		br %42
	42:
		store 0, @mode1
		br %96
	43:
		%44 = load @alive1
		%45 = trunc i8 %44 to i1
		br %45, %46, %67
	46:
		%47 = load @send1
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp ne %48 %50
		br %51, %52, %61
	52:
		%53 = load @p1_new
		%54 = sext i8 %53 to i32
		%55 = load @nomsg
		%56 = sext i8 %55 to i32
		%57 = icmp eq %54 %56
		br %57, %58, %61
	58:
		%59 = load @send1
		%60 = sext i8 %59 to i32
		br %64
	61:
		%62 = load @p1_new
		%63 = sext i8 %62 to i32
		br %64
	64:
		%65 = phi [%60, %58], [%63, %61]
		%66 = trunc i32 %65 to i8
		store %66, @p1_new
		br %95
	67:
		%68 = load @send1
		%69 = sext i8 %68 to i32
		%70 = load @id1
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %94
	73:
		%74 = load @send1
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp ne %75 %77
		br %78, %79, %88
	79:
		%80 = load @p1_new
		%81 = sext i8 %80 to i32
		%82 = load @nomsg
		%83 = sext i8 %82 to i32
		%84 = icmp eq %81 %83
		br %84, %85, %88
	85:
		%86 = load @send1
		%87 = sext i8 %86 to i32
		br %91
	88:
		%89 = load @p1_new
		%90 = sext i8 %89 to i32
		br %91
	91:
		%92 = phi [%87, %85], [%90, %88]
		%93 = trunc i32 %92 to i8
		store %93, @p1_new
		br %94
	94:
		br %95
	95:
		store 1, @mode1
		br %96
	96:
		ret void

*BasicFunctionTypename: "node2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 174
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode2
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p1_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p1_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive2
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id2
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send2
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id2
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st2
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send2
		br %35
	35:
		br %36
	36:
		store 0, @mode2
		br %90
	37:
		%38 = load @alive2
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send2
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p2_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send2
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p2_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p2_new
		br %89
	61:
		%62 = load @send2
		%63 = sext i8 %62 to i32
		%64 = load @id2
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send2
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p2_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send2
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p2_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p2_new
		br %88
	88:
		br %89
	89:
		store 1, @mode2
		br %90
	90:
		ret void

*BasicFunctionTypename: "node3" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 265
	0:
		%1 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%2 = load @nomsg
		store %2, %1
		%3 = load @mode3
		%4 = trunc i8 %3 to i1
		br %4, %5, %37
	5:
		%6 = load @p2_old
		store %6, %1
		%7 = load @nomsg
		store %7, @p2_old
		%8 = load %1
		%9 = sext i8 %8 to i32
		%10 = load @nomsg
		%11 = sext i8 %10 to i32
		%12 = icmp ne %9 %11
		br %12, %13, %36
	13:
		%14 = load @alive3
		%15 = trunc i8 %14 to i1
		br %15, %16, %33
	16:
		%17 = load %1
		%18 = sext i8 %17 to i32
		%19 = load @id3
		%20 = sext i8 %19 to i32
		%21 = icmp sgt %18 %20
		br %21, %22, %24
	22:
		%23 = load %1
		store %23, @send3
		br %32
	24:
		%25 = load %1
		%26 = sext i8 %25 to i32
		%27 = load @id3
		%28 = sext i8 %27 to i32
		%29 = icmp eq %26 %28
		br %29, %30, %31
	30:
		store 1, @st3
		br %31
	31:
		br %32
	32:
		br %35
	33:
		%34 = load %1
		store %34, @send3
		br %35
	35:
		br %36
	36:
		store 0, @mode3
		br %90
	37:
		%38 = load @alive3
		%39 = trunc i8 %38 to i1
		br %39, %40, %61
	40:
		%41 = load @send3
		%42 = sext i8 %41 to i32
		%43 = load @nomsg
		%44 = sext i8 %43 to i32
		%45 = icmp ne %42 %44
		br %45, %46, %55
	46:
		%47 = load @p3_new
		%48 = sext i8 %47 to i32
		%49 = load @nomsg
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %55
	52:
		%53 = load @send3
		%54 = sext i8 %53 to i32
		br %58
	55:
		%56 = load @p3_new
		%57 = sext i8 %56 to i32
		br %58
	58:
		%59 = phi [%54, %52], [%57, %55]
		%60 = trunc i32 %59 to i8
		store %60, @p3_new
		br %89
	61:
		%62 = load @send3
		%63 = sext i8 %62 to i32
		%64 = load @id3
		%65 = sext i8 %64 to i32
		%66 = icmp ne %63 %65
		br %66, %67, %88
	67:
		%68 = load @send3
		%69 = sext i8 %68 to i32
		%70 = load @nomsg
		%71 = sext i8 %70 to i32
		%72 = icmp ne %69 %71
		br %72, %73, %82
	73:
		%74 = load @p3_new
		%75 = sext i8 %74 to i32
		%76 = load @nomsg
		%77 = sext i8 %76 to i32
		%78 = icmp eq %75 %77
		br %78, %79, %82
	79:
		%80 = load @send3
		%81 = sext i8 %80 to i32
		br %85
	82:
		%83 = load @p3_new
		%84 = sext i8 %83 to i32
		br %85
	85:
		%86 = phi [%81, %79], [%84, %82]
		%87 = trunc i32 %86 to i8
		store %87, @p3_new
		br %88
	88:
		br %89
	89:
		store 1, @mode3
		br %90
	90:
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 356
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @r1
		%3 = sext i8 %2 to i32
		%4 = icmp eq %3 0
		br %4, %5, %126
	5:
		%6 = load @alive1
		%7 = trunc i8 %6 to i1
		%8 = zext i1 %7 to i32
		%9 = load @alive2
		%10 = trunc i8 %9 to i1
		%11 = zext i1 %10 to i32
		%12 = add i32 %8, %11
		%13 = load @alive3
		%14 = trunc i8 %13 to i1
		%15 = zext i1 %14 to i32
		%16 = add i32 %12, %15
		%17 = icmp sge %16 1
		br %17, %18, %124
	18:
		%19 = load @id1
		%20 = sext i8 %19 to i32
		%21 = icmp sge %20 0
		br %21, %22, %122
	22:
		%23 = load @st1
		%24 = sext i8 %23 to i32
		%25 = icmp eq %24 0
		br %25, %26, %120
	26:
		%27 = load @send1
		%28 = sext i8 %27 to i32
		%29 = load @id1
		%30 = sext i8 %29 to i32
		%31 = icmp eq %28 %30
		br %31, %32, %118
	32:
		%33 = load @mode1
		%34 = trunc i8 %33 to i1
		%35 = zext i1 %34 to i32
		%36 = icmp eq %35 0
		br %36, %37, %116
	37:
		%38 = load @id2
		%39 = sext i8 %38 to i32
		%40 = icmp sge %39 0
		br %40, %41, %114
	41:
		%42 = load @st2
		%43 = sext i8 %42 to i32
		%44 = icmp eq %43 0
		br %44, %45, %112
	45:
		%46 = load @send2
		%47 = sext i8 %46 to i32
		%48 = load @id2
		%49 = sext i8 %48 to i32
		%50 = icmp eq %47 %49
		br %50, %51, %110
	51:
		%52 = load @mode2
		%53 = trunc i8 %52 to i1
		%54 = zext i1 %53 to i32
		%55 = icmp eq %54 0
		br %55, %56, %108
	56:
		%57 = load @id3
		%58 = sext i8 %57 to i32
		%59 = icmp sge %58 0
		br %59, %60, %106
	60:
		%61 = load @st3
		%62 = sext i8 %61 to i32
		%63 = icmp eq %62 0
		br %63, %64, %104
	64:
		%65 = load @send3
		%66 = sext i8 %65 to i32
		%67 = load @id3
		%68 = sext i8 %67 to i32
		%69 = icmp eq %66 %68
		br %69, %70, %102
	70:
		%71 = load @mode3
		%72 = trunc i8 %71 to i1
		%73 = zext i1 %72 to i32
		%74 = icmp eq %73 0
		br %74, %75, %100
	75:
		%76 = load @id1
		%77 = sext i8 %76 to i32
		%78 = load @id2
		%79 = sext i8 %78 to i32
		%80 = icmp ne %77 %79
		br %80, %81, %98
	81:
		%82 = load @id1
		%83 = sext i8 %82 to i32
		%84 = load @id3
		%85 = sext i8 %84 to i32
		%86 = icmp ne %83 %85
		br %86, %87, %96
	87:
		%88 = load @id2
		%89 = sext i8 %88 to i32
		%90 = load @id3
		%91 = sext i8 %90 to i32
		%92 = icmp ne %89 %91
		br %92, %93, %94
	93:
		store 1, %1
		br %95
	94:
		store 0, %1
		br %95
	95:
		br %97
	96:
		store 0, %1
		br %97
	97:
		br %99
	98:
		store 0, %1
		br %99
	99:
		br %101
	100:
		store 0, %1
		br %101
	101:
		br %103
	102:
		store 0, %1
		br %103
	103:
		br %105
	104:
		store 0, %1
		br %105
	105:
		br %107
	106:
		store 0, %1
		br %107
	107:
		br %109
	108:
		store 0, %1
		br %109
	109:
		br %111
	110:
		store 0, %1
		br %111
	111:
		br %113
	112:
		store 0, %1
		br %113
	113:
		br %115
	114:
		store 0, %1
		br %115
	115:
		br %117
	116:
		store 0, %1
		br %117
	117:
		br %119
	118:
		store 0, %1
		br %119
	119:
		br %121
	120:
		store 0, %1
		br %121
	121:
		br %123
	122:
		store 0, %1
		br %123
	123:
		br %125
	124:
		store 0, %1
		br %125
	125:
		br %127
	126:
		store 0, %1
		br %127
	127:
		%128 = load %1
		ret %128

*BasicFunctionTypename: "check" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 536
	0:
		%1 = alloca i32, align 4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %1)
		%2 = load @st1
		%3 = sext i8 %2 to i32
		%4 = load @st2
		%5 = sext i8 %4 to i32
		%6 = add i32 %3, %5
		%7 = load @st3
		%8 = sext i8 %7 to i32
		%9 = add i32 %6, %8
		%10 = icmp sle %9 1
		br %10, %11, %30
	11:
		%12 = load @r1
		%13 = sext i8 %12 to i32
		%14 = icmp slt %13 3
		br %14, %15, %16
	15:
		store 1, %1
		br %29
	16:
		%17 = load @st1
		%18 = sext i8 %17 to i32
		%19 = load @st2
		%20 = sext i8 %19 to i32
		%21 = add i32 %18, %20
		%22 = load @st3
		%23 = sext i8 %22 to i32
		%24 = add i32 %21, %23
		%25 = icmp eq %24 1
		br %25, %26, %27
	26:
		store 1, %1
		br %28
	27:
		store 0, %1
		br %28
	28:
		br %29
	29:
		br %31
	30:
		store 0, %1
		br %31
	31:
		%32 = load %1
		ret %32

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 581
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store 0, %2
		%4 = call signext i8 @__VERIFIER_nondet_char()
		store %4, @r1
		%5 = call signext i8 @__VERIFIER_nondet_char()
		store %5, @id1
		%6 = call signext i8 @__VERIFIER_nondet_char()
		store %6, @st1
		%7 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %7, @send1
		%8 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%9 = zext i1 %8 to i8
		store %9, @mode1
		%10 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%11 = zext i1 %10 to i8
		store %11, @alive1
		%12 = call signext i8 @__VERIFIER_nondet_char()
		store %12, @id2
		%13 = call signext i8 @__VERIFIER_nondet_char()
		store %13, @st2
		%14 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %14, @send2
		%15 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%16 = zext i1 %15 to i8
		store %16, @mode2
		%17 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%18 = zext i1 %17 to i8
		store %18, @alive2
		%19 = call signext i8 @__VERIFIER_nondet_char()
		store %19, @id3
		%20 = call signext i8 @__VERIFIER_nondet_char()
		store %20, @st3
		%21 = call signext i8 @__VERIFIER_nondet_msg_t()
		store %21, @send3
		%22 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%23 = zext i1 %22 to i8
		store %23, @mode3
		%24 = call zeroext i1 @__VERIFIER_nondet__Bool()
		%25 = zext i1 %24 to i8
		store %25, @alive3
		%26 = call i32 @init()
		store %26, %3
		%27 = load %3
		%28 = icmp ne %27 0
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i1 zeroext %28)
		%29 = load @nomsg
		store %29, @p1_old
		%30 = load @nomsg
		store %30, @p1_new
		%31 = load @nomsg
		store %31, @p2_old
		%32 = load @nomsg
		store %32, @p2_new
		%33 = load @nomsg
		store %33, @p3_old
		%34 = load @nomsg
		store %34, @p3_new
		store 0, %3
		br %35
	35:
		%36 = load %3
		%37 = icmp slt %36 6
		br %37, %38, %50
	38:
		Unnamed Call-Instruction = call BasicVoidType @node1()
		Unnamed Call-Instruction = call BasicVoidType @node2()
		Unnamed Call-Instruction = call BasicVoidType @node3()
		%39 = load @p1_new
		store %39, @p1_old
		%40 = load @nomsg
		store %40, @p1_new
		%41 = load @p2_new
		store %41, @p2_old
		%42 = load @nomsg
		store %42, @p2_new
		%43 = load @p3_new
		store %43, @p3_old
		%44 = load @nomsg
		store %44, @p3_new
		%45 = call i32 @check()
		store %45, %2
		%46 = load %2
		%47 = icmp ne %46 0
		Unnamed Call-Instruction = call BasicVoidType @assert(i1 zeroext %47)
		%48 = load %3
		%49 = add i32 %48, 1
		store %49, %3
		br %35
	50:
		%51 = load %1
		ret %51

*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 665
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		br %4
	4:
		%5 = load %2
		%6 = trunc i8 %5 to i1
		%7 = xor i1 %6, 1
		br %7, %8, %9
	8:
		br %4
	9:
		ret void

*BasicFunctionTypename: "assert" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 677
	0:
		%2 = alloca i8, align 1
		%3 = zext i1 %0 to i8
		store %3, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%4 = load %2
		%5 = trunc i8 %4 to i1
		br %5, %8, %6
	6:
		br %7
	7:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		Unnamed Call-Instruction = call BasicVoidType (...)* @__VERIFIER_error()
		unreachable
	8:
		ret void


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8)
Obligation:
SCC
----------------------------------------

(9)
Obligation:
SCCInstruction count:616
deleted entry node of node1
deleted entry node of node2
deleted entry node of node3
deleted entry node of check
deleted entry node of assert
deleted entry node of assert
deleted entry node of assert
deleted entry node of node1
deleted entry node of node2
