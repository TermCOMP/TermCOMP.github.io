MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could not be shown:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 80 ms]
(2) LLVM problem


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Name: I_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: I_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: pc_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hin_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Hout_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HinCnt_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: HoutCnt_2 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: __LABS_time initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: tupleStart initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: tupleEnd initVal: 1 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: true linkageType: null section: null

Name: Lvalue_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_0_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_1_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Lvalue_2_1 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_0_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_1_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Name: Ltstamp_2_0 initVal: 0 type: i8 addrSpace: null alignment: 1 threadLocal: false constant: false linkageType: COMMON section: null

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "exit" returnParam: BasicVoidType parameters: (i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_assume" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 83
	0:
		%2 = alloca i32, align 4
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%3 = load %2
		%4 = icmp ne %3 0
		br %4, %6, %5
	5:
		Unnamed Call-Instruction = call BasicVoidType @exit(i32 0)
		unreachable
	6:
		ret void

*BasicFunctionTypename: "mod" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i8 signext, 1 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 94
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = sext i8 %5 to i32
		%7 = icmp sge %6 0
		br %7, %8, %14
	8:
		%9 = load %3
		%10 = sext i8 %9 to i32
		%11 = load %4
		%12 = sext i8 %11 to i32
		%13 = srem i32 %10, %12
		br %23
	14:
		%15 = load %4
		%16 = sext i8 %15 to i32
		%17 = load %3
		%18 = sext i8 %17 to i32
		%19 = load %4
		%20 = sext i8 %19 to i32
		%21 = srem i32 %18, %20
		%22 = add i32 %16, %21
		br %23
	23:
		%24 = phi [%13, %8], [%22, %14]
		%25 = trunc i32 %24 to i8
		ret %25

*BasicFunctionTypename: "getI" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 113
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %43 [0, %7 1, %19 2, %31]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %13
	10:
		%11 = load @I_0_0
		%12 = sext i8 %11 to i32
		br %16
	13:
		%14 = load @I_0_1
		%15 = sext i8 %14 to i32
		br %16
	16:
		%17 = phi [%12, %10], [%15, %13]
		%18 = trunc i32 %17 to i8
		store %18, %3
		br %44
	19:
		%20 = load %5
		%21 = icmp eq %20 0
		br %21, %22, %25
	22:
		%23 = load @I_1_0
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @I_1_1
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, %3
		br %44
	31:
		%32 = load %5
		%33 = icmp eq %32 0
		br %33, %34, %37
	34:
		%35 = load @I_2_0
		%36 = sext i8 %35 to i32
		br %40
	37:
		%38 = load @I_2_1
		%39 = sext i8 %38 to i32
		br %40
	40:
		%41 = phi [%36, %34], [%39, %37]
		%42 = trunc i32 %41 to i8
		store %42, %3
		br %44
	43:
		br %44
	44:
		%45 = load %3
		ret %45

*BasicFunctionTypename: "getpc" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 149
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %13 [0, %7 1, %9 2, %11]
	7:
		%8 = load @pc_0_0
		store %8, %3
		br %14
	9:
		%10 = load @pc_1_0
		store %10, %3
		br %14
	11:
		%12 = load @pc_2_0
		store %12, %3
		br %14
	13:
		br %14
	14:
		%15 = load %3
		ret %15

*BasicFunctionTypename: "setpc" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i32, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 165
	0:
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		switch %7, %14 [0, %8 1, %10 2, %12]
	8:
		%9 = load %6
		store %9, @pc_0_0
		br %15
	10:
		%11 = load %6
		store %11, @pc_1_0
		br %15
	12:
		%13 = load %6
		store %13, @pc_2_0
		br %15
	14:
		br %15
	15:
		ret void

*BasicFunctionTypename: "getHin" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 188
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %19 [0, %7 1, %11 2, %15]
	7:
		%8 = load @Hin_0_0
		%9 = trunc i8 %8 to i1
		%10 = zext i1 %9 to i8
		store %10, %3
		br %20
	11:
		%12 = load @Hin_1_0
		%13 = trunc i8 %12 to i1
		%14 = zext i1 %13 to i8
		store %14, %3
		br %20
	15:
		%16 = load @Hin_2_0
		%17 = trunc i8 %16 to i1
		%18 = zext i1 %17 to i8
		store %18, %3
		br %20
	19:
		br %20
	20:
		%21 = load %3
		ret %21

*BasicFunctionTypename: "getHout" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 204
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %19 [0, %7 1, %11 2, %15]
	7:
		%8 = load @Hout_0_0
		%9 = trunc i8 %8 to i1
		%10 = zext i1 %9 to i8
		store %10, %3
		br %20
	11:
		%12 = load @Hout_1_0
		%13 = trunc i8 %12 to i1
		%14 = zext i1 %13 to i8
		store %14, %3
		br %20
	15:
		%16 = load @Hout_2_0
		%17 = trunc i8 %16 to i1
		%18 = zext i1 %17 to i8
		store %18, %3
		br %20
	19:
		br %20
	20:
		%21 = load %3
		ret %21

*BasicFunctionTypename: "getHinCnt" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 220
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %11 [0, %5 1, %7 2, %9]
	5:
		%6 = load @HinCnt_0
		store %6, %2
		br %12
	7:
		%8 = load @HinCnt_1
		store %8, %2
		br %12
	9:
		%10 = load @HinCnt_2
		store %10, %2
		br %12
	11:
		br %12
	12:
		%13 = load %2
		ret %13

*BasicFunctionTypename: "setHinCnt" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 236
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		switch %5, %12 [0, %6 1, %8 2, %10]
	6:
		%7 = load %4
		store %7, @HinCnt_0
		br %13
	8:
		%9 = load %4
		store %9, @HinCnt_1
		br %13
	10:
		%11 = load %4
		store %11, @HinCnt_2
		br %13
	12:
		br %13
	13:
		ret void

*BasicFunctionTypename: "getHoutCnt" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 257
	0:
		%2 = alloca i8, align 1
		%3 = alloca i32, align 4
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = load %3
		switch %4, %11 [0, %5 1, %7 2, %9]
	5:
		%6 = load @HoutCnt_0
		store %6, %2
		br %12
	7:
		%8 = load @HoutCnt_1
		store %8, %2
		br %12
	9:
		%10 = load @HoutCnt_2
		store %10, %2
		br %12
	11:
		br %12
	12:
		%13 = load %2
		ret %13

*BasicFunctionTypename: "setHoutCnt" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 273
	0:
		%3 = alloca i32, align 4
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		switch %5, %12 [0, %6 1, %8 2, %10]
	6:
		%7 = load %4
		store %7, @HoutCnt_0
		br %13
	8:
		%9 = load %4
		store %9, @HoutCnt_1
		br %13
	10:
		%11 = load %4
		store %11, @HoutCnt_2
		br %13
	12:
		br %13
	13:
		ret void

*BasicFunctionTypename: "now" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 292
	0:
		%1 = load @__LABS_time
		%2 = add i8 %1, 1
		store %2, @__LABS_time
		ret %2

*BasicFunctionTypename: "link" linkageType: EXTERNALLY_VISIBLE returnParam: i1 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 297
	0:
		%4 = alloca i1, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%8 = load %7
		%9 = zext i8 %8 to i32
		%10 = icmp sge %9 0
		br %10, %11, %58
	11:
		%12 = load %7
		%13 = zext i8 %12 to i32
		%14 = icmp sle %13 1
		br %14, %15, %58
	15:
		%16 = load %5
		%17 = zext i8 %16 to i32
		%18 = call signext i8 @getI(i32 %17, i32 0)
		%19 = sext i8 %18 to i32
		%20 = load %6
		%21 = zext i8 %20 to i32
		%22 = call signext i8 @getI(i32 %21, i32 0)
		%23 = sext i8 %22 to i32
		%24 = sub i32 %19, %23
		%25 = load %5
		%26 = zext i8 %25 to i32
		%27 = call signext i8 @getI(i32 %26, i32 0)
		%28 = sext i8 %27 to i32
		%29 = load %6
		%30 = zext i8 %29 to i32
		%31 = call signext i8 @getI(i32 %30, i32 0)
		%32 = sext i8 %31 to i32
		%33 = sub i32 %28, %32
		%34 = mul i32 %24, %33
		%35 = load %5
		%36 = zext i8 %35 to i32
		%37 = call signext i8 @getI(i32 %36, i32 1)
		%38 = sext i8 %37 to i32
		%39 = load %6
		%40 = zext i8 %39 to i32
		%41 = call signext i8 @getI(i32 %40, i32 1)
		%42 = sext i8 %41 to i32
		%43 = sub i32 %38, %42
		%44 = load %5
		%45 = zext i8 %44 to i32
		%46 = call signext i8 @getI(i32 %45, i32 1)
		%47 = sext i8 %46 to i32
		%48 = load %6
		%49 = zext i8 %48 to i32
		%50 = call signext i8 @getI(i32 %49, i32 1)
		%51 = sext i8 %50 to i32
		%52 = sub i32 %47, %51
		%53 = mul i32 %43, %52
		%54 = add i32 %34, %53
		%55 = icmp sle %54 25
		br %55, %56, %57
	56:
		store 1, %4
		br %59
	57:
		br %58
	58:
		store 0, %4
		br %59
	59:
		%60 = load %4
		ret %60

*BasicFunctionTypename: "getLvalue" linkageType: EXTERNALLY_VISIBLE returnParam: i8 signext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 345
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %43 [0, %7 1, %19 2, %31]
	7:
		%8 = load %5
		%9 = icmp eq %8 0
		br %9, %10, %13
	10:
		%11 = load @Lvalue_0_0
		%12 = sext i8 %11 to i32
		br %16
	13:
		%14 = load @Lvalue_0_1
		%15 = sext i8 %14 to i32
		br %16
	16:
		%17 = phi [%12, %10], [%15, %13]
		%18 = trunc i32 %17 to i8
		store %18, %3
		br %44
	19:
		%20 = load %5
		%21 = icmp eq %20 0
		br %21, %22, %25
	22:
		%23 = load @Lvalue_1_0
		%24 = sext i8 %23 to i32
		br %28
	25:
		%26 = load @Lvalue_1_1
		%27 = sext i8 %26 to i32
		br %28
	28:
		%29 = phi [%24, %22], [%27, %25]
		%30 = trunc i32 %29 to i8
		store %30, %3
		br %44
	31:
		%32 = load %5
		%33 = icmp eq %32 0
		br %33, %34, %37
	34:
		%35 = load @Lvalue_2_0
		%36 = sext i8 %35 to i32
		br %40
	37:
		%38 = load @Lvalue_2_1
		%39 = sext i8 %38 to i32
		br %40
	40:
		%41 = phi [%36, %34], [%39, %37]
		%42 = trunc i32 %41 to i8
		store %42, %3
		br %44
	43:
		br %44
	44:
		%45 = load %3
		ret %45

*BasicFunctionTypename: "setLvalue" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 379
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = zext i8 %7 to i32
		switch %8, %36 [0, %9 1, %18 2, %27]
	9:
		%10 = load %5
		%11 = zext i8 %10 to i32
		%12 = icmp eq %11 0
		br %12, %13, %15
	13:
		%14 = load %6
		store %14, @Lvalue_0_0
		br %17
	15:
		%16 = load %6
		store %16, @Lvalue_0_1
		br %17
	17:
		br %37
	18:
		%19 = load %5
		%20 = zext i8 %19 to i32
		%21 = icmp eq %20 0
		br %21, %22, %24
	22:
		%23 = load %6
		store %23, @Lvalue_1_0
		br %26
	24:
		%25 = load %6
		store %25, @Lvalue_1_1
		br %26
	26:
		br %37
	27:
		%28 = load %5
		%29 = zext i8 %28 to i32
		%30 = icmp eq %29 0
		br %30, %31, %33
	31:
		%32 = load %6
		store %32, @Lvalue_2_0
		br %35
	33:
		%34 = load %6
		store %34, @Lvalue_2_1
		br %35
	35:
		br %37
	36:
		br %37
	37:
		ret void

*BasicFunctionTypename: "getLtstamp" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i32, 1 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 429
	0:
		%3 = alloca i8, align 1
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = load %4
		switch %6, %13 [0, %7 1, %9 2, %11]
	7:
		%8 = load @Ltstamp_0_0
		store %8, %3
		br %14
	9:
		%10 = load @Ltstamp_1_0
		store %10, %3
		br %14
	11:
		%12 = load @Ltstamp_2_0
		store %12, %3
		br %14
	13:
		br %14
	14:
		%15 = load %3
		ret %15

*BasicFunctionTypename: "setLtstamp" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 447
	0:
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		store %0, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		store %1, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %2, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%7 = load %4
		%8 = zext i8 %7 to i32
		switch %8, %15 [0, %9 1, %11 2, %13]
	9:
		%10 = load %6
		store %10, @Ltstamp_0_0
		br %16
	11:
		%12 = load %6
		store %12, @Ltstamp_1_0
		br %16
	13:
		%14 = load %6
		store %14, @Ltstamp_2_0
		br %16
	15:
		br %16
	16:
		ret void

*BasicFunctionTypename: "timeof" linkageType: EXTERNALLY_VISIBLE returnParam: i8 zeroext parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 468
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = call zeroext i8 @getLtstamp(i32 %6, i32 0)
		ret %7

*BasicFunctionTypename: "setHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 478
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = load %3
		%8 = zext i8 %7 to i32
		%9 = call signext i8 @getHinCnt(i32 %8)
		%10 = sext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHin(i32 %12, i32 0)
		%14 = icmp ne %13 0
		%15 = xor i1 %14, 1
		%16 = zext i1 %15 to i32
		%17 = add i32 %10, %16
		%18 = trunc i32 %17 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %6, i8 zeroext %18)
		%19 = load %3
		%20 = zext i8 %19 to i32
		switch %20, %24 [0, %21 1, %22 2, %23]
	21:
		store 1, @Hin_0_0
		br %25
	22:
		store 1, @Hin_1_0
		br %25
	23:
		store 1, @Hin_2_0
		br %25
	24:
		br %25
	25:
		ret void

*BasicFunctionTypename: "clearHin" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 504
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = load %3
		%8 = zext i8 %7 to i32
		%9 = call signext i8 @getHinCnt(i32 %8)
		%10 = sext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHin(i32 %12, i32 0)
		%14 = sext i8 %13 to i32
		%15 = sub i32 %10, %14
		%16 = trunc i32 %15 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHinCnt(i32 %6, i8 zeroext %16)
		%17 = load %3
		%18 = zext i8 %17 to i32
		switch %18, %22 [0, %19 1, %20 2, %21]
	19:
		store 0, @Hin_0_0
		br %23
	20:
		store 0, @Hin_1_0
		br %23
	21:
		store 0, @Hin_2_0
		br %23
	22:
		br %23
	23:
		ret void

*BasicFunctionTypename: "setHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 527
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = load %3
		%8 = zext i8 %7 to i32
		%9 = call zeroext i8 @getHoutCnt(i32 %8)
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHout(i32 %12, i32 0)
		%14 = icmp ne %13 0
		%15 = xor i1 %14, 1
		%16 = zext i1 %15 to i32
		%17 = add i32 %10, %16
		%18 = trunc i32 %17 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %6, i8 zeroext %18)
		%19 = load %3
		%20 = zext i8 %19 to i32
		switch %20, %24 [0, %21 1, %22 2, %23]
	21:
		store 1, @Hout_0_0
		br %25
	22:
		store 1, @Hout_1_0
		br %25
	23:
		store 1, @Hout_2_0
		br %25
	24:
		br %25
	25:
		ret void

*BasicFunctionTypename: "clearHout" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 551
	0:
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%5 = load %3
		%6 = zext i8 %5 to i32
		%7 = load %3
		%8 = zext i8 %7 to i32
		%9 = call zeroext i8 @getHoutCnt(i32 %8)
		%10 = zext i8 %9 to i32
		%11 = load %3
		%12 = zext i8 %11 to i32
		%13 = call signext i8 @getHout(i32 %12, i32 0)
		%14 = sext i8 %13 to i32
		%15 = sub i32 %10, %14
		%16 = trunc i32 %15 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHoutCnt(i32 %6, i8 zeroext %16)
		%17 = load %3
		%18 = zext i8 %17 to i32
		switch %18, %22 [0, %19 1, %20 2, %21]
	19:
		store 0, @Hout_0_0
		br %23
	20:
		store 0, @Hout_1_0
		br %23
	21:
		store 0, @Hout_2_0
		br %23
	22:
		br %23
	23:
		ret void

*BasicFunctionTypename: "attr" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 574
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %18
	12:
		%13 = load %5
		%14 = zext i8 %13 to i32
		%15 = call zeroext i8 @getHoutCnt(i32 %14)
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 0
		br %18
	18:
		%19 = phi [1, %4], [%17, %12]
		%20 = zext i1 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %20)
		%21 = load %8
		%22 = trunc i8 %21 to i1
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = zext i8 %24 to i32
		%26 = call signext i8 @getHinCnt(i32 %25)
		%27 = sext i8 %26 to i32
		%28 = icmp eq %27 0
		br %29
	29:
		%30 = phi [1, %18], [%28, %23]
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load %5
		%33 = zext i8 %32 to i32
		switch %33, %61 [0, %34 1, %43 2, %52]
	34:
		%35 = load %6
		%36 = zext i8 %35 to i32
		%37 = icmp eq %36 0
		br %37, %38, %40
	38:
		%39 = load %7
		store %39, @I_0_0
		br %42
	40:
		%41 = load %7
		store %41, @I_0_1
		br %42
	42:
		br %62
	43:
		%44 = load %6
		%45 = zext i8 %44 to i32
		%46 = icmp eq %45 0
		br %46, %47, %49
	47:
		%48 = load %7
		store %48, @I_1_0
		br %51
	49:
		%50 = load %7
		store %50, @I_1_1
		br %51
	51:
		br %62
	52:
		%53 = load %6
		%54 = zext i8 %53 to i32
		%55 = icmp eq %54 0
		br %55, %56, %58
	56:
		%57 = load %7
		store %57, @I_2_0
		br %60
	58:
		%59 = load %7
		store %59, @I_2_1
		br %60
	60:
		br %62
	61:
		br %62
	62:
		%63 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "lstig" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i8 zeroext, 1 i8 zeroext, 2 i8 signext, 3 i1 zeroext) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 640
	0:
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		%7 = alloca i8, align 1
		%8 = alloca i8, align 1
		store %0, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		store %1, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		store %2, %7
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %7)
		%9 = zext i1 %3 to i8
		store %9, %8
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %8)
		%10 = load %8
		%11 = trunc i8 %10 to i1
		br %11, %12, %18
	12:
		%13 = load %5
		%14 = zext i8 %13 to i32
		%15 = call zeroext i8 @getHoutCnt(i32 %14)
		%16 = zext i8 %15 to i32
		%17 = icmp eq %16 0
		br %18
	18:
		%19 = phi [1, %4], [%17, %12]
		%20 = zext i1 %19 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %20)
		%21 = load %8
		%22 = trunc i8 %21 to i1
		br %22, %23, %29
	23:
		%24 = load %5
		%25 = zext i8 %24 to i32
		%26 = call signext i8 @getHinCnt(i32 %25)
		%27 = sext i8 %26 to i32
		%28 = icmp eq %27 0
		br %29
	29:
		%30 = phi [1, %18], [%28, %23]
		%31 = zext i1 %30 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %31)
		%32 = load %5
		%33 = load %6
		%34 = load %7
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %32, i8 zeroext %33, i8 signext %34)
		%35 = load %5
		%36 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %35, i8 zeroext %36)
		ret void

*BasicFunctionTypename: "confirm" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 671
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = trunc i32 %9 to i8
		store %10, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = trunc i32 %11 to i8
		store %12, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%13 = call i32 @__VERIFIER_nondet_int()
		%14 = trunc i32 %13 to i8
		store %14, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = trunc i32 %15 to i8
		store %16, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = trunc i32 %17 to i8
		store %18, %6
		%19 = load %1
		%20 = zext i8 %19 to i32
		%21 = icmp slt %20 3
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %1
		%24 = zext i8 %23 to i32
		%25 = call signext i8 @getHinCnt(i32 %24)
		%26 = sext i8 %25 to i32
		%27 = icmp sgt %26 0
		%28 = zext i1 %27 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %28)
		%29 = load %2
		%30 = zext i8 %29 to i32
		%31 = icmp slt %30 2
		%32 = zext i1 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %32)
		%33 = load %1
		%34 = zext i8 %33 to i32
		%35 = load %2
		%36 = zext i8 %35 to i32
		%37 = call signext i8 @getHin(i32 %34, i32 %36)
		%38 = sext i8 %37 to i32
		%39 = icmp eq %38 1
		%40 = zext i1 %39 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %40)
		%41 = load %1
		%42 = load %2
		%43 = call zeroext i8 @timeof(i8 zeroext %41, i8 zeroext %42)
		store %43, %6
		store 0, %3
		br %44
	44:
		%45 = load %3
		%46 = zext i8 %45 to i32
		%47 = icmp slt %46 3
		br %47, %48, %115
	48:
		%49 = load %1
		%50 = zext i8 %49 to i32
		%51 = load %3
		%52 = zext i8 %51 to i32
		%53 = icmp ne %50 %52
		br %53, %54, %111
	54:
		%55 = load %3
		%56 = load %2
		%57 = call zeroext i8 @timeof(i8 zeroext %55, i8 zeroext %56)
		%58 = zext i8 %57 to i32
		%59 = load %6
		%60 = zext i8 %59 to i32
		%61 = icmp ne %58 %60
		br %61, %62, %111
	62:
		%63 = load %1
		%64 = load %3
		%65 = load %2
		%66 = call zeroext i1 @link(i8 zeroext %63, i8 zeroext %64, i8 zeroext %65)
		br %66, %67, %111
	67:
		%68 = load %3
		%69 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %68, i8 zeroext %69)
		%70 = load %3
		%71 = load %2
		%72 = call zeroext i8 @timeof(i8 zeroext %70, i8 zeroext %71)
		%73 = zext i8 %72 to i32
		%74 = load %6
		%75 = zext i8 %74 to i32
		%76 = icmp slt %73 %75
		br %76, %77, %110
	77:
		%78 = load %3
		%79 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %78, i8 zeroext %79)
		store 0, %4
		br %80
	80:
		%81 = load %4
		%82 = zext i8 %81 to i32
		%83 = icmp slt %82 2
		br %83, %84, %106
	84:
		%85 = load %2
		%86 = zext i8 %85 to i32
		%87 = load %4
		%88 = zext i8 %87 to i32
		%89 = add i32 %86, %88
		%90 = trunc i32 %89 to i8
		store %90, %5
		%91 = load %5
		%92 = zext i8 %91 to i32
		%93 = icmp sle %92 1
		br %93, %94, %102
	94:
		%95 = load %3
		%96 = load %5
		%97 = load %1
		%98 = zext i8 %97 to i32
		%99 = load %5
		%100 = zext i8 %99 to i32
		%101 = call signext i8 @getLvalue(i32 %98, i32 %100)
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %95, i8 zeroext %96, i8 signext %101)
		br %102
	102:
		br %103
	103:
		%104 = load %4
		%105 = add i8 %104, 1
		store %105, %4
		br %80
	106:
		%107 = load %3
		%108 = load %2
		%109 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %107, i8 zeroext %108, i8 signext %109)
		br %110
	110:
		br %111
	111:
		br %112
	112:
		%113 = load %3
		%114 = add i8 %113, 1
		store %114, %3
		br %44
	115:
		%116 = load %1
		%117 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %116, i8 zeroext %117)
		ret void

*BasicFunctionTypename: "propagate" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 792
	0:
		%1 = alloca i8, align 1
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		%5 = alloca i8, align 1
		%6 = alloca i8, align 1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %1)
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = trunc i32 %9 to i8
		store %10, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = trunc i32 %11 to i8
		store %12, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%13 = call i32 @__VERIFIER_nondet_int()
		%14 = trunc i32 %13 to i8
		store %14, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %5)
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = trunc i32 %15 to i8
		store %16, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %6)
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = trunc i32 %17 to i8
		store %18, %6
		%19 = load %1
		%20 = zext i8 %19 to i32
		%21 = icmp slt %20 3
		%22 = zext i1 %21 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %22)
		%23 = load %1
		%24 = zext i8 %23 to i32
		%25 = call zeroext i8 @getHoutCnt(i32 %24)
		%26 = zext i8 %25 to i32
		%27 = icmp sgt %26 0
		%28 = zext i1 %27 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %28)
		%29 = load %2
		%30 = zext i8 %29 to i32
		%31 = icmp slt %30 2
		%32 = zext i1 %31 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %32)
		%33 = load %1
		%34 = zext i8 %33 to i32
		%35 = load %2
		%36 = zext i8 %35 to i32
		%37 = call signext i8 @getHout(i32 %34, i32 %36)
		%38 = sext i8 %37 to i32
		%39 = icmp eq %38 1
		%40 = zext i1 %39 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %40)
		%41 = load %1
		%42 = load %2
		%43 = call zeroext i8 @timeof(i8 zeroext %41, i8 zeroext %42)
		store %43, %6
		store 0, %3
		br %44
	44:
		%45 = load %3
		%46 = zext i8 %45 to i32
		%47 = icmp slt %46 3
		br %47, %48, %106
	48:
		%49 = load %1
		%50 = zext i8 %49 to i32
		%51 = load %3
		%52 = zext i8 %51 to i32
		%53 = icmp ne %50 %52
		br %53, %54, %102
	54:
		%55 = load %3
		%56 = load %2
		%57 = call zeroext i8 @timeof(i8 zeroext %55, i8 zeroext %56)
		%58 = zext i8 %57 to i32
		%59 = load %6
		%60 = zext i8 %59 to i32
		%61 = icmp slt %58 %60
		br %61, %62, %102
	62:
		%63 = load %1
		%64 = load %3
		%65 = load %2
		%66 = call zeroext i1 @link(i8 zeroext %63, i8 zeroext %64, i8 zeroext %65)
		br %66, %67, %102
	67:
		%68 = load %3
		%69 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setHout(i8 zeroext %68, i8 zeroext %69)
		%70 = load %3
		%71 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHin(i8 zeroext %70, i8 zeroext %71)
		store 0, %4
		br %72
	72:
		%73 = load %4
		%74 = zext i8 %73 to i32
		%75 = icmp slt %74 2
		br %75, %76, %98
	76:
		%77 = load %2
		%78 = zext i8 %77 to i32
		%79 = load %4
		%80 = zext i8 %79 to i32
		%81 = add i32 %78, %80
		%82 = trunc i32 %81 to i8
		store %82, %5
		%83 = load %5
		%84 = zext i8 %83 to i32
		%85 = icmp sle %84 1
		br %85, %86, %94
	86:
		%87 = load %3
		%88 = load %5
		%89 = load %1
		%90 = zext i8 %89 to i32
		%91 = load %5
		%92 = zext i8 %91 to i32
		%93 = call signext i8 @getLvalue(i32 %90, i32 %92)
		Unnamed Call-Instruction = call BasicVoidType @setLvalue(i8 zeroext %87, i8 zeroext %88, i8 signext %93)
		br %94
	94:
		br %95
	95:
		%96 = load %4
		%97 = add i8 %96, 1
		store %97, %4
		br %72
	98:
		%99 = load %3
		%100 = load %2
		%101 = load %6
		Unnamed Call-Instruction = call BasicVoidType @setLtstamp(i8 zeroext %99, i8 zeroext %100, i8 signext %101)
		br %102
	102:
		br %103
	103:
		%104 = load %3
		%105 = add i8 %104, 1
		store %105, %3
		br %44
	106:
		%107 = load %1
		%108 = load %2
		Unnamed Call-Instruction = call BasicVoidType @clearHout(i8 zeroext %107, i8 zeroext %108)
		ret void

*BasicFunctionTypename: "init" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 902
	0:
		store 0, @Ltstamp_0_0
		store 0, @Ltstamp_1_0
		store 0, @Ltstamp_2_0
		store 0, @Hin_0_0
		store 0, @Hin_1_0
		store 0, @Hin_2_0
		store 0, @Hout_0_0
		store 0, @Hout_1_0
		store 0, @Hout_2_0
		store 0, @HinCnt_0
		store 0, @HinCnt_1
		store 0, @HinCnt_2
		store 0, @HoutCnt_0
		store 0, @HoutCnt_1
		store 0, @HoutCnt_2
		store 2, @pc_0_0
		store 2, @pc_1_0
		store 2, @pc_2_0
		%1 = call i32 @__VERIFIER_nondet_int()
		%2 = trunc i32 %1 to i8
		store %2, @I_0_0
		%3 = call i32 @__VERIFIER_nondet_int()
		%4 = trunc i32 %3 to i8
		store %4, @I_0_1
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = trunc i32 %5 to i8
		store %6, @I_1_0
		%7 = call i32 @__VERIFIER_nondet_int()
		%8 = trunc i32 %7 to i8
		store %8, @I_1_1
		%9 = call i32 @__VERIFIER_nondet_int()
		%10 = trunc i32 %9 to i8
		store %10, @I_2_0
		%11 = call i32 @__VERIFIER_nondet_int()
		%12 = trunc i32 %11 to i8
		store %12, @I_2_1
		%13 = call i32 @__VERIFIER_nondet_int()
		%14 = trunc i32 %13 to i8
		store %14, @Lvalue_0_0
		%15 = call i32 @__VERIFIER_nondet_int()
		%16 = trunc i32 %15 to i8
		store %16, @Lvalue_0_1
		%17 = call i32 @__VERIFIER_nondet_int()
		%18 = trunc i32 %17 to i8
		store %18, @Lvalue_1_0
		%19 = call i32 @__VERIFIER_nondet_int()
		%20 = trunc i32 %19 to i8
		store %20, @Lvalue_1_1
		%21 = call i32 @__VERIFIER_nondet_int()
		%22 = trunc i32 %21 to i8
		store %22, @Lvalue_2_0
		%23 = call i32 @__VERIFIER_nondet_int()
		%24 = trunc i32 %23 to i8
		store %24, @Lvalue_2_1
		%25 = load @Lvalue_0_0
		%26 = sext i8 %25 to i32
		%27 = icmp eq %26 -1
		br %27, %32, %28
	28:
		%29 = load @Lvalue_0_0
		%30 = sext i8 %29 to i32
		%31 = icmp eq %30 1
		br %32
	32:
		%33 = phi [1, %0], [%31, %28]
		%34 = zext i1 %33 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %34)
		%35 = load @Lvalue_1_0
		%36 = sext i8 %35 to i32
		%37 = icmp eq %36 -1
		br %37, %42, %38
	38:
		%39 = load @Lvalue_1_0
		%40 = sext i8 %39 to i32
		%41 = icmp eq %40 1
		br %42
	42:
		%43 = phi [1, %32], [%41, %38]
		%44 = zext i1 %43 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %44)
		%45 = load @Lvalue_2_0
		%46 = sext i8 %45 to i32
		%47 = icmp eq %46 -1
		br %47, %52, %48
	48:
		%49 = load @Lvalue_2_0
		%50 = sext i8 %49 to i32
		%51 = icmp eq %50 1
		br %52
	52:
		%53 = phi [1, %42], [%51, %48]
		%54 = zext i1 %53 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %54)
		%55 = load @Lvalue_0_1
		%56 = sext i8 %55 to i32
		%57 = icmp eq %56 -1
		br %57, %62, %58
	58:
		%59 = load @Lvalue_0_1
		%60 = sext i8 %59 to i32
		%61 = icmp eq %60 1
		br %62
	62:
		%63 = phi [1, %52], [%61, %58]
		%64 = zext i1 %63 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %64)
		%65 = load @Lvalue_1_1
		%66 = sext i8 %65 to i32
		%67 = icmp eq %66 -1
		br %67, %72, %68
	68:
		%69 = load @Lvalue_1_1
		%70 = sext i8 %69 to i32
		%71 = icmp eq %70 1
		br %72
	72:
		%73 = phi [1, %62], [%71, %68]
		%74 = zext i1 %73 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %74)
		%75 = load @Lvalue_2_1
		%76 = sext i8 %75 to i32
		%77 = icmp eq %76 -1
		br %77, %82, %78
	78:
		%79 = load @Lvalue_2_1
		%80 = sext i8 %79 to i32
		%81 = icmp eq %80 1
		br %82
	82:
		%83 = phi [1, %72], [%81, %78]
		%84 = zext i1 %83 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %84)
		%85 = load @I_0_0
		%86 = sext i8 %85 to i32
		%87 = icmp sge %86 0
		br %87, %88, %92
	88:
		%89 = load @I_0_0
		%90 = sext i8 %89 to i32
		%91 = icmp slt %90 5
		br %92
	92:
		%93 = phi [0, %82], [%91, %88]
		%94 = zext i1 %93 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %94)
		%95 = load @I_1_0
		%96 = sext i8 %95 to i32
		%97 = icmp sge %96 0
		br %97, %98, %102
	98:
		%99 = load @I_1_0
		%100 = sext i8 %99 to i32
		%101 = icmp slt %100 5
		br %102
	102:
		%103 = phi [0, %92], [%101, %98]
		%104 = zext i1 %103 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %104)
		%105 = load @I_2_0
		%106 = sext i8 %105 to i32
		%107 = icmp sge %106 0
		br %107, %108, %112
	108:
		%109 = load @I_2_0
		%110 = sext i8 %109 to i32
		%111 = icmp slt %110 5
		br %112
	112:
		%113 = phi [0, %102], [%111, %108]
		%114 = zext i1 %113 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %114)
		%115 = load @I_0_1
		%116 = sext i8 %115 to i32
		%117 = icmp sge %116 0
		br %117, %118, %122
	118:
		%119 = load @I_0_1
		%120 = sext i8 %119 to i32
		%121 = icmp slt %120 5
		br %122
	122:
		%123 = phi [0, %112], [%121, %118]
		%124 = zext i1 %123 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %124)
		%125 = load @I_1_1
		%126 = sext i8 %125 to i32
		%127 = icmp sge %126 0
		br %127, %128, %132
	128:
		%129 = load @I_1_1
		%130 = sext i8 %129 to i32
		%131 = icmp slt %130 5
		br %132
	132:
		%133 = phi [0, %122], [%131, %128]
		%134 = zext i1 %133 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %134)
		%135 = load @I_2_1
		%136 = sext i8 %135 to i32
		%137 = icmp sge %136 0
		br %137, %138, %142
	138:
		%139 = load @I_2_1
		%140 = sext i8 %139 to i32
		%141 = icmp slt %140 5
		br %142
	142:
		%143 = phi [0, %132], [%141, %138]
		%144 = zext i1 %143 to i32
		Unnamed Call-Instruction = call BasicVoidType @__VERIFIER_assume(i32 %144)
		%145 = call zeroext i8 @now()
		store %145, @Ltstamp_0_0
		%146 = call zeroext i8 @now()
		store %146, @Ltstamp_1_0
		%147 = call zeroext i8 @now()
		store %147, @Ltstamp_2_0
		%148 = call zeroext i8 @now()
		ret void

*BasicFunctionTypename: "_0_2" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1026
	0:
		%2 = alloca i32, align 4
		%3 = alloca i8, align 1
		%4 = alloca i8, align 1
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%5 = load %2
		%6 = call signext i8 @getI(i32 %5, i32 0)
		%7 = sext i8 %6 to i32
		%8 = load %2
		%9 = call signext i8 @getLvalue(i32 %8, i32 0)
		%10 = sext i8 %9 to i32
		%11 = add i32 %7, %10
		%12 = trunc i32 %11 to i8
		%13 = call signext i8 @mod(i8 signext %12, i8 signext 5)
		store %13, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %4)
		%14 = load %2
		%15 = call signext i8 @getI(i32 %14, i32 1)
		%16 = sext i8 %15 to i32
		%17 = load %2
		%18 = call signext i8 @getLvalue(i32 %17, i32 1)
		%19 = sext i8 %18 to i32
		%20 = add i32 %16, %19
		%21 = trunc i32 %20 to i8
		%22 = call signext i8 @mod(i8 signext %21, i8 signext 5)
		store %22, %4
		%23 = load %2
		%24 = trunc i32 %23 to i8
		%25 = load %3
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %24, i8 zeroext 0, i8 signext %25, i1 zeroext 1)
		%26 = load %2
		%27 = trunc i32 %26 to i8
		%28 = load %4
		Unnamed Call-Instruction = call BasicVoidType @attr(i8 zeroext %27, i8 zeroext 1, i8 signext %28, i1 zeroext 0)
		%29 = load %2
		%30 = trunc i32 %29 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %30, i8 zeroext 0)
		%31 = load %2
		%32 = trunc i32 %31 to i8
		Unnamed Call-Instruction = call BasicVoidType @setHin(i8 zeroext %32, i8 zeroext 1)
		%33 = load %2
		Unnamed Call-Instruction = call BasicVoidType @setpc(i32 %33, i32 0, i8 zeroext 2)
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 1058
	0:
		%1 = alloca i32, align 4
		%2 = alloca i8, align 1
		%3 = alloca i8, align 1
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %2)
		store 0, %2
		Unnamed Call-Instruction = call BasicVoidType @init()
		br %4
	4:
		%5 = call i32 @__VERIFIER_nondet_int()
		%6 = icmp ne %5 0
		br %6, %7, %25
	7:
		%8 = load %2
		%9 = zext i8 %8 to i32
		%10 = call signext i8 @getpc(i32 %9, i32 0)
		%11 = sext i8 %10 to i32
		switch %11, %15 [2, %12]
	12:
		%13 = load %2
		%14 = zext i8 %13 to i32
		Unnamed Call-Instruction = call BasicVoidType @_0_2(i32 %14)
		br %16
	15:
		br %16
	16:
		%17 = load %2
		%18 = zext i8 %17 to i32
		%19 = icmp eq %18 2
		br %19, %20, %21
	20:
		store 0, %2
		br %24
	21:
		%22 = load %2
		%23 = add i8 %22, 1
		store %23, %2
		br %24
	24:
		br %34
	25:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i8 %3)
		%26 = call i32 @__VERIFIER_nondet_int()
		%27 = icmp ne %26 0
		%28 = zext i1 %27 to i8
		store %28, %3
		%29 = load %3
		%30 = trunc i8 %29 to i1
		br %30, %31, %32
	31:
		Unnamed Call-Instruction = call BasicVoidType @propagate()
		br %33
	32:
		Unnamed Call-Instruction = call BasicVoidType @confirm()
		br %33
	33:
		br %34
	34:
		%35 = load @Lvalue_0_0
		%36 = sext i8 %35 to i32
		%37 = load @Lvalue_0_0
		%38 = sext i8 %37 to i32
		%39 = icmp eq %36 %38
		br %39, %40, %107
	40:
		%41 = load @Lvalue_0_1
		%42 = sext i8 %41 to i32
		%43 = load @Lvalue_0_1
		%44 = sext i8 %43 to i32
		%45 = icmp eq %42 %44
		br %45, %46, %107
	46:
		%47 = load @Lvalue_0_0
		%48 = sext i8 %47 to i32
		%49 = load @Lvalue_1_0
		%50 = sext i8 %49 to i32
		%51 = icmp eq %48 %50
		br %51, %52, %107
	52:
		%53 = load @Lvalue_0_1
		%54 = sext i8 %53 to i32
		%55 = load @Lvalue_1_1
		%56 = sext i8 %55 to i32
		%57 = icmp eq %54 %56
		br %57, %58, %107
	58:
		%59 = load @Lvalue_0_0
		%60 = sext i8 %59 to i32
		%61 = load @Lvalue_2_0
		%62 = sext i8 %61 to i32
		%63 = icmp eq %60 %62
		br %63, %64, %107
	64:
		%65 = load @Lvalue_0_1
		%66 = sext i8 %65 to i32
		%67 = load @Lvalue_2_1
		%68 = sext i8 %67 to i32
		%69 = icmp eq %66 %68
		br %69, %70, %107
	70:
		%71 = load @Lvalue_1_0
		%72 = sext i8 %71 to i32
		%73 = load @Lvalue_1_0
		%74 = sext i8 %73 to i32
		%75 = icmp eq %72 %74
		br %75, %76, %107
	76:
		%77 = load @Lvalue_1_1
		%78 = sext i8 %77 to i32
		%79 = load @Lvalue_1_1
		%80 = sext i8 %79 to i32
		%81 = icmp eq %78 %80
		br %81, %82, %107
	82:
		%83 = load @Lvalue_1_0
		%84 = sext i8 %83 to i32
		%85 = load @Lvalue_2_0
		%86 = sext i8 %85 to i32
		%87 = icmp eq %84 %86
		br %87, %88, %107
	88:
		%89 = load @Lvalue_1_1
		%90 = sext i8 %89 to i32
		%91 = load @Lvalue_2_1
		%92 = sext i8 %91 to i32
		%93 = icmp eq %90 %92
		br %93, %94, %107
	94:
		%95 = load @Lvalue_2_0
		%96 = sext i8 %95 to i32
		%97 = load @Lvalue_2_0
		%98 = sext i8 %97 to i32
		%99 = icmp eq %96 %98
		br %99, %100, %107
	100:
		%101 = load @Lvalue_2_1
		%102 = sext i8 %101 to i32
		%103 = load @Lvalue_2_1
		%104 = sext i8 %103 to i32
		%105 = icmp eq %102 %104
		br %105, %106, %107
	106:
		ret 0
	107:
		br %4


Analyze Termination of all function calls matching the pattern:
main()/hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c:51:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c:76:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c:124:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
}
^
/hpcwork/ff862203/termcomp25/benchmarks/LVSw0.c:148:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]
