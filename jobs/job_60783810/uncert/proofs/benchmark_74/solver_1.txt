YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/F9XAL.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 52 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 745 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/F9XAL.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/F9XAL.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "llvm.dbg.label" returnParam: BasicVoidType parameters: (BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "f" linkageType: EXTERNALLY_VISIBLE returnParam: BasicVoidType parameters: (0 i32) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%2 = alloca i32, align 4
		%3 = alloca *i32, align 8
		%4 = alloca *i32, align 8
		%5 = alloca *i32, align 8
		%6 = alloca *i32, align 8
		%7 = alloca *i32, align 8
		store %0, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %3)
		%8 = alloca i8, numElementsLit: 4, align 16
		%9 = bitcast *i8 %8 to *i32
		store %9, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %4)
		%10 = alloca i8, numElementsLit: 4, align 16
		%11 = bitcast *i8 %10 to *i32
		store %11, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %5)
		%12 = alloca i8, numElementsLit: 4, align 16
		%13 = bitcast *i8 %12 to *i32
		store %13, %5
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %6)
		%14 = alloca i8, numElementsLit: 4, align 16
		%15 = bitcast *i8 %14 to *i32
		store %15, %6
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i32 %7)
		%16 = alloca i8, numElementsLit: 4, align 16
		%17 = bitcast *i8 %16 to *i32
		store %17, %7
		%18 = load %2
		%19 = load %3
		store %18, %19
		%20 = load %4
		store 1, %20
		%21 = load %5
		store 1, %21
		%22 = load %6
		store 1, %22
		%23 = load %7
		store 1, %23
		%24 = load %6
		%25 = load %24
		%26 = icmp sgt %25 1073741823
		br %26, %27, %28
	27:
		br %78
	28:
		br %29
	29:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %30
	30:
		%31 = load %7
		%32 = load %31
		%33 = load %6
		%34 = load %33
		%35 = icmp slt %32 %34
		br %35, %36, %41
	36:
		%37 = load %7
		%38 = load %37
		%39 = mul i32 2, %38
		%40 = load %7
		store %39, %40
		br %30
	41:
		br %42
	42:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		br %43
	43:
		%44 = load %4
		%45 = load %44
		%46 = icmp sgt %45 0
		br %46, %47, %51
	47:
		%48 = load %5
		%49 = load %48
		%50 = icmp sgt %49 0
		br %51
	51:
		%52 = phi [0, %43], [%50, %47]
		br %52, %53, %78
	53:
		%54 = call i32 @__VERIFIER_nondet_int()
		%55 = icmp ne %54 0
		br %55, %56, %70
	56:
		br %57
	57:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.label()
		%58 = load %4
		%59 = load %58
		%60 = load %3
		%61 = load %60
		%62 = sub i32 %59, %61
		%63 = load %4
		store %62, %63
		%64 = call i32 @__VERIFIER_nondet_int()
		%65 = load %5
		store %64, %65
		%66 = load %7
		%67 = load %66
		%68 = sub i32 %67, 1
		%69 = load %7
		store %68, %69
		br %77
	70:
		%71 = load %5
		%72 = load %71
		%73 = load %3
		%74 = load %73
		%75 = sub i32 %72, %74
		%76 = load %5
		store %75, %76
		br %77
	77:
		br %43
	78:
		ret void

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 111
	0:
		%1 = alloca i32, align 4
		store 0, %1
		%2 = call i32 @__VERIFIER_nondet_int()
		%3 = icmp ne %2 0
		br %3, %4, %5
	4:
		Unnamed Call-Instruction = call BasicVoidType @f(i32 1)
		br %6
	5:
		Unnamed Call-Instruction = call BasicVoidType @f(i32 2)
		br %6
	6:
		%7 = load %1
		ret %7


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
