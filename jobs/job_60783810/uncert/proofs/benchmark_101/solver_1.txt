YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/q3Kfs.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 40 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 31.5 s]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 51 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/q3Kfs.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/q3Kfs.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "cstrcpy" linkageType: EXTERNALLY_VISIBLE returnParam: *i8 parameters: (0 *i8, 1 *i8) variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 10
	0:
		%3 = alloca *i8, align 8
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store %0, %3
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %3)
		store %1, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%6 = load %3
		store %6, %5
		br %7
	7:
		%8 = load %4
		%9 = load %8
		%10 = load %3
		store %9, %10
		%11 = sext i8 %9 to i32
		%12 = icmp ne %11 0
		br %12, %13, %19
	13:
		br %14
	14:
		%15 = load %4
		%16 = getelementptr %15, 1
		store %16, %4
		%17 = load %3
		%18 = getelementptr %17, 1
		store %18, %3
		br %7
	19:
		%20 = load %5
		ret %20

*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 40
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca *i8, align 8
		%5 = alloca *i8, align 8
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %2
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %3
		%8 = load %2
		%9 = icmp slt %8 1
		br %9, %10, %11
	10:
		store 1, %2
		br %11
	11:
		%12 = load %3
		%13 = icmp slt %12 1
		br %13, %14, %15
	14:
		store 1, %3
		br %15
	15:
		%16 = load %2
		%17 = load %3
		%18 = icmp slt %16 %17
		br %18, %19, %20
	19:
		store 0, %1
		br %37
	20:
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %4)
		%21 = load %2
		%22 = sext i32 %21 to i64
		%23 = mul i64 %22, 1
		%24 = alloca i8, numElementsLit: %23, align 16
		store %24, %4
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(**i8 %5)
		%25 = load %3
		%26 = sext i32 %25 to i64
		%27 = mul i64 %26, 1
		%28 = alloca i8, numElementsLit: %27, align 16
		store %28, %5
		%29 = load %5
		%30 = load %3
		%31 = sub i32 %30, 1
		%32 = sext i32 %31 to i64
		%33 = getelementptr %29, %32
		store 0, %33
		%34 = load %4
		%35 = load %5
		%36 = call *i8 @cstrcpy(*i8 %34, *i8 %35)
		store 0, %1
		br %37
	37:
		%38 = load %1
		ret %38


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 17 rulesP rules:
f_556(v455, v456, v457, v458, v459, v464, v461, v462, 1, v460, v465, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_557(v455, v456, v457, v458, v459, v464, v486, v462, v461, 1, v460, v465, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_557(v455, v456, v457, v458, v459, v464, v486, v462, v461, 1, v460, v465, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_558(v455, v456, v457, v458, v459, v464, v486, v465, v461, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
f_558(v455, v456, v457, v458, v459, v464, v486, v465, v461, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_559(v455, v456, v457, v458, v459, v464, v486, v465, v461, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_559(v455, v456, v457, v458, v459, v464, v486, v465, v461, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_560(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
f_560(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_561(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: v486 != 0 && v464 < v475 && 3 <= v475
f_561(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_563(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
f_563(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_565(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_565(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_567(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_567(v455, v456, v457, v458, v459, v464, v486, v465, 1, v460, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_569(v455, v456, v457, v458, v459, v464, v486, v465, 1, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
f_569(v455, v456, v457, v458, v459, v464, v486, v465, 1, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_571(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: v507 = 1 + v464 && 3 <= v507
f_571(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_573(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_573(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v462, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_575(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
f_575(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_577(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: v548 = 1 + v465 && 3 <= v548 && 3 <= v481
f_577(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_578(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_578(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_579(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_579(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, v460, v461, v462, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_555(v455, v456, v457, v458, v459, v464, v486, v465, 1, v507, v548, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: TRUE
f_555(v455, v456, v457, v458, v459, v460, v461, v462, 1, v464, v465, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) -> f_556(v455, v456, v457, v458, v459, v464, v461, v462, 1, v460, v465, v466, v476, v467, v477, v468, v478, v469, v479, v470, v480, v481, v475, v482, v483, v484, v485, 0, v471, v472, v474, 3, 7, 2, 4, 8) :|: 0 = 0
Combined rules. Obtained 2 rulesP rules:
f_556(v455:0, v456:0, v457:0, v458:0, v459:0, v464:0, v461:0, v462:0, 1, v460:0, v465:0, v466:0, v476:0, v467:0, v477:0, v468:0, v478:0, v469:0, v479:0, v470:0, v480:0, v481:0, v475:0, v482:0, v483:0, v484:0, v485:0, 0, v471:0, v472:0, v474:0, 3, 7, 2, 4, 8) -> f_556(v455:0, v456:0, v457:0, v458:0, v459:0, 1 + v464:0, v486:0, v465:0, 1, v464:0, 1 + v465:0, v466:0, v476:0, v467:0, v477:0, v468:0, v478:0, v469:0, v479:0, v470:0, v480:0, v481:0, v475:0, v482:0, v483:0, v484:0, v485:0, 0, v471:0, v472:0, v474:0, 3, 7, 2, 4, 8) :|: v475:0 > v464:0 && v486:0 < 0 && v475:0 > 2 && v464:0 > 1 && v481:0 > 2 && v465:0 > 1
f_556(v455:0, v456:0, v457:0, v458:0, v459:0, v464:0, v461:0, v462:0, 1, v460:0, v465:0, v466:0, v476:0, v467:0, v477:0, v468:0, v478:0, v469:0, v479:0, v470:0, v480:0, v481:0, v475:0, v482:0, v483:0, v484:0, v485:0, 0, v471:0, v472:0, v474:0, 3, 7, 2, 4, 8) -> f_556(v455:0, v456:0, v457:0, v458:0, v459:0, 1 + v464:0, v486:0, v465:0, 1, v464:0, 1 + v465:0, v466:0, v476:0, v467:0, v477:0, v468:0, v478:0, v469:0, v479:0, v470:0, v480:0, v481:0, v475:0, v482:0, v483:0, v484:0, v485:0, 0, v471:0, v472:0, v474:0, 3, 7, 2, 4, 8) :|: v475:0 > v464:0 && v486:0 > 0 && v475:0 > 2 && v464:0 > 1 && v481:0 > 2 && v465:0 > 1
Filtered unneeded arguments:
   f_556(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36) -> f_556(x6, x11, x22, x23)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_556(v464:0, v465:0, v481:0, v475:0) -> f_556(1 + v464:0, 1 + v465:0, v481:0, v475:0) :|: v475:0 > 2 && v475:0 > v464:0 && v464:0 > 1 && v465:0 > 1 && v481:0 > 2

----------------------------------------

(8)
Obligation:
Rules:
f_556(v464:0, v465:0, v481:0, v475:0) -> f_556(1 + v464:0, 1 + v465:0, v481:0, v475:0) :|: v475:0 > 2 && v475:0 > v464:0 && v464:0 > 1 && v465:0 > 1 && v481:0 > 2

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_556(v464:0:0, v465:0:0, v481:0:0, v475:0:0) -> f_556(1 + v464:0:0, 1 + v465:0:0, v481:0:0, v475:0:0) :|: v465:0:0 > 1 && v481:0:0 > 2 && v464:0:0 > 1 && v475:0:0 > v464:0:0 && v475:0:0 > 2

----------------------------------------

(11) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_556(x, x1, x2, x3)] = -x + x3

The following rules are decreasing:
f_556(v464:0:0, v465:0:0, v481:0:0, v475:0:0) -> f_556(1 + v464:0:0, 1 + v465:0:0, v481:0:0, v475:0:0) :|: v465:0:0 > 1 && v481:0:0 > 2 && v464:0:0 > 1 && v475:0:0 > v464:0:0 && v475:0:0 > 2
The following rules are bounded:
f_556(v464:0:0, v465:0:0, v481:0:0, v475:0:0) -> f_556(1 + v464:0:0, 1 + v465:0:0, v481:0:0, v475:0:0) :|: v465:0:0 > 1 && v481:0:0 > 2 && v464:0:0 > 1 && v475:0:0 > v464:0:0 && v475:0:0 > 2

----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
