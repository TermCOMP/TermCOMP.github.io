YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PgFnH.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 21 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1267 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 15 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 34 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 10 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) RankingReductionPairProof [EQUIVALENT, 3 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/PgFnH.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/PgFnH.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		%4 = alloca i32, align 4
		%5 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %4)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %5)
		%6 = call i32 @__VERIFIER_nondet_int()
		store %6, %3
		%7 = call i32 @__VERIFIER_nondet_int()
		store %7, %4
		%8 = call i32 @__VERIFIER_nondet_int()
		store %8, %5
		store 0, %2
		br %9
	9:
		%10 = load %3
		%11 = load %5
		%12 = icmp sgt %10 %11
		br %12, %17, %13
	13:
		%14 = load %4
		%15 = load %5
		%16 = icmp sgt %14 %15
		br %17
	17:
		%18 = phi [1, %9], [%16, %13]
		br %18, %19, %38
	19:
		%20 = load %3
		%21 = load %5
		%22 = icmp sgt %20 %21
		br %22, %23, %26
	23:
		%24 = load %3
		%25 = sub i32 %24, 1
		store %25, %3
		br %35
	26:
		%27 = load %4
		%28 = load %5
		%29 = icmp sgt %27 %28
		br %29, %30, %33
	30:
		%31 = load %4
		%32 = sub i32 %31, 1
		store %32, %4
		br %34
	33:
		br %34
	34:
		br %35
	35:
		%36 = load %2
		%37 = add i32 %36, 1
		store %37, %2
		br %9
	38:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_707(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2965, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4) -> f_709(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4) :|: 0 = 0
f_709(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4) -> f_711(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: v3029 = 1 + v2966 && 2 <= v3029
f_711(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_713(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_713(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_715(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_715(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_717(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_717(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_718(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_718(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_719(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_719(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_720(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_720(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_721(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_721(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_722(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_722(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_723(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: v2961 < v2968
f_723(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_725(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_725(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_727(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_727(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_729(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_729(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_731(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_731(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_732(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_732(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_733(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_733(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_734(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_734(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_735(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_735(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_736(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_736(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_737(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_737(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_738(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_738(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2967, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_739(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 0 = 0
f_739(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_740(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: 1 + v3349 = v2968
f_740(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_741(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_741(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_742(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) :|: TRUE
f_742(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4, 2) -> f_705(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2966, v3029, v2968, v3349, v2969, v2970, v2971, v2972, v2973, 3, 4) :|: TRUE
f_705(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2965, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4) -> f_707(v2954, v2955, v2956, v2957, v2958, v2959, v2960, v2961, 0, 1, v2964, v2965, v2966, v2967, v2968, v2969, v2970, v2971, v2972, v2973, 3, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_707(v2954:0, v2955:0, v2956:0, v2957:0, v2958:0, v2959:0, v2960:0, v2961:0, 0, 1, v2964:0, v2965:0, v2966:0, v2967:0, 1 + v3349:0, v2969:0, v2970:0, v2971:0, v2972:0, v2973:0, 3, 4) -> f_707(v2954:0, v2955:0, v2956:0, v2957:0, v2958:0, v2959:0, v2960:0, v2961:0, 0, 1, v2964:0, v2966:0, 1 + v2966:0, 1 + v3349:0, v3349:0, v2969:0, v2970:0, v2971:0, v2972:0, v2973:0, 3, 4) :|: v2961:0 < 1 + v3349:0 && v2966:0 > 0
Filtered unneeded arguments:
   f_707(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22) -> f_707(x8, x13, x15)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_707(v2961:0, v2966:0, sum~cons_1~v3349:0) -> f_707(v2961:0, 1 + v2966:0, v3349:0) :|: v2961:0 < 1 + v3349:0 && v2966:0 > 0 && sum~cons_1~v3349:0 = 1 + v3349:0

----------------------------------------

(9)
Obligation:
Rules:
f_707(v2961:0, v2966:0, sum~cons_1~v3349:0) -> f_707(v2961:0, 1 + v2966:0, v3349:0) :|: v2961:0 < 1 + v3349:0 && v2966:0 > 0 && sum~cons_1~v3349:0 = 1 + v3349:0

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_707(v2961:0:0, v2966:0:0, sum~cons_1~v3349:0:0) -> f_707(v2961:0:0, 1 + v2966:0:0, v3349:0:0) :|: v2961:0:0 < 1 + v3349:0:0 && v2966:0:0 > 0 && sum~cons_1~v3349:0:0 = 1 + v3349:0:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_707 ] = -1*f_707_1 + f_707_3

The following rules are decreasing:
f_707(v2961:0:0, v2966:0:0, sum~cons_1~v3349:0:0) -> f_707(v2961:0:0, 1 + v2966:0:0, v3349:0:0) :|: v2961:0:0 < 1 + v3349:0:0 && v2966:0:0 > 0 && sum~cons_1~v3349:0:0 = 1 + v3349:0:0

The following rules are bounded:
f_707(v2961:0:0, v2966:0:0, sum~cons_1~v3349:0:0) -> f_707(v2961:0:0, 1 + v2966:0:0, v3349:0:0) :|: v2961:0:0 < 1 + v3349:0:0 && v2966:0:0 > 0 && sum~cons_1~v3349:0:0 = 1 + v3349:0:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 28 rulesP rules:
f_655(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_657(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_657(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_659(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_659(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_661(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_661(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_663(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_663(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_665(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_665(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_668(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: v2498 < v2502
f_668(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_672(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_672(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_676(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_676(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_680(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_680(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_683(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_683(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_685(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_685(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_687(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_687(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_689(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_689(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_691(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_691(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_693(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_693(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_695(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_695(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_697(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_697(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2500, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_699(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_699(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_701(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 1 + v2951 = v2502
f_701(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_703(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_703(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_706(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_706(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_708(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_708(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_710(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
f_710(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_712(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) :|: v3030 = 1 + v2504 && 2 <= v3030
f_712(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) -> f_714(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) :|: TRUE
f_714(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) -> f_716(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) :|: TRUE
f_716(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4, 2) -> f_653(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2502, 1, v2951, v2504, v3030, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: TRUE
f_653(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) -> f_655(v2491, v2492, v2493, v2494, v2495, v2496, v2497, v2498, 0, v2500, 1, v2502, v2503, v2504, v2505, v2506, v2507, v2508, v2509, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_655(v2491:0, v2492:0, v2493:0, v2494:0, v2495:0, v2496:0, v2497:0, v2498:0, 0, v2500:0, 1, 1 + v2951:0, v2503:0, v2504:0, v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, 3, 4) -> f_655(v2491:0, v2492:0, v2493:0, v2494:0, v2495:0, v2496:0, v2497:0, v2498:0, 0, 1 + v2951:0, 1, v2951:0, v2504:0, 1 + v2504:0, v2505:0, v2506:0, v2507:0, v2508:0, v2509:0, 3, 4) :|: v2504:0 > 0 && v2498:0 < 1 + v2951:0
Filtered unneeded arguments:
   f_655(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_655(x8, x12, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_655(v2498:0, sum~cons_1~v2951:0, v2504:0) -> f_655(v2498:0, v2951:0, 1 + v2504:0) :|: v2504:0 > 0 && v2498:0 < 1 + v2951:0 && sum~cons_1~v2951:0 = 1 + v2951:0

----------------------------------------

(16)
Obligation:
Rules:
f_655(v2498:0, sum~cons_1~v2951:0, v2504:0) -> f_655(v2498:0, v2951:0, 1 + v2504:0) :|: v2504:0 > 0 && v2498:0 < 1 + v2951:0 && sum~cons_1~v2951:0 = 1 + v2951:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_655(v2498:0:0, sum~cons_1~v2951:0:0, v2504:0:0) -> f_655(v2498:0:0, v2951:0:0, 1 + v2504:0:0) :|: v2504:0:0 > 0 && v2498:0:0 < 1 + v2951:0:0 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_655(x, x1, x2)] = -x + x1

The following rules are decreasing:
f_655(v2498:0:0, sum~cons_1~v2951:0:0, v2504:0:0) -> f_655(v2498:0:0, v2951:0:0, 1 + v2504:0:0) :|: v2504:0:0 > 0 && v2498:0:0 < 1 + v2951:0:0 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0
The following rules are bounded:
f_655(v2498:0:0, sum~cons_1~v2951:0:0, v2504:0:0) -> f_655(v2498:0:0, v2951:0:0, 1 + v2504:0:0) :|: v2504:0:0 > 0 && v2498:0:0 < 1 + v2951:0:0 && sum~cons_1~v2951:0:0 = 1 + v2951:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 19 rulesP rules:
f_508(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_511(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_511(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_513(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: v1453 < v1456
f_513(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_516(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_516(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_519(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_519(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_522(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: TRUE
f_522(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_525(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_525(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_528(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_528(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_533(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_533(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_538(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: TRUE
f_538(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_543(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_543(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_548(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 1 + v1752 = v1456
f_548(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_551(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: TRUE
f_551(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_554(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: TRUE
f_554(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_557(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
f_557(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_560(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) :|: v1772 = 1 + v1458 && 2 <= v1772
f_560(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) -> f_563(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) :|: TRUE
f_563(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) -> f_566(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) :|: TRUE
f_566(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4, 2) -> f_506(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1752, v1458, v1772, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: TRUE
f_506(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1454, 1, v1456, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) -> f_508(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453, v1456, 1, v1454, v1457, v1458, v1459, v1460, v1461, v1462, v1463, 0, 3, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_508(v1446:0, v1447:0, v1448:0, v1449:0, v1450:0, v1451:0, v1452:0, v1453:0, 1 + v1752:0, 1, v1454:0, v1457:0, v1458:0, v1459:0, v1460:0, v1461:0, v1462:0, v1463:0, 0, 3, 4) -> f_508(v1446:0, v1447:0, v1448:0, v1449:0, v1450:0, v1451:0, v1452:0, v1453:0, v1752:0, 1, 1 + v1752:0, v1458:0, 1 + v1458:0, v1459:0, v1460:0, v1461:0, v1462:0, v1463:0, 0, 3, 4) :|: v1458:0 > 0 && v1453:0 < 1 + v1752:0
Filtered unneeded arguments:
   f_508(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_508(x8, x9, x13)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_508(v1453:0, sum~cons_1~v1752:0, v1458:0) -> f_508(v1453:0, v1752:0, 1 + v1458:0) :|: v1458:0 > 0 && v1453:0 < 1 + v1752:0 && sum~cons_1~v1752:0 = 1 + v1752:0

----------------------------------------

(23)
Obligation:
Rules:
f_508(v1453:0, sum~cons_1~v1752:0, v1458:0) -> f_508(v1453:0, v1752:0, 1 + v1458:0) :|: v1458:0 > 0 && v1453:0 < 1 + v1752:0 && sum~cons_1~v1752:0 = 1 + v1752:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_508(v1453:0:0, sum~cons_1~v1752:0:0, v1458:0:0) -> f_508(v1453:0:0, v1752:0:0, 1 + v1458:0:0) :|: v1458:0:0 > 0 && v1453:0:0 < 1 + v1752:0:0 && sum~cons_1~v1752:0:0 = 1 + v1752:0:0

----------------------------------------

(26) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_508 ] = -1*f_508_1 + f_508_2

The following rules are decreasing:
f_508(v1453:0:0, sum~cons_1~v1752:0:0, v1458:0:0) -> f_508(v1453:0:0, v1752:0:0, 1 + v1458:0:0) :|: v1458:0:0 > 0 && v1453:0:0 < 1 + v1752:0:0 && sum~cons_1~v1752:0:0 = 1 + v1752:0:0

The following rules are bounded:
f_508(v1453:0:0, sum~cons_1~v1752:0:0, v1458:0:0) -> f_508(v1453:0:0, v1752:0:0, 1 + v1458:0:0) :|: v1458:0:0 > 0 && v1453:0:0 < 1 + v1752:0:0 && sum~cons_1~v1752:0:0 = 1 + v1752:0:0


----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
