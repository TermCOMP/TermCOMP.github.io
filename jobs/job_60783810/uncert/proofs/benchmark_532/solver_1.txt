YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/sbI80.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 304 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) LLVM Symbolic Execution SCC
(7) SCC2IRS [SOUND, 0 ms]
(8) IntTRS
(9) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(10) IntTRS
(11) RankingReductionPairProof [EQUIVALENT, 66 ms]
(12) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/sbI80.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/sbI80.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		store 0, %2
		br %5
	5:
		%6 = load %3
		%7 = icmp sgt %6 1
		br %7, %8, %11
	8:
		%9 = load %3
		%10 = icmp slt %9 100
		br %11
	11:
		%12 = phi [0, %5], [%10, %8]
		br %12, %13, %19
	13:
		%14 = load %3
		%15 = load %3
		%16 = mul i32 %14, %15
		store %16, %3
		%17 = load %2
		%18 = add i32 %17, 1
		store %18, %2
		br %5
	19:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 1 SCC.
----------------------------------------

(6)
Obligation:
SCC
----------------------------------------

(7) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 18 rulesP rules:
f_251(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_252(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 1 < v327
f_252(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_254(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_254(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_256(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_256(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_258(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_258(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_260(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: v327 < 100
f_260(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_262(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_262(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_264(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_264(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_266(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_266(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_268(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_268(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_269(v321, v322, v323, v324, v327, 1, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_269(v321, v322, v323, v324, v327, 1, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_270(v321, v322, v323, v324, v327, 1, v378, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: v378 = v327 * v327
f_270(v321, v322, v323, v324, v327, 1, v378, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_271(v321, v322, v323, v324, v327, 1, v378, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_271(v321, v322, v323, v324, v327, 1, v378, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_272(v321, v322, v323, v324, v327, 1, v378, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
f_272(v321, v322, v323, v324, v327, 1, v378, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_273(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) :|: v380 = 1 + v329 && 2 <= v380
f_273(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) -> f_274(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_274(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) -> f_275(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_275(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) -> f_250(v321, v322, v323, v324, v327, 1, v378, v329, v380, v330, v331, v332, 0, 3, 2, 99, 4) :|: TRUE
f_250(v321, v322, v323, v324, v325, 1, v327, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) -> f_251(v321, v322, v323, v324, v327, 1, v325, v328, v329, v330, v331, v332, 0, 3, 2, 99, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_251(v321:0, v322:0, v323:0, v324:0, v327:0, 1, v325:0, v328:0, v329:0, v330:0, v331:0, v332:0, 0, 3, 2, 99, 4) -> f_251(v321:0, v322:0, v323:0, v324:0, v327:0 * v327:0, 1, v327:0, v329:0, 1 + v329:0, v330:0, v331:0, v332:0, 0, 3, 2, 99, 4) :|: v327:0 > 1 && v329:0 > 0 && v327:0 < 100
Filtered unneeded arguments:
   f_251(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_251(x5, x9)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_251(v327:0, v329:0) -> f_251(v327:0 * v327:0, 1 + v329:0) :|: v329:0 > 0 && v327:0 < 100 && v327:0 > 1

----------------------------------------

(8)
Obligation:
Rules:
f_251(v327:0, v329:0) -> f_251(v327:0 * v327:0, 1 + v329:0) :|: v329:0 > 0 && v327:0 < 100 && v327:0 > 1

----------------------------------------

(9) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(10)
Obligation:
Rules:
f_251(v327:0:0, v329:0:0) -> f_251(v327:0:0 * v327:0:0, 1 + v329:0:0) :|: v329:0:0 > 0 && v327:0:0 < 100 && v327:0:0 > 1

----------------------------------------

(11) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_251 ] = -1/2*f_251_1

The following rules are decreasing:
f_251(v327:0:0, v329:0:0) -> f_251(v327:0:0 * v327:0:0, 1 + v329:0:0) :|: v329:0:0 > 0 && v327:0:0 < 100 && v327:0:0 > 1

The following rules are bounded:
f_251(v327:0:0, v329:0:0) -> f_251(v327:0:0 * v327:0:0, 1 + v329:0:0) :|: v329:0:0 > 0 && v327:0:0 < 100 && v327:0:0 > 1


----------------------------------------

(12)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.0s
