YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/KWjPO.c
# AProVE Commit ID: 48c83ccb80d5f8312cb92f4aa1b51dc35e247e65 nils 20241118 unpublished


Termination of the given C Problem could be proven:

(0) C Problem
(1) CToLLVMProof [EQUIVALENT, 19 ms]
(2) LLVM problem
(3) LLVMToTerminationGraphProof [EQUIVALENT, 1482 ms]
(4) LLVM Symbolic Execution Graph
(5) SymbolicExecutionGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) LLVM Symbolic Execution SCC
        (8) SCC2IRS [SOUND, 74 ms]
        (9) IntTRS
        (10) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (11) IntTRS
        (12) RankingReductionPairProof [EQUIVALENT, 32 ms]
        (13) YES
    (14) LLVM Symbolic Execution SCC
        (15) SCC2IRS [SOUND, 49 ms]
        (16) IntTRS
        (17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (18) IntTRS
        (19) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (20) YES
    (21) LLVM Symbolic Execution SCC
        (22) SCC2IRS [SOUND, 44 ms]
        (23) IntTRS
        (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (25) IntTRS
        (26) PolynomialOrderProcessor [EQUIVALENT, 14 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
c file /hpcwork/ff862203/termcomp25/benchmarks/KWjPO.c
----------------------------------------

(1) CToLLVMProof (EQUIVALENT)
Compiled c-file /hpcwork/ff862203/termcomp25/benchmarks/KWjPO.c to LLVM.
----------------------------------------

(2)
Obligation:
LLVM Problem

Aliases:

Data layout:

"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

Machine:

"x86_64-pc-linux-gnu"

Type definitions:

Global variables:

Function declarations and definitions:

*BasicFunctionTypename: "llvm.dbg.declare" returnParam: BasicVoidType parameters: (BasicMetadataType, BasicMetadataType, BasicMetadataType) variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "__VERIFIER_nondet_int" returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc
*BasicFunctionTypename: "main" linkageType: EXTERNALLY_VISIBLE returnParam: i32 parameters: () variableLength: false visibilityType: DEFAULT callingConvention: ccc debug line: 7
	0:
		%1 = alloca i32, align 4
		%2 = alloca i32, align 4
		%3 = alloca i32, align 4
		store 0, %1
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %2)
		Unnamed Call-Instruction = call BasicVoidType @llvm.dbg.declare(*i32 %3)
		%4 = call i32 @__VERIFIER_nondet_int()
		store %4, %3
		%5 = call i32 @__VERIFIER_nondet_int()
		store %5, %2
		br %6
	6:
		%7 = load %3
		%8 = icmp sgt %7 0
		br %8, %9, %16
	9:
		%10 = load %2
		%11 = icmp sgt %10 0
		br %11, %12, %16
	12:
		%13 = load %2
		%14 = load %3
		%15 = icmp ne %13 %14
		br %16
	16:
		%17 = phi [0, %9], [0, %6], [%15, %12]
		br %17, %18, %36
	18:
		%19 = load %3
		%20 = load %2
		%21 = icmp slt %19 %20
		br %21, %22, %26
	22:
		%23 = load %3
		%24 = sub i32 %23, 1
		store %24, %3
		%25 = call i32 @__VERIFIER_nondet_int()
		store %25, %2
		br %35
	26:
		%27 = load %2
		%28 = load %3
		%29 = icmp slt %27 %28
		br %29, %30, %34
	30:
		%31 = load %2
		%32 = sub i32 %31, 1
		store %32, %2
		%33 = call i32 @__VERIFIER_nondet_int()
		store %33, %3
		br %34
	34:
		br %35
	35:
		br %6
	36:
		ret 0


Analyze Termination of all function calls matching the pattern:
main()
----------------------------------------

(3) LLVMToTerminationGraphProof (EQUIVALENT)
Constructed symbolic execution graph for LLVM program.
----------------------------------------

(4)
Obligation:
Symbolic Execution Graph
----------------------------------------

(5) SymbolicExecutionGraphToSCCProof (SOUND)
Splitted symbolic execution graph to 3 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC
----------------------------------------

(8) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 69 rulesP rules:
f_784(v6499, v6500, v6501, v6502, v6503, v6504, 1, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, v6515, 0, 3, 4, 2) -> f_786(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 4, 2) :|: 0 = 0
f_786(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 4, 2) -> f_789(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 < v6511 && 2 <= v6504 && 2 <= v6510 && 3 <= v6506 && 3 <= v6509 && 4 <= v6507 && 5 <= v6502 && 5 <= v6508 && 4 <= v6503
f_789(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_793(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_793(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_797(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: TRUE
f_797(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6506, v6504, v6507, v6508, v6509, v6510, v6512, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_801(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_801(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_805(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 < v6512
f_805(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_809(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_809(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_813(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: TRUE
f_813(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6504, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_817(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_817(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_821(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_821(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_823(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: v6512 != v6511
f_823(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_826(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_826(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_829(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_829(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_832(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: TRUE
f_832(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6506, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_834(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_834(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6506, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_835(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_835(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_836(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: v6511 < v6512 && 2 <= v6512
f_835(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_837(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 6, 5, 4, 2) :|: v6512 <= v6511 && 2 <= v6511 && 3 <= v6504 && 3 <= v6510 && 4 <= v6509 && 5 <= v6507 && 6 <= v6502 && 6 <= v6508 && 5 <= v6503
f_836(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_838(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: 0 = 0
f_838(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_840(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: TRUE
f_840(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 5, 4, 2) -> f_841(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6504, v6511, v6512, v6507, v6508, v6509, v6510, v6513, v6514, v6515, 0, 3, 5, 4, 2) :|: TRUE
f_841(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7457, v7458, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_843(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7458, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: 0 = 0
f_843(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7458, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_845(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: 1 + v7499 = v7454 && 0 <= v7499
f_845(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_847(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: TRUE
f_847(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7459, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_849(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: TRUE
f_849(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_851(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: TRUE
f_851(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_853(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) :|: TRUE
f_853(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7499, v7501, v7460, v7461, v7462, v7463, v7464, v7465, v7466, 0, 3, 5, 4, 2) -> f_782(v7449, v7450, v7451, v7452, v7453, v7454, 1, v7456, v7460, v7461, v7462, v7463, v7499, v7501, v7464, v7465, v7466, 0, 3, 4, 2) :|: TRUE
f_782(v6499, v6500, v6501, v6502, v6503, v6504, 1, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, v6515, 0, 3, 4, 2) -> f_784(v6499, v6500, v6501, v6502, v6503, v6504, 1, v6506, v6507, v6508, v6509, v6510, v6511, v6512, v6513, v6514, v6515, 0, 3, 4, 2) :|: TRUE
f_837(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 0, 3, 6, 5, 4, 2) -> f_839(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, 0, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 3, 6, 5, 4, 2) :|: 0 = 0
f_839(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, 0, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 3, 6, 5, 4, 2) -> f_842(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, 0, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 3, 6, 5, 4, 2) :|: TRUE
f_842(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, 0, v6507, v6508, v6509, v6510, v6504, v6513, v6514, v6515, 3, 6, 5, 4, 2) -> f_896(v6499, v6500, v6501, v6502, v6503, v6511, 1, v6512, 0, v6507, v6508, v6509, v6510, v6504, v6511, v6512, v6513, v6514, v6515, 3, 4, 5, 2) :|: TRUE
f_896(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8546, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_897(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8546, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: 0 = 0
f_897(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8546, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_898(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: 0 = 0
f_898(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_899(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: 0 = 0
f_899(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_900(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_900(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8545, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_901(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: 0 = 0
f_901(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8547, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_902(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: 1 + v8577 = v8543 && 0 <= v8577
f_902(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_903(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_903(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8548, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_904(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_904(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_905(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_905(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_906(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_906(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_907(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) :|: TRUE
f_907(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8577, v8579, v8549, v8550, v8551, v8552, v8553, v8554, 3, 4, 5, 2) -> f_860(v8536, v8537, v8538, v8539, v8540, v8541, 1, v8543, 0, v8549, v8550, v8551, v8577, v8579, v8552, v8553, v8554, 3, 4, 2) :|: TRUE
f_860(v7628, v7629, v7630, v7631, v7632, v7633, 1, v7635, 0, v7637, v7638, v7639, v7640, v7641, v7642, v7643, v7644, 3, 4, 2) -> f_861(v7628, v7629, v7630, v7631, v7632, v7633, 1, v7635, 0, v7637, v7638, v7639, v7640, v7641, v7642, v7643, v7644, 3, 4, 2) :|: TRUE
f_861(v7628, v7629, v7630, v7631, v7632, v7633, 1, v7635, 0, v7637, v7638, v7639, v7640, v7641, v7642, v7643, v7644, 3, 4, 2) -> f_862(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) :|: 0 = 0
f_862(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) -> f_863(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) :|: 0 < v7641
f_863(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) -> f_865(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) :|: 0 = 0
f_865(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) -> f_867(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) :|: TRUE
f_867(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7635, v7633, 0, v7637, v7638, v7639, v7640, v7642, v7643, v7644, 3, 4, 2) -> f_869(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 2) :|: 0 = 0
f_869(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 2) -> f_871(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 < v7640 && 2 <= v7635 && 2 <= v7639 && 3 <= v7633 && 3 <= v7638 && 4 <= v7637 && 5 <= v7632 && 4 <= v7631
f_871(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_873(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_873(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_875(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: TRUE
f_875(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, v7633, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_877(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_877(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_879(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_879(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_880(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: v7640 != v7641
f_880(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_882(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_882(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_884(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_884(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_886(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: TRUE
f_886(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7633, v7635, 0, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) -> f_888(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, 0, v7637, v7638, v7639, v7633, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_888(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7635, 0, v7637, v7638, v7639, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_889(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_889(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_890(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 5, 6, 4, 2) :|: v7641 < v7640 && 2 <= v7640 && 3 <= v7635 && 3 <= v7639 && 4 <= v7633 && 4 <= v7638 && 5 <= v7637 && 6 <= v7632 && 5 <= v7631
f_889(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_891(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) :|: v7640 <= v7641 && 2 <= v7641
f_890(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 5, 6, 4, 2) -> f_892(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 0, 3, 5, 6, 4, 2) :|: 0 = 0
f_892(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 0, 3, 5, 6, 4, 2) -> f_894(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 0, 3, 5, 6, 4, 2) :|: TRUE
f_894(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 0, 3, 5, 6, 4, 2) -> f_841(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, v7637, v7638, v7639, v7635, v7633, v7640, v7641, v7642, v7643, v7644, 0, 3, 5, 4, 2) :|: TRUE
f_891(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_893(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) :|: 0 = 0
f_893(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_895(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) :|: TRUE
f_895(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7637, v7638, v7639, v7635, v7633, v7642, v7643, v7644, 3, 4, 5, 2) -> f_896(v7628, v7629, v7630, v7631, v7632, v7641, 1, v7640, 0, v7635, v7633, v7640, v7641, v7637, v7638, v7639, v7642, v7643, v7644, 3, 4, 5, 2) :|: TRUE
Combined rules. Obtained 6 rulesP rules:
f_889(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, 1 + v7499:0, 1, v7640:0, 0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0, v7642:0, v7643:0, v7644:0, 3, 4, 5, 2) -> f_784(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, 1 + v7499:0, 1, v7640:0, v7635:0, v7633:0, v7640:0, 1 + v7499:0, v7499:0, v7501:0, v7642:0, v7643:0, v7644:0, 0, 3, 4, 2) :|: v7640:0 > 1 && v7640:0 > 1 + v7499:0 && v7635:0 > 2 && v7499:0 > -1 && v7639:0 > 2 && v7633:0 > 3 && v7638:0 > 3 && v7637:0 > 4 && v7631:0 > 4 && v7632:0 > 5
f_889(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, v7641:0, 1, 1 + v8577:0, 0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0, v7642:0, v7643:0, v7644:0, 3, 4, 5, 2) -> f_889(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, v8579:0, 1, v8577:0, 0, v7637:0, v7638:0, v7639:0, 1 + v8577:0, v7641:0, v7642:0, v7643:0, v7644:0, 3, 4, 5, 2) :|: v8577:0 > 0 && v7641:0 > 2 && v7639:0 > 1 && v7638:0 > 2 && v8579:0 > 0 && v7637:0 > 3 && v7632:0 > 4 && v7631:0 > 3 && v7641:0 >= 1 + v8577:0 && v8579:0 > v8577:0
f_889(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, v7641:0, 1, 1 + v8577:0, 0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0, v7642:0, v7643:0, v7644:0, 3, 4, 5, 2) -> f_889(v7628:0, v7629:0, v7630:0, v7631:0, v7632:0, v8579:0, 1, v8577:0, 0, v7637:0, v7638:0, v7639:0, 1 + v8577:0, v7641:0, v7642:0, v7643:0, v7644:0, 3, 4, 5, 2) :|: v8577:0 > 0 && v7641:0 > 2 && v7639:0 > 1 && v7638:0 > 2 && v8579:0 > 0 && v7637:0 > 3 && v7632:0 > 4 && v7631:0 > 3 && v7641:0 >= 1 + v8577:0 && v8579:0 < v8577:0
f_784(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, v6504:0, 1, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, 1 + v7499:0, v6512:0, v6513:0, v6514:0, v6515:0, 0, 3, 4, 2) -> f_784(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, 1 + v7499:0, 1, v6512:0, v6507:0, v6508:0, v6509:0, v6510:0, v7499:0, v7501:0, v6513:0, v6514:0, v6515:0, 0, 3, 4, 2) :|: v6512:0 > 1 && v6504:0 > 1 && v7499:0 > -1 && v6510:0 > 1 && v6506:0 > 2 && v6509:0 > 2 && v6507:0 > 3 && v6502:0 > 4 && v6508:0 > 4 && v6503:0 > 3 && v6512:0 > 1 + v7499:0
f_784(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, v6504:0, 1, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, v6511:0, 1 + v8577:0, v6513:0, v6514:0, v6515:0, 0, 3, 4, 2) -> f_889(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, v8579:0, 1, v8577:0, 0, v6504:0, v6511:0, 1 + v8577:0, 1 + v8577:0, v6511:0, v6513:0, v6514:0, v6515:0, 3, 4, 5, 2) :|: v6502:0 > 5 && v6511:0 > 2 && v6504:0 > 3 && v6511:0 > 1 + v8577:0 && v6510:0 > 2 && v6509:0 > 3 && v6507:0 > 4 && v6508:0 > 5 && v6503:0 > 4 && v8577:0 > 0 && v6506:0 > 2 && v8579:0 > v8577:0 && v8579:0 > 0
f_784(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, v6504:0, 1, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, v6511:0, 1 + v8577:0, v6513:0, v6514:0, v6515:0, 0, 3, 4, 2) -> f_889(v6499:0, v6500:0, v6501:0, v6502:0, v6503:0, v8579:0, 1, v8577:0, 0, v6504:0, v6511:0, 1 + v8577:0, 1 + v8577:0, v6511:0, v6513:0, v6514:0, v6515:0, 3, 4, 5, 2) :|: v6502:0 > 5 && v6511:0 > 2 && v6504:0 > 3 && v6511:0 > 1 + v8577:0 && v6510:0 > 2 && v6509:0 > 3 && v6507:0 > 4 && v6508:0 > 5 && v6503:0 > 4 && v8577:0 > 0 && v6506:0 > 2 && v8579:0 < v8577:0 && v8579:0 > 0
Filtered unneeded arguments:
   f_889(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_889(x4, x5, x6, x8, x10, x11, x12, x13, x14)
   f_784(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21) -> f_784(x4, x5, x6, x8, x9, x10, x11, x12, x13, x14)
Removed division, modulo operations, cleaned up constraints. Obtained 6 rules.P rules:
f_889(v7631:0, v7632:0, sum~cons_1~v7499:0, v7640:0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0) -> f_784(v7631:0, v7632:0, 1 + v7499:0, v7640:0, v7635:0, v7633:0, v7640:0, 1 + v7499:0, v7499:0, v7501:0) :|: v7640:0 > 1 + v7499:0 && v7640:0 > 1 && v7635:0 > 2 && v7499:0 > -1 && v7639:0 > 2 && v7633:0 > 3 && v7638:0 > 3 && v7637:0 > 4 && v7632:0 > 5 && v7631:0 > 4 && sum~cons_1~v7499:0 = 1 + v7499:0
f_889(v7631:0, v7632:0, v7641:0, sum~cons_1~v8577:0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0) -> f_889(v7631:0, v7632:0, v8579:0, v8577:0, v7637:0, v7638:0, v7639:0, 1 + v8577:0, v7641:0) :|: v7641:0 > 2 && v8577:0 > 0 && v7639:0 > 1 && v7638:0 > 2 && v8579:0 > 0 && v7637:0 > 3 && v7632:0 > 4 && v7631:0 > 3 && v8579:0 > v8577:0 && v7641:0 >= 1 + v8577:0 && sum~cons_1~v8577:0 = 1 + v8577:0
f_889(v7631:0, v7632:0, v7641:0, sum~cons_1~v8577:0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0) -> f_889(v7631:0, v7632:0, v8579:0, v8577:0, v7637:0, v7638:0, v7639:0, 1 + v8577:0, v7641:0) :|: v7641:0 > 2 && v8577:0 > 0 && v7639:0 > 1 && v7638:0 > 2 && v8579:0 > 0 && v7637:0 > 3 && v7632:0 > 4 && v7631:0 > 3 && v8579:0 < v8577:0 && v7641:0 >= 1 + v8577:0 && sum~cons_1~v8577:0 = 1 + v8577:0
f_784(v6502:0, v6503:0, v6504:0, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, sum~cons_1~v7499:0, v6512:0) -> f_784(v6502:0, v6503:0, 1 + v7499:0, v6512:0, v6507:0, v6508:0, v6509:0, v6510:0, v7499:0, v7501:0) :|: v6504:0 > 1 && v6512:0 > 1 && v7499:0 > -1 && v6510:0 > 1 && v6506:0 > 2 && v6509:0 > 2 && v6507:0 > 3 && v6502:0 > 4 && v6508:0 > 4 && v6512:0 > 1 + v7499:0 && v6503:0 > 3 && sum~cons_1~v7499:0 = 1 + v7499:0
f_784(v6502:0, v6503:0, v6504:0, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, v6511:0, sum~cons_1~v8577:0) -> f_889(v6502:0, v6503:0, v8579:0, v8577:0, v6504:0, v6511:0, 1 + v8577:0, 1 + v8577:0, v6511:0) :|: v6511:0 > 2 && v6502:0 > 5 && v6504:0 > 3 && v6511:0 > 1 + v8577:0 && v6510:0 > 2 && v6509:0 > 3 && v6507:0 > 4 && v6508:0 > 5 && v6503:0 > 4 && v8577:0 > 0 && v6506:0 > 2 && v8579:0 > 0 && v8579:0 > v8577:0 && sum~cons_1~v8577:0 = 1 + v8577:0
f_784(v6502:0, v6503:0, v6504:0, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, v6511:0, sum~cons_1~v8577:0) -> f_889(v6502:0, v6503:0, v8579:0, v8577:0, v6504:0, v6511:0, 1 + v8577:0, 1 + v8577:0, v6511:0) :|: v6511:0 > 2 && v6502:0 > 5 && v6504:0 > 3 && v6511:0 > 1 + v8577:0 && v6510:0 > 2 && v6509:0 > 3 && v6507:0 > 4 && v6508:0 > 5 && v6503:0 > 4 && v8577:0 > 0 && v6506:0 > 2 && v8579:0 > 0 && v8579:0 < v8577:0 && sum~cons_1~v8577:0 = 1 + v8577:0

----------------------------------------

(9)
Obligation:
Rules:
f_889(v7631:0, v7632:0, sum~cons_1~v7499:0, v7640:0, v7637:0, v7638:0, v7639:0, v7635:0, v7633:0) -> f_784(v7631:0, v7632:0, 1 + v7499:0, v7640:0, v7635:0, v7633:0, v7640:0, 1 + v7499:0, v7499:0, v7501:0) :|: v7640:0 > 1 + v7499:0 && v7640:0 > 1 && v7635:0 > 2 && v7499:0 > -1 && v7639:0 > 2 && v7633:0 > 3 && v7638:0 > 3 && v7637:0 > 4 && v7632:0 > 5 && v7631:0 > 4 && sum~cons_1~v7499:0 = 1 + v7499:0
f_889(x, x1, x2, x3, x4, x5, x6, x7, x8) -> f_889(x, x1, x9, x10, x4, x5, x6, 1 + x10, x2) :|: x2 > 2 && x10 > 0 && x6 > 1 && x5 > 2 && x9 > 0 && x4 > 3 && x1 > 4 && x > 3 && x9 > x10 && x2 >= 1 + x10 && x3 = 1 + x10
f_889(x11, x12, x13, x14, x15, x16, x17, x18, x19) -> f_889(x11, x12, x20, x21, x15, x16, x17, 1 + x21, x13) :|: x13 > 2 && x21 > 0 && x17 > 1 && x16 > 2 && x20 > 0 && x15 > 3 && x12 > 4 && x11 > 3 && x20 < x21 && x13 >= 1 + x21 && x14 = 1 + x21
f_784(x22, x23, x24, x25, x26, x27, x28, x29, x30, x31) -> f_784(x22, x23, 1 + x32, x31, x26, x27, x28, x29, x32, x33) :|: x24 > 1 && x31 > 1 && x32 > -1 && x29 > 1 && x25 > 2 && x28 > 2 && x26 > 3 && x22 > 4 && x27 > 4 && x31 > 1 + x32 && x23 > 3 && x30 = 1 + x32
f_784(v6502:0, v6503:0, v6504:0, v6506:0, v6507:0, v6508:0, v6509:0, v6510:0, v6511:0, sum~cons_1~v8577:0) -> f_889(v6502:0, v6503:0, v8579:0, v8577:0, v6504:0, v6511:0, 1 + v8577:0, 1 + v8577:0, v6511:0) :|: v6511:0 > 2 && v6502:0 > 5 && v6504:0 > 3 && v6511:0 > 1 + v8577:0 && v6510:0 > 2 && v6509:0 > 3 && v6507:0 > 4 && v6508:0 > 5 && v6503:0 > 4 && v8577:0 > 0 && v6506:0 > 2 && v8579:0 > 0 && v8579:0 > v8577:0 && sum~cons_1~v8577:0 = 1 + v8577:0
f_784(x34, x35, x36, x37, x38, x39, x40, x41, x42, x43) -> f_889(x34, x35, x44, x45, x36, x42, 1 + x45, 1 + x45, x42) :|: x42 > 2 && x34 > 5 && x36 > 3 && x42 > 1 + x45 && x41 > 2 && x40 > 3 && x38 > 4 && x39 > 5 && x35 > 4 && x45 > 0 && x37 > 2 && x44 > 0 && x44 < x45 && x43 = 1 + x45

----------------------------------------

(10) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(11)
Obligation:
Rules:
f_889(v7631:0:0, v7632:0:0, sum~cons_1~v7499:0:0, v7640:0:0, v7637:0:0, v7638:0:0, v7639:0:0, v7635:0:0, v7633:0:0) -> f_784(v7631:0:0, v7632:0:0, 1 + v7499:0:0, v7640:0:0, v7635:0:0, v7633:0:0, v7640:0:0, 1 + v7499:0:0, v7499:0:0, v7501:0:0) :|: v7632:0:0 > 5 && v7631:0:0 > 4 && v7637:0:0 > 4 && v7638:0:0 > 3 && v7633:0:0 > 3 && v7639:0:0 > 2 && v7499:0:0 > -1 && v7635:0:0 > 2 && v7640:0:0 > 1 && v7640:0:0 > 1 + v7499:0:0 && sum~cons_1~v7499:0:0 = 1 + v7499:0:0
f_889(x:0, x1:0, x2:0, sum~cons_1~x10:0, x4:0, x5:0, x6:0, x7:0, x8:0) -> f_889(x:0, x1:0, x9:0, x10:0, x4:0, x5:0, x6:0, 1 + x10:0, x2:0) :|: x9:0 > x10:0 && x2:0 >= 1 + x10:0 && x:0 > 3 && x1:0 > 4 && x4:0 > 3 && x9:0 > 0 && x5:0 > 2 && x6:0 > 1 && x10:0 > 0 && x2:0 > 2 && sum~cons_1~x10:0 = 1 + x10:0
f_784(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0, x41:0, x42:0, sum~cons_1~x45:0) -> f_889(x34:0, x35:0, x44:0, x45:0, x36:0, x42:0, 1 + x45:0, 1 + x45:0, x42:0) :|: x44:0 > 0 && x45:0 > x44:0 && x37:0 > 2 && x45:0 > 0 && x35:0 > 4 && x39:0 > 5 && x38:0 > 4 && x40:0 > 3 && x41:0 > 2 && x42:0 > 1 + x45:0 && x36:0 > 3 && x34:0 > 5 && x42:0 > 2 && sum~cons_1~x45:0 = 1 + x45:0
f_784(x22:0, x23:0, x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, sum~cons_1~x32:0, x31:0) -> f_784(x22:0, x23:0, 1 + x32:0, x31:0, x26:0, x27:0, x28:0, x29:0, x32:0, x33:0) :|: x31:0 > 1 + x32:0 && x23:0 > 3 && x27:0 > 4 && x22:0 > 4 && x26:0 > 3 && x28:0 > 2 && x25:0 > 2 && x29:0 > 1 && x32:0 > -1 && x31:0 > 1 && x24:0 > 1 && sum~cons_1~x32:0 = 1 + x32:0
f_784(v6502:0:0, v6503:0:0, v6504:0:0, v6506:0:0, v6507:0:0, v6508:0:0, v6509:0:0, v6510:0:0, v6511:0:0, sum~cons_1~v8577:0:0) -> f_889(v6502:0:0, v6503:0:0, v8579:0:0, v8577:0:0, v6504:0:0, v6511:0:0, 1 + v8577:0:0, 1 + v8577:0:0, v6511:0:0) :|: v8579:0:0 > 0 && v8579:0:0 > v8577:0:0 && v6506:0:0 > 2 && v8577:0:0 > 0 && v6503:0:0 > 4 && v6508:0:0 > 5 && v6507:0:0 > 4 && v6509:0:0 > 3 && v6510:0:0 > 2 && v6511:0:0 > 1 + v8577:0:0 && v6504:0:0 > 3 && v6502:0:0 > 5 && v6511:0:0 > 2 && sum~cons_1~v8577:0:0 = 1 + v8577:0:0
f_889(x11:0, x12:0, x13:0, sum~cons_1~x21:0, x15:0, x16:0, x17:0, x18:0, x19:0) -> f_889(x11:0, x12:0, x20:0, x21:0, x15:0, x16:0, x17:0, 1 + x21:0, x13:0) :|: x21:0 > x20:0 && x13:0 >= 1 + x21:0 && x11:0 > 3 && x12:0 > 4 && x15:0 > 3 && x20:0 > 0 && x16:0 > 2 && x17:0 > 1 && x21:0 > 0 && x13:0 > 2 && sum~cons_1~x21:0 = 1 + x21:0

----------------------------------------

(12) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f_889 ] = f_889_4
[ f_784 ] = f_784_9

The following rules are decreasing:
f_889(v7631:0:0, v7632:0:0, sum~cons_1~v7499:0:0, v7640:0:0, v7637:0:0, v7638:0:0, v7639:0:0, v7635:0:0, v7633:0:0) -> f_784(v7631:0:0, v7632:0:0, 1 + v7499:0:0, v7640:0:0, v7635:0:0, v7633:0:0, v7640:0:0, 1 + v7499:0:0, v7499:0:0, v7501:0:0) :|: v7632:0:0 > 5 && v7631:0:0 > 4 && v7637:0:0 > 4 && v7638:0:0 > 3 && v7633:0:0 > 3 && v7639:0:0 > 2 && v7499:0:0 > -1 && v7635:0:0 > 2 && v7640:0:0 > 1 && v7640:0:0 > 1 + v7499:0:0 && sum~cons_1~v7499:0:0 = 1 + v7499:0:0
f_889(x:0, x1:0, x2:0, sum~cons_1~x10:0, x4:0, x5:0, x6:0, x7:0, x8:0) -> f_889(x:0, x1:0, x9:0, x10:0, x4:0, x5:0, x6:0, 1 + x10:0, x2:0) :|: x9:0 > x10:0 && x2:0 >= 1 + x10:0 && x:0 > 3 && x1:0 > 4 && x4:0 > 3 && x9:0 > 0 && x5:0 > 2 && x6:0 > 1 && x10:0 > 0 && x2:0 > 2 && sum~cons_1~x10:0 = 1 + x10:0
f_784(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0, x41:0, x42:0, sum~cons_1~x45:0) -> f_889(x34:0, x35:0, x44:0, x45:0, x36:0, x42:0, 1 + x45:0, 1 + x45:0, x42:0) :|: x44:0 > 0 && x45:0 > x44:0 && x37:0 > 2 && x45:0 > 0 && x35:0 > 4 && x39:0 > 5 && x38:0 > 4 && x40:0 > 3 && x41:0 > 2 && x42:0 > 1 + x45:0 && x36:0 > 3 && x34:0 > 5 && x42:0 > 2 && sum~cons_1~x45:0 = 1 + x45:0
f_784(x22:0, x23:0, x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, sum~cons_1~x32:0, x31:0) -> f_784(x22:0, x23:0, 1 + x32:0, x31:0, x26:0, x27:0, x28:0, x29:0, x32:0, x33:0) :|: x31:0 > 1 + x32:0 && x23:0 > 3 && x27:0 > 4 && x22:0 > 4 && x26:0 > 3 && x28:0 > 2 && x25:0 > 2 && x29:0 > 1 && x32:0 > -1 && x31:0 > 1 && x24:0 > 1 && sum~cons_1~x32:0 = 1 + x32:0
f_784(v6502:0:0, v6503:0:0, v6504:0:0, v6506:0:0, v6507:0:0, v6508:0:0, v6509:0:0, v6510:0:0, v6511:0:0, sum~cons_1~v8577:0:0) -> f_889(v6502:0:0, v6503:0:0, v8579:0:0, v8577:0:0, v6504:0:0, v6511:0:0, 1 + v8577:0:0, 1 + v8577:0:0, v6511:0:0) :|: v8579:0:0 > 0 && v8579:0:0 > v8577:0:0 && v6506:0:0 > 2 && v8577:0:0 > 0 && v6503:0:0 > 4 && v6508:0:0 > 5 && v6507:0:0 > 4 && v6509:0:0 > 3 && v6510:0:0 > 2 && v6511:0:0 > 1 + v8577:0:0 && v6504:0:0 > 3 && v6502:0:0 > 5 && v6511:0:0 > 2 && sum~cons_1~v8577:0:0 = 1 + v8577:0:0
f_889(x11:0, x12:0, x13:0, sum~cons_1~x21:0, x15:0, x16:0, x17:0, x18:0, x19:0) -> f_889(x11:0, x12:0, x20:0, x21:0, x15:0, x16:0, x17:0, 1 + x21:0, x13:0) :|: x21:0 > x20:0 && x13:0 >= 1 + x21:0 && x11:0 > 3 && x12:0 > 4 && x15:0 > 3 && x20:0 > 0 && x16:0 > 2 && x17:0 > 1 && x21:0 > 0 && x13:0 > 2 && sum~cons_1~x21:0 = 1 + x21:0

The following rules are bounded:
f_889(v7631:0:0, v7632:0:0, sum~cons_1~v7499:0:0, v7640:0:0, v7637:0:0, v7638:0:0, v7639:0:0, v7635:0:0, v7633:0:0) -> f_784(v7631:0:0, v7632:0:0, 1 + v7499:0:0, v7640:0:0, v7635:0:0, v7633:0:0, v7640:0:0, 1 + v7499:0:0, v7499:0:0, v7501:0:0) :|: v7632:0:0 > 5 && v7631:0:0 > 4 && v7637:0:0 > 4 && v7638:0:0 > 3 && v7633:0:0 > 3 && v7639:0:0 > 2 && v7499:0:0 > -1 && v7635:0:0 > 2 && v7640:0:0 > 1 && v7640:0:0 > 1 + v7499:0:0 && sum~cons_1~v7499:0:0 = 1 + v7499:0:0
f_889(x:0, x1:0, x2:0, sum~cons_1~x10:0, x4:0, x5:0, x6:0, x7:0, x8:0) -> f_889(x:0, x1:0, x9:0, x10:0, x4:0, x5:0, x6:0, 1 + x10:0, x2:0) :|: x9:0 > x10:0 && x2:0 >= 1 + x10:0 && x:0 > 3 && x1:0 > 4 && x4:0 > 3 && x9:0 > 0 && x5:0 > 2 && x6:0 > 1 && x10:0 > 0 && x2:0 > 2 && sum~cons_1~x10:0 = 1 + x10:0
f_784(x34:0, x35:0, x36:0, x37:0, x38:0, x39:0, x40:0, x41:0, x42:0, sum~cons_1~x45:0) -> f_889(x34:0, x35:0, x44:0, x45:0, x36:0, x42:0, 1 + x45:0, 1 + x45:0, x42:0) :|: x44:0 > 0 && x45:0 > x44:0 && x37:0 > 2 && x45:0 > 0 && x35:0 > 4 && x39:0 > 5 && x38:0 > 4 && x40:0 > 3 && x41:0 > 2 && x42:0 > 1 + x45:0 && x36:0 > 3 && x34:0 > 5 && x42:0 > 2 && sum~cons_1~x45:0 = 1 + x45:0
f_784(x22:0, x23:0, x24:0, x25:0, x26:0, x27:0, x28:0, x29:0, sum~cons_1~x32:0, x31:0) -> f_784(x22:0, x23:0, 1 + x32:0, x31:0, x26:0, x27:0, x28:0, x29:0, x32:0, x33:0) :|: x31:0 > 1 + x32:0 && x23:0 > 3 && x27:0 > 4 && x22:0 > 4 && x26:0 > 3 && x28:0 > 2 && x25:0 > 2 && x29:0 > 1 && x32:0 > -1 && x31:0 > 1 && x24:0 > 1 && sum~cons_1~x32:0 = 1 + x32:0
f_784(v6502:0:0, v6503:0:0, v6504:0:0, v6506:0:0, v6507:0:0, v6508:0:0, v6509:0:0, v6510:0:0, v6511:0:0, sum~cons_1~v8577:0:0) -> f_889(v6502:0:0, v6503:0:0, v8579:0:0, v8577:0:0, v6504:0:0, v6511:0:0, 1 + v8577:0:0, 1 + v8577:0:0, v6511:0:0) :|: v8579:0:0 > 0 && v8579:0:0 > v8577:0:0 && v6506:0:0 > 2 && v8577:0:0 > 0 && v6503:0:0 > 4 && v6508:0:0 > 5 && v6507:0:0 > 4 && v6509:0:0 > 3 && v6510:0:0 > 2 && v6511:0:0 > 1 + v8577:0:0 && v6504:0:0 > 3 && v6502:0:0 > 5 && v6511:0:0 > 2 && sum~cons_1~v8577:0:0 = 1 + v8577:0:0
f_889(x11:0, x12:0, x13:0, sum~cons_1~x21:0, x15:0, x16:0, x17:0, x18:0, x19:0) -> f_889(x11:0, x12:0, x20:0, x21:0, x15:0, x16:0, x17:0, 1 + x21:0, x13:0) :|: x21:0 > x20:0 && x13:0 >= 1 + x21:0 && x11:0 > 3 && x12:0 > 4 && x15:0 > 3 && x20:0 > 0 && x16:0 > 2 && x17:0 > 1 && x21:0 > 0 && x13:0 > 2 && sum~cons_1~x21:0 = 1 + x21:0


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
SCC
----------------------------------------

(15) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 32 rulesP rules:
f_451(v1563, v1564, v1565, v1566, v1567, v1568, 1, v1570, 0, v1572, v1573, v1574, v1575, v1576, 3, 2, 4) -> f_453(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_453(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) -> f_456(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) :|: 0 < v1573
f_456(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) -> f_460(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_460(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) -> f_464(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_464(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1570, v1568, 0, v1572, v1574, v1575, v1576, 3, 2, 4) -> f_468(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_468(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) -> f_472(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 < v1572 && 2 <= v1570 && 3 <= v1566 && 3 <= v1568 && 2 <= v1567
f_472(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) -> f_476(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_476(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) -> f_480(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_480(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, v1568, 0, v1574, v1575, v1576, 3, 2, 4) -> f_484(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_484(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_488(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_488(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_491(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: v1572 != v1573
f_491(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_494(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_494(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_497(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_497(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_500(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_500(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1568, v1570, 0, v1574, v1575, v1576, 3, 2, 4) -> f_503(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, 0, v1568, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_503(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, v1570, 0, v1568, v1574, v1575, v1576, 3, 2, 4) -> f_505(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_505(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) -> f_508(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) :|: v1572 <= v1573 && 2 <= v1573
f_508(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) -> f_512(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_512(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) -> f_516(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_516(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1568, v1574, v1575, v1576, 3, 2, 4) -> f_520(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1568, v1570, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_520(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1568, v1570, v1574, v1575, v1576, 3, 2, 4) -> f_524(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_524(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) -> f_528(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_528(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) -> f_532(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_532(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1570, v1574, v1575, v1576, 3, 2, 4) -> f_536(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1574, v1575, v1576, 3, 2, 4) :|: 0 = 0
f_536(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v1574, v1575, v1576, 3, 2, 4) -> f_540(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v1574, v1575, v1576, 3, 2, 4) :|: 1 + v2272 = v1572 && 0 <= v2272
f_540(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v1574, v1575, v1576, 3, 2, 4) -> f_543(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_543(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v1574, v1575, v1576, 3, 2, 4) -> f_547(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_547(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) -> f_552(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_552(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) -> f_557(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_557(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) -> f_562(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_562(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) -> f_449(v1563, v1564, v1565, v1566, v1567, v1573, 1, v1572, 0, v2272, v2300, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
f_449(v1563, v1564, v1565, v1566, v1567, v1568, 1, v1570, 0, v1572, v1573, v1574, v1575, v1576, 3, 2, 4) -> f_451(v1563, v1564, v1565, v1566, v1567, v1568, 1, v1570, 0, v1572, v1573, v1574, v1575, v1576, 3, 2, 4) :|: TRUE
Combined rules. Obtained 1 rulesP rules:
f_451(v1563:0, v1564:0, v1565:0, v1566:0, v1567:0, v1568:0, 1, v1570:0, 0, 1 + v2272:0, v1573:0, v1574:0, v1575:0, v1576:0, 3, 2, 4) -> f_451(v1563:0, v1564:0, v1565:0, v1566:0, v1567:0, v1573:0, 1, 1 + v2272:0, 0, v2272:0, v2300:0, v1574:0, v1575:0, v1576:0, 3, 2, 4) :|: v1573:0 > 1 && v1573:0 > 1 + v2272:0 && v1570:0 > 1 && v2272:0 > -1 && v1566:0 > 2 && v1568:0 > 2 && v1567:0 > 1
Filtered unneeded arguments:
   f_451(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_451(x4, x5, x6, x8, x10, x11)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_451(v1566:0, v1567:0, v1568:0, v1570:0, sum~cons_1~v2272:0, v1573:0) -> f_451(v1566:0, v1567:0, v1573:0, 1 + v2272:0, v2272:0, v2300:0) :|: v1573:0 > 1 + v2272:0 && v1573:0 > 1 && v1570:0 > 1 && v2272:0 > -1 && v1566:0 > 2 && v1567:0 > 1 && v1568:0 > 2 && sum~cons_1~v2272:0 = 1 + v2272:0

----------------------------------------

(16)
Obligation:
Rules:
f_451(v1566:0, v1567:0, v1568:0, v1570:0, sum~cons_1~v2272:0, v1573:0) -> f_451(v1566:0, v1567:0, v1573:0, 1 + v2272:0, v2272:0, v2300:0) :|: v1573:0 > 1 + v2272:0 && v1573:0 > 1 && v1570:0 > 1 && v2272:0 > -1 && v1566:0 > 2 && v1567:0 > 1 && v1568:0 > 2 && sum~cons_1~v2272:0 = 1 + v2272:0

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f_451(v1566:0:0, v1567:0:0, v1568:0:0, v1570:0:0, sum~cons_1~v2272:0:0, v1573:0:0) -> f_451(v1566:0:0, v1567:0:0, v1573:0:0, 1 + v2272:0:0, v2272:0:0, v2300:0:0) :|: v1567:0:0 > 1 && v1568:0:0 > 2 && v1566:0:0 > 2 && v2272:0:0 > -1 && v1570:0:0 > 1 && v1573:0:0 > 1 && v1573:0:0 > 1 + v2272:0:0 && sum~cons_1~v2272:0:0 = 1 + v2272:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_451(x, x1, x2, x3, x4, x5)] = x4

The following rules are decreasing:
f_451(v1566:0:0, v1567:0:0, v1568:0:0, v1570:0:0, sum~cons_1~v2272:0:0, v1573:0:0) -> f_451(v1566:0:0, v1567:0:0, v1573:0:0, 1 + v2272:0:0, v2272:0:0, v2300:0:0) :|: v1567:0:0 > 1 && v1568:0:0 > 2 && v1566:0:0 > 2 && v2272:0:0 > -1 && v1570:0:0 > 1 && v1573:0:0 > 1 && v1573:0:0 > 1 + v2272:0:0 && sum~cons_1~v2272:0:0 = 1 + v2272:0:0
The following rules are bounded:
f_451(v1566:0:0, v1567:0:0, v1568:0:0, v1570:0:0, sum~cons_1~v2272:0:0, v1573:0:0) -> f_451(v1566:0:0, v1567:0:0, v1573:0:0, 1 + v2272:0:0, v2272:0:0, v2300:0:0) :|: v1567:0:0 > 1 && v1568:0:0 > 2 && v1566:0:0 > 2 && v2272:0:0 > -1 && v1570:0:0 > 1 && v1573:0:0 > 1 && v1573:0:0 > 1 + v2272:0:0 && sum~cons_1~v2272:0:0 = 1 + v2272:0:0

----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
SCC
----------------------------------------

(22) SCC2IRS (SOUND)
Transformed LLVM symbolic execution graph SCC into a rewrite problem. Log: 
Generated rules. Obtained 27 rulesP rules:
f_392(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_395(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 < v1178 && 2 <= v1175 && 3 <= v1174 && 3 <= v1177 && 2 <= v1173
f_395(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_399(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_399(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_403(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_403(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_407(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_407(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_411(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 < v1179
f_411(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_415(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_415(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_419(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_419(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_423(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_423(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_427(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_427(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_430(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: v1179 != v1178
f_430(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_434(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_434(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_439(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_439(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_444(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_444(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1177, v1180, v1181, v1182, 0, 3, 2, 4) -> f_450(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_450(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1177, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_452(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_452(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_454(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: v1178 < v1179 && 2 <= v1179
f_454(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_458(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_458(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_462(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_462(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1175, v1180, v1181, v1182, 0, 3, 2, 4) -> f_466(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
f_466(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_470(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1180, v1181, v1182, 0, 3, 2, 4) :|: 1 + v1644 = v1178 && 0 <= v1644
f_470(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1180, v1181, v1182, 0, 3, 2, 4) -> f_474(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_474(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1180, v1181, v1182, 0, 3, 2, 4) -> f_478(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_478(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) -> f_482(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_482(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) -> f_486(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_486(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) -> f_489(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_489(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) -> f_390(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1179, v1644, v1646, v1180, v1181, v1182, 0, 3, 2, 4) :|: TRUE
f_390(v1170, v1171, v1172, v1173, v1174, v1175, 1, v1177, v1178, v1179, v1180, v1181, v1182, 0, 3, 2, 4) -> f_392(v1170, v1171, v1172, v1173, v1174, v1178, 1, v1177, v1175, v1179, v1180, v1181, v1182, 0, 3, 2, 4) :|: 0 = 0
Combined rules. Obtained 1 rulesP rules:
f_392(v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, 1 + v1644:0, 1, v1177:0, v1175:0, v1179:0, v1180:0, v1181:0, v1182:0, 0, 3, 2, 4) -> f_392(v1170:0, v1171:0, v1172:0, v1173:0, v1174:0, v1644:0, 1, v1179:0, 1 + v1644:0, v1646:0, v1180:0, v1181:0, v1182:0, 0, 3, 2, 4) :|: v1179:0 > 1 && v1175:0 > 1 && v1644:0 > -1 && v1174:0 > 2 && v1177:0 > 2 && v1173:0 > 1 && v1179:0 > 1 + v1644:0
Filtered unneeded arguments:
   f_392(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17) -> f_392(x4, x5, x6, x8, x9, x10)
Removed division, modulo operations, cleaned up constraints. Obtained 1 rules.P rules:
f_392(v1173:0, v1174:0, sum~cons_1~v1644:0, v1177:0, v1175:0, v1179:0) -> f_392(v1173:0, v1174:0, v1644:0, v1179:0, 1 + v1644:0, v1646:0) :|: v1175:0 > 1 && v1179:0 > 1 && v1644:0 > -1 && v1174:0 > 2 && v1177:0 > 2 && v1179:0 > 1 + v1644:0 && v1173:0 > 1 && sum~cons_1~v1644:0 = 1 + v1644:0

----------------------------------------

(23)
Obligation:
Rules:
f_392(v1173:0, v1174:0, sum~cons_1~v1644:0, v1177:0, v1175:0, v1179:0) -> f_392(v1173:0, v1174:0, v1644:0, v1179:0, 1 + v1644:0, v1646:0) :|: v1175:0 > 1 && v1179:0 > 1 && v1644:0 > -1 && v1174:0 > 2 && v1177:0 > 2 && v1179:0 > 1 + v1644:0 && v1173:0 > 1 && sum~cons_1~v1644:0 = 1 + v1644:0

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f_392(v1173:0:0, v1174:0:0, sum~cons_1~v1644:0:0, v1177:0:0, v1175:0:0, v1179:0:0) -> f_392(v1173:0:0, v1174:0:0, v1644:0:0, v1179:0:0, 1 + v1644:0:0, v1646:0:0) :|: v1179:0:0 > 1 + v1644:0:0 && v1173:0:0 > 1 && v1177:0:0 > 2 && v1174:0:0 > 2 && v1644:0:0 > -1 && v1179:0:0 > 1 && v1175:0:0 > 1 && sum~cons_1~v1644:0:0 = 1 + v1644:0:0

----------------------------------------

(26) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f_392(x, x1, x2, x3, x4, x5)] = x2

The following rules are decreasing:
f_392(v1173:0:0, v1174:0:0, sum~cons_1~v1644:0:0, v1177:0:0, v1175:0:0, v1179:0:0) -> f_392(v1173:0:0, v1174:0:0, v1644:0:0, v1179:0:0, 1 + v1644:0:0, v1646:0:0) :|: v1179:0:0 > 1 + v1644:0:0 && v1173:0:0 > 1 && v1177:0:0 > 2 && v1174:0:0 > 2 && v1644:0:0 > -1 && v1179:0:0 > 1 && v1175:0:0 > 1 && sum~cons_1~v1644:0:0 = 1 + v1644:0:0
The following rules are bounded:
f_392(v1173:0:0, v1174:0:0, sum~cons_1~v1644:0:0, v1177:0:0, v1175:0:0, v1179:0:0) -> f_392(v1173:0:0, v1174:0:0, v1644:0:0, v1179:0:0, 1 + v1644:0:0, v1646:0:0) :|: v1179:0:0 > 1 + v1644:0:0 && v1173:0:0 > 1 && v1177:0:0 > 2 && v1174:0:0 > 2 && v1644:0:0 > -1 && v1179:0:0 > 1 && v1175:0:0 > 1 && sum~cons_1~v1644:0:0 = 1 + v1644:0:0

----------------------------------------

(27)
YES
Graph finished, checking  consistency
Graph finished, checked consistency, took 0.001s
